{"task_id": "MBCPP/1", "completion": "    int dp[m+1][n+1];\n    dp[0][0] = cost[0][0];\n    \n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        \n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n        \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + cost[i][j];\n        }\n    }\n    \n    return dp[m][n];\n}", "unique_id": "MBCPP_1_1", "index": 0}
{"task_id": "MBCPP/2", "completion": "    vector<int> result;\n    unordered_set<int> set1(testTup1.begin(), testTup1.end());\n    for (int num : testTup2) {\n        if (set1.find(num) != set1.end()) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_2_8", "index": 17}
{"task_id": "MBCPP/3", "completion": "    if (n <= 1)\n        return true;\n    if (n <= 3)\n        return false;\n    if (n % 2 == 0 || n % 3 == 0)\n        return true;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_3_5", "index": 24}
{"task_id": "MBCPP/4", "completion": "    priority_queue<int> pq(nums.begin(), nums.end());\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}", "unique_id": "MBCPP_4_1", "index": 30}
{"task_id": "MBCPP/5", "completion": "    if (n % 2 != 0) return 0;\n    if (n == 2) return 3;\n    if (n == 0) return 1;\n    \n    int dp[n + 1];\n    dp[0] = 1;\n    dp[2] = 3;\n    \n    for (int i = 4; i <= n; i += 2) {\n        dp[i] = 4 * dp[i - 2] - dp[i - 4];\n    }\n    \n    return dp[n];\n}", "unique_id": "MBCPP_5_2", "index": 41}
{"task_id": "MBCPP/6", "completion": "    int xorResult = a ^ b;\n    if (xorResult == 0)\n        return false;\n    return (xorResult & (xorResult - 1)) == 0;\n}", "unique_id": "MBCPP_6_3", "index": 52}
{"task_id": "MBCPP/7", "completion": "    regex pattern(\"\\\\b\\\\w{4,}\\\\b\");\n    smatch matches;\n    vector<string> result;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_7_9", "index": 68}
{"task_id": "MBCPP/8", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [](int n) { return n * n; });\n    return nums;\n}", "unique_id": "MBCPP_8_3", "index": 72}
{"task_id": "MBCPP/9", "completion": "    string temp = str + str;\n    int n = str.length();\n    for (int i = 1; i <= n; i++) {\n        if (str == temp.substr(i, n))\n            return i;\n    }\n    return n;\n}", "unique_id": "MBCPP_9_1", "index": 80}
{"task_id": "MBCPP/10", "completion": "    vector<int> result;\n    if (n <= 0 || list1.empty()) return result;\n    \n    priority_queue<int> maxHeap;\n    \n    for (int num : list1) {\n        maxHeap.push(num);\n        if (maxHeap.size() > n) {\n            maxHeap.pop();\n        }\n    }\n    \n    while (!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    \n    reverse(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_10_3", "index": 92}
{"task_id": "MBCPP/11", "completion": "    size_t first = s.find(ch);\n    if (first != string::npos) {\n        s.erase(first, ch.length());\n    }\n    size_t last = s.rfind(ch);\n    if (last != string::npos) {\n        s.erase(last, ch.length());\n    }\n    return s;\n}", "unique_id": "MBCPP_11_1", "index": 100}
{"task_id": "MBCPP/12", "completion": "    auto rowSum = [](const vector<int>& row) {\n        return accumulate(row.begin(), row.end(), 0);\n    };\n\n    sort(m.begin(), m.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return rowSum(a) < rowSum(b);\n    });\n\n    return m;\n}", "unique_id": "MBCPP_12_4", "index": 113}
{"task_id": "MBCPP/14", "completion": "    return (b * h * l) / 2;\n}", "unique_id": "MBCPP_14_1", "index": 120}
{"task_id": "MBCPP/15", "completion": "    vector<string> result;\n    string current;\n    for (char c : text) {\n        if (islower(c)) {\n            if (!current.empty()) {\n                result.push_back(current);\n                current.clear();\n            }\n            current += c;\n        } else {\n            current += c;\n        }\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "unique_id": "MBCPP_15_1", "index": 130}
{"task_id": "MBCPP/16", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_16_4", "index": 143}
{"task_id": "MBCPP/17", "completion": "    return 4 * a;\n}", "unique_id": "MBCPP_17_1", "index": 150}
{"task_id": "MBCPP/18", "completion": "    unordered_set<char> charsToRemove;\n    for (char c : secondString) {\n        charsToRemove.insert(c);\n    }\n    \n    string result;\n    for (char c : str) {\n        if (charsToRemove.find(c) == charsToRemove.end()) {\n            result += c;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_18_1", "index": 160}
{"task_id": "MBCPP/19", "completion": "    unordered_set<int> seen;\n    for (int num : arraynums) {\n        if (seen.find(num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "unique_id": "MBCPP_19_1", "index": 170}
{"task_id": "MBCPP/20", "completion": "    if (x < 1)\n        return false;\n    int n = 1;\n    while (true) {\n        int woodall = n * (1 << n) - 1;\n        if (woodall == x)\n            return true;\n        if (woodall > x)\n            return false;\n        n++;\n    }\n}", "unique_id": "MBCPP_20_5", "index": 184}
{"task_id": "MBCPP/21", "completion": "    vector<int> result;\n    for (int i = 1; i <= m; i++) {\n        result.push_back(n * i);\n    }\n    return result;\n}", "unique_id": "MBCPP_21_3", "index": 192}
{"task_id": "MBCPP/22", "completion": "    unordered_set<int> seen;\n    for (int num : nums) {\n        if (seen.count(num)) {\n            return num;\n        }\n        seen.insert(num);\n    }\n    return -1;\n}", "unique_id": "MBCPP_22_2", "index": 201}
{"task_id": "MBCPP/23", "completion": "    int maxSum = INT_MIN;\n    for (const auto& sublist : list1) {\n        int currentSum = 0;\n        for (int num : sublist) {\n            currentSum += num;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_23_2", "index": 211}
{"task_id": "MBCPP/24", "completion": "    int decimal = 0, base = 1;\n    while (binary > 0) {\n        int lastDigit = binary % 10;\n        binary = binary / 10;\n        decimal += lastDigit * base;\n        base *= 2;\n    }\n    return decimal;\n}", "unique_id": "MBCPP_24_4", "index": 223}
{"task_id": "MBCPP/25", "completion": "    unordered_map<int, int> freq;\n    for (int num : arr) {\n        freq[num]++;\n    }\n    int product = 1;\n    for (auto& pair : freq) {\n        if (pair.second == 1) {\n            product *= pair.first;\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_25_1", "index": 230}
{"task_id": "MBCPP/26", "completion": "    for (const auto& vec : testList) {\n        for (int num : vec) {\n            if (num != k)\n                return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_26_10", "index": 249}
{"task_id": "MBCPP/27", "completion": "    for (auto& str : list) {\n        str.erase(remove_if(str.begin(), str.end(), ::isdigit), str.end());\n    }\n    return list;\n}", "unique_id": "MBCPP_27_1", "index": 250}
{"task_id": "MBCPP/28", "completion": "    int res = 1;\n    if (k > n - k)\n        k = n - k;\n    for (int i = 0; i < k; ++i) {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}", "unique_id": "MBCPP_28_8", "index": 267}
{"task_id": "MBCPP/29", "completion": "    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_29_3", "index": 272}
{"task_id": "MBCPP/30", "completion": "    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_30_2", "index": 281}
{"task_id": "MBCPP/31", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& list : nums) {\n        for (int num : list) {\n            freqMap[num]++;\n        }\n    }\n\n    priority_queue<pair<int, int>> maxHeap;\n    for (const auto& [num, freq] : freqMap) {\n        maxHeap.push({freq, num});\n    }\n\n    vector<int> result;\n    while (k-- && !maxHeap.empty()) {\n        result.push_back(maxHeap.top().second);\n        maxHeap.pop();\n    }\n\n    return result;\n}", "unique_id": "MBCPP_31_1", "index": 290}
{"task_id": "MBCPP/32", "completion": "    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        maxPrime = n;\n    return maxPrime;\n}", "unique_id": "MBCPP_32_8", "index": 307}
{"task_id": "MBCPP/33", "completion": "    int binary = 0, remainder, place = 1;\n    while (n != 0) {\n        remainder = n % 2;\n        binary += remainder * place;\n        place *= 10;\n        n /= 2;\n    }\n    return binary;\n}", "unique_id": "MBCPP_33_1", "index": 310}
{"task_id": "MBCPP/34", "completion": "    int low = 0, high = ar.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (ar[mid] == mid + 1)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return low + 1;\n}", "unique_id": "MBCPP_34_2", "index": 321}
{"task_id": "MBCPP/35", "completion": "    return n * (n + 1);\n}", "unique_id": "MBCPP_35_1", "index": 330}
{"task_id": "MBCPP/36", "completion": "    if (q == 0) return -1;\n    string fraction = \"\";\n    int remainder = p % q;\n    unordered_map<int, int> remainderPositions;\n    while (remainder != 0 && fraction.length() < n) {\n        if (remainderPositions.find(remainder) != remainderPositions.end()) {\n            int start = remainderPositions[remainder];\n            int cycleLength = fraction.length() - start;\n            int pos = start + (n - start) % cycleLength;\n            return fraction[pos] - '0';\n        }\n        remainderPositions[remainder] = fraction.length();\n        remainder *= 10;\n        fraction += to_string(remainder / q);\n        remainder %= q;\n    }\n    if (fraction.length() >= n) {\n        return fraction[n - 1] - '0';\n    }\n    return 0;\n}", "unique_id": "MBCPP_36_7", "index": 346}
{"task_id": "MBCPP/38", "completion": "    int even = 0, odd = 0;\n    for (int num : list1) {\n        if (even == 0 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == 0 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != 0 && odd != 0) {\n            break;\n        }\n    }\n    if (odd == 0) {\n        return 0;\n    }\n    return even / odd;\n}", "unique_id": "MBCPP_38_1", "index": 350}
{"task_id": "MBCPP/39", "completion": "    unordered_map<char, int> freq;\n    for (char c : s) freq[c]++;\n    \n    priority_queue<pair<int, char>> pq;\n    for (auto& [c, count] : freq) pq.push({count, c});\n    \n    string result;\n    pair<int, char> prev = {-1, '#'};\n    \n    while (!pq.empty()) {\n        auto [count, c] = pq.top();\n        pq.pop();\n        result += c;\n        \n        if (prev.first > 0) pq.push(prev);\n        \n        prev = {count - 1, c};\n    }\n    \n    if (result.size() != s.size()) return \"\";\n    return result;\n}", "unique_id": "MBCPP_39_1", "index": 360}
{"task_id": "MBCPP/40", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& innerVec : nums) {\n        for (int num : innerVec) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_40_5", "index": 374}
{"task_id": "MBCPP/41", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int num) { return num % 2 == 0; });\n    return result;\n}", "unique_id": "MBCPP_41_7", "index": 386}
{"task_id": "MBCPP/42", "completion": "    unordered_map<int, int> freq;\n    int sum = 0;\n    \n    for(int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    \n    for(auto it : freq) {\n        if(it.second > 1) {\n            sum += it.first * (it.second - 1);\n        }\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_42_1", "index": 390}
{"task_id": "MBCPP/43", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_43_8", "index": 407}
{"task_id": "MBCPP/44", "completion": "    if (text.empty())\n        return \"Not matched!\";\n    \n    size_t firstNonSpace = text.find_first_not_of(' ');\n    if (firstNonSpace == string::npos || firstNonSpace != 0)\n        return \"Not matched!\";\n    \n    if (text.substr(0, 6) == \"python\")\n        return \"Found a match!\";\n    \n    return \"Not matched!\";\n}", "unique_id": "MBCPP_44_8", "index": 417}
{"task_id": "MBCPP/45", "completion": "    if (l.empty()) return 0;\n    int result = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        result = __gcd(result, l[i]);\n        if (result == 1) {\n            return 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_45_5", "index": 424}
{"task_id": "MBCPP/46", "completion": "    unordered_set<int> seen;\n    for (int num : data) {\n        if (seen.count(num) > 0) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_46_1", "index": 430}
{"task_id": "MBCPP/47", "completion": "    if (a == b) return 1;\n    if (b >= 5) return 0;\n    int result = 1;\n    for (int i = a + 1; i <= b; i++) {\n        result *= i;\n        result %= 10;\n    }\n    return result;\n}", "unique_id": "MBCPP_47_2", "index": 441}
{"task_id": "MBCPP/48", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n | mask;\n}", "unique_id": "MBCPP_48_3", "index": 452}
{"task_id": "MBCPP/49", "completion": "    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_49_6", "index": 465}
{"task_id": "MBCPP/51", "completion": "    if (x <= 0 || y <= 0 || z <= 0)\n        return false;\n    return (x == y && y == z);\n}", "unique_id": "MBCPP_51_8", "index": 477}
{"task_id": "MBCPP/52", "completion": "    return b * h;\n}", "unique_id": "MBCPP_52_5", "index": 484}
{"task_id": "MBCPP/53", "completion": "    if (str.empty())\n        return \"Not Equal\";\n    if (str[0] == str[str.length() - 1])\n        return \"Equal\";\n    else\n        return \"Not Equal\";\n}", "unique_id": "MBCPP_53_1", "index": 490}
{"task_id": "MBCPP/54", "completion": "    if (myList.empty()) return myList;\n\n    int max_val = *max_element(myList.begin(), myList.end());\n    vector<int> count(max_val + 1, 0);\n    vector<int> output(myList.size());\n\n    for (int num : myList) {\n        count[num]++;\n    }\n\n    for (int i = 1; i <= max_val; i++) {\n        count[i] += count[i - 1];\n    }\n\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        output[count[myList[i]] - 1] = myList[i];\n        count[myList[i]]--;\n    }\n\n    return output;\n}", "unique_id": "MBCPP_54_3", "index": 502}
{"task_id": "MBCPP/55", "completion": "    return a * pow(r, n - 1);\n}", "unique_id": "MBCPP_55_1", "index": 510}
{"task_id": "MBCPP/56", "completion": "    int reversed = 0;\n    int original = n;\n    while (original != 0) {\n        reversed = reversed * 10 + original % 10;\n        original /= 10;\n    }\n    return n == (2 * reversed - 1);\n}", "unique_id": "MBCPP_56_2", "index": 521}
{"task_id": "MBCPP/57", "completion": "    sort(arr.begin(), arr.end(), greater<int>());\n    int num = 0;\n    for (int i = 0; i < n; i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;\n}", "unique_id": "MBCPP_57_8", "index": 537}
{"task_id": "MBCPP/58", "completion": "    return (x ^ y) < 0;\n}", "unique_id": "MBCPP_58_2", "index": 541}
{"task_id": "MBCPP/59", "completion": "    return n * (3 * n - 2);\n}", "unique_id": "MBCPP_59_5", "index": 554}
{"task_id": "MBCPP/60", "completion": "    if (n == 0)\n        return 0;\n\n    vector<int> dp(n, 1);\n    int maxLen = 1;\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (abs(arr[i] - arr[j]) == 1) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLen = max(maxLen, dp[i]);\n    }\n\n    return maxLen;\n}", "unique_id": "MBCPP_60_2", "index": 561}
{"task_id": "MBCPP/61", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_61_9", "index": 578}
{"task_id": "MBCPP/62", "completion": "    if (xs.empty()) return INT_MAX;\n    int min_val = xs[0];\n    for (int x : xs) {\n        if (x < min_val) {\n            min_val = x;\n        }\n    }\n    return min_val;\n}", "unique_id": "MBCPP_62_5", "index": 584}
{"task_id": "MBCPP/63", "completion": "    int maxDiff = 0;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n    return maxDiff;\n}", "unique_id": "MBCPP_63_4", "index": 593}
{"task_id": "MBCPP/66", "completion": "    int count = 0;\n    for (int num : list) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_66_1", "index": 600}
{"task_id": "MBCPP/68", "completion": "    if (a.size() <= 1)\n        return true;\n    \n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (int i = 1; i < a.size(); ++i) {\n        if (a[i] > a[i - 1])\n            decreasing = false;\n        if (a[i] < a[i - 1])\n            increasing = false;\n    }\n    \n    return increasing || decreasing;\n}", "unique_id": "MBCPP_68_1", "index": 610}
{"task_id": "MBCPP/69", "completion": "    if (s.empty()) return true;\n    if (l.size() < s.size()) return false;\n    \n    for (size_t i = 0; i <= l.size() - s.size(); ++i) {\n        bool found = true;\n        for (size_t j = 0; j < s.size(); ++j) {\n            if (l[i + j] != s[j]) {\n                found = false;\n                break;\n            }\n        }\n        if (found) return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_69_2", "index": 621}
{"task_id": "MBCPP/70", "completion": "    for (const auto& vec : input) {\n        if (vec.size() != k) {\n            return \"All tuples do not have same length\";\n        }\n    }\n    return \"All tuples have same length\";\n}", "unique_id": "MBCPP_70_2", "index": 631}
{"task_id": "MBCPP/71", "completion": "    int n = nums.size();\n    int gap = n;\n    bool swapped = true;\n    while (gap != 1 || swapped == true) {\n        gap = (gap * 10) / 13;\n        if (gap < 1)\n            gap = 1;\n        swapped = false;\n        for (int i = 0; i < n - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}", "unique_id": "MBCPP_71_5", "index": 644}
{"task_id": "MBCPP/72", "completion": "    if (n % 4 == 2)\n        return false;\n    return true;\n}", "unique_id": "MBCPP_72_3", "index": 652}
{"task_id": "MBCPP/73", "completion": "    regex pattern(\"[\\n*]\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), pattern, -1);\n    sregex_token_iterator end;\n    while (iter != end) {\n        result.push_back(*iter);\n        ++iter;\n    }\n    return result;\n}", "unique_id": "MBCPP_73_10", "index": 669}
{"task_id": "MBCPP/74", "completion": "    if (colors.size() != patterns.size())\n        return false;\n\n    unordered_map<string, char> colorToPattern;\n    unordered_map<char, string> patternToColor;\n\n    for (size_t i = 0; i < colors.size(); ++i) {\n        string color = colors[i];\n        char pattern = patterns[i][0];\n\n        if (colorToPattern.find(color) == colorToPattern.end()) {\n            if (patternToColor.find(pattern) != patternToColor.end())\n                return false;\n            colorToPattern[color] = pattern;\n            patternToColor[pattern] = color;\n        } else {\n            if (colorToPattern[color] != pattern)\n                return false;\n        }\n    }\n\n    return true;\n}", "unique_id": "MBCPP_74_3", "index": 672}
{"task_id": "MBCPP/75", "completion": "    string result = \"[\";\n    bool first = true;\n    for (const auto& tuple : testList) {\n        bool allDivisible = true;\n        for (int num : tuple) {\n            if (num % k != 0) {\n                allDivisible = false;\n                break;\n            }\n        }\n        if (allDivisible) {\n            if (!first) {\n                result += \", \";\n            }\n            result += \"(\";\n            for (size_t i = 0; i < tuple.size(); ++i) {\n                if (i != 0) {\n                    result += \", \";\n                }\n                result += to_string(tuple[i]);\n            }\n            result += \")\";\n            first = false;\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_75_1", "index": 680}
{"task_id": "MBCPP/76", "completion": "    int count = 0;\n    while (m > 0 && n > 0) {\n        count += m * n;\n        m--;\n        n--;\n    }\n    return count;\n}", "unique_id": "MBCPP_76_5", "index": 694}
{"task_id": "MBCPP/77", "completion": "    int evenSum = 0, oddSum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 0)\n            evenSum += digit;\n        else\n            oddSum += digit;\n        n /= 10;\n    }\n    return evenSum != oddSum;\n}", "unique_id": "MBCPP_77_9", "index": 708}
{"task_id": "MBCPP/78", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        int setBits = 0;\n        while (num > 0) {\n            setBits += num & 1;\n            num >>= 1;\n        }\n        if (setBits % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_78_1", "index": 710}
{"task_id": "MBCPP/79", "completion": "    return s.length() % 2 != 0;\n}", "unique_id": "MBCPP_79_10", "index": 729}
{"task_id": "MBCPP/80", "completion": "    return (n * (n + 1) * (n + 2)) / 6.0;\n}", "unique_id": "MBCPP_80_8", "index": 737}
{"task_id": "MBCPP/81", "completion": "    vector<vector<int>> result;\n    int size1 = testTup1.size();\n    int size2 = testTup2.size();\n    for (int i = 0; i < size1; ++i) {\n        vector<int> temp;\n        temp.push_back(testTup1[i]);\n        temp.push_back(testTup2[i % size2]);\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_81_6", "index": 745}
{"task_id": "MBCPP/82", "completion": "    return (4.0 / 3.0) * M_PI * pow(r, 3);\n}", "unique_id": "MBCPP_82_7", "index": 756}
{"task_id": "MBCPP/83", "completion": "    int sum = 0;\n    for (char c : strr) {\n        sum += c;\n    }\n    return string(1, static_cast<char>(sum));\n}", "unique_id": "MBCPP_83_2", "index": 761}
{"task_id": "MBCPP/84", "completion": "    if (n == 1 || n == 2)\n        return 1;\n    int dp[n + 1];\n    dp[1] = 1;\n    dp[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]];\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_84_3", "index": 772}
{"task_id": "MBCPP/85", "completion": "    return 4 * M_PI * r * r;\n}", "unique_id": "MBCPP_85_9", "index": 788}
{"task_id": "MBCPP/86", "completion": "    return 3 * n * (n - 1) + 1;\n}", "unique_id": "MBCPP_86_3", "index": 792}
{"task_id": "MBCPP/87", "completion": "    unordered_map<string, string> result = dict1;\n    result.insert(dict2.begin(), dict2.end());\n    result.insert(dict3.begin(), dict3.end());\n    return result;\n}", "unique_id": "MBCPP_87_1", "index": 800}
{"task_id": "MBCPP/88", "completion": "    unordered_map<int, int> freqMap;\n    for (int num : list1) {\n        freqMap[num]++;\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_88_2", "index": 811}
{"task_id": "MBCPP/89", "completion": "    if (n <= 0) {\n        return -1; // Return -1 for invalid input (no smaller number for 0 or negative numbers)\n    }\n    return n - 1;\n}", "unique_id": "MBCPP_89_10", "index": 829}
{"task_id": "MBCPP/90", "completion": "    int max_len = 0;\n    for (const auto& word : list1) {\n        if (word.length() > max_len) {\n            max_len = word.length();\n        }\n    }\n    return max_len;\n}", "unique_id": "MBCPP_90_3", "index": 832}
{"task_id": "MBCPP/91", "completion": "    for (const string& str : str1) {\n        if (str.find(subStr) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_91_4", "index": 843}
{"task_id": "MBCPP/92", "completion": "    if (n.length() < 2)\n        return false;\n    \n    char first = n[0];\n    char second = n[1];\n    \n    if (first == second)\n        return false;\n    \n    for (int i = 2; i < n.length(); i++) {\n        if (i % 2 == 0) {\n            if (n[i] != first)\n                return false;\n        } else {\n            if (n[i] != second)\n                return false;\n        }\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_92_7", "index": 856}
{"task_id": "MBCPP/93", "completion": "    int result = 1;\n    for (int i = 0; i < b; i++) {\n        result *= a;\n    }\n    return result;\n}", "unique_id": "MBCPP_93_5", "index": 864}
{"task_id": "MBCPP/95", "completion": "    int min_length = INT_MAX;\n    for (const auto& sublist : lst) {\n        if (sublist.size() < min_length) {\n            min_length = sublist.size();\n        }\n    }\n    return min_length;\n}", "unique_id": "MBCPP_95_3", "index": 872}
{"task_id": "MBCPP/96", "completion": "    int count = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_96_7", "index": 886}
{"task_id": "MBCPP/97", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& innerList : list1) {\n        for (int num : innerList) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_97_2", "index": 891}
{"task_id": "MBCPP/98", "completion": "    double product = 1;\n    for (int num : numbers) {\n        product *= num;\n    }\n    return product / numbers.size();\n}", "unique_id": "MBCPP_98_6", "index": 905}
{"task_id": "MBCPP/99", "completion": "    string binary = \"\";\n    if (n == 0)\n        return \"0\";\n    while (n > 0) {\n        binary = to_string(n % 2) + binary;\n        n /= 2;\n    }\n    return binary;\n}", "unique_id": "MBCPP_99_6", "index": 915}
{"task_id": "MBCPP/100", "completion": "    num++;\n    while (true) {\n        string s = to_string(num);\n        string rev = s;\n        reverse(rev.begin(), rev.end());\n        if (s == rev) {\n            return num;\n        }\n        num++;\n    }\n}", "unique_id": "MBCPP_100_4", "index": 923}
{"task_id": "MBCPP/101", "completion": "    sort(arr.begin(), arr.end());\n    return arr[k - 1];\n}", "unique_id": "MBCPP_101_7", "index": 936}
{"task_id": "MBCPP/102", "completion": "    string result;\n    bool capitalizeNext = true;\n    for (char ch : word) {\n        if (ch == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                result += toupper(ch);\n                capitalizeNext = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_102_1", "index": 940}
{"task_id": "MBCPP/103", "completion": "    if (m == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    return (n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m);\n}", "unique_id": "MBCPP_103_7", "index": 956}
{"task_id": "MBCPP/104", "completion": "    for (auto& sublist : inputList) {\n        sort(sublist.begin(), sublist.end(), [](const string& a, const string& b) {\n            return a < b;\n        });\n    }\n    return inputList;\n}", "unique_id": "MBCPP_104_9", "index": 968}
{"task_id": "MBCPP/105", "completion": "    int cnt = 0;\n    for(bool b : lst) {\n        if(b) cnt++;\n    }\n    return cnt;\n}", "unique_id": "MBCPP_105_5", "index": 974}
{"task_id": "MBCPP/106", "completion": "    testTup.insert(testTup.end(), testList.begin(), testList.end());\n    return testTup;\n}", "unique_id": "MBCPP_106_1", "index": 980}
{"task_id": "MBCPP/107", "completion": "    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i >= 10 && i <= 15) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_107_1", "index": 990}
{"task_id": "MBCPP/108", "completion": "    vector<int> result;\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    \n    for (int num : num1) {\n        minHeap.push(num);\n    }\n    for (int num : num2) {\n        minHeap.push(num);\n    }\n    for (int num : num3) {\n        minHeap.push(num);\n    }\n    \n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_108_2", "index": 1001}
{"task_id": "MBCPP/109", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(s[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_109_3", "index": 1012}
{"task_id": "MBCPP/110", "completion": "    vector<vector<int>> result;\n    if (testList.empty()) {\n        result.push_back({strtVal, stopVal});\n        return result;\n    }\n    \n    // Sort the intervals based on start value\n    sort(testList.begin(), testList.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n    \n    // Check the gap before the first interval\n    if (strtVal < testList[0][0]) {\n        result.push_back({strtVal, testList[0][0]});\n    }\n    \n    // Check the gaps between intervals\n    for (size_t i = 1; i < testList.size(); ++i) {\n        if (testList[i-1][1] < testList[i][0]) {\n            result.push_back({testList[i-1][1], testList[i][0]});\n        }\n    }\n    \n    // Check the gap after the last interval\n    if (testList.back()[1] < stopVal) {\n        result.push_back({testList.back()[1], stopVal});\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_110_9", "index": 1028}
{"task_id": "MBCPP/111", "completion": "    if (nestedlist.empty()) return {};\n\n    unordered_set<int> commonElements(nestedlist[0].begin(), nestedlist[0].end());\n\n    for (size_t i = 1; i < nestedlist.size(); ++i) {\n        unordered_set<int> currentSet(nestedlist[i].begin(), nestedlist[i].end());\n        unordered_set<int> temp;\n\n        for (int num : commonElements) {\n            if (currentSet.find(num) != currentSet.end()) {\n                temp.insert(num);\n            }\n        }\n\n        commonElements = temp;\n        if (commonElements.empty()) break;\n    }\n\n    vector<int> result(commonElements.begin(), commonElements.end());\n    return result;\n}", "unique_id": "MBCPP_111_3", "index": 1032}
{"task_id": "MBCPP/112", "completion": "    return 2 * (diameter + height);\n}", "unique_id": "MBCPP_112_1", "index": 1040}
{"task_id": "MBCPP/113", "completion": "    if (text.empty())\n        return false;\n    size_t i = 0;\n    if (text[0] == '+' || text[0] == '-')\n        i = 1;\n    for (; i < text.size(); i++) {\n        if (!isdigit(text[i]))\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_113_3", "index": 1052}
{"task_id": "MBCPP/114", "completion": "    map<vector<int>, int> freqMap;\n    for (auto& tuple : testList) {\n        freqMap[tuple]++;\n    }\n    \n    string result = \"[\";\n    for (auto& [tuple, freq] : freqMap) {\n        if (result != \"[\") {\n            result += \", \";\n        }\n        result += \"(\";\n        for (int i = 0; i < tuple.size(); i++) {\n            if (i != 0) {\n                result += \", \";\n            }\n            result += to_string(tuple[i]);\n        }\n        result += \", \" + to_string(freq) + \")\";\n    }\n    result += \"]\";\n    \n    return result;\n}", "unique_id": "MBCPP_114_5", "index": 1064}
{"task_id": "MBCPP/116", "completion": "    int result = 0;\n    for (int num : nums) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "unique_id": "MBCPP_116_3", "index": 1072}
{"task_id": "MBCPP/117", "completion": "    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            try {\n                float num = stof(testList[i][j]);\n                result += to_string(num);\n            } catch (const invalid_argument&) {\n                result += testList[i][j];\n            }\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_117_1", "index": 1080}
{"task_id": "MBCPP/118", "completion": "    vector<string> result;\n    string word;\n    for (char ch : str) {\n        if (ch == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_118_2", "index": 1091}
{"task_id": "MBCPP/119", "completion": "    int low = 0, high = n - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (mid % 2 == 1) {\n            mid--;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            low = mid + 2;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[low];\n}", "unique_id": "MBCPP_119_10", "index": 1109}
{"task_id": "MBCPP/120", "completion": "    int maxProduct = 0;\n    for (const auto& pair : list1) {\n        int product = pair[0] * pair[1];\n        if (product > maxProduct) {\n            maxProduct = product;\n        }\n    }\n    return maxProduct;\n}", "unique_id": "MBCPP_120_1", "index": 1110}
{"task_id": "MBCPP/121", "completion": "    if (count == 3 && sum == 0)\n        return true;\n    if (count == 3 || n == 0 || sum < 0)\n        return false;\n    return checkTriplet(a, n - 1, sum - a[n - 1], count + 1) || checkTriplet(a, n - 1, sum, count);\n}", "unique_id": "MBCPP_121_2", "index": 1121}
{"task_id": "MBCPP/122", "completion": "    vector<int> primes = {2, 3, 5};\n    priority_queue<int, vector<int>, greater<int>> pq;\n    unordered_set<int> visited;\n    pq.push(1);\n    visited.insert(1);\n    \n    int count = 0;\n    while (!pq.empty()) {\n        int current = pq.top();\n        pq.pop();\n        count++;\n        if (count == n)\n            return current;\n        for (int prime : primes) {\n            int next = current * prime;\n            if (next > 0 && visited.find(next) == visited.end()) {\n                visited.insert(next);\n                pq.push(next);\n            }\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_122_2", "index": 1131}
{"task_id": "MBCPP/123", "completion": "    int sum = 0;\n    for (int i = 1; i <= limit; ++i) {\n        int sumDivisors = 0;\n        for (int j = 1; j <= i / 2; ++j) {\n            if (i % j == 0) {\n                sumDivisors += j;\n            }\n        }\n        if (sumDivisors != i) {\n            int sumDivisorsPair = 0;\n            for (int j = 1; j <= sumDivisors / 2; ++j) {\n                if (sumDivisors % j == 0) {\n                    sumDivisorsPair += j;\n                }\n            }\n            if (sumDivisorsPair == i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_123_3", "index": 1142}
{"task_id": "MBCPP/125", "completion": "    int max_diff = -1;\n    int count_0 = 0, count_1 = 0;\n    for (int i = 0; i < n; i++) {\n        if (str[i] == '0')\n            count_0++;\n        else\n            count_1++;\n        int current_diff = count_0 - count_1;\n        if (current_diff > max_diff)\n            max_diff = current_diff;\n        if (current_diff < 0) {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    return max_diff;\n}", "unique_id": "MBCPP_125_1", "index": 1150}
{"task_id": "MBCPP/126", "completion": "    int result = 0;\n    int min_num = min(a, b);\n    for (int i = 1; i <= min_num; ++i) {\n        if (a % i == 0 && b % i == 0) {\n            result += i;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_126_2", "index": 1161}
{"task_id": "MBCPP/127", "completion": "    int result = 0;\n    while (y > 0) {\n        if (y & 1)\n            result += x;\n        x = x << 1;\n        y = y >> 1;\n    }\n    return result;\n}", "unique_id": "MBCPP_127_2", "index": 1171}
{"task_id": "MBCPP/128", "completion": "    vector<string> result;\n    string word;\n    for (char ch : str) {\n        if (ch == ' ') {\n            if (word.length() > n) {\n                result.push_back(word);\n            }\n            word.clear();\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty() && word.length() > n) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_128_1", "index": 1180}
{"task_id": "MBCPP/129", "completion": "    int n = myMatrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += myMatrix[0][i];\n    }\n\n    for (int i = 1; i < n; ++i) {\n        int rowSum = 0;\n        for (int j = 0; j < n; ++j) {\n            rowSum += myMatrix[i][j];\n        }\n        if (rowSum != sum) return false;\n    }\n\n    for (int j = 0; j < n; ++j) {\n        int colSum = 0;\n        for (int i = 0; i < n; ++i) {\n            colSum += myMatrix[i][j];\n        }\n        if (colSum != sum) return false;\n    }\n\n    int diag1 = 0, diag2 = 0;\n    for (int i = 0; i < n; ++i) {\n        diag1 += myMatrix[i][i];\n        diag2 += myMatrix[i][n - 1 - i];\n    }\n    if (diag1 != sum || diag2 != sum) return false;\n\n    return true;\n}", "unique_id": "MBCPP_129_6", "index": 1195}
{"task_id": "MBCPP/130", "completion": "    unordered_map<int, int> freqMap;\n    for (int num : nums) {\n        freqMap[num]++;\n    }\n    \n    int maxFreq = 0;\n    int maxNum = 0;\n    \n    for (auto& pair : freqMap) {\n        if (pair.second > maxFreq) {\n            maxFreq = pair.second;\n            maxNum = pair.first;\n        }\n    }\n    \n    return {maxNum, maxFreq};\n}", "unique_id": "MBCPP_130_1", "index": 1200}
{"task_id": "MBCPP/131", "completion": "    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    int left = 0, right = str1.length() - 1;\n    while (left < right) {\n        while (left < right && vowels.find(str1[left]) == vowels.end()) {\n            left++;\n        }\n        while (left < right && vowels.find(str1[right]) == vowels.end()) {\n            right--;\n        }\n        if (left < right) {\n            swap(str1[left], str1[right]);\n            left++;\n            right--;\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_131_5", "index": 1214}
{"task_id": "MBCPP/132", "completion": "    string result;\n    for (const auto& s : tup1) {\n        result += s;\n    }\n    return result;\n}", "unique_id": "MBCPP_132_5", "index": 1224}
{"task_id": "MBCPP/133", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int acc, int num) {\n        return num < 0 ? acc + num : acc;\n    });\n}", "unique_id": "MBCPP_133_9", "index": 1238}
{"task_id": "MBCPP/134", "completion": "    for (int i = 0; i < p; i++) {\n        for (int j = 0; j < n - 1; j++) {\n            arr[j] += arr[j + 1];\n        }\n    }\n    if (arr[n - 1] % 2 == 0) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }\n}", "unique_id": "MBCPP_134_6", "index": 1245}
{"task_id": "MBCPP/135", "completion": "    return n * (2 * n - 1);\n}", "unique_id": "MBCPP_135_1", "index": 1250}
{"task_id": "MBCPP/136", "completion": "    double bill = 0;\n    if (units <= 50) {\n        bill = units * 1.75;\n    } else if (units <= 150) {\n        bill = 50 * 1.75 + (units - 50) * 2.25;\n    } else if (units <= 250) {\n        bill = 50 * 1.75 + 100 * 2.25 + (units - 150) * 3.0;\n    } else {\n        bill = 50 * 1.75 + 100 * 2.25 + 100 * 3.0 + (units - 250) * 3.5;\n    }\n    return bill;\n}", "unique_id": "MBCPP_136_1", "index": 1260}
{"task_id": "MBCPP/137", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num == 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "unique_id": "MBCPP_137_1", "index": 1270}
{"task_id": "MBCPP/138", "completion": "    if (n <= 0)\n        return false;\n    while (n > 0) {\n        if ((n & 1) == 0)\n            return false;\n        n >>= 1;\n    }\n    return true;\n}", "unique_id": "MBCPP_138_2", "index": 1281}
{"task_id": "MBCPP/139", "completion": "    return 2 * M_PI * r;\n}", "unique_id": "MBCPP_139_1", "index": 1290}
{"task_id": "MBCPP/140", "completion": "    unordered_map<int, int> freq;\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            freq[num]++;\n        }\n    }\n    vector<int> result;\n    for (const auto& pair : freq) {\n        if (pair.second == 1) {\n            result.push_back(pair.first);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_140_2", "index": 1301}
{"task_id": "MBCPP/141", "completion": "    int n = nums.size();\n    for (int curr_size = n; curr_size > 1; --curr_size) {\n        int mi = max_element(nums.begin(), nums.begin() + curr_size) - nums.begin();\n        if (mi != curr_size - 1) {\n            reverse(nums.begin(), nums.begin() + mi + 1);\n            reverse(nums.begin(), nums.begin() + curr_size);\n        }\n    }\n    return nums;\n}", "unique_id": "MBCPP_141_8", "index": 1317}
{"task_id": "MBCPP/142", "completion": "    int count = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_142_1", "index": 1320}
{"task_id": "MBCPP/144", "completion": "    sort(arr.begin(), arr.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i] * i - arr[i] * (n - 1 - i);\n    }\n    return sum;\n}", "unique_id": "MBCPP_144_10", "index": 1339}
{"task_id": "MBCPP/145", "completion": "    if (n == 0)\n        return 0;\n    \n    int min_val = arr[0], max_val = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min_val)\n            min_val = arr[i];\n        if (arr[i] > max_val)\n            max_val = arr[i];\n    }\n    \n    return max_val - min_val;\n}", "unique_id": "MBCPP_145_6", "index": 1345}
{"task_id": "MBCPP/146", "completion": "    int sum = 0;\n    for (char c : str1) {\n        sum += (int)c;\n    }\n    return sum;\n}", "unique_id": "MBCPP_146_7", "index": 1356}
{"task_id": "MBCPP/147", "completion": "    for (int i = m - 1; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1])\n                tri[i][j] += tri[i + 1][j];\n            else\n                tri[i][j] += tri[i + 1][j + 1];\n        }\n    }\n    return tri[0][0];\n}", "unique_id": "MBCPP_147_6", "index": 1365}
{"task_id": "MBCPP/148", "completion": "    string s = to_string(n);\n    int maxSum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        string firstPart = s.substr(0, i + 1);\n        string secondPart = s.substr(i + 1);\n        int sum = 0;\n        for (char c : firstPart)\n            sum += c - '0';\n        for (char c : secondPart)\n            sum += c - '0';\n        if (sum > maxSum)\n            maxSum = sum;\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_148_6", "index": 1375}
{"task_id": "MBCPP/149", "completion": "    vector<int> dp(n, 1);\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (abs(arr[i] - arr[j]) == 1 && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_149_1", "index": 1380}
{"task_id": "MBCPP/150", "completion": "    if (c == 0) {\n        return a == b;\n    }\n    if ((b - a) % c != 0) {\n        return false;\n    }\n    int n = (b - a) / c;\n    return n >= 0;\n}", "unique_id": "MBCPP_150_1", "index": 1390}
{"task_id": "MBCPP/151", "completion": "    return __gcd(x, y) == 1;\n}", "unique_id": "MBCPP_151_4", "index": 1403}
{"task_id": "MBCPP/152", "completion": "    if (x.size() <= 1)\n        return x;\n    \n    int mid = x.size() / 2;\n    vector<int> left(x.begin(), x.begin() + mid);\n    vector<int> right(x.begin() + mid, x.end());\n    \n    left = mergeSort(left);\n    right = mergeSort(right);\n    \n    vector<int> result;\n    int i = 0, j = 0;\n    while (i < left.size() && j < right.size()) {\n        if (left[i] < right[j]) {\n            result.push_back(left[i]);\n            i++;\n        } else {\n            result.push_back(right[j]);\n            j++;\n        }\n    }\n    \n    while (i < left.size()) {\n        result.push_back(left[i]);\n        i++;\n    }\n    \n    while (j < right.size()) {\n        result.push_back(right[j]);\n        j++;\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_152_1", "index": 1410}
{"task_id": "MBCPP/153", "completion": "    vector<double> vertex(2);\n    vertex[0] = -b / (2.0 * a);\n    vertex[1] = c - (b * b) / (4.0 * a);\n    return vertex;\n}", "unique_id": "MBCPP_153_1", "index": 1420}
{"task_id": "MBCPP/154", "completion": "    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_154_3", "index": 1432}
{"task_id": "MBCPP/155", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010 (toggles even bits)\n    return n ^ mask;\n}", "unique_id": "MBCPP_155_8", "index": 1447}
{"task_id": "MBCPP/156", "completion": "    vector<vector<int>> result;\n    for (const auto& row : tupleStr) {\n        vector<int> intRow;\n        for (const auto& str : row) {\n            intRow.push_back(stoi(str));\n        }\n        result.push_back(intRow);\n    }\n    return result;\n}", "unique_id": "MBCPP_156_2", "index": 1451}
{"task_id": "MBCPP/158", "completion": "    if (n == 0)\n        return 0;\n    \n    sort(arr.begin(), arr.end());\n    \n    int median = arr[n / 2];\n    int operations = 0;\n    \n    for (int i = 0; i < n; i++) {\n        int diff = abs(arr[i] - median);\n        if (diff % k != 0)\n            return -1;\n        operations += diff / k;\n    }\n    \n    return operations;\n}", "unique_id": "MBCPP_158_5", "index": 1464}
{"task_id": "MBCPP/159", "completion": "    if (month == \"December\" && days >= 21 || month == \"January\" || month == \"February\" || month == \"March\" && days < 20)\n        return \"winter\";\n    else if (month == \"March\" && days >= 20 || month == \"April\" || month == \"May\" || month == \"June\" && days < 21)\n        return \"spring\";\n    else if (month == \"June\" && days >= 21 || month == \"July\" || month == \"August\" || month == \"September\" && days < 22)\n        return \"summer\";\n    else if (month == \"September\" && days >= 22 || month == \"October\" || month == \"November\" || month == \"December\" && days < 21)\n        return \"autumn\";\n    return \"\";\n}", "unique_id": "MBCPP_159_5", "index": 1474}
{"task_id": "MBCPP/161", "completion": "    unordered_set<int> elementsToRemove(list2.begin(), list2.end());\n    vector<int> result;\n    for (int num : list1) {\n        if (elementsToRemove.find(num) == elementsToRemove.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_161_6", "index": 1485}
{"task_id": "MBCPP/162", "completion": "    int sum = 0;\n    while (n > 0) {\n        sum += n;\n        n -= 2;\n    }\n    return sum;\n}", "unique_id": "MBCPP_162_9", "index": 1498}
{"task_id": "MBCPP/163", "completion": "    double n = static_cast<double>(s);\n    double a = static_cast<double>(l);\n    return (n * a * a) / (4 * tan(M_PI / n));\n}", "unique_id": "MBCPP_163_1", "index": 1500}
{"task_id": "MBCPP/164", "completion": "    auto sumOfDivisors = [](int n) {\n        if (n == 1) return 1;\n        int sum = 1 + n;\n        for (int i = 2; i <= sqrt(n); i++) {\n            if (n % i == 0) {\n                if (i == n / i)\n                    sum += i;\n                else\n                    sum += i + n / i;\n            }\n        }\n        return sum;\n    };\n\n    return sumOfDivisors(num1) == sumOfDivisors(num2);\n}", "unique_id": "MBCPP_164_6", "index": 1515}
{"task_id": "MBCPP/165", "completion": "    int count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        char ch = str1[i];\n        if (isupper(ch) && (ch - 'A' == i)) {\n            count++;\n        } else if (islower(ch) && (ch - 'a' == i)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_165_4", "index": 1523}
{"task_id": "MBCPP/166", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_166_5", "index": 1534}
{"task_id": "MBCPP/167", "completion": "    if (n == 0)\n        return 1;\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    n++;\n    return n;\n}", "unique_id": "MBCPP_167_1", "index": 1540}
{"task_id": "MBCPP/168", "completion": "    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x)\n            count++;\n    }\n    return count;\n}", "unique_id": "MBCPP_168_4", "index": 1553}
{"task_id": "MBCPP/169", "completion": "    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int p0 = 0, p1 = 1, pn;\n    for (int i = 2; i <= n; i++) {\n        pn = 2 * p1 + p0;\n        p0 = p1;\n        p1 = pn;\n    }\n    return pn;\n}", "unique_id": "MBCPP_169_4", "index": 1563}
{"task_id": "MBCPP/170", "completion": "    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_170_1", "index": 1570}
{"task_id": "MBCPP/171", "completion": "    return 5 * a;\n}", "unique_id": "MBCPP_171_4", "index": 1583}
{"task_id": "MBCPP/172", "completion": "    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_172_3", "index": 1592}
{"task_id": "MBCPP/173", "completion": "    string result;\n    for (char ch : text) {\n        if (isalnum(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_173_10", "index": 1609}
{"task_id": "MBCPP/175", "completion": "    stack<char> s;\n    for (char c : str1) {\n        if (c == '(' || c == '{' || c == '[') {\n            s.push(c);\n        } else {\n            if (s.empty()) return false;\n            char top = s.top();\n            s.pop();\n            if ((c == ')' && top != '(') || \n                (c == '}' && top != '{') || \n                (c == ']' && top != '[')) {\n                return false;\n            }\n        }\n    }\n    return s.empty();\n}", "unique_id": "MBCPP_175_2", "index": 1611}
{"task_id": "MBCPP/176", "completion": "    return a + b + c;\n}", "unique_id": "MBCPP_176_6", "index": 1625}
{"task_id": "MBCPP/177", "completion": "    vector<int> result;\n    for (int i = l; i <= r; i++) {\n        for (int j = i + 1; j <= r; j++) {\n            int lcm = (i * j) / __gcd(i, j);\n            if (lcm >= l && lcm <= r) {\n                result.push_back(i);\n                result.push_back(j);\n                return result;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_177_2", "index": 1631}
{"task_id": "MBCPP/178", "completion": "    for (const auto& pattern : patterns) {\n        if (text.find(pattern) != string::npos) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "unique_id": "MBCPP_178_3", "index": 1642}
{"task_id": "MBCPP/179", "completion": "    if (x < 10) return false;\n    \n    vector<int> sequence;\n    int temp = x, digits = 0;\n    \n    while (temp > 0) {\n        sequence.insert(sequence.begin(), temp % 10);\n        temp /= 10;\n        digits++;\n    }\n    \n    int next = 0;\n    while (next < x) {\n        next = 0;\n        for (int i = sequence.size() - digits; i < sequence.size(); i++) {\n            next += sequence[i];\n        }\n        sequence.push_back(next);\n    }\n    \n    return next == x;\n}", "unique_id": "MBCPP_179_6", "index": 1655}
{"task_id": "MBCPP/181", "completion": "    if (n == 0)\n        return \"\";\n    string prefix = arr[0];\n    for (int i = 1; i < n; i++) {\n        while (arr[i].find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty())\n                return \"\";\n        }\n    }\n    return prefix;\n}", "unique_id": "MBCPP_181_4", "index": 1663}
{"task_id": "MBCPP/183", "completion": "    sort(arr.begin(), arr.end());\n    int count = 0;\n    int left = 0, right = 1;\n    while (right < n) {\n        int diff = arr[right] - arr[left];\n        if (diff == k) {\n            count++;\n            left++;\n            right++;\n        } else if (diff < k) {\n            right++;\n        } else {\n            left++;\n        }\n        if (left == right) {\n            right++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_183_5", "index": 1674}
{"task_id": "MBCPP/184", "completion": "    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > num) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_184_3", "index": 1682}
{"task_id": "MBCPP/185", "completion": "    double x = -b / (2.0 * a);\n    double y = c - (b * b) / (4.0 * a);\n    return {x, y};\n}", "unique_id": "MBCPP_185_2", "index": 1691}
{"task_id": "MBCPP/186", "completion": "    for (const auto& pattern : patterns) {\n        regex r(pattern);\n        if (regex_search(text, r)) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "unique_id": "MBCPP_186_7", "index": 1706}
{"task_id": "MBCPP/187", "completion": "    int dp[m + 1][n + 1];\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (x[i - 1] == y[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[m][n];\n}", "unique_id": "MBCPP_187_6", "index": 1715}
{"task_id": "MBCPP/188", "completion": "    for (int i = 1; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            int j = n / i;\n            int sqrt_i = sqrt(i);\n            int sqrt_j = sqrt(j);\n            if (sqrt_i * sqrt_i == i && sqrt_j * sqrt_j == j) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_188_7", "index": 1726}
{"task_id": "MBCPP/189", "completion": "    for (int i = 0; i < n; i++) {\n        while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {\n            swap(arr[i], arr[arr[i] - 1]);\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}", "unique_id": "MBCPP_189_6", "index": 1735}
{"task_id": "MBCPP/190", "completion": "    if (x1 > x2) swap(x1, x2);\n    if (y1 > y2) swap(y1, y2);\n    return (x2 - x1) * (y2 - y1);\n}", "unique_id": "MBCPP_190_10", "index": 1749}
{"task_id": "MBCPP/191", "completion": "    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\")\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_191_2", "index": 1751}
{"task_id": "MBCPP/192", "completion": "    bool hasLetter = false, hasNumber = false;\n    for (char ch : str) {\n        if (isalpha(ch))\n            hasLetter = true;\n        if (isdigit(ch))\n            hasNumber = true;\n        if (hasLetter && hasNumber)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_192_6", "index": 1765}
{"task_id": "MBCPP/193", "completion": "    unordered_set<int> seen;\n    vector<int> result;\n    for (int num : testTup) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_193_2", "index": 1771}
{"task_id": "MBCPP/194", "completion": "    int decimal = 0, i = 0;\n    while (n != 0) {\n        int remainder = n % 10;\n        n /= 10;\n        decimal += remainder * pow(8, i);\n        ++i;\n    }\n    return decimal;\n}", "unique_id": "MBCPP_194_4", "index": 1783}
{"task_id": "MBCPP/195", "completion": "    int low = 0, high = n - 1, res = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            res = mid;\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return res;\n}", "unique_id": "MBCPP_195_4", "index": 1793}
{"task_id": "MBCPP/196", "completion": "    vector<vector<int>> result;\n    for (const auto& tuple : testList) {\n        if (tuple.size() != k) {\n            result.push_back(tuple);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_196_2", "index": 1801}
{"task_id": "MBCPP/197", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(pow(testTup1[i], testTup2[i]));\n    }\n    return result;\n}", "unique_id": "MBCPP_197_10", "index": 1819}
{"task_id": "MBCPP/198", "completion": "    double x = a * sqrt(3) / 2;\n    double y = b * 0.5;\n    return 3 * x * y;\n}", "unique_id": "MBCPP_198_3", "index": 1822}
{"task_id": "MBCPP/199", "completion": "    int res = 1;\n    while (res <= n)\n        res <<= 1;\n    return res >> 1;\n}", "unique_id": "MBCPP_199_1", "index": 1830}
{"task_id": "MBCPP/200", "completion": "    vector<int> result;\n    if (list1.empty()) return result;\n    \n    int max_val = *max_element(list1.begin(), list1.end());\n    \n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_200_5", "index": 1844}
{"task_id": "MBCPP/201", "completion": "    if (lst.empty()) return true;\n    string first = lst[0];\n    for (const auto& item : lst) {\n        if (item != first) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_201_3", "index": 1852}
{"task_id": "MBCPP/202", "completion": "    string result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 == 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_202_6", "index": 1865}
{"task_id": "MBCPP/203", "completion": "    int x = n1 ^ n2;\n    int count = 0;\n    while (x > 0) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_203_1", "index": 1870}
{"task_id": "MBCPP/204", "completion": "    int cnt = 0;\n    for (char ch : s) {\n        if (ch == c[0]) {\n            cnt++;\n        }\n    }\n    return cnt;\n}", "unique_id": "MBCPP_204_1", "index": 1880}
{"task_id": "MBCPP/205", "completion": "    vector<int> result;\n    for (int num : testTup) {\n        result.push_back(-(num + 1));\n    }\n    return result;\n}", "unique_id": "MBCPP_205_1", "index": 1890}
{"task_id": "MBCPP/206", "completion": "    vector<string> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_206_1", "index": 1900}
{"task_id": "MBCPP/207", "completion": "    int n = str.length();\n    int dp[n+1][n+1];\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (str[i-1] == str[j-1] && i != j)\n                dp[i][j] = dp[i-1][j-1] + 1;\n            else\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n][n];\n}", "unique_id": "MBCPP_207_8", "index": 1917}
{"task_id": "MBCPP/208", "completion": "    regex pattern(R\"(^\\d+\\.\\d{2}$)\");\n    return regex_match(num, pattern);\n}", "unique_id": "MBCPP_208_6", "index": 1925}
{"task_id": "MBCPP/209", "completion": "    auto min_it = min_element(heap.begin(), heap.end());\n    heap.erase(min_it);\n    heap.push_back(a);\n    make_heap(heap.begin(), heap.end(), greater<int>());\n    return heap;\n}", "unique_id": "MBCPP_209_1", "index": 1930}
{"task_id": "MBCPP/210", "completion": "    regex pattern(\"^[a-zA-Z0-9]*$\");\n    return regex_match(str, pattern);\n}", "unique_id": "MBCPP_210_2", "index": 1941}
{"task_id": "MBCPP/211", "completion": "    int count = 0;\n    for (int i = 0; i < (1 << (n + 1)); i++) {\n        if ((i & 1) && (i & (1 << n))) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_211_1", "index": 1950}
{"task_id": "MBCPP/212", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_212_1", "index": 1960}
{"task_id": "MBCPP/213", "completion": "    vector<string> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] + testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_213_1", "index": 1970}
{"task_id": "MBCPP/214", "completion": "    return radian * (180.0 / M_PI);\n}", "unique_id": "MBCPP_214_1", "index": 1980}
{"task_id": "MBCPP/217", "completion": "    unordered_map<char, int> charCount;\n    for (char c : str) {\n        if (charCount.find(c) != charCount.end()) {\n            return string(1, c);\n        }\n        charCount[c]++;\n    }\n    return string(1, '\\0');\n}", "unique_id": "MBCPP_217_1", "index": 1990}
{"task_id": "MBCPP/218", "completion": "    if (a == b)\n        return 0;\n    if (a > b)\n        swap(a, b);\n    int count = 0;\n    while (a != b) {\n        if (b - a >= a) {\n            count++;\n            a *= 2;\n        } else {\n            count += b - a;\n            a = b;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_218_5", "index": 2004}
{"task_id": "MBCPP/219", "completion": "    sort(testTup.begin(), testTup.end());\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(testTup[i]);\n    }\n    for (int i = testTup.size() - k; i < testTup.size(); i++) {\n        result.push_back(testTup[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_219_1", "index": 2010}
{"task_id": "MBCPP/220", "completion": "    int count = 0;\n    for (char &c : text) {\n        if (count >= n) break;\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n            count++;\n        }\n    }\n    return text;\n}", "unique_id": "MBCPP_220_1", "index": 2020}
{"task_id": "MBCPP/221", "completion": "    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1; // Return -1 if no even number is found\n}", "unique_id": "MBCPP_221_1", "index": 2030}
{"task_id": "MBCPP/222", "completion": "    if (testTuple.empty())\n        return true;\n    \n    int firstType = typeid(testTuple[0]).hash_code();\n    for (const auto& element : testTuple) {\n        if (typeid(element).hash_code() != firstType)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_222_4", "index": 2043}
{"task_id": "MBCPP/223", "completion": "    int first = lower_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int last = upper_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int count = last - first;\n    return count > n / 2;\n}", "unique_id": "MBCPP_223_1", "index": 2050}
{"task_id": "MBCPP/224", "completion": "    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_224_1", "index": 2060}
{"task_id": "MBCPP/225", "completion": "    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[low];\n}", "unique_id": "MBCPP_225_5", "index": 2074}
{"task_id": "MBCPP/226", "completion": "    string result;\n    for (int i = 0; i < str.length(); i += 2) {\n        result += str[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_226_6", "index": 2085}
{"task_id": "MBCPP/227", "completion": "    return min(a, min(b, c));\n}", "unique_id": "MBCPP_227_2", "index": 2091}
{"task_id": "MBCPP/228", "completion": "    int mask = (1 << (r - l + 1)) - 1;\n    mask = mask << l;\n    return (n & mask) == mask;\n}", "unique_id": "MBCPP_228_5", "index": 2104}
{"task_id": "MBCPP/229", "completion": "    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            if (i != j)\n                swap(arr[i], arr[j]);\n            j++;\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_229_1", "index": 2110}
{"task_id": "MBCPP/230", "completion": "    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ' ') {\n            str1.replace(i, 1, chr);\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_230_1", "index": 2120}
{"task_id": "MBCPP/231", "completion": "    for (int i = n - 2; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n        }\n    }\n    return tri[0][0];\n}", "unique_id": "MBCPP_231_6", "index": 2135}
{"task_id": "MBCPP/232", "completion": "    priority_queue<int> pq;\n    for (int num : list1) {\n        pq.push(num);\n    }\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        if (!pq.empty()) {\n            result.push_back(pq.top());\n            pq.pop();\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_232_3", "index": 2142}
{"task_id": "MBCPP/233", "completion": "    return 2 * M_PI * r * h;\n}", "unique_id": "MBCPP_233_5", "index": 2154}
{"task_id": "MBCPP/234", "completion": "    return l * l * l;\n}", "unique_id": "MBCPP_234_6", "index": 2165}
{"task_id": "MBCPP/235", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010 (even bits set)\n    return n | mask;\n}", "unique_id": "MBCPP_235_1", "index": 2170}
{"task_id": "MBCPP/236", "completion": "    if (k > n)\n        return -1;\n    if (k == n)\n        return 1;\n    int count = 0;\n    for (int i = 1; i <= n - k + 1; i++) {\n        count += i * i;\n    }\n    return count;\n}", "unique_id": "MBCPP_236_7", "index": 2186}
{"task_id": "MBCPP/238", "completion": "    int n = str.length();\n    return n * (n + 1) / 2;\n}", "unique_id": "MBCPP_238_3", "index": 2192}
{"task_id": "MBCPP/239", "completion": "    if (n == 0)\n        return 1;\n    if (m < 1)\n        return 0;\n    return getTotalNumberOfSequences(m / 2, n - 1) + getTotalNumberOfSequences(m - 1, n);\n}", "unique_id": "MBCPP_239_5", "index": 2204}
{"task_id": "MBCPP/241", "completion": "    vector<vector<vector<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n    return result;\n}", "unique_id": "MBCPP_241_2", "index": 2211}
{"task_id": "MBCPP/242", "completion": "    return str1.length();\n}", "unique_id": "MBCPP_242_5", "index": 2224}
{"task_id": "MBCPP/244", "completion": "    int sqrtVal = sqrt(n);\n    if (sqrtVal * sqrtVal == n) {\n        return (sqrtVal + 1) * (sqrtVal + 1);\n    } else {\n        return (sqrtVal + 1) * (sqrtVal + 1);\n    }\n}", "unique_id": "MBCPP_244_2", "index": 2231}
{"task_id": "MBCPP/245", "completion": "    vector<int> dp1(n, 0), dp2(n, 0);\n    for (int i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp1[i] < dp1[j] + arr[i]) {\n                dp1[i] = dp1[j] + arr[i];\n            }\n        }\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        dp2[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum = max(max_sum, dp1[i] + dp2[i] - arr[i]);\n    }\n    return max_sum;\n}", "unique_id": "MBCPP_245_1", "index": 2240}
{"task_id": "MBCPP/246", "completion": "    if (number == 0 || number == 1)\n        return number;\n\n    double guess = number / 2.0;\n    double epsilon = 0.000001; // Precision threshold\n\n    while (abs(guess * guess - number) > epsilon) {\n        guess = (guess + number / guess) / 2.0;\n    }\n\n    return guess;\n}", "unique_id": "MBCPP_246_5", "index": 2254}
{"task_id": "MBCPP/247", "completion": "    int n = str.length();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    \n    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    \n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                dp[i][j] = 2;\n            else if (str[i] == str[j])\n                dp[i][j] = dp[i+1][j-1] + 2;\n            else\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]);\n        }\n    }\n    \n    return dp[0][n-1];\n}", "unique_id": "MBCPP_247_1", "index": 2260}
{"task_id": "MBCPP/248", "completion": "    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_248_9", "index": 2278}
{"task_id": "MBCPP/249", "completion": "    sort(arrayNums1.begin(), arrayNums1.end());\n    sort(arrayNums2.begin(), arrayNums2.end());\n    vector<int> result;\n    auto it1 = arrayNums1.begin();\n    auto it2 = arrayNums2.begin();\n    while (it1 != arrayNums1.end() && it2 != arrayNums2.end()) {\n        if (*it1 < *it2) {\n            ++it1;\n        } else if (*it1 > *it2) {\n            ++it2;\n        } else {\n            result.push_back(*it1);\n            ++it1;\n            ++it2;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_249_10", "index": 2289}
{"task_id": "MBCPP/250", "completion": "    int count = 0;\n    for (int num : tup) {\n        if (num == x) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_250_9", "index": 2298}
{"task_id": "MBCPP/251", "completion": "    vector<string> result;\n    for (const auto& item : list) {\n        result.push_back(element);\n        result.push_back(item);\n    }\n    return result;\n}", "unique_id": "MBCPP_251_4", "index": 2303}
{"task_id": "MBCPP/252", "completion": "    vector<double> polar;\n    polar.push_back(static_cast<double>(numbers));\n    polar.push_back(0.0);\n    return polar;\n}", "unique_id": "MBCPP_252_1", "index": 2310}
{"task_id": "MBCPP/253", "completion": "    return list1.size();\n}", "unique_id": "MBCPP_253_1", "index": 2320}
{"task_id": "MBCPP/254", "completion": "    vector<string> result;\n    string word;\n    for (char ch : text) {\n        if (isalpha(ch)) {\n            word += ch;\n        } else {\n            if (!word.empty() && (word[0] == 'a' || word[0] == 'e')) {\n                result.push_back(word);\n            }\n            word.clear();\n        }\n    }\n    if (!word.empty() && (word[0] == 'a' || word[0] == 'e')) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_254_1", "index": 2330}
{"task_id": "MBCPP/255", "completion": "    vector<vector<string>> result;\n    vector<string> current(n);\n    function<void(int)> backtrack = [&](int index) {\n        if (index == n) {\n            result.push_back(current);\n            return;\n        }\n        for (const string& color : l) {\n            current[index] = color;\n            backtrack(index + 1);\n        }\n    };\n    backtrack(0);\n    return result;\n}", "unique_id": "MBCPP_255_1", "index": 2340}
{"task_id": "MBCPP/256", "completion": "    if (n <= 2) return 0;\n    \n    vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; ++i) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    int count = 0;\n    for (int i = 2; i < n; ++i) {\n        if (isPrime[i]) ++count;\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_256_1", "index": 2350}
{"task_id": "MBCPP/257", "completion": "    vector<int> result = {b, a};\n    return result;\n}", "unique_id": "MBCPP_257_1", "index": 2360}
{"task_id": "MBCPP/258", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 != 0; });\n}", "unique_id": "MBCPP_258_2", "index": 2371}
{"task_id": "MBCPP/259", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0], testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1], testTup2[i][1]));\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_259_2", "index": 2381}
{"task_id": "MBCPP/260", "completion": "    if (n == 0)\n        return 1;\n    if (n == 1)\n        return 1;\n    int a = 1, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_260_7", "index": 2396}
{"task_id": "MBCPP/261", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] / testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_261_1", "index": 2400}
{"task_id": "MBCPP/263", "completion": "    unordered_map<string, int> result = d1;\n    for (const auto& pair : d2) {\n        result[pair.first] = pair.second;\n    }\n    return result;\n}", "unique_id": "MBCPP_263_1", "index": 2410}
{"task_id": "MBCPP/264", "completion": "    if (hAge <= 0) return 0;\n    if (hAge == 1) return 15;\n    if (hAge == 2) return 24;\n    return 24 + (hAge - 2) * 5;\n}", "unique_id": "MBCPP_264_5", "index": 2424}
{"task_id": "MBCPP/266", "completion": "    return 4 * l * l;\n}", "unique_id": "MBCPP_266_3", "index": 2432}
{"task_id": "MBCPP/267", "completion": "    int sum = 0;\n    int count = 0;\n    int i = 1;\n    while (count < n) {\n        if (i % 2 != 0) {\n            sum += i * i;\n            count++;\n        }\n        i++;\n    }\n    return sum;\n}", "unique_id": "MBCPP_267_1", "index": 2440}
{"task_id": "MBCPP/268", "completion": "    return 6 * n * n - 6 * n + 1;\n}", "unique_id": "MBCPP_268_8", "index": 2457}
{"task_id": "MBCPP/269", "completion": "    if (k.empty())\n        return 0;\n    return static_cast<int>(k[0]);\n}", "unique_id": "MBCPP_269_10", "index": 2469}
{"task_id": "MBCPP/270", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_270_10", "index": 2479}
{"task_id": "MBCPP/271", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += pow(evenNum, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_271_1", "index": 2480}
{"task_id": "MBCPP/273", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] - testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_273_8", "index": 2497}
{"task_id": "MBCPP/274", "completion": "    int sum = 0;\n    for (int i = 0; i <= n; i += 2) {\n        sum += tgamma(n + 1) / (tgamma(i + 1) * tgamma(n - i + 1));\n    }\n    return sum;\n}", "unique_id": "MBCPP_274_10", "index": 2509}
{"task_id": "MBCPP/275", "completion": "    queue<int> q;\n    for(int i = 0; i < n; i++) {\n        q.push(a[i]);\n    }\n    int lastRemoved = -1;\n    while(!q.empty()) {\n        for(int i = 1; i < m; i++) {\n            q.push(q.front());\n            q.pop();\n        }\n        lastRemoved = q.front();\n        q.pop();\n    }\n    for(int i = 0; i < n; i++) {\n        if(a[i] == lastRemoved) {\n            return i + 1;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_275_1", "index": 2510}
{"task_id": "MBCPP/276", "completion": "    return M_PI * r * r * h;\n}", "unique_id": "MBCPP_276_3", "index": 2522}
{"task_id": "MBCPP/277", "completion": "    unordered_map<string, int> result;\n    for (const auto& pair : dict) {\n        if (pair.second >= n) {\n            result.insert(pair);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_277_6", "index": 2535}
{"task_id": "MBCPP/279", "completion": "    return n * (4 * n - 3);\n}", "unique_id": "MBCPP_279_4", "index": 2543}
{"task_id": "MBCPP/281", "completion": "    unordered_set<int> seen;\n    for (int num : testList) {\n        if (seen.count(num))\n            return false;\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_281_1", "index": 2550}
{"task_id": "MBCPP/282", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a - b; });\n    return result;\n}", "unique_id": "MBCPP_282_1", "index": 2560}
{"task_id": "MBCPP/283", "completion": "    unordered_map<int, int> freq;\n    while (n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (auto& pair : freq) {\n        if (pair.second > pair.first)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_283_1", "index": 2570}
{"task_id": "MBCPP/285", "completion": "    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_285_4", "index": 2583}
{"task_id": "MBCPP/286", "completion": "    if (a.empty()) return 0;\n    \n    int totalSum = 0;\n    for (int num : a) {\n        totalSum += num;\n    }\n    \n    int maxEndingHere = a[0];\n    int maxSoFar = a[0];\n    \n    for (int i = 1; i < n; ++i) {\n        maxEndingHere = max(a[i], maxEndingHere + a[i]);\n        maxSoFar = max(maxSoFar, maxEndingHere);\n    }\n    \n    if (k == 1) {\n        return maxSoFar;\n    }\n    \n    int minEndingHere = a[0];\n    int minSoFar = a[0];\n    \n    for (int i = 1; i < n; ++i) {\n        minEndingHere = min(a[i], minEndingHere + a[i]);\n        minSoFar = min(minSoFar, minEndingHere);\n    }\n    \n    if (totalSum > 0) {\n        return max(maxSoFar, totalSum * k - minSoFar);\n    } else {\n        return max(maxSoFar, totalSum * (k - 1) + maxSoFar);\n    }\n}", "unique_id": "MBCPP_286_10", "index": 2599}
{"task_id": "MBCPP/287", "completion": "    int sum = 0;\n    int count = 0;\n    int i = 1;\n    while (count < n) {\n        if (i % 2 == 0) {\n            sum += i * i;\n            count++;\n        }\n        i++;\n    }\n    return sum;\n}", "unique_id": "MBCPP_287_1", "index": 2600}
{"task_id": "MBCPP/288", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == 0) continue;\n        int inverse = 1;\n        for(int j = 1; j < p; j++) {\n            if((arr[i] * j) % p == 1) {\n                inverse = j;\n                break;\n            }\n        }\n        if(inverse == arr[i]) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_288_3", "index": 2612}
{"task_id": "MBCPP/289", "completion": "    int oddDays = n % 7;\n    if (n % 4 == 0 && (n % 100 != 0 || n % 400 == 0)) {\n        oddDays++;\n    }\n    return oddDays;\n}", "unique_id": "MBCPP_289_1", "index": 2620}
{"task_id": "MBCPP/291", "completion": "    if (n == 0) return 0;\n    if (n == 1) return k;\n    \n    long same = k;\n    long diff = k * (k - 1);\n    long total = same + diff;\n    \n    for (int i = 3; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    \n    return total;\n}", "unique_id": "MBCPP_291_5", "index": 2634}
{"task_id": "MBCPP/292", "completion": "    return n / m;\n}", "unique_id": "MBCPP_292_5", "index": 2644}
{"task_id": "MBCPP/295", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; ++i) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum - number;\n}", "unique_id": "MBCPP_295_3", "index": 2652}
{"task_id": "MBCPP/296", "completion": "    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}", "unique_id": "MBCPP_296_7", "index": 2666}
{"task_id": "MBCPP/297", "completion": "    vector<int> result;\n    for (const auto& innerList : list1) {\n        for (int num : innerList) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_297_2", "index": 2671}
{"task_id": "MBCPP/300", "completion": "    if (n == 0) return 1.0;\n    double result = 0.0;\n    for (int k = 0; k <= n; ++k) {\n        double c = 1.0;\n        for (int i = 1; i <= k; ++i) {\n            c *= (n - k + i) / i;\n        }\n        result += c * c;\n    }\n    return result;\n}", "unique_id": "MBCPP_300_1", "index": 2680}
{"task_id": "MBCPP/302", "completion": "    if (n == 0)\n        return 0;\n    \n    int msb = 0;\n    while (n != 0) {\n        n = n >> 1;\n        msb++;\n    }\n    \n    return (1 << (msb - 1));\n}", "unique_id": "MBCPP_302_2", "index": 2691}
{"task_id": "MBCPP/303", "completion": "    int inv1 = 0, inv2 = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                inv1++;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (a[i] < a[j]) {\n                inv2++;\n            }\n        }\n    }\n    return inv1 == inv2;\n}", "unique_id": "MBCPP_303_3", "index": 2702}
{"task_id": "MBCPP/304", "completion": "    for (int i = 0; i < rotations; i++) {\n        for (auto range : ranges) {\n            int l = range[0];\n            int r = range[1];\n            reverse(arr.begin() + l, arr.begin() + r + 1);\n        }\n    }\n    return arr[index];\n}", "unique_id": "MBCPP_304_3", "index": 2712}
{"task_id": "MBCPP/305", "completion": "    vector<string> result;\n    for (const auto& word : words) {\n        stringstream ss(word);\n        string temp;\n        while (ss >> temp) {\n            if (!temp.empty() && (temp[0] == 'p' || temp[0] == 'P')) {\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_305_2", "index": 2721}
{"task_id": "MBCPP/306", "completion": "    vector<int> dp(n);\n    for (int i = 0; i < n; i++) {\n        dp[i] = a[i];\n        for (int j = 0; j < i; j++) {\n            if (a[j] < a[i] && dp[i] < dp[j] + a[i]) {\n                dp[i] = dp[j] + a[i];\n            }\n        }\n    }\n    int maxSum = 0;\n    for (int i = 0; i <= index; i++) {\n        if (a[i] < a[k] && dp[i] + a[k] > maxSum) {\n            maxSum = dp[i] + a[k];\n        }\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_306_2", "index": 2731}
{"task_id": "MBCPP/308", "completion": "    vector<int> products;\n    for (int num1 : nums1) {\n        for (int num2 : nums2) {\n            products.push_back(num1 * num2);\n        }\n    }\n    sort(products.begin(), products.end(), greater<int>());\n    if (n > products.size()) {\n        n = products.size();\n    }\n    return vector<int>(products.begin(), products.begin() + n);\n}", "unique_id": "MBCPP_308_1", "index": 2740}
{"task_id": "MBCPP/309", "completion": "    return (a > b) ? a : b;\n}", "unique_id": "MBCPP_309_1", "index": 2750}
{"task_id": "MBCPP/310", "completion": "    vector<string> result;\n    for (char ch : str1) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "unique_id": "MBCPP_310_1", "index": 2760}
{"task_id": "MBCPP/311", "completion": "    if ((n & (n + 1)) == 0)\n        return n;\n    \n    int mask = 1;\n    while (mask <= n) {\n        if ((n & mask) == 0) {\n            return n | mask;\n        }\n        mask <<= 1;\n    }\n    return n;\n}", "unique_id": "MBCPP_311_8", "index": 2777}
{"task_id": "MBCPP/312", "completion": "    return (1.0 / 3.0) * M_PI * r * r * h;\n}", "unique_id": "MBCPP_312_1", "index": 2780}
{"task_id": "MBCPP/314", "completion": "    if (n == 0) return 0;\n    if (n == 1) return max(grid[0][0], grid[1][0]);\n\n    vector<int> dp(n, 0);\n    dp[0] = max(grid[0][0], grid[1][0]);\n    dp[1] = max(max(grid[0][1], grid[1][1]), dp[0]);\n\n    for (int i = 2; i < n; i++) {\n        int currentMax = max(grid[0][i], grid[1][i]);\n        dp[i] = max(dp[i - 1], dp[i - 2] + currentMax);\n    }\n\n    return dp[n - 1];\n}", "unique_id": "MBCPP_314_1", "index": 2790}
{"task_id": "MBCPP/315", "completion": "    stringstream ss(str);\n    string word, result = \"-1\";\n    int maxLen = 0;\n    \n    while (ss >> word) {\n        if (word.length() % 2 == 0 && word.length() > maxLen) {\n            maxLen = word.length();\n            result = word;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_315_1", "index": 2800}
{"task_id": "MBCPP/316", "completion": "    int low = 0, high = a.size() - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            low = mid + 1;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_316_3", "index": 2812}
{"task_id": "MBCPP/318", "completion": "    if (s < 3) return 0;\n    int a = s / 3;\n    int b = (s - a) / 2;\n    int c = s - a - b;\n    return a * b * c;\n}", "unique_id": "MBCPP_318_2", "index": 2821}
{"task_id": "MBCPP/319", "completion": "    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{5}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_319_2", "index": 2831}
{"task_id": "MBCPP/320", "completion": "    int sum = n * (n + 1) / 2;\n    int sumSquared = sum * sum;\n    int sumOfSquares = n * (n + 1) * (2 * n + 1) / 6;\n    return sumSquared - sumOfSquares;\n}", "unique_id": "MBCPP_320_2", "index": 2841}
{"task_id": "MBCPP/321", "completion": "    string result;\n    int n = s.length();\n    for(int i = 1; i <= n; i++) {\n        result += to_string(i);\n    }\n    for(int i = n - 1; i >= 1; i--) {\n        result += to_string(i);\n    }\n    return result;\n}", "unique_id": "MBCPP_321_1", "index": 2850}
{"task_id": "MBCPP/322", "completion": "    if (list1.empty()) return {};\n    \n    int min_val = *min_element(list1.begin(), list1.end());\n    vector<int> result;\n    \n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_322_2", "index": 2861}
{"task_id": "MBCPP/323", "completion": "    int pos = 0, neg = 1;\n    vector<int> result(n);\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[i] < 0) {\n            if(neg < n) {\n                result[neg] = arr[i];\n                neg += 2;\n            }\n        } else {\n            if(pos < n) {\n                result[pos] = arr[i];\n                pos += 2;\n            }\n        }\n    }\n    \n    // Fill remaining positions with the rest of the elements\n    for(int i = 0; i < n; i++) {\n        if(result[i] == 0) {\n            if(pos < n) {\n                result[i] = arr[pos];\n                pos++;\n            } else if(neg < n) {\n                result[i] = arr[neg];\n                neg++;\n            }\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_323_1", "index": 2870}
{"task_id": "MBCPP/324", "completion": "    vector<int> result(2, 0);\n    for (int i = 0; i < testTuple.size(); ++i) {\n        if (i % 2 == 0) {\n            result[0] += testTuple[i];\n        } else {\n            result[1] += testTuple[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_324_1", "index": 2880}
{"task_id": "MBCPP/325", "completion": "    if (n <= 3)\n        return n;\n\n    int dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n\n    for (int i = 4; i <= n; i++) {\n        dp[i] = i;\n        for (int x = 1; x * x <= i; x++) {\n            int temp = x * x;\n            if (temp > i)\n                break;\n            else\n                dp[i] = min(dp[i], 1 + dp[i - temp]);\n        }\n    }\n\n    return dp[n];\n}", "unique_id": "MBCPP_325_5", "index": 2894}
{"task_id": "MBCPP/326", "completion": "    unordered_map<string, int> wordCount;\n    for (const auto& str : testList) {\n        stringstream ss(str);\n        string word;\n        while (ss >> word) {\n            wordCount[word]++;\n        }\n    }\n    \n    string result;\n    int maxCount = 0;\n    for (const auto& pair : wordCount) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_326_3", "index": 2902}
{"task_id": "MBCPP/327", "completion": "    if (x == y || y == z || z == x) {\n        if (x + y > z && y + z > x && z + x > y) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_327_4", "index": 2913}
{"task_id": "MBCPP/328", "completion": "    vector<int> result;\n    for (int i = n; i < m + n; i++) {\n        result.push_back(list1[i % list1.size()]);\n    }\n    return result;\n}", "unique_id": "MBCPP_328_1", "index": 2920}
{"task_id": "MBCPP/329", "completion": "    int count = 0;\n    for (int num : list) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_329_4", "index": 2933}
{"task_id": "MBCPP/330", "completion": "    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{3,5}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_330_6", "index": 2945}
{"task_id": "MBCPP/331", "completion": "    int count = 0;\n    while (n > 0) {\n        if ((n & 1) == 0)\n            count++;\n        n = n >> 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_331_6", "index": 2955}
{"task_id": "MBCPP/332", "completion": "    unordered_map<string, int> freqMap;\n    for (char ch : str1) {\n        string s(1, ch);\n        freqMap[s]++;\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_332_1", "index": 2960}
{"task_id": "MBCPP/334", "completion": "    if (a + b <= c || a + c <= b || b + c <= a)\n        return false;\n    else\n        return true;\n}", "unique_id": "MBCPP_334_1", "index": 2970}
{"task_id": "MBCPP/335", "completion": "    return (n * (2 * a + (n - 1) * d)) / 2;\n}", "unique_id": "MBCPP_335_3", "index": 2982}
{"task_id": "MBCPP/336", "completion": "    return monthname1 == \"February\";\n}", "unique_id": "MBCPP_336_1", "index": 2990}
{"task_id": "MBCPP/337", "completion": "    regex pattern(R\"(\\b\\w+[.!?,;]*\\s*$)\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_337_2", "index": 3001}
{"task_id": "MBCPP/338", "completion": "    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_338_1", "index": 3010}
{"task_id": "MBCPP/339", "completion": "    unordered_map<int, int> freq;\n    for (int i = x; i <= y; ++i) {\n        for (int j = 2; j <= i; ++j) {\n            if (i % j == 0) {\n                freq[j]++;\n            }\n        }\n    }\n    int maxCount = 0, maxDivisor = 2;\n    for (auto& pair : freq) {\n        if (pair.second > maxCount || (pair.second == maxCount && pair.first < maxDivisor)) {\n            maxCount = pair.second;\n            maxDivisor = pair.first;\n        }\n    }\n    return maxDivisor;\n}", "unique_id": "MBCPP_339_4", "index": 3023}
{"task_id": "MBCPP/340", "completion": "    vector<int> positiveNums;\n    for (int num : lst) {\n        if (num > 0) {\n            positiveNums.push_back(num);\n        }\n    }\n    if (positiveNums.size() < 3) {\n        return 0;\n    }\n    sort(positiveNums.begin(), positiveNums.end());\n    return positiveNums[0] + positiveNums[1] + positiveNums[2];\n}", "unique_id": "MBCPP_340_7", "index": 3036}
{"task_id": "MBCPP/341", "completion": "    vector<int> result(s.begin(), s.end());\n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_341_3", "index": 3042}
{"task_id": "MBCPP/342", "completion": "    int k = list.size();\n    vector<int> ptr(k, 0);\n    int minRange = INT_MAX;\n    vector<int> result(2);\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    int maxVal = INT_MIN;\n\n    for (int i = 0; i < k; ++i) {\n        pq.push({list[i][0], i});\n        maxVal = max(maxVal, list[i][0]);\n    }\n\n    while (true) {\n        auto top = pq.top();\n        pq.pop();\n        int minVal = top.first;\n        int listIdx = top.second;\n\n        if (maxVal - minVal < minRange) {\n            minRange = maxVal - minVal;\n            result[0] = minVal;\n            result[1] = maxVal;\n        }\n\n        ptr[listIdx]++;\n        if (ptr[listIdx] == list[listIdx].size()) {\n            break;\n        }\n\n        int nextVal = list[listIdx][ptr[listIdx]];\n        pq.push({nextVal, listIdx});\n        maxVal = max(maxVal, nextVal);\n    }\n\n    return result;\n}", "unique_id": "MBCPP_342_2", "index": 3051}
{"task_id": "MBCPP/343", "completion": "    int letters = 0, digits = 0;\n    for (char ch : s) {\n        if (isalpha(ch))\n            letters++;\n        else if (isdigit(ch))\n            digits++;\n    }\n    return {letters, digits};\n}", "unique_id": "MBCPP_343_4", "index": 3063}
{"task_id": "MBCPP/344", "completion": "    int count = 0;\n    int start = sqrt(n);\n    if (start * start < n) start++;\n    int end = sqrt(m);\n    count = end - start + 1;\n    return count;\n}", "unique_id": "MBCPP_344_7", "index": 3076}
{"task_id": "MBCPP/345", "completion": "    vector<int> result;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        result.push_back(nums[i] - nums[i - 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_345_1", "index": 3080}
{"task_id": "MBCPP/346", "completion": "    if (k == 0)\n        return 0;\n    if (n == 0 && k == 0)\n        return 1;\n    if (k > n)\n        return 0;\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n}", "unique_id": "MBCPP_346_9", "index": 3098}
{"task_id": "MBCPP/347", "completion": "    int count = 0;\n    while (m > 0 && n > 0) {\n        count += m * n;\n        m--;\n        n--;\n    }\n    return count;\n}", "unique_id": "MBCPP_347_10", "index": 3109}
{"task_id": "MBCPP/348", "completion": "    if (m % 2 != 0)\n        return 0;\n    \n    int n = m / 2;\n    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    \n    for (int i = 1; i <= n; i++) {\n        dp[i] = 0;\n        for (int j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i - 1 - j];\n        }\n    }\n    \n    return dp[n];\n}", "unique_id": "MBCPP_348_4", "index": 3113}
{"task_id": "MBCPP/349", "completion": "    for (char ch : str) {\n        if (ch != '0' && ch != '1') {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}", "unique_id": "MBCPP_349_1", "index": 3120}
{"task_id": "MBCPP/350", "completion": "    int left = 0, right = s.length() - 1;\n    while (left < right && s[left] == s[right]) {\n        char ch = s[left];\n        while (left <= right && s[left] == ch) left++;\n        while (left <= right && s[right] == ch) right--;\n    }\n    return right - left + 1;\n}", "unique_id": "MBCPP_350_7", "index": 3136}
{"task_id": "MBCPP/351", "completion": "    unordered_map<int, int> freqMap;\n    for (int i = 0; i < n; i++) {\n        freqMap[arr[i]]++;\n        if (freqMap[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1; // Return -1 if no element occurs k times\n}", "unique_id": "MBCPP_351_4", "index": 3143}
{"task_id": "MBCPP/352", "completion": "    unordered_set<char> charSet;\n    for (char c : str) {\n        if (charSet.find(c) != charSet.end()) {\n            return false;\n        }\n        charSet.insert(c);\n    }\n    return true;\n}", "unique_id": "MBCPP_352_1", "index": 3150}
{"task_id": "MBCPP/353", "completion": "    vector<vector<int>> result;\n    for (auto& row : list1) {\n        if (n < row.size()) {\n            row.erase(row.begin() + n);\n        }\n        result.push_back(row);\n    }\n    return result;\n}", "unique_id": "MBCPP_353_1", "index": 3160}
{"task_id": "MBCPP/354", "completion": "    return a + (n - 1) * d;\n}", "unique_id": "MBCPP_354_7", "index": 3176}
{"task_id": "MBCPP/355", "completion": "    if (radius <= 0)\n        return 0;\n    int count = 0;\n    for (int i = 1; i <= 2 * radius; ++i) {\n        for (int j = 1; j <= 2 * radius; ++j) {\n            if (i * i + j * j <= 4 * radius * radius)\n                count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_355_10", "index": 3189}
{"task_id": "MBCPP/356", "completion": "    return 180 - (a + b);\n}", "unique_id": "MBCPP_356_5", "index": 3194}
{"task_id": "MBCPP/357", "completion": "    int maxElement = INT_MIN;\n    for (const auto& row : testList) {\n        for (int num : row) {\n            if (num > maxElement) {\n                maxElement = num;\n            }\n        }\n    }\n    return maxElement;\n}", "unique_id": "MBCPP_357_4", "index": 3203}
{"task_id": "MBCPP/358", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) {\n        return a % b;\n    });\n    return result;\n}", "unique_id": "MBCPP_358_1", "index": 3210}
{"task_id": "MBCPP/359", "completion": "    int discriminant = b * b - 4 * a * c;\n    if (discriminant < 0)\n        return \"No\";\n    \n    double root1 = (-b + sqrt(discriminant)) / (2 * a);\n    double root2 = (-b - sqrt(discriminant)) / (2 * a);\n    \n    if ((root1 == 2 * root2) || (root2 == 2 * root1))\n        return \"Yes\";\n    else\n        return \"No\";\n}", "unique_id": "MBCPP_359_1", "index": 3220}
{"task_id": "MBCPP/360", "completion": "    return (pow(2, n) - 1) * (pow(2, n) - 1) - 2;\n}", "unique_id": "MBCPP_360_2", "index": 3231}
{"task_id": "MBCPP/363", "completion": "    for (auto& row : testList) {\n        for (auto& element : row) {\n            element += k;\n        }\n    }\n    return testList;\n}", "unique_id": "MBCPP_363_3", "index": 3242}
{"task_id": "MBCPP/364", "completion": "    int n = str.length();\n    int flip1 = 0, flip2 = 0;\n    \n    for(int i = 0; i < n; i++) {\n        if(i % 2 == 0) {\n            if(str[i] != '0') flip1++;\n            if(str[i] != '1') flip2++;\n        } else {\n            if(str[i] != '1') flip1++;\n            if(str[i] != '0') flip2++;\n        }\n    }\n    \n    return min(flip1, flip2);\n}", "unique_id": "MBCPP_364_9", "index": 3258}
{"task_id": "MBCPP/365", "completion": "    int count = 0;\n    if (n == 0)\n        return 1;\n    while (n != 0) {\n        n = n / 10;\n        ++count;\n    }\n    return count;\n}", "unique_id": "MBCPP_365_5", "index": 3264}
{"task_id": "MBCPP/366", "completion": "    if (listNums.size() < 2)\n        return 0;\n    \n    int maxProduct = listNums[0] * listNums[1];\n    for (size_t i = 1; i < listNums.size() - 1; ++i) {\n        int currentProduct = listNums[i] * listNums[i + 1];\n        if (currentProduct > maxProduct) {\n            maxProduct = currentProduct;\n        }\n    }\n    return maxProduct;\n}", "unique_id": "MBCPP_366_8", "index": 3277}
{"task_id": "MBCPP/368", "completion": "    vector<vector<int>> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(testTup);\n    }\n    return result;\n}", "unique_id": "MBCPP_368_4", "index": 3283}
{"task_id": "MBCPP/369", "completion": "    return 2 * h * (l + w);\n}", "unique_id": "MBCPP_369_3", "index": 3292}
{"task_id": "MBCPP/370", "completion": "    sort(price.begin(), price.end(), [](const vector<string>& a, const vector<string>& b) {\n        float aVal = stof(a[1]);\n        float bVal = stof(b[1]);\n        return aVal > bVal;\n    });\n    return price;\n}", "unique_id": "MBCPP_370_1", "index": 3300}
{"task_id": "MBCPP/371", "completion": "    if (leftElement > rightElement)\n        return leftElement;\n\n    int mid = leftElement + (rightElement - leftElement) / 2;\n\n    if (a[mid] == mid)\n        return smallestMissing(a, mid + 1, rightElement);\n    else\n        return smallestMissing(a, leftElement, mid - 1);\n}", "unique_id": "MBCPP_371_4", "index": 3313}
{"task_id": "MBCPP/372", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num : nums) {\n        minHeap.push(num);\n    }\n    vector<int> sortedNums;\n    while (!minHeap.empty()) {\n        sortedNums.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedNums;\n}", "unique_id": "MBCPP_372_7", "index": 3326}
{"task_id": "MBCPP/373", "completion": "    return l * w * h;\n}", "unique_id": "MBCPP_373_8", "index": 3337}
{"task_id": "MBCPP/374", "completion": "    vector<string> result;\n    sort(str.begin(), str.end());\n    do {\n        result.push_back(str);\n    } while (next_permutation(str.begin(), str.end()));\n    return result;\n}", "unique_id": "MBCPP_374_1", "index": 3340}
{"task_id": "MBCPP/375", "completion": "    int remainder = n % m;\n    if (remainder * 2 >= m)\n        return n + (m - remainder);\n    else\n        return n - remainder;\n}", "unique_id": "MBCPP_375_1", "index": 3350}
{"task_id": "MBCPP/377", "completion": "    s.erase(remove(s.begin(), s.end(), c[0]), s.end());\n    return s;\n}", "unique_id": "MBCPP_377_1", "index": 3360}
{"task_id": "MBCPP/378", "completion": "    if (testList.empty())\n        return testList;\n    int lastElement = testList.back();\n    testList.pop_back();\n    testList.insert(testList.begin(), lastElement);\n    return testList;\n}", "unique_id": "MBCPP_378_1", "index": 3370}
{"task_id": "MBCPP/379", "completion": "    return 2 * (l * w + w * h + h * l);\n}", "unique_id": "MBCPP_379_3", "index": 3382}
{"task_id": "MBCPP/380", "completion": "    vector<vector<int>> result(rownum, vector<int>(colnum, 0));\n    for (int i = 0; i < rownum; ++i) {\n        for (int j = 0; j < colnum; ++j) {\n            result[i][j] = i * j;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_380_2", "index": 3391}
{"task_id": "MBCPP/382", "completion": "    int low = 0, high = a.size() - 1;\n    while (low <= high) {\n        if (a[low] <= a[high])\n            return low;\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % a.size();\n        int prev = (mid + a.size() - 1) % a.size();\n        if (a[mid] <= a[next] && a[mid] <= a[prev])\n            return mid;\n        else if (a[mid] <= a[high])\n            high = mid - 1;\n        else if (a[mid] >= a[low])\n            low = mid + 1;\n    }\n    return 0;\n}", "unique_id": "MBCPP_382_1", "index": 3400}
{"task_id": "MBCPP/383", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n ^ mask;\n}", "unique_id": "MBCPP_383_3", "index": 3412}
{"task_id": "MBCPP/384", "completion": "    if (n == 0) return 0;\n    int min_val = *min_element(arr.begin(), arr.end());\n    int count = 0;\n    for (int num : arr) {\n        if (num == min_val) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_384_1", "index": 3420}
{"task_id": "MBCPP/385", "completion": "    if (n == 0)\n        return 3;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    return getPerrin(n - 2) + getPerrin(n - 3);\n}", "unique_id": "MBCPP_385_6", "index": 3435}
{"task_id": "MBCPP/386", "completion": "    int count = 0, imbalance = 0;\n    for (char ch : s) {\n        if (ch == '[') {\n            imbalance++;\n        } else {\n            if (imbalance > 0) {\n                imbalance--;\n            } else {\n                count++;\n                imbalance++;\n            }\n        }\n    }\n    return count / 2;\n}", "unique_id": "MBCPP_386_7", "index": 3446}
{"task_id": "MBCPP/387", "completion": "    char lastChar = n.back();\n    int lastDigit;\n    if (isdigit(lastChar)) {\n        lastDigit = lastChar - '0';\n    } else {\n        lastDigit = toupper(lastChar) - 'A' + 10;\n    }\n    return (lastDigit % 2 == 0) ? \"Even\" : \"Odd\";\n}", "unique_id": "MBCPP_387_8", "index": 3457}
{"task_id": "MBCPP/388", "completion": "    int res = 1;\n    while (res * 2 <= n) {\n        res *= 2;\n    }\n    return res;\n}", "unique_id": "MBCPP_388_2", "index": 3461}
{"task_id": "MBCPP/389", "completion": "    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    int a = 2, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_389_3", "index": 3472}
{"task_id": "MBCPP/391", "completion": "    vector<unordered_map<string, unordered_map<string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        unordered_map<string, unordered_map<string, int>> temp;\n        unordered_map<string, int> innerTemp;\n        innerTemp[l2[i]] = l3[i];\n        temp[l1[i]] = innerTemp;\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_391_6", "index": 3485}
{"task_id": "MBCPP/392", "completion": "    if (n <= 0)\n        return 0;\n    int sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n    return max(sum, n);\n}", "unique_id": "MBCPP_392_8", "index": 3497}
{"task_id": "MBCPP/394", "completion": "    unordered_set<int> seen;\n    for (int num : testTup) {\n        if (seen.find(num) != seen.end()) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_394_1", "index": 3500}
{"task_id": "MBCPP/396", "completion": "    regex pattern(\"^(.).*\\\\1$\");\n    if (regex_match(str, pattern)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}", "unique_id": "MBCPP_396_6", "index": 3515}
{"task_id": "MBCPP/397", "completion": "    if ((a >= b && a <= c) || (a <= b && a >= c))\n        return a;\n    else if ((b >= a && b <= c) || (b <= a && b >= c))\n        return b;\n    else\n        return c;\n}", "unique_id": "MBCPP_397_4", "index": 3523}
{"task_id": "MBCPP/398", "completion": "    int total = 0;\n    for (int num : nums) {\n        int n = abs(num);\n        while (n > 0) {\n            total += n % 10;\n            n /= 10;\n        }\n    }\n    return total;\n}", "unique_id": "MBCPP_398_8", "index": 3537}
{"task_id": "MBCPP/399", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] ^ testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_399_2", "index": 3541}
{"task_id": "MBCPP/400", "completion": "    unordered_set<string> uniqueTuples;\n    for (auto& tuple : testList) {\n        sort(tuple.begin(), tuple.end());\n        string tupleStr = to_string(tuple[0]) + \",\" + to_string(tuple[1]);\n        uniqueTuples.insert(tupleStr);\n    }\n    return uniqueTuples.size();\n}", "unique_id": "MBCPP_400_1", "index": 3550}
{"task_id": "MBCPP/401", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] + testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_401_6", "index": 3565}
{"task_id": "MBCPP/402", "completion": "    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    if (r > n - r)\n        r = n - r;\n    int dp[r + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = min(i, r); j > 0; j--) {\n            dp[j] = (dp[j] + dp[j - 1]) % p;\n        }\n    }\n    return dp[r];\n}", "unique_id": "MBCPP_402_6", "index": 3575}
{"task_id": "MBCPP/403", "completion": "    regex pattern(\"^(https?://)?(www\\\\.)?[a-zA-Z0-9]+\\\\.[a-zA-Z]{2,}(/\\\\S*)?$\");\n    return regex_match(str, pattern);\n}", "unique_id": "MBCPP_403_10", "index": 3589}
{"task_id": "MBCPP/404", "completion": "    return (a < b) ? a : b;\n}", "unique_id": "MBCPP_404_1", "index": 3590}
{"task_id": "MBCPP/406", "completion": "    if (x % 2 == 0)\n        return \"Even Parity\";\n    else\n        return \"Odd Parity\";\n}", "unique_id": "MBCPP_406_1", "index": 3600}
{"task_id": "MBCPP/408", "completion": "    vector<vector<int>> result;\n    if (nums1.empty() || nums2.empty() || k <= 0) return result;\n\n    auto cmp = [](const pair<int, pair<int, int>>& a, const pair<int, pair<int, int>>& b) {\n        return a.first > b.first;\n    };\n    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, decltype(cmp)> pq(cmp);\n\n    for (int i = 0; i < nums1.size(); ++i) {\n        pq.push({nums1[i] + nums2[0], {i, 0}});\n    }\n\n    while (k-- > 0 && !pq.empty()) {\n        auto top = pq.top();\n        pq.pop();\n        int i = top.second.first;\n        int j = top.second.second;\n        result.push_back({nums1[i], nums2[j]});\n\n        if (j + 1 < nums2.size()) {\n            pq.push({nums1[i] + nums2[j + 1], {i, j + 1}});\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_408_1", "index": 3610}
{"task_id": "MBCPP/409", "completion": "    int minProduct = INT_MAX;\n    for (const auto& pair : list1) {\n        int product = pair[0] * pair[1];\n        if (product < minProduct) {\n            minProduct = product;\n        }\n    }\n    return minProduct;\n}", "unique_id": "MBCPP_409_3", "index": 3622}
{"task_id": "MBCPP/411", "completion": "    string result;\n    bool capitalizeNext = true;\n    for (char ch : word) {\n        if (ch == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                result += toupper(ch);\n                capitalizeNext = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_411_1", "index": 3630}
{"task_id": "MBCPP/412", "completion": "    vector<int> result;\n    for (int num : l) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_412_1", "index": 3640}
{"task_id": "MBCPP/414", "completion": "    for (int i : list1) {\n        for (int j : list2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_414_2", "index": 3651}
{"task_id": "MBCPP/415", "completion": "    int n = arr.size();\n    if (n < 2)\n        return {};\n\n    sort(arr.begin(), arr.end());\n\n    long long product1 = arr[0] * arr[1];\n    long long product2 = arr[n-1] * arr[n-2];\n\n    if (product1 > product2)\n        return {arr[0], arr[1]};\n    else\n        return {arr[n-2], arr[n-1]};\n}", "unique_id": "MBCPP_415_3", "index": 3662}
{"task_id": "MBCPP/416", "completion": "    if (n == 0 || n == 1)\n        return n;\n    int maxSum = n;\n    for (int i = 1; i <= n / 2; i++) {\n        maxSum = max(maxSum, breaksum(i) + breaksum(n - i));\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_416_3", "index": 3672}
{"task_id": "MBCPP/417", "completion": "    unordered_map<string, vector<string>> groups;\n    for (const auto& tuple : input) {\n        if (!tuple.empty()) {\n            string first = tuple[0];\n            for (size_t i = 1; i < tuple.size(); ++i) {\n                groups[first].push_back(tuple[i]);\n            }\n        }\n    }\n    \n    vector<vector<string>> result;\n    for (const auto& [key, values] : groups) {\n        vector<string> group = {key};\n        group.insert(group.end(), values.begin(), values.end());\n        result.push_back(group);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_417_2", "index": 3681}
{"task_id": "MBCPP/419", "completion": "    int sum = 0;\n    for (double num : list1) {\n        sum += round(num);\n    }\n    return sum * list1.size();\n}", "unique_id": "MBCPP_419_2", "index": 3691}
{"task_id": "MBCPP/420", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int even = 2 * i;\n        sum += even * even * even;\n    }\n    return sum;\n}", "unique_id": "MBCPP_420_1", "index": 3700}
{"task_id": "MBCPP/423", "completion": "    vector<vector<int>> dp(m, vector<int>(n, 0));\n    for (int col = n - 1; col >= 0; col--) {\n        for (int row = 0; row < m; row++) {\n            int right = (col == n - 1) ? 0 : dp[row][col + 1];\n            int right_up = (row == 0 || col == n - 1) ? 0 : dp[row - 1][col + 1];\n            int right_down = (row == m - 1 || col == n - 1) ? 0 : dp[row + 1][col + 1];\n            dp[row][col] = gold[row][col] + max(right, max(right_up, right_down));\n        }\n    }\n    int max_gold = dp[0][0];\n    for (int i = 1; i < m; i++) {\n        max_gold = max(max_gold, dp[i][0]);\n    }\n    return max_gold;\n}", "unique_id": "MBCPP_423_4", "index": 3713}
{"task_id": "MBCPP/424", "completion": "    vector<string> result;\n    for (const auto& s : testTuple) {\n        if (!s.empty()) {\n            result.push_back(string(1, s.back()));\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_424_2", "index": 3721}
{"task_id": "MBCPP/426", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int num) { return num % 2 != 0; });\n    return result;\n}", "unique_id": "MBCPP_426_1", "index": 3730}
{"task_id": "MBCPP/427", "completion": "    regex pattern(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch match;\n    if (regex_match(dt, match, pattern)) {\n        return match[3].str() + \"-\" + match[2].str() + \"-\" + match[1].str();\n    }\n    return dt;\n}", "unique_id": "MBCPP_427_5", "index": 3744}
{"task_id": "MBCPP/428", "completion": "    int n = myList.size();\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int temp = myList[i];\n            int j;\n            for (j = i; j >= gap && myList[j - gap] > temp; j -= gap) {\n                myList[j] = myList[j - gap];\n            }\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}", "unique_id": "MBCPP_428_5", "index": 3754}
{"task_id": "MBCPP/429", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] & testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_429_3", "index": 3762}
{"task_id": "MBCPP/430", "completion": "    return -((b * b) + (4 * a * c));\n}", "unique_id": "MBCPP_430_3", "index": 3772}
{"task_id": "MBCPP/433", "completion": "    int maxElement = *max_element(arr.begin(), arr.end());\n    if (number > maxElement) {\n        return \"Yes, the entered number is greater than those in the array\";\n    } else {\n        return \"No, entered number is less than those in the array\";\n    }\n}", "unique_id": "MBCPP_433_1", "index": 3780}
{"task_id": "MBCPP/434", "completion": "    regex pattern(\"ab+\");\n    if (regex_search(text, pattern))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}", "unique_id": "MBCPP_434_1", "index": 3790}
{"task_id": "MBCPP/435", "completion": "    return abs(n) % 10;\n}", "unique_id": "MBCPP_435_6", "index": 3805}
{"task_id": "MBCPP/436", "completion": "    vector<int> result;\n    for (int num : list1) {\n        if (num < 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_436_2", "index": 3811}
{"task_id": "MBCPP/437", "completion": "    string result;\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (i % 2 != 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_437_1", "index": 3820}
{"task_id": "MBCPP/438", "completion": "    unordered_map<string, int> freq;\n    int count = 0;\n    \n    for (auto& pair : testList) {\n        string key = to_string(pair[0]) + \",\" + to_string(pair[1]);\n        string reverseKey = to_string(pair[1]) + \",\" + to_string(pair[0]);\n        \n        if (freq.find(reverseKey) != freq.end()) {\n            count++;\n            freq.erase(reverseKey);\n        } else {\n            freq[key]++;\n        }\n    }\n    \n    return to_string(count);\n}", "unique_id": "MBCPP_438_1", "index": 3830}
{"task_id": "MBCPP/439", "completion": "    int result = 0;\n    for (int num : l) {\n        string s = to_string(num);\n        for (char c : s) {\n            result = result * 10 + (c - '0');\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_439_8", "index": 3847}
{"task_id": "MBCPP/441", "completion": "    return 6 * l * l;\n}", "unique_id": "MBCPP_441_5", "index": 3854}
{"task_id": "MBCPP/442", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "unique_id": "MBCPP_442_2", "index": 3861}
{"task_id": "MBCPP/443", "completion": "    int largest = 0;\n    for (int num : list1) {\n        if (num < 0) {\n            if (largest == 0 || num > largest) {\n                largest = num;\n            }\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_443_2", "index": 3871}
{"task_id": "MBCPP/444", "completion": "    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = k; j < testList[i].size() - k; ++j) {\n            result += to_string(testList[i][j]);\n            if (j < testList[i].size() - k - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i < testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_444_2", "index": 3881}
{"task_id": "MBCPP/445", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] * testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_445_4", "index": 3893}
{"task_id": "MBCPP/447", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [](int n) { return n * n * n; });\n    return nums;\n}", "unique_id": "MBCPP_447_1", "index": 3900}
{"task_id": "MBCPP/448", "completion": "    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    \n    int p0 = 3, p1 = 0, p2 = 2;\n    int sum = p0 + p1 + p2;\n    \n    for (int i = 3; i < n; i++) {\n        int current = p1 + p2;\n        sum += current;\n        p1 = p2;\n        p2 = current;\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_448_1", "index": 3910}
{"task_id": "MBCPP/449", "completion": "    double area = abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2.0);\n    if (area == 0)\n        return \"No\";\n    return \"Yes\";\n}", "unique_id": "MBCPP_449_8", "index": 3927}
{"task_id": "MBCPP/450", "completion": "    vector<string> result;\n    for (const auto& s : str) {\n        if (s.length() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_450_2", "index": 3931}
{"task_id": "MBCPP/451", "completion": "    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \"\");\n}", "unique_id": "MBCPP_451_1", "index": 3940}
{"task_id": "MBCPP/453", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0 && i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_453_1", "index": 3950}
{"task_id": "MBCPP/454", "completion": "    regex pattern(\"\\\\b\\\\w*z\\\\w*\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_454_1", "index": 3960}
{"task_id": "MBCPP/455", "completion": "    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_455_10", "index": 3979}
{"task_id": "MBCPP/456", "completion": "    for (auto& str : stringlist) {\n        reverse(str.begin(), str.end());\n    }\n    return stringlist;\n}", "unique_id": "MBCPP_456_5", "index": 3984}
{"task_id": "MBCPP/458", "completion": "    return l * b;\n}", "unique_id": "MBCPP_458_3", "index": 3992}
{"task_id": "MBCPP/459", "completion": "    regex pattern(\"[A-Z]\");\n    return regex_replace(str1, pattern, \"\");\n}", "unique_id": "MBCPP_459_8", "index": 4007}
{"task_id": "MBCPP/460", "completion": "    vector<int> result;\n    for (const auto& sublist : lst) {\n        if (!sublist.empty()) {\n            result.push_back(sublist[0]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_460_1", "index": 4010}
{"task_id": "MBCPP/461", "completion": "    int count = 0;\n    for (char c : str) {\n        if (isupper(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_461_3", "index": 4022}
{"task_id": "MBCPP/463", "completion": "    int max_ending_here = arr[0];\n    int min_ending_here = arr[0];\n    int max_so_far = arr[0];\n    \n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0)\n            swap(max_ending_here, min_ending_here);\n            \n        max_ending_here = max(arr[i], max_ending_here * arr[i]);\n        min_ending_here = min(arr[i], min_ending_here * arr[i]);\n        \n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    \n    return max_so_far;\n}", "unique_id": "MBCPP_463_9", "index": 4038}
{"task_id": "MBCPP/464", "completion": "    for (const auto& pair : dict) {\n        if (pair.second != n) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_464_2", "index": 4041}
{"task_id": "MBCPP/466", "completion": "    int low = 0, high = n - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] > arr[mid + 1])\n            high = mid;\n        else\n            low = mid + 1;\n    }\n    return low;\n}", "unique_id": "MBCPP_466_1", "index": 4050}
{"task_id": "MBCPP/467", "completion": "    int octalnum = 0, i = 1;\n    while (decinum != 0) {\n        octalnum += (decinum % 8) * i;\n        decinum /= 8;\n        i *= 10;\n    }\n    return octalnum;\n}", "unique_id": "MBCPP_467_7", "index": 4066}
{"task_id": "MBCPP/468", "completion": "    vector<int> dp(n);\n    for (int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_468_1", "index": 4070}
{"task_id": "MBCPP/469", "completion": "    int n = price.size();\n    if (n == 0 || k == 0) return 0;\n\n    vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n\n    for (int i = 1; i <= k; i++) {\n        int maxDiff = -price[0];\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i][j - 1], price[j] + maxDiff);\n            maxDiff = max(maxDiff, dp[i - 1][j] - price[j]);\n        }\n    }\n\n    return dp[k][n - 1];\n}", "unique_id": "MBCPP_469_2", "index": 4081}
{"task_id": "MBCPP/470", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_470_2", "index": 4091}
{"task_id": "MBCPP/471", "completion": "    int result = 1;\n    for (int i = 0; i < lens; i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}", "unique_id": "MBCPP_471_6", "index": 4105}
{"task_id": "MBCPP/472", "completion": "    if (l.empty())\n        return false;\n        \n    int min_val = *min_element(l.begin(), l.end());\n    int max_val = *max_element(l.begin(), l.end());\n    \n    if (max_val - min_val + 1 != l.size())\n        return false;\n        \n    unordered_set<int> s(l.begin(), l.end());\n    \n    if (s.size() != l.size())\n        return false;\n        \n    return true;\n}", "unique_id": "MBCPP_472_9", "index": 4118}
{"task_id": "MBCPP/474", "completion": "    size_t pos = str1.find(ch);\n    while (pos != string::npos) {\n        str1.replace(pos, ch.length(), newch);\n        pos = str1.find(ch, pos + newch.length());\n    }\n    return str1;\n}", "unique_id": "MBCPP_474_4", "index": 4123}
{"task_id": "MBCPP/476", "completion": "    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return min_val + max_val;\n}", "unique_id": "MBCPP_476_2", "index": 4131}
{"task_id": "MBCPP/477", "completion": "    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    return str;\n}", "unique_id": "MBCPP_477_7", "index": 4146}
{"task_id": "MBCPP/478", "completion": "    string result;\n    for (char c : str1) {\n        if (!islower(c)) {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_478_1", "index": 4150}
{"task_id": "MBCPP/479", "completion": "    while (n >= 10) {\n        n = n / 10;\n    }\n    return n;\n}", "unique_id": "MBCPP_479_2", "index": 4161}
{"task_id": "MBCPP/480", "completion": "    int count[256] = {0};\n    int len = str1.length();\n    for (int i = 0; i < len; i++)\n        count[str1[i]]++;\n\n    int max = -1;\n    char result;\n    for (int i = 0; i < len; i++) {\n        if (max < count[str1[i]]) {\n            max = count[str1[i]];\n            result = str1[i];\n        }\n    }\n\n    return string(1, result);\n}", "unique_id": "MBCPP_480_2", "index": 4171}
{"task_id": "MBCPP/481", "completion": "    bool dp[n + 1][sum + 1];\n    for (int i = 0; i <= n; i++)\n        dp[i][0] = true;\n    for (int i = 1; i <= sum; i++)\n        dp[0][i] = false;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= sum; j++) {\n            if (j < set[i - 1])\n                dp[i][j] = dp[i - 1][j];\n            else\n                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i - 1]];\n        }\n    }\n    return dp[n][sum];\n}", "unique_id": "MBCPP_481_10", "index": 4189}
{"task_id": "MBCPP/482", "completion": "    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern))\n        return \"Yes\";\n    else\n        return \"No\";\n}", "unique_id": "MBCPP_482_8", "index": 4197}
{"task_id": "MBCPP/483", "completion": "    int factorial = 1;\n    int n = 1;\n    while (true) {\n        factorial *= n;\n        if (factorial % x == 0) {\n            return n;\n        }\n        n++;\n    }\n}", "unique_id": "MBCPP_483_2", "index": 4201}
{"task_id": "MBCPP/484", "completion": "    vector<vector<string>> result;\n    for (const auto& tuple1 : testList1) {\n        bool found = false;\n        for (const auto& tuple2 : testList2) {\n            if (tuple1 == tuple2) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push_back(tuple1);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_484_4", "index": 4213}
{"task_id": "MBCPP/485", "completion": "    int largest = -1;\n    for(int i = 0; i < n; i++) {\n        string num = to_string(a[i]);\n        string reversed_num = num;\n        reverse(reversed_num.begin(), reversed_num.end());\n        if(num == reversed_num && a[i] > largest) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_485_7", "index": 4226}
{"task_id": "MBCPP/486", "completion": "    if (k < 0 || k > n || p < 0 || p > 1)\n        return 0.0;\n    \n    double log_numerator = lgamma(n + 1) - lgamma(k + 1) - lgamma(n - k + 1);\n    double log_denominator = k * log(p) + (n - k) * log(1 - p);\n    \n    return exp(log_numerator + log_denominator);\n}", "unique_id": "MBCPP_486_4", "index": 4233}
{"task_id": "MBCPP/487", "completion": "    sort(tup.begin(), tup.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tup;\n}", "unique_id": "MBCPP_487_1", "index": 4240}
{"task_id": "MBCPP/488", "completion": "    return (sqrt(5 * (5 + 2 * sqrt(5))) * a * a) / 4.0;\n}", "unique_id": "MBCPP_488_1", "index": 4250}
{"task_id": "MBCPP/489", "completion": "    if (n == 0) return 0;\n    int max_val = *max_element(arr.begin(), arr.end());\n    int count = 0;\n    for (int num : arr) {\n        if (num == max_val) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_489_2", "index": 4261}
{"task_id": "MBCPP/491", "completion": "    if (r == 1)\n        return a * n;\n    return a * (pow(r, n) - 1) / (r - 1);\n}", "unique_id": "MBCPP_491_4", "index": 4273}
{"task_id": "MBCPP/492", "completion": "    int left = 0;\n    int right = itemList.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (itemList[mid] == item)\n            return true;\n        else if (itemList[mid] < item)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return false;\n}", "unique_id": "MBCPP_492_2", "index": 4281}
{"task_id": "MBCPP/493", "completion": "    vector<vector<vector<double>>> polygons;\n    double height = radius * sqrt(3);\n    \n    for (int x = startx; x <= endx; x++) {\n        for (int y = starty; y <= endy; y++) {\n            double centerX = x * 1.5 * radius;\n            double centerY = y * height + (x % 2) * (height / 2);\n            \n            vector<vector<double>> hexagon = {\n                {centerX - radius, centerY},\n                {centerX - radius / 2, centerY + height / 2},\n                {centerX + radius / 2, centerY + height / 2},\n                {centerX + radius, centerY},\n                {centerX + radius / 2, centerY - height / 2},\n                {centerX - radius / 2, centerY - height / 2},\n                {centerX - radius, centerY}\n            };\n            \n            polygons.push_back(hexagon);\n        }\n    }\n    \n    return polygons;\n}", "unique_id": "MBCPP_493_4", "index": 4293}
{"task_id": "MBCPP/494", "completion": "    int result = 0;\n    for (int i = 0; i < testTup.size(); ++i) {\n        result += testTup[i] * pow(2, testTup.size() - i - 1);\n    }\n    return to_string(result);\n}", "unique_id": "MBCPP_494_2", "index": 4301}
{"task_id": "MBCPP/495", "completion": "    string result;\n    for (char ch : str1) {\n        if (!islower(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_495_6", "index": 4315}
{"task_id": "MBCPP/496", "completion": "    priority_queue<int> maxHeap;\n    for (int num : nums) {\n        maxHeap.push(num);\n        if (maxHeap.size() > n) {\n            maxHeap.pop();\n        }\n    }\n    vector<int> result;\n    while (!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_496_1", "index": 4320}
{"task_id": "MBCPP/497", "completion": "    double l = sqrt(r * r + h * h);\n    return M_PI * r * (r + l);\n}", "unique_id": "MBCPP_497_3", "index": 4332}
{"task_id": "MBCPP/498", "completion": "    while (y != 0) {\n        int temp = y;\n        y = x % y;\n        x = temp;\n    }\n    return x;\n}", "unique_id": "MBCPP_498_3", "index": 4342}
{"task_id": "MBCPP/499", "completion": "    return 2 * r;\n}", "unique_id": "MBCPP_499_6", "index": 4355}
{"task_id": "MBCPP/500", "completion": "    string result = \"  \";\n    for (const auto& s : list) {\n        result += s + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the last space\n    }\n    return result;\n}", "unique_id": "MBCPP_500_1", "index": 4360}
{"task_id": "MBCPP/501", "completion": "    int gcd = __gcd(x, y);\n    int count = 0;\n    for (int i = 1; i <= sqrt(gcd); i++) {\n        if (gcd % i == 0) {\n            if (gcd / i == i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_501_7", "index": 4376}
{"task_id": "MBCPP/502", "completion": "    return n % m;\n}", "unique_id": "MBCPP_502_1", "index": 4380}
{"task_id": "MBCPP/503", "completion": "    vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_503_3", "index": 4392}
{"task_id": "MBCPP/504", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_504_1", "index": 4400}
{"task_id": "MBCPP/505", "completion": "    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != 0) {\n            a[count++] = a[i];\n        }\n    }\n    while (count < a.size()) {\n        a[count++] = 0;\n    }\n    return a;\n}", "unique_id": "MBCPP_505_1", "index": 4410}
{"task_id": "MBCPP/506", "completion": "    int result = 1;\n    for (int i = 0; i < k; i++) {\n        result *= (n - i);\n    }\n    return result;\n}", "unique_id": "MBCPP_506_3", "index": 4422}
{"task_id": "MBCPP/507", "completion": "    vector<string> result;\n    unordered_set<string> removeSet(removewords.begin(), removewords.end());\n    \n    for (const string& word : list1) {\n        if (removeSet.find(word) == removeSet.end()) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_507_4", "index": 4433}
{"task_id": "MBCPP/508", "completion": "    vector<string> common1, common2;\n    for (const auto& s : l1) {\n        if (find(l2.begin(), l2.end(), s) != l2.end()) {\n            common1.push_back(s);\n        }\n    }\n    for (const auto& s : l2) {\n        if (find(l1.begin(), l1.end(), s) != l1.end()) {\n            common2.push_back(s);\n        }\n    }\n    return common1 == common2;\n}", "unique_id": "MBCPP_508_1", "index": 4440}
{"task_id": "MBCPP/509", "completion": "    int sum = 0, count = 0;\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "unique_id": "MBCPP_509_3", "index": 4452}
{"task_id": "MBCPP/510", "completion": "    int n = arr.size();\n    int count = 0;\n    for (int i = 1; i < (1 << n); i++) {\n        long long product = 1;\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                product *= arr[j];\n                if (product >= k) {\n                    break;\n                }\n            }\n        }\n        if (product < k) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_510_1", "index": 4460}
{"task_id": "MBCPP/511", "completion": "    if (num == 1)\n        return 1;\n    \n    int sum = num + 1;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            sum = min(sum, i + num / i);\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_511_1", "index": 4470}
{"task_id": "MBCPP/514", "completion": "    int sum = 0;\n    for (int num : testTup) {\n        sum += num;\n    }\n    return sum;\n}", "unique_id": "MBCPP_514_3", "index": 4482}
{"task_id": "MBCPP/515", "completion": "    if (n > m)\n        return true;\n\n    vector<bool> dp(m, false);\n    for (int i = 0; i < n; i++) {\n        if (dp[0])\n            return true;\n\n        vector<bool> temp(m, false);\n        for (int j = 0; j < m; j++) {\n            if (dp[j]) {\n                if (!dp[(j + arr[i]) % m])\n                    temp[(j + arr[i]) % m] = true;\n            }\n        }\n\n        for (int j = 0; j < m; j++) {\n            if (temp[j])\n                dp[j] = true;\n        }\n\n        dp[arr[i] % m] = true;\n    }\n\n    return dp[0];\n}", "unique_id": "MBCPP_515_4", "index": 4493}
{"task_id": "MBCPP/516", "completion": "    int max_num = *max_element(nums.begin(), nums.end());\n    for (int exp = 1; max_num / exp > 0; exp *= 10) {\n        vector<int> output(nums.size());\n        vector<int> count(10, 0);\n        \n        for (int i = 0; i < nums.size(); i++)\n            count[(nums[i] / exp) % 10]++;\n        \n        for (int i = 1; i < 10; i++)\n            count[i] += count[i - 1];\n        \n        for (int i = nums.size() - 1; i >= 0; i--) {\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\n            count[(nums[i] / exp) % 10]--;\n        }\n        \n        for (int i = 0; i < nums.size(); i++)\n            nums[i] = output[i];\n    }\n    return nums;\n}", "unique_id": "MBCPP_516_3", "index": 4502}
{"task_id": "MBCPP/517", "completion": "    int largest = -1;\n    for(int num : list1) {\n        if(num > largest && num > 0) {\n            largest = num;\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_517_1", "index": 4510}
{"task_id": "MBCPP/518", "completion": "    int low = 0, high = num, result = 0;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid * mid == num) {\n            return mid;\n        } else if (mid * mid < num) {\n            low = mid + 1;\n            result = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_518_8", "index": 4527}
{"task_id": "MBCPP/519", "completion": "    double a = static_cast<double>(num);\n    return (a * a * a) / (6 * sqrt(2));\n}", "unique_id": "MBCPP_519_8", "index": 4537}
{"task_id": "MBCPP/520", "completion": "    if (l.empty()) return 0;\n    int res = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        res = (res * l[i]) / __gcd(res, l[i]);\n    }\n    return res;\n}", "unique_id": "MBCPP_520_3", "index": 4542}
{"task_id": "MBCPP/521", "completion": "    if (x == y || y == z || x == z)\n        return false;\n    else\n        return true;\n}", "unique_id": "MBCPP_521_2", "index": 4551}
{"task_id": "MBCPP/522", "completion": "    int n = arr.size();\n    if (n == 0) return 0;\n    \n    vector<int> lis(n, 1);\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1)\n                lis[i] = lis[j] + 1;\n        }\n    }\n    \n    vector<int> lds(n, 1);\n    for (int i = n-2; i >= 0; i--) {\n        for (int j = n-1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + 1)\n                lds[i] = lds[j] + 1;\n        }\n    }\n    \n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        max_len = max(max_len, lis[i] + lds[i] - 1);\n    }\n    \n    return max_len;\n}", "unique_id": "MBCPP_522_3", "index": 4562}
{"task_id": "MBCPP/523", "completion": "    vector<string> result;\n    bool hasUpper = false, hasLower = false, hasNumber = false, hasLength = false;\n\n    auto checkChar = [&](char c) {\n        if (isupper(c)) hasUpper = true;\n        if (islower(c)) hasLower = true;\n        if (isdigit(c)) hasNumber = true;\n    };\n\n    for (char c : str1) {\n        checkChar(c);\n    }\n\n    if (str1.length() >= 8) hasLength = true;\n\n    if (!hasUpper) result.push_back(\"String must have 1 upper case character.\");\n    if (!hasLower) result.push_back(\"String must have 1 lower case character.\");\n    if (!hasNumber) result.push_back(\"String must have 1 number.\");\n    if (!hasLength) result.push_back(\"String length should be atleast 8.\");\n\n    if (result.empty()) result.push_back(\"Valid string.\");\n\n    return result;\n}", "unique_id": "MBCPP_523_1", "index": 4570}
{"task_id": "MBCPP/524", "completion": "    vector<int> dp(n);\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    \n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    \n    int maxSum = *max_element(dp.begin(), dp.end());\n    return maxSum;\n}", "unique_id": "MBCPP_524_2", "index": 4581}
{"task_id": "MBCPP/525", "completion": "    if (line1.size() == 2) {\n        // Lines in the form y = mx + c\n        return line1[0] == line2[0];\n    } else if (line1.size() == 3) {\n        // Lines in the form ax + by + c = 0\n        return (line1[0] * line2[1]) == (line1[1] * line2[0]);\n    }\n    return false;\n}", "unique_id": "MBCPP_525_6", "index": 4595}
{"task_id": "MBCPP/526", "completion": "    if (str1.empty()) return str1;\n    \n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (i == 0 || (i > 0 && str1[i-1] == ' ')) {\n            str1[i] = toupper(str1[i]);\n        }\n        if (i == str1.length() - 1 || (i < str1.length() - 1 && str1[i+1] == ' ')) {\n            str1[i] = toupper(str1[i]);\n        }\n    }\n    \n    return str1;\n}", "unique_id": "MBCPP_526_8", "index": 4607}
{"task_id": "MBCPP/527", "completion": "    unordered_map<int, int> freq;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.find(complement) != freq.end()) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    return count;\n}", "unique_id": "MBCPP_527_5", "index": 4614}
{"task_id": "MBCPP/529", "completion": "    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    return jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}", "unique_id": "MBCPP_529_2", "index": 4621}
{"task_id": "MBCPP/530", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "unique_id": "MBCPP_530_5", "index": 4634}
{"task_id": "MBCPP/531", "completion": "    vector<int> dp(v + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 1; i <= v; i++) {\n        for (int j = 0; j < m; j++) {\n            if (coins[j] <= i && dp[i - coins[j]] != INT_MAX) {\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1);\n            }\n        }\n    }\n\n    return (dp[v] == INT_MAX) ? -1 : dp[v];\n}", "unique_id": "MBCPP_531_1", "index": 4640}
{"task_id": "MBCPP/532", "completion": "    if (str1.length() != str2.length())\n        return false;\n        \n    sort(str1.begin(), str1.end());\n    sort(str2.begin(), str2.end());\n    \n    return str1 == str2;\n}", "unique_id": "MBCPP_532_3", "index": 4652}
{"task_id": "MBCPP/534", "completion": "    size_t pos = text.find(pattern);\n    if (pos == string::npos)\n        return {-1, -1};\n    return {static_cast<int>(pos), static_cast<int>(pos + pattern.length())};\n}", "unique_id": "MBCPP_534_2", "index": 4661}
{"task_id": "MBCPP/535", "completion": "    const double pi = 3.14159;\n    return pi * r * r;\n}", "unique_id": "MBCPP_535_7", "index": 4676}
{"task_id": "MBCPP/536", "completion": "    vector<int> result;\n    for (size_t i = 0; i < list.size(); i += n) {\n        result.push_back(list[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_536_6", "index": 4685}
{"task_id": "MBCPP/537", "completion": "    unordered_set<string> seen;\n    string word;\n    stringstream ss(str1);\n    while (ss >> word) {\n        if (seen.find(word) != seen.end()) {\n            return word;\n        }\n        seen.insert(word);\n    }\n    return \"None\";\n}", "unique_id": "MBCPP_537_4", "index": 4693}
{"task_id": "MBCPP/538", "completion": "    vector<string> result;\n    for (char ch : str1) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "unique_id": "MBCPP_538_3", "index": 4702}
{"task_id": "MBCPP/540", "completion": "    unordered_map<int, int> freq;\n    for (int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    int maxFreq = INT_MIN, minFreq = INT_MAX;\n    for (auto it : freq) {\n        if (it.second > maxFreq) {\n            maxFreq = it.second;\n        }\n        if (it.second < minFreq) {\n            minFreq = it.second;\n        }\n    }\n    return maxFreq - minFreq;\n}", "unique_id": "MBCPP_540_3", "index": 4712}
{"task_id": "MBCPP/541", "completion": "    if (n < 1)\n        return false;\n    \n    int sum = 0;\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (i == n / i)\n                sum += i;\n            else\n                sum += i + n / i;\n        }\n    }\n    sum -= n; // Subtract the number itself to get the sum of proper divisors\n    \n    return sum > n;\n}", "unique_id": "MBCPP_541_3", "index": 4722}
{"task_id": "MBCPP/542", "completion": "    regex pattern(\"[ ,.]\");\n    return regex_replace(text, pattern, \":\");\n}", "unique_id": "MBCPP_542_10", "index": 4739}
{"task_id": "MBCPP/543", "completion": "    int sum = num1 + num2;\n    if (sum == 0)\n        return 1;\n    int count = 0;\n    while (sum != 0) {\n        sum = sum / 10;\n        count++;\n    }\n    return count;\n}", "unique_id": "MBCPP_543_6", "index": 4745}
{"task_id": "MBCPP/544", "completion": "    string result;\n    for (const auto& vec : testList) {\n        for (const auto& str : vec) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += str;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_544_5", "index": 4754}
{"task_id": "MBCPP/545", "completion": "    int lastBit = n & 1;\n    int firstBit = n & (1 << (sizeof(int) * 8 - 1));\n    n ^= 1;\n    n ^= (1 << (sizeof(int) * 8 - 1));\n    return n;\n}", "unique_id": "MBCPP_545_6", "index": 4765}
{"task_id": "MBCPP/547", "completion": "    int total = 0;\n    for (int i = 0; i < n; ++i) {\n        int x = i;\n        int y = i + 1;\n        int xor_result = x ^ y;\n        while (xor_result) {\n            total += xor_result & 1;\n            xor_result >>= 1;\n        }\n    }\n    return total;\n}", "unique_id": "MBCPP_547_10", "index": 4779}
{"task_id": "MBCPP/548", "completion": "    if (arr.empty()) return 0;\n    vector<int> dp(arr.size(), 1);\n    for (int i = 1; i < arr.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_548_2", "index": 4781}
{"task_id": "MBCPP/549", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int oddNum = 2 * i - 1;\n        sum += pow(oddNum, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_549_4", "index": 4793}
{"task_id": "MBCPP/550", "completion": "    if (low == high)\n        return arr[low];\n    int mid = low + (high - low) / 2;\n    if (mid < high && arr[mid] > arr[mid + 1])\n        return arr[mid];\n    if (mid > low && arr[mid] < arr[mid - 1])\n        return arr[mid - 1];\n    if (arr[low] > arr[mid])\n        return findMax(arr, low, mid - 1);\n    else\n        return findMax(arr, mid + 1, high);\n}", "unique_id": "MBCPP_550_5", "index": 4804}
{"task_id": "MBCPP/551", "completion": "    vector<int> result;\n    for (const auto& row : list1) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_551_9", "index": 4818}
{"task_id": "MBCPP/552", "completion": "    if (seqNums.size() < 2)\n        return \"Linear Sequence\";\n    \n    int diff = seqNums[1] - seqNums[0];\n    \n    for (int i = 1; i < seqNums.size(); ++i) {\n        if (seqNums[i] - seqNums[i - 1] != diff)\n            return \"Non Linear Sequence\";\n    }\n    \n    return \"Linear Sequence\";\n}", "unique_id": "MBCPP_552_7", "index": 4826}
{"task_id": "MBCPP/553", "completion": "    int whole = testTup[0];\n    int decimal = testTup[1];\n    int length = to_string(decimal).length();\n    double result = whole + (decimal / pow(10, length));\n    return result;\n}", "unique_id": "MBCPP_553_1", "index": 4830}
{"task_id": "MBCPP/554", "completion": "    vector<int> result;\n    for (int num : list) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_554_6", "index": 4845}
{"task_id": "MBCPP/555", "completion": "    int sum = n * (n + 1) / 2;\n    int sumOfCubes = (n * (n + 1) / 2) * (n * (n + 1) / 2);\n    return sumOfCubes - sum;\n}", "unique_id": "MBCPP_555_10", "index": 4859}
{"task_id": "MBCPP/556", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_556_1", "index": 4860}
{"task_id": "MBCPP/557", "completion": "    for (char &c : str) {\n        if (isupper(c))\n            c = tolower(c);\n        else if (islower(c))\n            c = toupper(c);\n    }\n    return str;\n}", "unique_id": "MBCPP_557_4", "index": 4873}
{"task_id": "MBCPP/558", "completion": "    string s1 = to_string(n1);\n    string s2 = to_string(n2);\n    int distance = 0;\n    for (int i = 0; i < s1.length(); i++) {\n        distance += abs((s1[i] - '0') - (s2[i] - '0'));\n    }\n    return distance;\n}", "unique_id": "MBCPP_558_7", "index": 4886}
{"task_id": "MBCPP/559", "completion": "    int max_so_far = INT_MIN, max_ending_here = 0;\n\n    for (int i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}", "unique_id": "MBCPP_559_3", "index": 4892}
{"task_id": "MBCPP/560", "completion": "    set<int> s(testTup1.begin(), testTup1.end());\n    s.insert(testTup2.begin(), testTup2.end());\n    vector<int> result(s.begin(), s.end());\n    return result;\n}", "unique_id": "MBCPP_560_2", "index": 4901}
{"task_id": "MBCPP/562", "completion": "    int max_len = 0;\n    for (const auto& sublist : lst) {\n        if (sublist.size() > max_len) {\n            max_len = sublist.size();\n        }\n    }\n    return max_len;\n}", "unique_id": "MBCPP_562_5", "index": 4914}
{"task_id": "MBCPP/563", "completion": "    vector<string> result;\n    int n = text.length();\n    int i = 0;\n    while (i < n) {\n        if (text[i] == '\\\"') {\n            i++;\n            string temp;\n            while (i < n && text[i] != '\\\"') {\n                temp += text[i];\n                i++;\n            }\n            if (!temp.empty()) {\n                result.push_back(temp);\n            }\n        }\n        i++;\n    }\n    return result;\n}", "unique_id": "MBCPP_563_4", "index": 4923}
{"task_id": "MBCPP/564", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] != arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_564_8", "index": 4937}
{"task_id": "MBCPP/565", "completion": "    vector<string> result;\n    for (char ch : word) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "unique_id": "MBCPP_565_2", "index": 4941}
{"task_id": "MBCPP/566", "completion": "    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "unique_id": "MBCPP_566_7", "index": 4956}
{"task_id": "MBCPP/567", "completion": "    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i] < list1[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_567_8", "index": 4967}
{"task_id": "MBCPP/569", "completion": "    for (auto& sublist : list1) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return list1;\n}", "unique_id": "MBCPP_569_2", "index": 4971}
{"task_id": "MBCPP/570", "completion": "    vector<string> result;\n    for (const auto& str : list1) {\n        string temp = str;\n        for (const auto& ch : charlist) {\n            size_t pos = temp.find(ch);\n            while (pos != string::npos) {\n                temp.erase(pos, ch.length());\n                pos = temp.find(ch, pos);\n            }\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_570_1", "index": 4980}
{"task_id": "MBCPP/571", "completion": "    sort(arr.begin(), arr.end(), greater<int>());\n    int sum = 0;\n    vector<bool> visited(n, false);\n    \n    for (int i = 0; i < n - 1; i++) {\n        if (visited[i]) continue;\n        for (int j = i + 1; j < n; j++) {\n            if (!visited[j] && (arr[i] - arr[j]) < k) {\n                sum += arr[i] + arr[j];\n                visited[i] = true;\n                visited[j] = true;\n                break;\n            }\n        }\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_571_3", "index": 4992}
{"task_id": "MBCPP/572", "completion": "    unordered_map<int, int> count;\n    for (int num : nums) {\n        count[num]++;\n    }\n    vector<int> result;\n    for (int num : nums) {\n        if (count[num] != 2) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_572_1", "index": 5000}
{"task_id": "MBCPP/573", "completion": "    unordered_set<int> uniqueNumbers;\n    int product = 1;\n    for (int num : listData) {\n        if (uniqueNumbers.find(num) == uniqueNumbers.end()) {\n            uniqueNumbers.insert(num);\n            product *= num;\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_573_3", "index": 5012}
{"task_id": "MBCPP/574", "completion": "    const double pi = 3.14159;\n    double area = 2 * pi * r * h + 2 * pi * r * r;\n    return area;\n}", "unique_id": "MBCPP_574_9", "index": 5028}
{"task_id": "MBCPP/575", "completion": "    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % a != 0) {\n            count++;\n            if (count == n)\n                return i;\n        }\n    }\n    return -1; // If nth number not found in the range\n}", "unique_id": "MBCPP_575_9", "index": 5038}
{"task_id": "MBCPP/576", "completion": "    if (m == 0) return true;\n    if (n == 0) return false;\n\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (a[i + j] != b[j])\n                break;\n        }\n        if (j == m)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_576_6", "index": 5045}
{"task_id": "MBCPP/577", "completion": "    if (n >= 5)\n        return 0;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result = (result * i) % 10;\n    }\n    return result;\n}", "unique_id": "MBCPP_577_1", "index": 5050}
{"task_id": "MBCPP/578", "completion": "    vector<int> result;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        result.push_back(list1[i]);\n        result.push_back(list2[i]);\n        result.push_back(list3[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_578_2", "index": 5061}
{"task_id": "MBCPP/579", "completion": "    unordered_set<int> set1(testTup1.begin(), testTup1.end());\n    unordered_set<int> set2(testTup2.begin(), testTup2.end());\n    vector<int> result;\n    \n    for (int num : set1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n    \n    for (int num : set2) {\n        if (set1.find(num) == set1.end()) {\n            result.push_back(num);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_579_7", "index": 5076}
{"task_id": "MBCPP/581", "completion": "    int baseArea = b * b;\n    int lateralArea = 2 * b * s;\n    return baseArea + lateralArea;\n}", "unique_id": "MBCPP_581_2", "index": 5081}
{"task_id": "MBCPP/582", "completion": "    return dict1.empty();\n}", "unique_id": "MBCPP_582_1", "index": 5090}
{"task_id": "MBCPP/583", "completion": "    if (num <= 1)\n        return 1;\n\n    unsigned long int res = 0;\n    for (int i = 0; i < num; i++)\n        res += catalanNumber(i) * catalanNumber(num - i - 1);\n\n    return res;\n}", "unique_id": "MBCPP_583_1", "index": 5100}
{"task_id": "MBCPP/584", "completion": "    regex adverbPattern(\"\\\\b\\\\w+ly\\\\b\");\n    smatch match;\n    if (regex_search(text, match, adverbPattern)) {\n        int start = match.position();\n        int end = start + match.length() - 1;\n        return to_string(start) + \"-\" + to_string(end) + \": \" + match.str();\n    }\n    return \"\";\n}", "unique_id": "MBCPP_584_2", "index": 5111}
{"task_id": "MBCPP/586", "completion": "    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = a[(i + k) % n];\n    }\n    return result;\n}", "unique_id": "MBCPP_586_1", "index": 5120}
{"task_id": "MBCPP/587", "completion": "    return listx;\n}", "unique_id": "MBCPP_587_8", "index": 5137}
{"task_id": "MBCPP/588", "completion": "    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return max_val - min_val;\n}", "unique_id": "MBCPP_588_6", "index": 5145}
{"task_id": "MBCPP/589", "completion": "    vector<int> result;\n    int start = ceil(sqrt(a));\n    int end = floor(sqrt(b));\n    for (int i = start; i <= end; i++) {\n        result.push_back(i * i);\n    }\n    return result;\n}", "unique_id": "MBCPP_589_1", "index": 5150}
{"task_id": "MBCPP/591", "completion": "    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "unique_id": "MBCPP_591_1", "index": 5160}
{"task_id": "MBCPP/592", "completion": "    int sum = 0;\n    for (int i = 0; i <= n; ++i) {\n        for (int j = 0; j <= i; ++j) {\n            int c1 = 1, c2 = 1;\n            for (int k = 1; k <= i; ++k) {\n                c1 *= (i - k + 1);\n                c1 /= k;\n            }\n            for (int k = 1; k <= j; ++k) {\n                c2 *= (j - k + 1);\n                c2 /= k;\n            }\n            sum += c1 * c2;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_592_8", "index": 5177}
{"task_id": "MBCPP/593", "completion": "    string result;\n    stringstream ss(ip);\n    string segment;\n    while (getline(ss, segment, '.')) {\n        if (!segment.empty()) {\n            size_t pos = segment.find_first_not_of('0');\n            if (pos == string::npos) {\n                result += \"0\";\n            } else {\n                result += segment.substr(pos);\n            }\n        }\n        if (!ss.eof()) {\n            result += \".\";\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_593_2", "index": 5181}
{"task_id": "MBCPP/594", "completion": "    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    return even - odd;\n}", "unique_id": "MBCPP_594_9", "index": 5198}
{"task_id": "MBCPP/597", "completion": "    if (m > n) {\n        return findKth(arr2, arr1, n, m, k);\n    }\n\n    int low = max(0, k - n), high = min(k, m);\n\n    while (low <= high) {\n        int partitionX = (low + high) / 2;\n        int partitionY = k - partitionX;\n\n        int maxLeftX = (partitionX == 0) ? INT_MIN : arr1[partitionX - 1];\n        int minRightX = (partitionX == m) ? INT_MAX : arr1[partitionX];\n\n        int maxLeftY = (partitionY == 0) ? INT_MIN : arr2[partitionY - 1];\n        int minRightY = (partitionY == n) ? INT_MAX : arr2[partitionY];\n\n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            return max(maxLeftX, maxLeftY);\n        } else if (maxLeftX > minRightY) {\n            high = partitionX - 1;\n        } else {\n            low = partitionX + 1;\n        }\n    }\n\n    return -1;\n}", "unique_id": "MBCPP_597_6", "index": 5205}
{"task_id": "MBCPP/598", "completion": "    int originalNumber = number;\n    int sum = 0;\n    int digits = 0;\n    \n    while (originalNumber != 0) {\n        digits++;\n        originalNumber /= 10;\n    }\n    \n    originalNumber = number;\n    \n    while (originalNumber != 0) {\n        int digit = originalNumber % 10;\n        sum += pow(digit, digits);\n        originalNumber /= 10;\n    }\n    \n    return sum == number;\n}", "unique_id": "MBCPP_598_5", "index": 5214}
{"task_id": "MBCPP/600", "completion": "    return (n & 1) == 0;\n}", "unique_id": "MBCPP_600_1", "index": 5220}
{"task_id": "MBCPP/602", "completion": "    unordered_map<char, int> charCount;\n    for (char c : str1) {\n        charCount[c]++;\n        if (charCount[c] > 1) {\n            return string(1, c);\n        }\n    }\n    return \"None\";\n}", "unique_id": "MBCPP_602_1", "index": 5230}
{"task_id": "MBCPP/603", "completion": "    if (n < 1)\n        return {};\n\n    vector<int> ludics;\n    for (int i = 1; i <= n; i++)\n        ludics.push_back(i);\n\n    for (int i = 1; i < ludics.size(); i++) {\n        int current = ludics[i];\n        for (int j = i + current; j < ludics.size(); j += current) {\n            ludics[j] = 0;\n        }\n        ludics.erase(remove(ludics.begin(), ludics.end(), 0), ludics.end());\n    }\n\n    return ludics;\n}", "unique_id": "MBCPP_603_1", "index": 5240}
{"task_id": "MBCPP/604", "completion": "    string result;\n    string word;\n    stack<string> words;\n    \n    for (char ch : s) {\n        if (ch == ' ') {\n            words.push(word);\n            word = \"\";\n        } else {\n            word += ch;\n        }\n    }\n    words.push(word);\n    \n    while (!words.empty()) {\n        result += words.top();\n        words.pop();\n        if (!words.empty()) {\n            result += ' ';\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_604_3", "index": 5252}
{"task_id": "MBCPP/605", "completion": "    if (num <= 1)\n        return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_605_4", "index": 5263}
{"task_id": "MBCPP/606", "completion": "    return degree * M_PI / 180.0;\n}", "unique_id": "MBCPP_606_1", "index": 5270}
{"task_id": "MBCPP/608", "completion": "    int bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        bell[i][0] = bell[i-1][i-1];\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];\n}", "unique_id": "MBCPP_608_10", "index": 5289}
{"task_id": "MBCPP/609", "completion": "    int min_val = min(a, b);\n    int remainder = n % (a + b);\n    if (remainder < min_val) {\n        return min_val - 1;\n    } else {\n        return min_val;\n    }\n}", "unique_id": "MBCPP_609_1", "index": 5290}
{"task_id": "MBCPP/610", "completion": "    if (l <= 0 || l > list1.size()) {\n        return list1;\n    }\n    list1.erase(list1.begin() + l - 1);\n    return list1;\n}", "unique_id": "MBCPP_610_3", "index": 5302}
{"task_id": "MBCPP/611", "completion": "    int maxVal = INT_MIN;\n    for (const auto& row : testList) {\n        if (n < row.size() && row[n] > maxVal) {\n            maxVal = row[n];\n        }\n    }\n    return maxVal;\n}", "unique_id": "MBCPP_611_6", "index": 5315}
{"task_id": "MBCPP/614", "completion": "    int sum = 0;\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            sum += num;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_614_9", "index": 5328}
{"task_id": "MBCPP/615", "completion": "    vector<double> result;\n    if (nums.empty()) return result;\n    \n    int n = nums.size();\n    int m = nums[0].size();\n    \n    for (int j = 0; j < m; ++j) {\n        double sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += nums[i][j];\n        }\n        result.push_back(sum / n);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_615_2", "index": 5331}
{"task_id": "MBCPP/616", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] % testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_616_1", "index": 5340}
{"task_id": "MBCPP/618", "completion": "    vector<double> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result),\n              [](int a, int b) { return static_cast<double>(a) / b; });\n    return result;\n}", "unique_id": "MBCPP_618_1", "index": 5350}
{"task_id": "MBCPP/619", "completion": "    string nums = \"\";\n    string result = \"\";\n    for (char c : testStr) {\n        if (isdigit(c)) {\n            nums += c;\n        } else {\n            result += c;\n        }\n    }\n    return result + nums;\n}", "unique_id": "MBCPP_619_1", "index": 5360}
{"task_id": "MBCPP/620", "completion": "    sort(a.begin(), a.end());\n    vector<int> dp(n, 1);\n    int maxLen = 1;\n    \n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (a[i] % a[j] == 0) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLen = max(maxLen, dp[i]);\n    }\n    \n    return maxLen;\n}", "unique_id": "MBCPP_620_2", "index": 5371}
{"task_id": "MBCPP/621", "completion": "    vector<string> result;\n    for (const auto& s : testList) {\n        bool isNumeric = true;\n        for (char c : s) {\n            if (!isdigit(c)) {\n                isNumeric = false;\n                break;\n            }\n        }\n        if (isNumeric) {\n            int num = stoi(s);\n            num += k;\n            result.push_back(to_string(num));\n        } else {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_621_10", "index": 5389}
{"task_id": "MBCPP/622", "completion": "    int i = 0, j = 0, count;\n    double m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] <= arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2;\n}", "unique_id": "MBCPP_622_4", "index": 5393}
{"task_id": "MBCPP/623", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [n](int x) { return pow(x, n); });\n    return nums;\n}", "unique_id": "MBCPP_623_2", "index": 5401}
{"task_id": "MBCPP/624", "completion": "    for (char &c : str) {\n        if (c >= 'a' && c <= 'z') {\n            c = c - 32;\n        }\n    }\n    return str;\n}", "unique_id": "MBCPP_624_1", "index": 5410}
{"task_id": "MBCPP/625", "completion": "    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "unique_id": "MBCPP_625_1", "index": 5420}
{"task_id": "MBCPP/626", "completion": "    if (r < 0)\n        return -1;\n    if (r == 0)\n        return 0;\n    return r * r;\n}", "unique_id": "MBCPP_626_1", "index": 5430}
{"task_id": "MBCPP/627", "completion": "    if (start > end)\n        return end + 1;\n    \n    if (start != array[start])\n        return start;\n    \n    int mid = (start + end) / 2;\n    \n    if (array[mid] == mid)\n        return findFirstMissing(array, mid + 1, end);\n    \n    return findFirstMissing(array, start, mid);\n}", "unique_id": "MBCPP_627_1", "index": 5440}
{"task_id": "MBCPP/628", "completion": "    string result;\n    for (char c : str) {\n        if (c == ' ') {\n            result += \"%20\";\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_628_2", "index": 5451}
{"task_id": "MBCPP/629", "completion": "    vector<int> result;\n    for (int num : list) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_629_1", "index": 5460}
{"task_id": "MBCPP/630", "completion": "    vector<vector<int>> result;\n    int x = testTup[0];\n    int y = testTup[1];\n    for (int i = x - 1; i <= x + 1; ++i) {\n        for (int j = y - 1; j <= y + 1; ++j) {\n            result.push_back({i, j});\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_630_9", "index": 5478}
{"task_id": "MBCPP/631", "completion": "    regex space(\"\\\\s\");\n    regex underscore(\"_\");\n    string result = regex_replace(text, space, \"_\");\n    result = regex_replace(result, underscore, \" \");\n    return result;\n}", "unique_id": "MBCPP_631_9", "index": 5488}
{"task_id": "MBCPP/632", "completion": "    int count = 0;\n    for (int i = 0; i < numList.size(); i++) {\n        if (numList[i] != 0) {\n            numList[count++] = numList[i];\n        }\n    }\n    while (count < numList.size()) {\n        numList[count++] = 0;\n    }\n    return numList;\n}", "unique_id": "MBCPP_632_2", "index": 5491}
{"task_id": "MBCPP/633", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sum += arr[i] ^ arr[j];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_633_8", "index": 5507}
{"task_id": "MBCPP/634", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += pow(evenNum, 4);\n    }\n    return sum;\n}", "unique_id": "MBCPP_634_5", "index": 5514}
{"task_id": "MBCPP/635", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num : iterable) {\n        minHeap.push(num);\n    }\n    vector<int> sorted;\n    while (!minHeap.empty()) {\n        sorted.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sorted;\n}", "unique_id": "MBCPP_635_1", "index": 5520}
{"task_id": "MBCPP/636", "completion": "    if (a == 0)\n        return \"No\";\n    if (a == c)\n        return \"Yes\";\n    return \"No\";\n}", "unique_id": "MBCPP_636_2", "index": 5531}
{"task_id": "MBCPP/637", "completion": "    return actualCost == saleAmount;\n}", "unique_id": "MBCPP_637_2", "index": 5541}
{"task_id": "MBCPP/638", "completion": "    if (v < 4 || t > 50)\n        return t;\n    double wci = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16);\n    return round(wci);\n}", "unique_id": "MBCPP_638_2", "index": 5551}
{"task_id": "MBCPP/639", "completion": "    int sum = 0;\n    for (const auto& name : sampleNames) {\n        if (!name.empty() && isupper(name[0])) {\n            sum += name.length();\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_639_8", "index": 5567}
{"task_id": "MBCPP/640", "completion": "    string result = items[0];\n    size_t pos = result.find('(');\n    if (pos != string::npos) {\n        result = result.substr(0, pos);\n    }\n    return result;\n}", "unique_id": "MBCPP_640_4", "index": 5573}
{"task_id": "MBCPP/641", "completion": "    return n * (7 * n - 5) / 2;\n}", "unique_id": "MBCPP_641_9", "index": 5588}
{"task_id": "MBCPP/643", "completion": "    regex pattern(\"\\\\b[^z\\\\W]*z[^z\\\\W]*\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_643_7", "index": 5596}
{"task_id": "MBCPP/644", "completion": "    if (k > input.size()) {\n        k = input.size();\n    }\n    reverse(input.begin(), input.begin() + k);\n    return input;\n}", "unique_id": "MBCPP_644_1", "index": 5600}
{"task_id": "MBCPP/645", "completion": "    int product = 1;\n    for (const auto& vec : testList) {\n        if (k < vec.size()) {\n            product *= vec[k];\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_645_8", "index": 5617}
{"task_id": "MBCPP/646", "completion": "    if (k > n)\n        return 0;\n    int count = n - k + 1;\n    return count * count * count;\n}", "unique_id": "MBCPP_646_5", "index": 5624}
{"task_id": "MBCPP/647", "completion": "    vector<string> result;\n    string temp;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!temp.empty()) {\n                result.push_back(temp);\n                temp.clear();\n            }\n        }\n        temp += ch;\n    }\n    if (!temp.empty()) {\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_647_1", "index": 5630}
{"task_id": "MBCPP/648", "completion": "    for (size_t i = 0; i + 1 < lst.size(); i += 2) {\n        swap(lst[i], lst[i + 1]);\n    }\n    return lst;\n}", "unique_id": "MBCPP_648_8", "index": 5647}
{"task_id": "MBCPP/649", "completion": "    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_649_1", "index": 5650}
{"task_id": "MBCPP/650", "completion": "    if (n != m)\n        return false;\n    sort(arr1.begin(), arr1.end());\n    sort(arr2.begin(), arr2.end());\n    for (int i = 0; i < n; i++) {\n        if (arr1[i] != arr2[i])\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_650_8", "index": 5667}
{"task_id": "MBCPP/651", "completion": "    unordered_set<int> s(testTup1.begin(), testTup1.end());\n    for (int num : testTup2) {\n        if (s.find(num) == s.end()) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_651_3", "index": 5672}
{"task_id": "MBCPP/652", "completion": "    vector<int> col1, col2;\n    for (const auto& matrix : testList) {\n        for (const auto& row : matrix) {\n            col1.push_back(row[0]);\n            col2.push_back(row[1]);\n        }\n    }\n    string result = \"[(\";\n    for (size_t i = 0; i < col1.size(); ++i) {\n        result += to_string(col1[i]);\n        if (i != col1.size() - 1) result += \", \";\n    }\n    result += \"), (\";\n    for (size_t i = 0; i < col2.size(); ++i) {\n        result += to_string(col2[i]);\n        if (i != col2.size() - 1) result += \", \";\n    }\n    result += \")]\";\n    return result;\n}", "unique_id": "MBCPP_652_1", "index": 5680}
{"task_id": "MBCPP/654", "completion": "    return 2 * (l + b);\n}", "unique_id": "MBCPP_654_9", "index": 5698}
{"task_id": "MBCPP/655", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_655_5", "index": 5704}
{"task_id": "MBCPP/656", "completion": "    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += abs(a[i] - b[i]);\n    }\n    return sum;\n}", "unique_id": "MBCPP_656_10", "index": 5719}
{"task_id": "MBCPP/657", "completion": "    if (n == 0 || n == 1)\n        return 1;\n\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += log10(i);\n    }\n\n    double fractionalPart = logSum - floor(logSum);\n    int firstDigit = pow(10, fractionalPart);\n\n    return firstDigit;\n}", "unique_id": "MBCPP_657_3", "index": 5722}
{"task_id": "MBCPP/658", "completion": "    unordered_map<int, int> freqMap;\n    for (int num : list1) {\n        freqMap[num]++;\n    }\n    \n    int maxCount = 0;\n    int result = 0;\n    for (auto& pair : freqMap) {\n        if (pair.second > maxCount || (pair.second == maxCount && pair.first < result)) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_658_1", "index": 5730}
{"task_id": "MBCPP/659", "completion": "    unordered_map<int, int> freq;\n    vector<int> result;\n    \n    for (int num : x) {\n        freq[num]++;\n    }\n    \n    for (int num : x) {\n        if (freq[num] > 1) {\n            result.push_back(num);\n            freq[num] = 0; // To avoid adding duplicates in the result\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_659_1", "index": 5740}
{"task_id": "MBCPP/660", "completion": "    vector<int> result;\n    if (r1 < l2) {\n        result.push_back(r1);\n        result.push_back(l2);\n    } else if (r2 < l1) {\n        result.push_back(r2);\n        result.push_back(l1);\n    } else {\n        result.push_back(min(l1, l2));\n        result.push_back(max(r1, r2));\n    }\n    return result;\n}", "unique_id": "MBCPP_660_2", "index": 5751}
{"task_id": "MBCPP/661", "completion": "    if (n == 0) return 0;\n    if (n == 1) return arr[0];\n    if (n == 2) return arr[0] + arr[1];\n\n    int dp[n];\n    dp[0] = arr[0];\n    dp[1] = arr[0] + arr[1];\n    dp[2] = max({dp[1], arr[1] + arr[2], arr[0] + arr[2]});\n\n    for (int i = 3; i < n; i++) {\n        dp[i] = max({dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i-1] + arr[i]});\n    }\n\n    return dp[n-1];\n}", "unique_id": "MBCPP_661_3", "index": 5762}
{"task_id": "MBCPP/662", "completion": "    for (auto& pair : dict1) {\n        sort(pair.second.begin(), pair.second.end());\n    }\n    return dict1;\n}", "unique_id": "MBCPP_662_10", "index": 5779}
{"task_id": "MBCPP/663", "completion": "    int remainder = n % x;\n    if (remainder >= y)\n        return n - (remainder - y);\n    else\n        return n - (x + remainder - y);\n}", "unique_id": "MBCPP_663_3", "index": 5782}
{"task_id": "MBCPP/664", "completion": "    int sum = 0, count = 0;\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "unique_id": "MBCPP_664_4", "index": 5793}
{"task_id": "MBCPP/665", "completion": "    if (numList.empty()) return numList;\n    int first = numList[0];\n    numList.erase(numList.begin());\n    numList.push_back(first);\n    return numList;\n}", "unique_id": "MBCPP_665_3", "index": 5802}
{"task_id": "MBCPP/666", "completion": "    int count = 0;\n    for (char c : str) {\n        if (c == chr[0]) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_666_6", "index": 5815}
{"task_id": "MBCPP/667", "completion": "    int count = 0;\n    for (char ch : str) {\n        if (vowels.find(ch) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_667_1", "index": 5820}
{"task_id": "MBCPP/668", "completion": "    string result;\n    for (size_t i = 0; i < str.size(); ++i) {\n        if (i == 0 || str[i] != str[i-1] || str[i] != chr[0]) {\n            result += str[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_668_3", "index": 5832}
{"task_id": "MBCPP/669", "completion": "    regex pattern(\"^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$\");\n    if (regex_match(ip, pattern)) {\n        return \"Valid IP address\";\n    } else {\n        return \"Invalid IP address\";\n    }\n}", "unique_id": "MBCPP_669_3", "index": 5842}
{"task_id": "MBCPP/670", "completion": "    if (nums.empty()) return false;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] >= nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_670_2", "index": 5851}
{"task_id": "MBCPP/671", "completion": "    if ((n & (n + 1)) == 0)\n        return n;\n    return n | (n + 1);\n}", "unique_id": "MBCPP_671_3", "index": 5862}
{"task_id": "MBCPP/672", "completion": "    return max(num1, max(num2, num3));\n}", "unique_id": "MBCPP_672_5", "index": 5874}
{"task_id": "MBCPP/673", "completion": "    int result = 0;\n    for (int num : list) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "unique_id": "MBCPP_673_1", "index": 5880}
{"task_id": "MBCPP/674", "completion": "    istringstream iss(str);\n    set<string> uniqueWords;\n    string word, result;\n    while (iss >> word) {\n        if (uniqueWords.find(word) == uniqueWords.end()) {\n            uniqueWords.insert(word);\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_674_1", "index": 5890}
{"task_id": "MBCPP/675", "completion": "    int sum = x + y;\n    if (sum >= m && sum <= n)\n        return 20;\n    else\n        return sum;\n}", "unique_id": "MBCPP_675_3", "index": 5902}
{"task_id": "MBCPP/676", "completion": "    regex pattern(\"[^a-zA-Z0-9]\");\n    return regex_replace(text1, pattern, \"\");\n}", "unique_id": "MBCPP_676_5", "index": 5914}
{"task_id": "MBCPP/677", "completion": "    if (a + b + c == 180 && a > 0 && b > 0 && c > 0)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_677_5", "index": 5924}
{"task_id": "MBCPP/678", "completion": "    str1.erase(remove(str1.begin(), str1.end(), ' '), str1.end());\n    return str1;\n}", "unique_id": "MBCPP_678_1", "index": 5930}
{"task_id": "MBCPP/679", "completion": "    auto it = ditionary.begin();\n    advance(it, key);\n    return it->first;\n}", "unique_id": "MBCPP_679_3", "index": 5942}
{"task_id": "MBCPP/680", "completion": "    if (nums.empty()) return false;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] <= nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_680_9", "index": 5958}
{"task_id": "MBCPP/681", "completion": "    if (n % 2 == 0)\n        return 2;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n            return i;\n    }\n    return n;\n}", "unique_id": "MBCPP_681_5", "index": 5964}
{"task_id": "MBCPP/682", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a * b; });\n    return result;\n}", "unique_id": "MBCPP_682_2", "index": 5971}
{"task_id": "MBCPP/683", "completion": "    for (int i = 0; i * i <= n; i++) {\n        int j = n - i * i;\n        int sqrt_j = sqrt(j);\n        if (sqrt_j * sqrt_j == j)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_683_1", "index": 5980}
{"task_id": "MBCPP/684", "completion": "    char target = x[0];\n    int countInSingle = 0;\n    for(char c : str) {\n        if(c == target) {\n            countInSingle++;\n        }\n    }\n    int fullRepeats = 7 / str.length();\n    int remainder = 7 % str.length();\n    int total = fullRepeats * countInSingle;\n    for(int i = 0; i < remainder; i++) {\n        if(str[i] == target) {\n            total++;\n        }\n    }\n    return total;\n}", "unique_id": "MBCPP_684_3", "index": 5992}
{"task_id": "MBCPP/685", "completion": "    bool isPrime[n+1];\n    memset(isPrime, true, sizeof(isPrime));\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int p = 2; p*p <= n; p++) {\n        if (isPrime[p]) {\n            for (int i = p*p; i <= n; i += p)\n                isPrime[i] = false;\n        }\n    }\n    \n    int sum = 0;\n    for (int p = 2; p <= n; p++) {\n        if (isPrime[p])\n            sum += p;\n    }\n    return sum;\n}", "unique_id": "MBCPP_685_7", "index": 6006}
{"task_id": "MBCPP/686", "completion": "    map<int, int> freqMap;\n    for (int num : testTup) {\n        freqMap[num]++;\n    }\n    string result = \"{\";\n    for (auto it = freqMap.begin(); it != freqMap.end(); ++it) {\n        if (it != freqMap.begin()) {\n            result += \", \";\n        }\n        result += to_string(it->first) + \": \" + to_string(it->second);\n    }\n    result += \"}\";\n    return result;\n}", "unique_id": "MBCPP_686_1", "index": 6010}
{"task_id": "MBCPP/687", "completion": "    if (b == 0)\n        return a;\n    else\n        return recurGcd(b, a % b);\n}", "unique_id": "MBCPP_687_7", "index": 6026}
{"task_id": "MBCPP/688", "completion": "    return sqrt(a * a + b * b);\n}", "unique_id": "MBCPP_688_1", "index": 6030}
{"task_id": "MBCPP/689", "completion": "    if (n <= 1)\n        return 0;\n    if (arr[0] == 0)\n        return -1;\n    int maxReach = arr[0];\n    int step = arr[0];\n    int jump = 1;\n    for (int i = 1; i < n; i++) {\n        if (i == n - 1)\n            return jump;\n        maxReach = max(maxReach, i + arr[i]);\n        step--;\n        if (step == 0) {\n            jump++;\n            if (i >= maxReach)\n                return -1;\n            step = maxReach - i;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_689_1", "index": 6040}
{"task_id": "MBCPP/690", "completion": "    vector<int> result;\n    if (nums.empty()) return result;\n    \n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] * nums[i + 1]);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_690_4", "index": 6053}
{"task_id": "MBCPP/691", "completion": "    unordered_map<int, vector<int>> result;\n    for (const auto& pair : testList) {\n        result[pair[1]].push_back(pair[0]);\n    }\n    return result;\n}", "unique_id": "MBCPP_691_5", "index": 6064}
{"task_id": "MBCPP/692", "completion": "    if (n == 0 || n == 1)\n        return 1;\n    \n    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        result %= 100; // Keep only the last two digits\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_692_8", "index": 6077}
{"task_id": "MBCPP/693", "completion": "    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \" \");\n}", "unique_id": "MBCPP_693_8", "index": 6087}
{"task_id": "MBCPP/694", "completion": "    unordered_set<int> uniqueSet;\n    for (const auto& pair : testDict) {\n        for (int value : pair.second) {\n            uniqueSet.insert(value);\n        }\n    }\n    vector<int> uniqueValues(uniqueSet.begin(), uniqueSet.end());\n    sort(uniqueValues.begin(), uniqueValues.end());\n    return uniqueValues;\n}", "unique_id": "MBCPP_694_6", "index": 6095}
{"task_id": "MBCPP/695", "completion": "    if (testTup1.size() != testTup2.size())\n        return false;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] <= testTup1[i])\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_695_5", "index": 6104}
{"task_id": "MBCPP/697", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 == 0; });\n}", "unique_id": "MBCPP_697_2", "index": 6111}
{"task_id": "MBCPP/701", "completion": "    int totalSum = 0;\n    for (int num : arr) {\n        totalSum += num;\n    }\n    \n    int leftSum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        totalSum -= arr[i];\n        if (leftSum == totalSum) {\n            return i;\n        }\n        leftSum += arr[i];\n    }\n    \n    return -1;\n}", "unique_id": "MBCPP_701_10", "index": 6129}
{"task_id": "MBCPP/702", "completion": "    sort(arr.begin(), arr.end());\n    int minRemovals = n;\n    for (int i = 0; i < n; i++) {\n        int j = upper_bound(arr.begin(), arr.end(), arr[i] + k) - arr.begin();\n        minRemovals = min(minRemovals, n - (j - i));\n    }\n    return minRemovals;\n}", "unique_id": "MBCPP_702_1", "index": 6130}
{"task_id": "MBCPP/703", "completion": "    return d.find(x) != d.end();\n}", "unique_id": "MBCPP_703_1", "index": 6140}
{"task_id": "MBCPP/704", "completion": "    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_704_3", "index": 6152}
{"task_id": "MBCPP/706", "completion": "    unordered_set<int> s;\n    for (int i = 0; i < m; i++)\n        s.insert(arr1[i]);\n    for (int i = 0; i < n; i++) {\n        if (s.find(arr2[i]) == s.end())\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_706_5", "index": 6164}
{"task_id": "MBCPP/707", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num > 0) {\n            count += num & 1;\n            num >>= 1;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_707_2", "index": 6171}
{"task_id": "MBCPP/708", "completion": "    vector<string> result;\n    string word;\n    for (char ch : str) {\n        if (ch == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_708_1", "index": 6180}
{"task_id": "MBCPP/709", "completion": "    unordered_map<int, unordered_set<int>> valueToKeys;\n    for (const auto& pair : testList) {\n        valueToKeys[pair[1]].insert(pair[0]);\n    }\n\n    map<int, int> result;\n    for (const auto& [value, keys] : valueToKeys) {\n        result[value] = keys.size();\n    }\n\n    stringstream ss;\n    ss << \"{\";\n    for (auto it = result.begin(); it != result.end(); ++it) {\n        if (it != result.begin()) ss << \", \";\n        ss << it->first << \": \" << it->second;\n    }\n    ss << \"}\";\n\n    return ss.str();\n}", "unique_id": "MBCPP_709_3", "index": 6192}
{"task_id": "MBCPP/710", "completion": "    vector<int> result;\n    if (!testTup.empty()) {\n        result.push_back(testTup.front());\n        result.push_back(testTup.back());\n    }\n    return result;\n}", "unique_id": "MBCPP_710_6", "index": 6205}
{"task_id": "MBCPP/711", "completion": "    int evenProduct = 1, oddProduct = 1;\n    int position = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        if (position % 2 == 0)\n            evenProduct *= digit;\n        else\n            oddProduct *= digit;\n        n /= 10;\n        position++;\n    }\n    return evenProduct == oddProduct;\n}", "unique_id": "MBCPP_711_3", "index": 6212}
{"task_id": "MBCPP/713", "completion": "    for (bool val : testTup) {\n        if (!val) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_713_5", "index": 6224}
{"task_id": "MBCPP/714", "completion": "    unordered_set<int> factors;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.insert(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.insert(n);\n    }\n    return factors.size();\n}", "unique_id": "MBCPP_714_7", "index": 6236}
{"task_id": "MBCPP/715", "completion": "    vector<int> result;\n    stringstream ss(testStr);\n    string token;\n    while (getline(ss, token, ',')) {\n        stringstream temp(token);\n        int num;\n        temp >> num;\n        result.push_back(num);\n    }\n    return result;\n}", "unique_id": "MBCPP_715_4", "index": 6243}
{"task_id": "MBCPP/716", "completion": "    return 4 * a;\n}", "unique_id": "MBCPP_716_1", "index": 6250}
{"task_id": "MBCPP/717", "completion": "    if (data.empty()) return 0.0;\n    \n    double mean = accumulate(data.begin(), data.end(), 0.0) / data.size();\n    double sum = 0.0;\n    \n    for (int num : data) {\n        sum += pow(num - mean, 2);\n    }\n    \n    double variance = sum / data.size();\n    return sqrt(variance);\n}", "unique_id": "MBCPP_717_4", "index": 6263}
{"task_id": "MBCPP/719", "completion": "    regex pattern(\"ab*\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_719_1", "index": 6270}
{"task_id": "MBCPP/721", "completion": "    vector<vector<double>> dp(n, vector<double>(n, 0));\n    dp[0][0] = cost[0][0];\n\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n\n    for (int j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n\n    return dp[n-1][n-1] / (2 * n - 1);\n}", "unique_id": "MBCPP_721_1", "index": 6280}
{"task_id": "MBCPP/723", "completion": "    if (nums1.size() != nums2.size()) return 0;\n    int count = 0;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        if (nums1[i] == nums2[i]) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_723_1", "index": 6290}
{"task_id": "MBCPP/724", "completion": "    long long num = pow(base, power);\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}", "unique_id": "MBCPP_724_1", "index": 6300}
{"task_id": "MBCPP/725", "completion": "    vector<string> result;\n    regex pattern(\"\\\"([^\\\"]*)\\\"\");\n    smatch matches;\n    string::const_iterator searchStart(text1.cbegin());\n    while (regex_search(searchStart, text1.cend(), matches, pattern)) {\n        result.push_back(matches.str(1));\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_725_2", "index": 6311}
{"task_id": "MBCPP/726", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] * testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_726_1", "index": 6320}
{"task_id": "MBCPP/727", "completion": "    regex pattern(\"[^a-zA-Z0-9]\");\n    return regex_replace(s, pattern, \"\");\n}", "unique_id": "MBCPP_727_8", "index": 6337}
{"task_id": "MBCPP/728", "completion": "    vector<int> result;\n    for (size_t i = 0; i < lst1.size(); ++i) {\n        result.push_back(lst1[i] + lst2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_728_2", "index": 6341}
{"task_id": "MBCPP/729", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a + b; });\n    return result;\n}", "unique_id": "MBCPP_729_1", "index": 6350}
{"task_id": "MBCPP/731", "completion": "    double l = sqrt(r * r + h * h);\n    return M_PI * r * l;\n}", "unique_id": "MBCPP_731_4", "index": 6363}
{"task_id": "MBCPP/732", "completion": "    for (char &c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n        }\n    }\n    return text;\n}", "unique_id": "MBCPP_732_1", "index": 6370}
{"task_id": "MBCPP/733", "completion": "    int left = 0, right = a.size() - 1;\n    int result = -1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (a[mid] == x) {\n            result = mid;\n            right = mid - 1;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_733_2", "index": 6381}
{"task_id": "MBCPP/734", "completion": "    int result = 0;\n    for (int i = 0; i < n; i++) {\n        int product = 1;\n        for (int j = i; j < n; j++) {\n            product *= arr[j];\n            result += product;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_734_4", "index": 6393}
{"task_id": "MBCPP/735", "completion": "    if (n == 0) return 1;\n    int numBits = sizeof(n) * 8;\n    int firstBit = n & 1;\n    int lastBit = (n >> (numBits - 1)) & 1;\n    int mask = (1 << (numBits - 1)) - 1;\n    mask &= ~1;\n    n ^= mask;\n    n &= ((1 << numBits) - 1);\n    n |= (lastBit << (numBits - 1));\n    n |= firstBit;\n    return n;\n}", "unique_id": "MBCPP_735_3", "index": 6402}
{"task_id": "MBCPP/736", "completion": "    int low = 0, high = a.size();\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] < x)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}", "unique_id": "MBCPP_736_8", "index": 6417}
{"task_id": "MBCPP/737", "completion": "    regex pattern(\"^[aeiouAEIOU].*\");\n    if (regex_match(str, pattern))\n        return \"Valid\";\n    else\n        return \"Invalid\";\n}", "unique_id": "MBCPP_737_4", "index": 6423}
{"task_id": "MBCPP/738", "completion": "    if (n == 1)\n        return 1;\n    double sum = geometricSum(n - 1);\n    return sum + 1.0 / (1 << (n - 1));\n}", "unique_id": "MBCPP_738_5", "index": 6434}
{"task_id": "MBCPP/739", "completion": "    int digits = 0;\n    int index = 1;\n    while (true) {\n        long long triangular = index * (index + 1) / 2;\n        digits = to_string(triangular).length();\n        if (digits >= n) {\n            return index;\n        }\n        index++;\n    }\n}", "unique_id": "MBCPP_739_1", "index": 6440}
{"task_id": "MBCPP/740", "completion": "    unordered_map<int, int> result;\n    for (size_t i = 0; i < testTup.size(); i += 2) {\n        if (i + 1 < testTup.size()) {\n            result[testTup[i]] = testTup[i + 1];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_740_3", "index": 6452}
{"task_id": "MBCPP/741", "completion": "    if (s.length() == 0)\n        return true;\n    char firstChar = s[0];\n    for (char c : s) {\n        if (c != firstChar)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_741_6", "index": 6465}
{"task_id": "MBCPP/742", "completion": "    return (sqrt(3) * side * side);\n}", "unique_id": "MBCPP_742_4", "index": 6473}
{"task_id": "MBCPP/743", "completion": "    int size = list1.size();\n    if (size == 0 || m == 0 || n == 0) return list1;\n    \n    m = m % size;\n    n = n % size;\n    \n    vector<int> result(list1.begin() + m, list1.end());\n    result.insert(result.end(), list1.begin(), list1.begin() + m);\n    \n    if (n > 0) {\n        rotate(result.begin(), result.begin() + n, result.end());\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_743_5", "index": 6484}
{"task_id": "MBCPP/744", "completion": "    for (int num : testTup) {\n        if (num == -1) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_744_1", "index": 6490}
{"task_id": "MBCPP/745", "completion": "    vector<int> result;\n    for (int num = startnum; num <= endnum; num++) {\n        int temp = num;\n        bool divisible = true;\n        while (temp != 0) {\n            int digit = temp % 10;\n            if (digit == 0 || num % digit != 0) {\n                divisible = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (divisible) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_745_2", "index": 6501}
{"task_id": "MBCPP/747", "completion": "    int dp[m + 1][n + 1][o + 1];\n    memset(dp, 0, sizeof(dp));\n\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            for (int k = 1; k <= o; k++) {\n                if (x[i - 1] == y[j - 1] && y[j - 1] == z[k - 1]) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max({dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]});\n                }\n            }\n        }\n    }\n\n    return dp[m][n][o];\n}", "unique_id": "MBCPP_747_1", "index": 6510}
{"task_id": "MBCPP/748", "completion": "    string result;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (i != 0 && isupper(str1[i])) {\n            result += ' ';\n        }\n        result += str1[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_748_8", "index": 6527}
{"task_id": "MBCPP/749", "completion": "    vector<int> nums;\n    for (const string& s : numsStr) {\n        nums.push_back(stoi(s));\n    }\n    sort(nums.begin(), nums.end());\n    return nums;\n}", "unique_id": "MBCPP_749_1", "index": 6530}
{"task_id": "MBCPP/750", "completion": "    testList.insert(testList.end(), testTup.begin(), testTup.end());\n    return testList;\n}", "unique_id": "MBCPP_750_5", "index": 6544}
{"task_id": "MBCPP/751", "completion": "    int n = arr.size();\n    if (i >= (n - 1) / 2)\n        return true;\n    if (arr[i] > arr[2 * i + 1] || (2 * i + 2 < n && arr[i] > arr[2 * i + 2]))\n        return false;\n    return checkMinHeap(arr, 2 * i + 1) && checkMinHeap(arr, 2 * i + 2);\n}", "unique_id": "MBCPP_751_8", "index": 6557}
{"task_id": "MBCPP/752", "completion": "    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2);\n}", "unique_id": "MBCPP_752_4", "index": 6563}
{"task_id": "MBCPP/754", "completion": "    vector<int> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_754_6", "index": 6575}
{"task_id": "MBCPP/756", "completion": "    regex pattern(\"ab?\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_756_4", "index": 6583}
{"task_id": "MBCPP/757", "completion": "    unordered_set<string> seen;\n    int count = 0;\n    for (string s : testList) {\n        string reversed = s;\n        reverse(reversed.begin(), reversed.end());\n        if (seen.find(reversed) != seen.end()) {\n            count++;\n        } else {\n            seen.insert(s);\n        }\n    }\n    return to_string(count);\n}", "unique_id": "MBCPP_757_1", "index": 6590}
{"task_id": "MBCPP/759", "completion": "    int dotCount = 0;\n    int dotIndex = -1;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dotCount++;\n            dotIndex = i;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n    }\n    if (dotCount != 1) {\n        return false;\n    }\n    return (num.length() - dotIndex - 1) == 2;\n}", "unique_id": "MBCPP_759_6", "index": 6605}
{"task_id": "MBCPP/760", "completion": "    if (n == 0)\n        return \"NO\";\n    int first = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] != first)\n            return \"NO\";\n    }\n    return \"YES\";\n}", "unique_id": "MBCPP_760_2", "index": 6611}
{"task_id": "MBCPP/762", "completion": "    if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_762_8", "index": 6627}
{"task_id": "MBCPP/763", "completion": "    sort(arr.begin(), arr.end());\n    int minDiff = INT_MAX;\n    for (int i = 1; i < n; i++) {\n        int diff = arr[i] - arr[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n        }\n    }\n    return minDiff;\n}", "unique_id": "MBCPP_763_6", "index": 6635}
{"task_id": "MBCPP/764", "completion": "    int count = 0;\n    for (char ch : str) {\n        if (isdigit(ch)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_764_8", "index": 6647}
{"task_id": "MBCPP/765", "completion": "    return (n + 1) + n;\n}", "unique_id": "MBCPP_765_1", "index": 6650}
{"task_id": "MBCPP/766", "completion": "    vector<vector<int>> result;\n    if (l1.size() < 2) return result;\n    \n    for (size_t i = 0; i < l1.size() - 1; ++i) {\n        result.push_back({l1[i], l1[i+1]});\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_766_1", "index": 6660}
{"task_id": "MBCPP/767", "completion": "    unordered_map<int, int> freq;\n    int count = 0;\n    \n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.find(complement) != freq.end()) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_767_1", "index": 6670}
{"task_id": "MBCPP/768", "completion": "    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return count % 2 != 0;\n}", "unique_id": "MBCPP_768_3", "index": 6682}
{"task_id": "MBCPP/769", "completion": "    vector<int> result;\n    unordered_set<int> set2(li2.begin(), li2.end());\n    for (int num : li1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n    for (int num : li2) {\n        if (find(li1.begin(), li1.end(), num) == li1.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_769_1", "index": 6690}
{"task_id": "MBCPP/770", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int oddNum = 2 * i - 1;\n        sum += pow(oddNum, 4);\n    }\n    return sum;\n}", "unique_id": "MBCPP_770_7", "index": 6706}
{"task_id": "MBCPP/771", "completion": "    stack<char> s;\n    for (char c : exp) {\n        if (c == '{' || c == '[' || c == '(') {\n            s.push(c);\n        } else if (c == '}' || c == ']' || c == ')') {\n            if (s.empty()) return false;\n            char top = s.top();\n            s.pop();\n            if ((c == '}' && top != '{') || \n                (c == ']' && top != '[') || \n                (c == ')' && top != '(')) {\n                return false;\n            }\n        }\n    }\n    return s.empty();\n}", "unique_id": "MBCPP_771_1", "index": 6710}
{"task_id": "MBCPP/772", "completion": "    string result;\n    string word;\n    for (char ch : testStr) {\n        if (ch == ' ') {\n            if (word.length() != k) {\n                if (!result.empty()) {\n                    result += ' ';\n                }\n                result += word;\n            }\n            word.clear();\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty() && word.length() != k) {\n        if (!result.empty()) {\n            result += ' ';\n        }\n        result += word;\n    }\n    return result;\n}", "unique_id": "MBCPP_772_2", "index": 6721}
{"task_id": "MBCPP/774", "completion": "    regex pattern(R\"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\");\n    if (regex_match(email, pattern)) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}", "unique_id": "MBCPP_774_1", "index": 6730}
{"task_id": "MBCPP/775", "completion": "    for (int i = 1; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_775_7", "index": 6746}
{"task_id": "MBCPP/776", "completion": "    int count = 0;\n    for (int i = 0; i < testStr.length(); ++i) {\n        bool leftIsVowel = (i > 0 && (testStr[i-1] == 'a' || testStr[i-1] == 'e' || testStr[i-1] == 'i' || testStr[i-1] == 'o' || testStr[i-1] == 'u'));\n        bool rightIsVowel = (i < testStr.length()-1 && (testStr[i+1] == 'a' || testStr[i+1] == 'e' || testStr[i+1] == 'i' || testStr[i+1] == 'o' || testStr[i+1] == 'u'));\n        if (leftIsVowel || rightIsVowel) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_776_4", "index": 6753}
{"task_id": "MBCPP/777", "completion": "    unordered_map<int, int> freq;\n    for(int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    int sum = 0;\n    for(auto it : freq) {\n        if(it.second == 1) {\n            sum += it.first;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_777_1", "index": 6760}
{"task_id": "MBCPP/780", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testList.size(); ++i) {\n        for (size_t j = i + 1; j < testList.size(); ++j) {\n            vector<int> temp;\n            temp.push_back(testList[i][0] + testList[j][0]);\n            temp.push_back(testList[i][1] + testList[j][1]);\n            result.push_back(temp);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_780_5", "index": 6774}
{"task_id": "MBCPP/781", "completion": "    int count = 0;\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (n / i == i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return (count % 2 == 0) ? \"Even\" : \"Odd\";\n}", "unique_id": "MBCPP_781_4", "index": 6783}
{"task_id": "MBCPP/782", "completion": "    int n = arr.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j += 2) {\n            for (int k = i; k <= j; k++) {\n                sum += arr[k];\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_782_3", "index": 6792}
{"task_id": "MBCPP/784", "completion": "    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    if (even == -1 || odd == -1) {\n        return 0;\n    }\n    return even * odd;\n}", "unique_id": "MBCPP_784_3", "index": 6802}
{"task_id": "MBCPP/785", "completion": "    vector<int> result;\n    string temp;\n    for (char ch : testStr) {\n        if (isdigit(ch)) {\n            temp += ch;\n        } else if (ch == ',' || ch == ')') {\n            if (!temp.empty()) {\n                result.push_back(stoi(temp));\n                temp.clear();\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_785_6", "index": 6815}
{"task_id": "MBCPP/786", "completion": "    return lower_bound(a.begin(), a.end(), x) - a.begin();\n}", "unique_id": "MBCPP_786_1", "index": 6820}
{"task_id": "MBCPP/787", "completion": "    regex pattern(\"ab{3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_787_10", "index": 6839}
{"task_id": "MBCPP/788", "completion": "    testList.push_back(testStr);\n    return testList;\n}", "unique_id": "MBCPP_788_1", "index": 6840}
{"task_id": "MBCPP/789", "completion": "    return s * l;\n}", "unique_id": "MBCPP_789_4", "index": 6853}
{"task_id": "MBCPP/790", "completion": "    for (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_790_6", "index": 6865}
{"task_id": "MBCPP/792", "completion": "    return inputList.size();\n}", "unique_id": "MBCPP_792_5", "index": 6874}
{"task_id": "MBCPP/793", "completion": "    int low = 0, high = n - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            low = mid + 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_793_2", "index": 6881}
{"task_id": "MBCPP/794", "completion": "    if (text.size() < 2)\n        return \"Not matched!\";\n    if (text[0] == 'a' && text[text.size() - 1] == 'b')\n        return \"Found a match!\";\n    return \"Not matched!\";\n}", "unique_id": "MBCPP_794_4", "index": 6893}
{"task_id": "MBCPP/796", "completion": "    int sum = 0;\n    for (auto& pair : dict) {\n        sum += pair.second;\n    }\n    return sum;\n}", "unique_id": "MBCPP_796_1", "index": 6900}
{"task_id": "MBCPP/797", "completion": "    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_797_1", "index": 6910}
{"task_id": "MBCPP/798", "completion": "    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_798_5", "index": 6924}
{"task_id": "MBCPP/799", "completion": "    const int bits = sizeof(n) * 8;\n    d = d % bits;\n    return (n << d) | (n >> (bits - d));\n}", "unique_id": "MBCPP_799_4", "index": 6933}
{"task_id": "MBCPP/800", "completion": "    text.erase(remove(text.begin(), text.end(), ' '), text.end());\n    return text;\n}", "unique_id": "MBCPP_800_1", "index": 6940}
{"task_id": "MBCPP/801", "completion": "    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}", "unique_id": "MBCPP_801_1", "index": 6950}
{"task_id": "MBCPP/802", "completion": "    int low = 0, high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high])\n            return low;\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % n;\n        int prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n            return mid;\n        else if (arr[mid] <= arr[high])\n            high = mid - 1;\n        else if (arr[mid] >= arr[low])\n            low = mid + 1;\n    }\n    return 0;\n}", "unique_id": "MBCPP_802_2", "index": 6961}
{"task_id": "MBCPP/803", "completion": "    if (n < 0)\n        return false;\n    int sqrt_n = sqrt(n);\n    return sqrt_n * sqrt_n == n;\n}", "unique_id": "MBCPP_803_1", "index": 6970}
{"task_id": "MBCPP/804", "completion": "    long long product = 1;\n    for(int i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    return product % 2 == 0;\n}", "unique_id": "MBCPP_804_3", "index": 6982}
{"task_id": "MBCPP/805", "completion": "    if (lists.empty()) return {};\n\n    vector<int> maxList = lists[0];\n    int maxSum = accumulate(maxList.begin(), maxList.end(), 0);\n\n    for (const auto& list : lists) {\n        int currentSum = accumulate(list.begin(), list.end(), 0);\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            maxList = list;\n        }\n    }\n\n    return maxList;\n}", "unique_id": "MBCPP_805_1", "index": 6990}
{"task_id": "MBCPP/806", "completion": "    int maxRun = 0;\n    int currentRun = 0;\n    \n    for (char ch : testStr) {\n        if (isupper(ch)) {\n            currentRun++;\n            if (currentRun > maxRun) {\n                maxRun = currentRun;\n            }\n        } else {\n            currentRun = 0;\n        }\n    }\n    \n    return maxRun;\n}", "unique_id": "MBCPP_806_1", "index": 7000}
{"task_id": "MBCPP/807", "completion": "    for (int num : nums) {\n        if (num % 2 != 0) {\n            return num;\n        }\n    }\n    return -1; // Return -1 if no odd number is found\n}", "unique_id": "MBCPP_807_2", "index": 7011}
{"task_id": "MBCPP/808", "completion": "    for (int num : testTup) {\n        if (num == k) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_808_5", "index": 7024}
{"task_id": "MBCPP/809", "completion": "    if (testTup1.size() != testTup2.size())\n        return false;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] >= testTup1[i])\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_809_1", "index": 7030}
{"task_id": "MBCPP/810", "completion": "    vector<string> result;\n    for (int i = 0; i < a; i++) {\n        result.push_back(\"p\");\n    }\n    for (int i = 0; i < b; i++) {\n        result.push_back(\"q\");\n    }\n    for (int i = 0; i < c; i++) {\n        result.push_back(\"r\");\n    }\n    for (int i = 0; i < d; i++) {\n        result.push_back(\"s\");\n    }\n    return result;\n}", "unique_id": "MBCPP_810_1", "index": 7040}
{"task_id": "MBCPP/811", "completion": "    if (testList1.size() != testList2.size())\n        return false;\n    for (int i = 0; i < testList1.size(); i++) {\n        if (testList1[i].size() != testList2[i].size())\n            return false;\n        for (int j = 0; j < testList1[i].size(); j++) {\n            if (testList1[i][j] != testList2[i][j])\n                return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_811_10", "index": 7059}
{"task_id": "MBCPP/812", "completion": "    size_t pos = street.find(\" Road\");\n    if (pos != string::npos) {\n        street.replace(pos, 5, \" Rd.\");\n    }\n    return street;\n}", "unique_id": "MBCPP_812_1", "index": 7060}
{"task_id": "MBCPP/813", "completion": "    return str1.length();\n}", "unique_id": "MBCPP_813_1", "index": 7070}
{"task_id": "MBCPP/814", "completion": "    return (p * q) / 2;\n}", "unique_id": "MBCPP_814_1", "index": 7080}
{"task_id": "MBCPP/815", "completion": "    int low = 0, mid = 0, high = n - 1;\n    while (mid <= high) {\n        if (arr[mid] == 0) {\n            swap(arr[low], arr[mid]);\n            low++;\n            mid++;\n        } else if (arr[mid] == 1) {\n            mid++;\n        } else {\n            swap(arr[mid], arr[high]);\n            high--;\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_815_2", "index": 7091}
{"task_id": "MBCPP/817", "completion": "    vector<int> result;\n    auto isDivisible = [m, n](int num) { return num % m == 0 || num % n == 0; };\n    copy_if(nums.begin(), nums.end(), back_inserter(result), isDivisible);\n    return result;\n}", "unique_id": "MBCPP_817_5", "index": 7104}
{"task_id": "MBCPP/818", "completion": "    int count = 0;\n    for (char ch : str) {\n        if (islower(ch)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_818_1", "index": 7110}
{"task_id": "MBCPP/819", "completion": "    vector<vector<int>> result(2);\n    if (lists.empty()) return result;\n\n    int count = 1;\n    result[0].push_back(lists[0]);\n    for (size_t i = 1; i < lists.size(); ++i) {\n        if (lists[i] == lists[i - 1]) {\n            count++;\n        } else {\n            result[1].push_back(count);\n            result[0].push_back(lists[i]);\n            count = 1;\n        }\n    }\n    result[1].push_back(count);\n\n    return result;\n}", "unique_id": "MBCPP_819_3", "index": 7122}
{"task_id": "MBCPP/820", "completion": "    if (monthnum1 == 2)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_820_3", "index": 7132}
{"task_id": "MBCPP/821", "completion": "    unordered_map<string, string> result = dict1;\n    for (const auto& pair : dict2) {\n        result[pair.first] = pair.second;\n    }\n    return result;\n}", "unique_id": "MBCPP_821_1", "index": 7140}
{"task_id": "MBCPP/822", "completion": "    bool hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n    if (p.length() < 8)\n        return false;\n    for (char c : p) {\n        if (isupper(c))\n            hasUpper = true;\n        else if (islower(c))\n            hasLower = true;\n        else if (isdigit(c))\n            hasDigit = true;\n        else if (!isalnum(c))\n            hasSpecial = true;\n    }\n    return hasUpper && hasLower && hasDigit && hasSpecial;\n}", "unique_id": "MBCPP_822_1", "index": 7150}
{"task_id": "MBCPP/823", "completion": "    regex pattern(\"^\" + sample);\n    if (regex_search(str, pattern)) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }\n}", "unique_id": "MBCPP_823_1", "index": 7160}
{"task_id": "MBCPP/824", "completion": "    vector<int> result;\n    for (int num : l) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_824_1", "index": 7170}
{"task_id": "MBCPP/825", "completion": "    vector<int> result;\n    for (int index : listIndex) {\n        if (index >= 0 && index < nums.size()) {\n            result.push_back(nums[index]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_825_10", "index": 7189}
{"task_id": "MBCPP/826", "completion": "    if (a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c <= b || b + c <= a)\n        return \"Not a Triangle\";\n    \n    if (a == b && b == c)\n        return \"Acute-angled Triangle\";\n    \n    int maxSide = max(a, max(b, c));\n    int sumSquares = a * a + b * b + c * c;\n    \n    if (2 * maxSide * maxSide == sumSquares)\n        return \"Right-angled Triangle\";\n    else if (2 * maxSide * maxSide > sumSquares)\n        return \"Obtuse-angled Triangle\";\n    else\n        return \"Acute-angled Triangle\";\n}", "unique_id": "MBCPP_826_1", "index": 7190}
{"task_id": "MBCPP/827", "completion": "    int sum = 0;\n    for (const auto& row : list1) {\n        if (c < row.size()) {\n            sum += row[c];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_827_5", "index": 7204}
{"task_id": "MBCPP/828", "completion": "    int alpha = 0, digit = 0, spl = 0;\n    for (char ch : str) {\n        if (isalpha(ch))\n            alpha++;\n        else if (isdigit(ch))\n            digit++;\n        else\n            spl++;\n    }\n    return {alpha, digit, spl};\n}", "unique_id": "MBCPP_828_1", "index": 7210}
{"task_id": "MBCPP/829", "completion": "    unordered_map<string, int> freqMap;\n    for (const string& s : input) {\n        freqMap[s]++;\n    }\n\n    if (freqMap.size() < 2) {\n        return \"\";\n    }\n\n    priority_queue<pair<int, string>> pq;\n    for (const auto& entry : freqMap) {\n        pq.push({entry.second, entry.first});\n    }\n\n    pq.pop(); // Remove the most frequent\n    return pq.top().second;\n}", "unique_id": "MBCPP_829_2", "index": 7221}
{"task_id": "MBCPP/831", "completion": "    unordered_map<int, int> freq;\n    int count = 0;\n    \n    for (int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    \n    for (auto it : freq) {\n        int f = it.second;\n        if (f >= 2) {\n            count += (f * (f - 1)) / 2;\n        }\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_831_2", "index": 7231}
{"task_id": "MBCPP/832", "completion": "    regex pattern(\"\\\\d+\");\n    smatch matches;\n    string s = input;\n    int maxNum = 0;\n    while (regex_search(s, matches, pattern)) {\n        for (auto match : matches) {\n            int num = stoi(match.str());\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        s = matches.suffix().str();\n    }\n    return maxNum;\n}", "unique_id": "MBCPP_832_1", "index": 7240}
{"task_id": "MBCPP/833", "completion": "    vector<int> keys;\n    for (auto& pair : dict) {\n        keys.push_back(pair.first);\n    }\n    return keys;\n}", "unique_id": "MBCPP_833_1", "index": 7250}
{"task_id": "MBCPP/834", "completion": "    vector<vector<int>> matrix(n, vector<int>(n));\n    int num = 1;\n    int left = 0, right = n - 1, top = 0, bottom = n - 1;\n    \n    while (left <= right && top <= bottom) {\n        for (int i = left; i <= right; i++) {\n            matrix[top][i] = num++;\n        }\n        top++;\n        \n        for (int i = top; i <= bottom; i++) {\n            matrix[i][right] = num++;\n        }\n        right--;\n        \n        if (top <= bottom) {\n            for (int i = right; i >= left; i--) {\n                matrix[bottom][i] = num++;\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                matrix[i][left] = num++;\n            }\n            left++;\n        }\n    }\n    \n    return matrix;\n}", "unique_id": "MBCPP_834_1", "index": 7260}
{"task_id": "MBCPP/836", "completion": "    int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n    for (int i = 0; i < size; i++) {\n        max_ending_here += a[i];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    return end - start + 1;\n}", "unique_id": "MBCPP_836_4", "index": 7273}
{"task_id": "MBCPP/837", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int odd = 2 * i - 1;\n        sum += odd * odd * odd;\n    }\n    return sum;\n}", "unique_id": "MBCPP_837_4", "index": 7283}
{"task_id": "MBCPP/838", "completion": "    int swaps = 0;\n    int n = s1.length();\n    for (int i = 0; i < n; i++) {\n        if (s1[i] != s2[i]) {\n            int j = i + 1;\n            while (j < n && s1[j] == s1[i]) {\n                j++;\n            }\n            if (j < n) {\n                swap(s1[i], s1[j]);\n                swaps++;\n            }\n        }\n    }\n    return swaps;\n}", "unique_id": "MBCPP_838_6", "index": 7295}
{"task_id": "MBCPP/840", "completion": "    if (b == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "unique_id": "MBCPP_840_1", "index": 7300}
{"task_id": "MBCPP/841", "completion": "    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}", "unique_id": "MBCPP_841_2", "index": 7311}
{"task_id": "MBCPP/842", "completion": "    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_842_6", "index": 7325}
{"task_id": "MBCPP/843", "completion": "    priority_queue<long, vector<long>, greater<long>> pq;\n    pq.push(1);\n    long ugly = 0;\n    for (int i = 0; i < n; i++) {\n        ugly = pq.top();\n        pq.pop();\n        while (!pq.empty() && pq.top() == ugly) {\n            pq.pop();\n        }\n        for (int prime : primes) {\n            pq.push(ugly * prime);\n        }\n    }\n    return ugly;\n}", "unique_id": "MBCPP_843_1", "index": 7330}
{"task_id": "MBCPP/844", "completion": "    vector<int> arr;\n    for(int i = 1; i <= n; i += 2) {\n        arr.push_back(i);\n    }\n    for(int i = 2; i <= n; i += 2) {\n        arr.push_back(i);\n    }\n    return arr[k-1];\n}", "unique_id": "MBCPP_844_1", "index": 7340}
{"task_id": "MBCPP/845", "completion": "    if (n < 0)\n        return 0;\n    if (n <= 1)\n        return 1;\n    double digits = 0;\n    for (int i = 2; i <= n; i++)\n        digits += log10(i);\n    return floor(digits) + 1;\n}", "unique_id": "MBCPP_845_2", "index": 7351}
{"task_id": "MBCPP/846", "completion": "    sort(arr.begin(), arr.end());\n    sort(dep.begin(), dep.end());\n    \n    int platforms = 1, result = 1;\n    int i = 1, j = 0;\n    \n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            platforms++;\n            i++;\n        } else {\n            platforms--;\n            j++;\n        }\n        if (platforms > result) {\n            result = platforms;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_846_8", "index": 7367}
{"task_id": "MBCPP/847", "completion": "    vector<int> result;\n    for (int x : xs) {\n        result.push_back(x);\n    }\n    return result;\n}", "unique_id": "MBCPP_847_5", "index": 7374}
{"task_id": "MBCPP/848", "completion": "    return (base1 + base2) * height / 2;\n}", "unique_id": "MBCPP_848_6", "index": 7385}
{"task_id": "MBCPP/849", "completion": "    int sum = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            bool isPrime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_849_4", "index": 7393}
{"task_id": "MBCPP/850", "completion": "    if (a <= 0 || b <= 0 || c <= 0)\n        return false;\n    if (a + b + c != 180)\n        return false;\n    return true;\n}", "unique_id": "MBCPP_850_1", "index": 7400}
{"task_id": "MBCPP/852", "completion": "    vector<int> result;\n    for (int num : numList) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_852_2", "index": 7411}
{"task_id": "MBCPP/853", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_853_4", "index": 7423}
{"task_id": "MBCPP/854", "completion": "    make_heap(rawheap.begin(), rawheap.end(), greater<int>());\n    return rawheap;\n}", "unique_id": "MBCPP_854_8", "index": 7437}
{"task_id": "MBCPP/855", "completion": "    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return (count % 2 == 0);\n}", "unique_id": "MBCPP_855_7", "index": 7446}
{"task_id": "MBCPP/856", "completion": "    int count = 0;\n    int swaps = 0;\n    for (int i = n - 1; i >= 0; i--) {\n        if (arr[i] == 0) {\n            count++;\n        } else {\n            swaps += count;\n        }\n    }\n    return swaps;\n}", "unique_id": "MBCPP_856_8", "index": 7457}
{"task_id": "MBCPP/857", "completion": "    vector<vector<string>> result;\n    transform(list1.begin(), list1.end(), back_inserter(result), [](const string& s) {\n        vector<string> chars;\n        for (char c : s) {\n            chars.push_back(string(1, c));\n        }\n        return chars;\n    });\n    return result;\n}", "unique_id": "MBCPP_857_1", "index": 7460}
{"task_id": "MBCPP/858", "completion": "    int count = inputList.size();\n    return count * count;\n}", "unique_id": "MBCPP_858_7", "index": 7476}
{"task_id": "MBCPP/860", "completion": "    regex pattern(\"[a-zA-Z0-9]+$\");\n    if (regex_match(str, pattern))\n        return \"Accept\";\n    else\n        return \"Discard\";\n}", "unique_id": "MBCPP_860_8", "index": 7487}
{"task_id": "MBCPP/861", "completion": "    string sortedStr = str;\n    sort(sortedStr.begin(), sortedStr.end());\n    vector<string> result;\n    copy_if(texts.begin(), texts.end(), back_inserter(result), [&](const string& s) {\n        string temp = s;\n        sort(temp.begin(), temp.end());\n        return temp == sortedStr;\n    });\n    return result;\n}", "unique_id": "MBCPP_861_2", "index": 7491}
{"task_id": "MBCPP/863", "completion": "    unordered_set<int> S;\n    for (int i = 0; i < n; i++)\n        S.insert(arr[i]);\n\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        if (S.find(arr[i] - 1) == S.end()) {\n            int j = arr[i];\n            while (S.find(j) != S.end())\n                j++;\n            ans = max(ans, j - arr[i]);\n        }\n    }\n    return ans;\n}", "unique_id": "MBCPP_863_1", "index": 7500}
{"task_id": "MBCPP/864", "completion": "    auto isPalindrome = [](const string& s) {\n        return equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n\n    vector<string> result;\n    copy_if(texts.begin(), texts.end(), back_inserter(result), isPalindrome);\n    return result;\n}", "unique_id": "MBCPP_864_1", "index": 7510}
{"task_id": "MBCPP/865", "completion": "    vector<int> result;\n    transform(nums.begin(), nums.end(), back_inserter(result), [n](int x) { return x * n; });\n    return result;\n}", "unique_id": "MBCPP_865_4", "index": 7523}
{"task_id": "MBCPP/866", "completion": "    if (monthname2 == \"January\" || monthname2 == \"March\" || monthname2 == \"May\" || \n        monthname2 == \"July\" || monthname2 == \"August\" || monthname2 == \"October\" || \n        monthname2 == \"December\") {\n        return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_866_10", "index": 7539}
{"task_id": "MBCPP/867", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    if (sum % 2 == 0) {\n        return 0;\n    } else {\n        return 1;\n    }\n}", "unique_id": "MBCPP_867_8", "index": 7547}
{"task_id": "MBCPP/868", "completion": "    int len = 0;\n    int i = a.length() - 1;\n    while (i >= 0 && a[i] == ' ')\n        i--;\n    while (i >= 0 && a[i] != ' ') {\n        len++;\n        i--;\n    }\n    return len;\n}", "unique_id": "MBCPP_868_4", "index": 7553}
{"task_id": "MBCPP/869", "completion": "    vector<vector<int>> result;\n    for (const auto& sublist : list1) {\n        bool withinRange = false;\n        for (int num : sublist) {\n            if (num >= leftrange && num <= rigthrange) {\n                withinRange = true;\n                break;\n            }\n        }\n        if (withinRange) {\n            result.push_back(sublist);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_869_4", "index": 7563}
{"task_id": "MBCPP/870", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {\n        return num > 0 ? sum + num : sum;\n    });\n}", "unique_id": "MBCPP_870_7", "index": 7576}
{"task_id": "MBCPP/871", "completion": "    if (string1.length() != string2.length())\n        return false;\n    \n    string temp = string1 + string1;\n    return (temp.find(string2) != string::npos);\n}", "unique_id": "MBCPP_871_10", "index": 7589}
{"task_id": "MBCPP/873", "completion": "    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}", "unique_id": "MBCPP_873_8", "index": 7597}
{"task_id": "MBCPP/874", "completion": "    if (str2.empty()) return str1.empty();\n    int len1 = str1.length();\n    int len2 = str2.length();\n    if (len1 % len2 != 0) return false;\n    for (int i = 0; i < len1; i += len2) {\n        if (str1.substr(i, len2) != str2) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_874_1", "index": 7600}
{"task_id": "MBCPP/875", "completion": "    int minDiff = INT_MAX;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff < minDiff) {\n            minDiff = diff;\n        }\n    }\n    return minDiff;\n}", "unique_id": "MBCPP_875_4", "index": 7613}
{"task_id": "MBCPP/876", "completion": "    int gcd = __gcd(x, y);\n    return (x * y) / gcd;\n}", "unique_id": "MBCPP_876_1", "index": 7620}
{"task_id": "MBCPP/877", "completion": "    sort(str.begin(), str.end());\n    return str;\n}", "unique_id": "MBCPP_877_2", "index": 7631}
{"task_id": "MBCPP/878", "completion": "    unordered_set<int> kSet(k.begin(), k.end());\n    unordered_set<int> tupleSet(testTuple.begin(), testTuple.end());\n    return kSet == tupleSet;\n}", "unique_id": "MBCPP_878_7", "index": 7646}
{"task_id": "MBCPP/879", "completion": "    regex pattern(\"a.*b$\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_879_7", "index": 7656}
{"task_id": "MBCPP/880", "completion": "    int discriminant = b * b - 4 * a * c;\n    if (discriminant > 0) {\n        return \"2 solutions\";\n    } else if (discriminant == 0) {\n        return \"1 solution\";\n    } else {\n        return \"No solutions\";\n    }\n}", "unique_id": "MBCPP_880_2", "index": 7661}
{"task_id": "MBCPP/881", "completion": "    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    if (even == -1) even = 0;\n    if (odd == -1) odd = 0;\n    return even + odd;\n}", "unique_id": "MBCPP_881_7", "index": 7676}
{"task_id": "MBCPP/882", "completion": "    return 2 * (b + h);\n}", "unique_id": "MBCPP_882_9", "index": 7688}
{"task_id": "MBCPP/883", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [m, n](int x) {\n        return x % m == 0 && x % n == 0;\n    });\n    return result;\n}", "unique_id": "MBCPP_883_7", "index": 7696}
{"task_id": "MBCPP/884", "completion": "    int mask = (1 << (r - l + 1)) - 1;\n    mask = mask << (l - 1);\n    return (n & mask) == mask;\n}", "unique_id": "MBCPP_884_2", "index": 7701}
{"task_id": "MBCPP/885", "completion": "    if (str1.length() != str2.length())\n        return false;\n\n    unordered_map<char, char> map1, map2;\n\n    for (int i = 0; i < str1.length(); i++) {\n        char c1 = str1[i], c2 = str2[i];\n\n        if (map1.find(c1) != map1.end()) {\n            if (map1[c1] != c2)\n                return false;\n        } else {\n            if (map2.find(c2) != map2.end())\n                return false;\n            map1[c1] = c2;\n            map2[c2] = c1;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_885_2", "index": 7711}
{"task_id": "MBCPP/886", "completion": "    double sum = 0;\n    for (int num : numbers) {\n        sum += num;\n    }\n    return sum / numbers.size();\n}", "unique_id": "MBCPP_886_1", "index": 7720}
{"task_id": "MBCPP/887", "completion": "    return (n & 1);\n}", "unique_id": "MBCPP_887_1", "index": 7730}
{"task_id": "MBCPP/888", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] - testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_888_6", "index": 7745}
{"task_id": "MBCPP/889", "completion": "    for (auto& list : lists) {\n        reverse(list.begin(), list.end());\n    }\n    return lists;\n}", "unique_id": "MBCPP_889_7", "index": 7756}
{"task_id": "MBCPP/890", "completion": "    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (mid < arr2.size() && arr1[mid] == arr2[mid]) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}", "unique_id": "MBCPP_890_4", "index": 7763}
{"task_id": "MBCPP/891", "completion": "    int countA = 0, countB = 0;\n    if (a == 0) countA = 1;\n    if (b == 0) countB = 1;\n    while (a != 0) {\n        countA++;\n        a /= 10;\n    }\n    while (b != 0) {\n        countB++;\n        b /= 10;\n    }\n    return countA == countB;\n}", "unique_id": "MBCPP_891_2", "index": 7771}
{"task_id": "MBCPP/892", "completion": "    string result;\n    bool space = false;\n    for (char c : text) {\n        if (c == ' ') {\n            if (!space) {\n                result += c;\n                space = true;\n            }\n        } else {\n            result += c;\n            space = false;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_892_2", "index": 7781}
{"task_id": "MBCPP/894", "completion": "    vector<double> result;\n    stringstream ss(testStr);\n    string token;\n    while (getline(ss, token, ',')) {\n        double num = stod(token);\n        result.push_back(num);\n    }\n    return result;\n}", "unique_id": "MBCPP_894_1", "index": 7790}
{"task_id": "MBCPP/895", "completion": "    int n = a.size();\n    if (n == 0) return 0;\n    if (n == 1) return a[0];\n    \n    vector<int> dp(n);\n    dp[0] = a[0];\n    dp[1] = max(a[0], a[1]);\n    \n    for (int i = 2; i < n; ++i) {\n        dp[i] = max(dp[i - 1], dp[i - 2] + a[i]);\n    }\n    \n    return dp[n - 1];\n}", "unique_id": "MBCPP_895_5", "index": 7804}
{"task_id": "MBCPP/896", "completion": "    sort(tuples.begin(), tuples.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tuples;\n}", "unique_id": "MBCPP_896_5", "index": 7814}
{"task_id": "MBCPP/897", "completion": "    stringstream ss(sentence);\n    string token;\n    while (ss >> token) {\n        if (token == word) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_897_5", "index": 7824}
{"task_id": "MBCPP/898", "completion": "    vector<int> result;\n    if (numbers.empty() || n <= 0) return result;\n    \n    int count = 1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] == numbers[i-1]) {\n            count++;\n            if (count == n) {\n                result.push_back(numbers[i]);\n                count = 1;\n            }\n        } else {\n            count = 1;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_898_1", "index": 7830}
{"task_id": "MBCPP/899", "completion": "    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    int left = 0, right = n - 1;\n    for (int i = 0; i < n; ++i) {\n        if (arr[left] == sortedArr[i]) {\n            left++;\n        } else if (arr[right] == sortedArr[i]) {\n            right--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_899_1", "index": 7840}
{"task_id": "MBCPP/900", "completion": "    if (str.empty())\n        return false;\n    return str[0] == '5' && str.size() > 1 && str[1] == '-';\n}", "unique_id": "MBCPP_900_1", "index": 7850}
{"task_id": "MBCPP/901", "completion": "    if (n == 1)\n        return 1;\n    \n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result = (result * i) / __gcd(result, (long)i);\n    }\n    return result;\n}", "unique_id": "MBCPP_901_9", "index": 7868}
{"task_id": "MBCPP/902", "completion": "    for (const auto& pair : d2) {\n        d1[pair.first] += pair.second;\n    }\n    return d1;\n}", "unique_id": "MBCPP_902_1", "index": 7870}
{"task_id": "MBCPP/903", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num > 0) {\n            if ((num & 1) == 0) {\n                count++;\n            }\n            num >>= 1;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_903_1", "index": 7880}
{"task_id": "MBCPP/905", "completion": "    int sum = 0;\n    int C[n+1][n+1];\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, n); j++) {\n            if (j == 0 || j == i)\n                C[i][j] = 1;\n            else\n                C[i][j] = C[i-1][j-1] + C[i-1][j];\n        }\n    }\n    for (int i = 0; i <= n; i++) {\n        sum += C[n][i] * C[n][i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_905_2", "index": 7891}
{"task_id": "MBCPP/906", "completion": "    regex pattern(R\"((\\d{4})/(\\d{2})/(\\d{2}))\");\n    smatch match;\n    vector<vector<string>> result;\n    if (regex_search(url, match, pattern)) {\n        result.push_back({match[1], match[2], match[3]});\n    }\n    return result;\n}", "unique_id": "MBCPP_906_6", "index": 7905}
{"task_id": "MBCPP/907", "completion": "    vector<int> luckyNumbers;\n    int count = 0;\n    int num = 1;\n    \n    while (count < n) {\n        string s = to_string(num);\n        bool isLucky = true;\n        for (char c : s) {\n            if (c != '3' && c != '7' && c != '1' && c != '5' && c != '9') {\n                isLucky = false;\n                break;\n            }\n        }\n        if (isLucky) {\n            luckyNumbers.push_back(num);\n            count++;\n        }\n        num++;\n    }\n    \n    return luckyNumbers;\n}", "unique_id": "MBCPP_907_1", "index": 7910}
{"task_id": "MBCPP/908", "completion": "    for (int i = 0; i < n; i++) {\n        if (arr[i] == i)\n            return i;\n    }\n    return -1;\n}", "unique_id": "MBCPP_908_1", "index": 7920}
{"task_id": "MBCPP/909", "completion": "    num--;\n    while (num >= 0) {\n        int reversed = 0;\n        int original = num;\n        while (original != 0) {\n            reversed = reversed * 10 + original % 10;\n            original /= 10;\n        }\n        if (reversed == num) {\n            return num;\n        }\n        num--;\n    }\n    return -1;\n}", "unique_id": "MBCPP_909_6", "index": 7935}
{"task_id": "MBCPP/911", "completion": "    priority_queue<int> maxHeap;\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    \n    for (int num : nums) {\n        maxHeap.push(num);\n        minHeap.push(num);\n        \n        if (maxHeap.size() > 3) maxHeap.pop();\n        if (minHeap.size() > 2) minHeap.pop();\n    }\n    \n    int max1 = maxHeap.top(); maxHeap.pop();\n    int max2 = maxHeap.top(); maxHeap.pop();\n    int max3 = maxHeap.top(); maxHeap.pop();\n    \n    int min1 = minHeap.top(); minHeap.pop();\n    int min2 = minHeap.top(); minHeap.pop();\n    \n    return max(max1 * max2 * max3, min1 * min2 * max1);\n}", "unique_id": "MBCPP_911_5", "index": 7944}
{"task_id": "MBCPP/912", "completion": "    if (m == 0 && n == 0)\n        return 1;\n    if (m > n || m < 0)\n        return 0;\n    return ((2 * m + 1) * lobbNum(n, m + 1) + (n - m) * lobbNum(n, m - 1)) / (n + m + 1);\n}", "unique_id": "MBCPP_912_4", "index": 7953}
{"task_id": "MBCPP/913", "completion": "    if (str.empty())\n        return false;\n    char lastChar = str.back();\n    return isdigit(lastChar);\n}", "unique_id": "MBCPP_913_8", "index": 7967}
{"task_id": "MBCPP/914", "completion": "    if (s.length() < 2)\n        return false;\n    \n    char first = s[0];\n    char second = s[1];\n    \n    if (first == second)\n        return false;\n    \n    for (int i = 2; i < s.length(); i++) {\n        if (i % 2 == 0) {\n            if (s[i] != first)\n                return false;\n        } else {\n            if (s[i] != second)\n                return false;\n        }\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_914_5", "index": 7974}
{"task_id": "MBCPP/915", "completion": "    auto comp = [](int a, int b) {\n        if ((a >= 0 && b >= 0) || (a < 0 && b < 0))\n            return false;\n        return a >= 0;\n    };\n    stable_sort(arrayNums.begin(), arrayNums.end(), comp);\n    return arrayNums;\n}", "unique_id": "MBCPP_915_8", "index": 7987}
{"task_id": "MBCPP/916", "completion": "    sort(a.begin(), a.end());\n    vector<int> result;\n    for (int i = 0; i < arrSize - 2; i++) {\n        int left = i + 1;\n        int right = arrSize - 1;\n        while (left < right) {\n            int currentSum = a[i] + a[left] + a[right];\n            if (currentSum == sum) {\n                result.push_back(a[i]);\n                result.push_back(a[left]);\n                result.push_back(a[right]);\n                return result;\n            } else if (currentSum < sum) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_916_7", "index": 7996}
{"task_id": "MBCPP/917", "completion": "    if (text.length() < 2)\n        return \"Not matched!\";\n    \n    for (size_t i = 0; i < text.length() - 1; ++i) {\n        if (isupper(text[i]) && islower(text[i+1])) {\n            return \"Found a match!\";\n        }\n    }\n    \n    return \"Not matched!\";\n}", "unique_id": "MBCPP_917_3", "index": 8002}
{"task_id": "MBCPP/918", "completion": "    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    for (int i = 0; i < m; i++) {\n        for (int j = s[i]; j <= n; j++) {\n            dp[j] += dp[j - s[i]];\n        }\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_918_1", "index": 8010}
{"task_id": "MBCPP/919", "completion": "    int result = 1;\n    for (int item : items) {\n        result *= item;\n    }\n    return result;\n}", "unique_id": "MBCPP_919_6", "index": 8025}
{"task_id": "MBCPP/921", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup.size(); i += n) {\n        auto start = testTup.begin() + i;\n        auto end = (i + n < testTup.size()) ? testTup.begin() + i + n : testTup.end();\n        result.push_back(vector<int>(start, end));\n    }\n    return result;\n}", "unique_id": "MBCPP_921_7", "index": 8036}
{"task_id": "MBCPP/922", "completion": "    sort(arr.begin(), arr.end());\n    int n = arr.size();\n    long long product1 = arr[n-1] * arr[n-2];\n    long long product2 = arr[0] * arr[1];\n    if (product1 > product2) {\n        return {arr[n-2], arr[n-1]};\n    } else {\n        return {arr[0], arr[1]};\n    }\n}", "unique_id": "MBCPP_922_5", "index": 8044}
{"task_id": "MBCPP/923", "completion": "    int dp[m+1][n+1];\n    for(int i=0; i<=m; i++) {\n        for(int j=0; j<=n; j++) {\n            if(i==0)\n                dp[i][j] = j;\n            else if(j==0)\n                dp[i][j] = i;\n            else if(x[i-1] == y[j-1])\n                dp[i][j] = 1 + dp[i-1][j-1];\n            else\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[m][n];\n}", "unique_id": "MBCPP_923_5", "index": 8054}
{"task_id": "MBCPP/924", "completion": "    return (x > y) ? x : y;\n}", "unique_id": "MBCPP_924_5", "index": 8064}
{"task_id": "MBCPP/925", "completion": "    int product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;\n}", "unique_id": "MBCPP_925_2", "index": 8071}
{"task_id": "MBCPP/926", "completion": "    if (m == 0) {\n        if (n == 0) return 1;\n        return (n - 1) * (rencontresNumber(n - 1, 0) + rencontresNumber(n - 2, 0));\n    }\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n    dp[0][0] = 1;\n    for (int i = 1; i <= n; i++) {\n        dp[i][0] = (i - 1) * (dp[i - 1][0] + dp[i - 2][0]);\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] * (i - 1 - j) + dp[i - 2][j] * j;\n        }\n    }\n    return dp[n][m];\n}", "unique_id": "MBCPP_926_10", "index": 8089}
{"task_id": "MBCPP/928", "completion": "    string year = dt.substr(0, 4);\n    string month = dt.substr(5, 2);\n    string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}", "unique_id": "MBCPP_928_1", "index": 8090}
{"task_id": "MBCPP/929", "completion": "    int count = 0;\n    for (int num : tuplex) {\n        if (num == value) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_929_6", "index": 8105}
{"task_id": "MBCPP/930", "completion": "    regex pattern(\"ab*\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_930_1", "index": 8110}
{"task_id": "MBCPP/931", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_931_2", "index": 8121}
{"task_id": "MBCPP/932", "completion": "    unordered_set<string> seen;\n    vector<string> result;\n    for (const auto& word : l) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_932_7", "index": 8136}
{"task_id": "MBCPP/933", "completion": "    string result;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!result.empty()) {\n                result += '_';\n            }\n            result += tolower(ch);\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_933_6", "index": 8145}
{"task_id": "MBCPP/934", "completion": "    if (m == 0 || n == 0)\n        return 1;\n    return dealnnoyNum(m - 1, n) + dealnnoyNum(m - 1, n - 1) + dealnnoyNum(m, n - 1);\n}", "unique_id": "MBCPP_934_6", "index": 8155}
{"task_id": "MBCPP/935", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_935_6", "index": 8165}
{"task_id": "MBCPP/936", "completion": "    unordered_map<int, vector<int>> mp;\n    for (const auto& tuple : testList) {\n        mp[tuple[0]] = tuple;\n    }\n    vector<vector<int>> result;\n    for (int key : ordList) {\n        if (mp.find(key) != mp.end()) {\n            result.push_back(mp[key]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_936_7", "index": 8176}
{"task_id": "MBCPP/937", "completion": "    unordered_map<char, int> charCount;\n    for (char c : str1) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n\n    char maxChar = '\\0';\n    int maxCount = 0;\n    for (auto& pair : charCount) {\n        if (pair.second > maxCount || (pair.second == maxCount && pair.first < maxChar)) {\n            maxChar = pair.first;\n            maxCount = pair.second;\n        }\n    }\n\n    return string(1, maxChar);\n}", "unique_id": "MBCPP_937_1", "index": 8180}
{"task_id": "MBCPP/938", "completion": "    vector<int> result(3);\n    int i = 0, j = 0, k = 0;\n    int min_diff = INT_MAX;\n    while (i < p && j < q && k < r) {\n        int current_diff = abs(a[i] - b[j]) + abs(b[j] - c[k]) + abs(c[k] - a[i]);\n        if (current_diff < min_diff) {\n            min_diff = current_diff;\n            result[0] = a[i];\n            result[1] = b[j];\n            result[2] = c[k];\n        }\n        if (a[i] <= b[j] && a[i] <= c[k]) {\n            i++;\n        } else if (b[j] <= a[i] && b[j] <= c[k]) {\n            j++;\n        } else {\n            k++;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_938_2", "index": 8191}
{"task_id": "MBCPP/940", "completion": "    int n = arr.size();\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n        if (left < n && arr[left] > arr[largest])\n            largest = left;\n        if (right < n && arr[right] > arr[largest])\n            largest = right;\n        if (largest != i) {\n            swap(arr[i], arr[largest]);\n            i = largest;\n            i++;\n        }\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        swap(arr[0], arr[i]);\n        int largest = 0;\n        int left = 1;\n        int right = 2;\n        while (left < i) {\n            if (arr[left] > arr[largest])\n                largest = left;\n            if (right < i && arr[right] > arr[largest])\n                largest = right;\n            if (largest != left && largest != right)\n                break;\n            swap(arr[largest], arr[left]);\n            left = 2 * largest + 1;\n            right = 2 * largest + 2;\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_940_6", "index": 8205}
{"task_id": "MBCPP/942", "completion": "    for (int num : testTup) {\n        if (find(checkList.begin(), checkList.end(), num) != checkList.end()) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_942_6", "index": 8215}
{"task_id": "MBCPP/943", "completion": "    vector<int> result;\n    int i = 0, j = 0;\n    while (i < num1.size() && j < num2.size()) {\n        if (num1[i] < num2[j]) {\n            result.push_back(num1[i]);\n            i++;\n        } else {\n            result.push_back(num2[j]);\n            j++;\n        }\n    }\n    while (i < num1.size()) {\n        result.push_back(num1[i]);\n        i++;\n    }\n    while (j < num2.size()) {\n        result.push_back(num2[j]);\n        j++;\n    }\n    return result;\n}", "unique_id": "MBCPP_943_1", "index": 8220}
{"task_id": "MBCPP/944", "completion": "    for (int i = 0; i < text.length(); i++) {\n        if (isdigit(text[i])) {\n            return i + 1;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_944_3", "index": 8232}
{"task_id": "MBCPP/945", "completion": "    unordered_set<string> s(t.begin(), t.end());\n    return s;\n}", "unique_id": "MBCPP_945_7", "index": 8246}
{"task_id": "MBCPP/947", "completion": "    int minLen = INT_MAX;\n    for (const auto& word : list1) {\n        if (word.length() < minLen) {\n            minLen = word.length();\n        }\n    }\n    return minLen;\n}", "unique_id": "MBCPP_947_2", "index": 8251}
{"task_id": "MBCPP/949", "completion": "    auto countDigits = [](const vector<int>& tuple) {\n        int count = 0;\n        for (int num : tuple) {\n            string s = to_string(num);\n            count += s.length();\n        }\n        return count;\n    };\n\n    sort(testList.begin(), testList.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return countDigits(a) < countDigits(b);\n    });\n\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            result += to_string(testList[i][j]);\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_949_8", "index": 8267}
{"task_id": "MBCPP/950", "completion": "    string zodiac[] = {\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\"};\n    return zodiac[year % 12];\n}", "unique_id": "MBCPP_950_1", "index": 8270}
{"task_id": "MBCPP/951", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testList1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testList1[i].size(); ++j) {\n            temp.push_back(max(testList1[i][j], testList2[i][j]));\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_951_1", "index": 8280}
{"task_id": "MBCPP/952", "completion": "    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    if (r > n - r)\n        r = n - r;\n    int dp[r + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = min(i, r); j > 0; j--) {\n            dp[j] = (dp[j] + dp[j - 1]) % p;\n        }\n    }\n    return dp[r];\n}", "unique_id": "MBCPP_952_9", "index": 8298}
{"task_id": "MBCPP/953", "completion": "    unordered_map<int, int> freq;\n    int max_freq = 0;\n    for (int i = 0; i < n; i++) {\n        freq[ar[i]]++;\n        if (freq[ar[i]] > max_freq)\n            max_freq = freq[ar[i]];\n    }\n    return max_freq;\n}", "unique_id": "MBCPP_953_1", "index": 8300}
{"task_id": "MBCPP/955", "completion": "    if (n < 1)\n        return false;\n    \n    int sum = 0;\n    for (int i = 1; i <= n / 2; ++i) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    \n    return sum > n;\n}", "unique_id": "MBCPP_955_10", "index": 8319}
{"task_id": "MBCPP/956", "completion": "    vector<string> result;\n    string temp;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!temp.empty()) {\n                result.push_back(temp);\n            }\n            temp = ch;\n        } else {\n            temp += ch;\n        }\n    }\n    if (!temp.empty()) {\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_956_1", "index": 8320}
{"task_id": "MBCPP/957", "completion": "    if (n == 0)\n        return 0;\n    return log2(n & -n) + 1;\n}", "unique_id": "MBCPP_957_1", "index": 8330}
{"task_id": "MBCPP/958", "completion": "    string roman;\n    vector<pair<int, string>> values = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n    \n    for (const auto& [value, symbol] : values) {\n        while (num >= value) {\n            roman += symbol;\n            num -= value;\n        }\n    }\n    \n    return roman;\n}", "unique_id": "MBCPP_958_1", "index": 8340}
{"task_id": "MBCPP/960", "completion": "    if (n == 0 || n == 1)\n        return 1;\n    return getNoofways(n - 1) + getNoofways(n - 2);\n}", "unique_id": "MBCPP_960_3", "index": 8352}
{"task_id": "MBCPP/961", "completion": "    unordered_map<char, int> roman = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n    };\n    \n    int total = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i + 1 < s.length() && roman[s[i]] < roman[s[i + 1]]) {\n            total += roman[s[i + 1]] - roman[s[i]];\n            i++;\n        } else {\n            total += roman[s[i]];\n        }\n    }\n    return total;\n}", "unique_id": "MBCPP_961_1", "index": 8360}
{"task_id": "MBCPP/962", "completion": "    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_962_7", "index": 8376}
{"task_id": "MBCPP/964", "completion": "    return s.length() % 2 == 0;\n}", "unique_id": "MBCPP_964_1", "index": 8380}
{"task_id": "MBCPP/965", "completion": "    string result;\n    for (size_t i = 0; i < text.length(); ++i) {\n        if (isupper(text[i])) {\n            if (i != 0) {\n                result += '_';\n            }\n            result += tolower(text[i]);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_965_2", "index": 8391}
{"task_id": "MBCPP/967", "completion": "    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    unordered_set<char> foundVowels;\n    \n    for (char ch : str) {\n        char lowerCh = tolower(ch);\n        if (vowels.find(lowerCh) != vowels.end()) {\n            foundVowels.insert(lowerCh);\n        }\n    }\n    \n    if (foundVowels.size() == vowels.size()) {\n        return \"accepted\";\n    } else {\n        return \"not accepted\";\n    }\n}", "unique_id": "MBCPP_967_1", "index": 8400}
{"task_id": "MBCPP/968", "completion": "    int max_val = INT_MIN;\n    for (int x = 0; x <= n; x++) {\n        int current = (a * x + b) / (a + b);\n        if (current > max_val) {\n            max_val = current;\n        }\n    }\n    return max_val;\n}", "unique_id": "MBCPP_968_3", "index": 8412}
{"task_id": "MBCPP/969", "completion": "    map<int, vector<int>> mp;\n    for (auto& tuple : testList) {\n        int key = tuple[0];\n        mp[key].insert(mp[key].end(), tuple.begin() + 1, tuple.end());\n    }\n    vector<vector<int>> result;\n    for (auto& [key, values] : mp) {\n        vector<int> temp;\n        temp.push_back(key);\n        temp.insert(temp.end(), values.begin(), values.end());\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_969_1", "index": 8420}
{"task_id": "MBCPP/970", "completion": "    return (x < y) ? x : y;\n}", "unique_id": "MBCPP_970_4", "index": 8433}
{"task_id": "MBCPP/971", "completion": "    vector<int> dp(n + 1, -1);\n    dp[0] = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (i >= a && dp[i - a] != -1)\n            dp[i] = max(dp[i], dp[i - a] + 1);\n        if (i >= b && dp[i - b] != -1)\n            dp[i] = max(dp[i], dp[i - b] + 1);\n        if (i >= c && dp[i - c] != -1)\n            dp[i] = max(dp[i], dp[i - c] + 1);\n    }\n    \n    return dp[n];\n}", "unique_id": "MBCPP_971_4", "index": 8443}
{"task_id": "MBCPP/972", "completion": "    vector<int> result;\n    result.insert(result.end(), testTup1.begin(), testTup1.end());\n    result.insert(result.end(), testTup2.begin(), testTup2.end());\n    return result;\n}", "unique_id": "MBCPP_972_2", "index": 8451}
{"task_id": "MBCPP/973", "completion": "    int n = s.length();\n    d = d % n;\n    string rotated = s.substr(d) + s.substr(0, d);\n    return rotated;\n}", "unique_id": "MBCPP_973_2", "index": 8461}
{"task_id": "MBCPP/974", "completion": "    int n = a.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    dp[0][0] = a[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + a[i][0];\n        for(int j = 1; j < i; j++) {\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + a[i][j];\n        }\n        dp[i][i] = dp[i-1][i-1] + a[i][i];\n    }\n    int minSum = INT_MAX;\n    for(int j = 0; j < n; j++) {\n        minSum = min(minSum, dp[n-1][j]);\n    }\n    return minSum;\n}", "unique_id": "MBCPP_974_1", "index": 8470}
