{"task_id": "MBCPP/1", "completion": "    int dp[m+1][n+1];\n    dp[0][0] = cost[0][0];\n    \n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        \n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n        \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + cost[i][j];\n        }\n    }\n    \n    return dp[m][n];\n}", "unique_id": "MBCPP_1_9", "index": 8}
{"task_id": "MBCPP/2", "completion": "    vector<int> result;\n    sort(testTup1.begin(), testTup1.end());\n    sort(testTup2.begin(), testTup2.end());\n    set_intersection(testTup1.begin(), testTup1.end(), testTup2.begin(), testTup2.end(), back_inserter(result));\n    return result;\n}", "unique_id": "MBCPP_2_2", "index": 11}
{"task_id": "MBCPP/3", "completion": "    if (n <= 1)\n        return true;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_3_3", "index": 22}
{"task_id": "MBCPP/4", "completion": "    priority_queue<int> maxHeap(nums.begin(), nums.end());\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    return result;\n}", "unique_id": "MBCPP_4_4", "index": 33}
{"task_id": "MBCPP/5", "completion": "    if (n % 2 != 0) return 0;\n    int dp[n+1];\n    dp[0] = 1;\n    dp[1] = 0;\n    dp[2] = 3;\n    for (int i = 4; i <= n; i += 2) {\n        dp[i] = 4 * dp[i-2] - dp[i-4];\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_5_6", "index": 45}
{"task_id": "MBCPP/6", "completion": "    int xorResult = a ^ b;\n    if (xorResult == 0)\n        return false;\n    return (xorResult & (xorResult - 1)) == 0;\n}", "unique_id": "MBCPP_6_4", "index": 53}
{"task_id": "MBCPP/7", "completion": "    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{4,}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_7_6", "index": 65}
{"task_id": "MBCPP/8", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [](int x) { return x * x; });\n    return nums;\n}", "unique_id": "MBCPP_8_10", "index": 79}
{"task_id": "MBCPP/9", "completion": "    string temp = str + str;\n    int n = str.length();\n    for (int i = 1; i <= n; i++) {\n        if (str == temp.substr(i, n))\n            return i;\n    }\n    return n;\n}", "unique_id": "MBCPP_9_3", "index": 82}
{"task_id": "MBCPP/10", "completion": "    vector<int> result;\n    if (n <= 0 || list1.empty()) return result;\n    \n    priority_queue<int> maxHeap;\n    \n    for (int num : list1) {\n        maxHeap.push(num);\n        if (maxHeap.size() > n) {\n            maxHeap.pop();\n        }\n    }\n    \n    while (!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    \n    reverse(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_10_3", "index": 92}
{"task_id": "MBCPP/11", "completion": "    size_t first = s.find(ch);\n    if (first != string::npos) {\n        s.erase(first, ch.length());\n    }\n    size_t last = s.rfind(ch);\n    if (last != string::npos) {\n        s.erase(last, ch.length());\n    }\n    return s;\n}", "unique_id": "MBCPP_11_1", "index": 100}
{"task_id": "MBCPP/12", "completion": "    auto rowSum = [](const vector<int>& row) {\n        return accumulate(row.begin(), row.end(), 0);\n    };\n    \n    sort(m.begin(), m.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return rowSum(a) < rowSum(b);\n    });\n    \n    return m;\n}", "unique_id": "MBCPP_12_8", "index": 117}
{"task_id": "MBCPP/14", "completion": "    return (b * h * l) / 2;\n}", "unique_id": "MBCPP_14_6", "index": 125}
{"task_id": "MBCPP/15", "completion": "    vector<string> result;\n    string current;\n    for (char c : text) {\n        if (islower(c)) {\n            if (!current.empty()) {\n                result.push_back(current);\n                current.clear();\n            }\n            current += c;\n        } else {\n            current += c;\n        }\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "unique_id": "MBCPP_15_7", "index": 136}
{"task_id": "MBCPP/16", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_16_5", "index": 144}
{"task_id": "MBCPP/17", "completion": "    return 4 * a;\n}", "unique_id": "MBCPP_17_8", "index": 157}
{"task_id": "MBCPP/18", "completion": "    unordered_set<char> charsToRemove;\n    for (char c : secondString) {\n        charsToRemove.insert(c);\n    }\n    \n    string result;\n    for (char c : str) {\n        if (charsToRemove.find(c) == charsToRemove.end()) {\n            result += c;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_18_2", "index": 161}
{"task_id": "MBCPP/19", "completion": "    unordered_set<int> seen;\n    for (int num : arraynums) {\n        if (seen.find(num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "unique_id": "MBCPP_19_6", "index": 175}
{"task_id": "MBCPP/20", "completion": "    if (x < 1)\n        return false;\n    \n    int n = 1;\n    while (true) {\n        int woodall = n * (1 << n) - 1;\n        if (woodall == x)\n            return true;\n        if (woodall > x)\n            return false;\n        n++;\n    }\n}", "unique_id": "MBCPP_20_7", "index": 186}
{"task_id": "MBCPP/21", "completion": "    vector<int> result;\n    for (int i = 1; i <= m; i++) {\n        result.push_back(n * i);\n    }\n    return result;\n}", "unique_id": "MBCPP_21_1", "index": 190}
{"task_id": "MBCPP/22", "completion": "    unordered_set<int> seen;\n    for (int num : nums) {\n        if (seen.find(num) != seen.end()) {\n            return num;\n        }\n        seen.insert(num);\n    }\n    return -1;\n}", "unique_id": "MBCPP_22_4", "index": 203}
{"task_id": "MBCPP/23", "completion": "    int maxSum = INT_MIN;\n    for (const auto& sublist : list1) {\n        int currentSum = 0;\n        for (int num : sublist) {\n            currentSum += num;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_23_1", "index": 210}
{"task_id": "MBCPP/24", "completion": "    int decimal = 0, base = 1;\n    while (binary > 0) {\n        int lastDigit = binary % 10;\n        binary = binary / 10;\n        decimal += lastDigit * base;\n        base = base * 2;\n    }\n    return decimal;\n}", "unique_id": "MBCPP_24_10", "index": 229}
{"task_id": "MBCPP/25", "completion": "    unordered_map<int, int> freq;\n    for(int num : arr) {\n        freq[num]++;\n    }\n    int product = 1;\n    for(auto& pair : freq) {\n        if(pair.second == 1) {\n            product *= pair.first;\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_25_6", "index": 235}
{"task_id": "MBCPP/26", "completion": "    for (const auto& vec : testList) {\n        for (int num : vec) {\n            if (num != k) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_26_6", "index": 245}
{"task_id": "MBCPP/27", "completion": "    for (auto& str : list) {\n        str.erase(remove_if(str.begin(), str.end(), ::isdigit), str.end());\n    }\n    return list;\n}", "unique_id": "MBCPP_27_1", "index": 250}
{"task_id": "MBCPP/28", "completion": "    int res = 1;\n    if (k > n - k)\n        k = n - k;\n    for (int i = 0; i < k; ++i) {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}", "unique_id": "MBCPP_28_4", "index": 263}
{"task_id": "MBCPP/29", "completion": "    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_29_6", "index": 275}
{"task_id": "MBCPP/30", "completion": "    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_30_2", "index": 281}
{"task_id": "MBCPP/31", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& list : nums) {\n        for (int num : list) {\n            freqMap[num]++;\n        }\n    }\n\n    priority_queue<pair<int, int>> maxHeap;\n    for (const auto& entry : freqMap) {\n        maxHeap.push({entry.second, entry.first});\n    }\n\n    vector<int> result;\n    for (int i = 0; i < k && !maxHeap.empty(); ++i) {\n        result.push_back(maxHeap.top().second);\n        maxHeap.pop();\n    }\n\n    return result;\n}", "unique_id": "MBCPP_31_4", "index": 293}
{"task_id": "MBCPP/32", "completion": "    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        maxPrime = n;\n    return maxPrime;\n}", "unique_id": "MBCPP_32_9", "index": 308}
{"task_id": "MBCPP/33", "completion": "    int binary = 0, remainder, base = 1;\n    while (n > 0) {\n        remainder = n % 2;\n        binary += remainder * base;\n        n /= 2;\n        base *= 10;\n    }\n    return binary;\n}", "unique_id": "MBCPP_33_5", "index": 314}
{"task_id": "MBCPP/34", "completion": "    int low = 0, high = ar.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (ar[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}", "unique_id": "MBCPP_34_8", "index": 327}
{"task_id": "MBCPP/35", "completion": "    return n * (n + 1);\n}", "unique_id": "MBCPP_35_2", "index": 331}
{"task_id": "MBCPP/36", "completion": "    if (q == 0) return -1; // Division by zero\n    int remainder = p % q;\n    for (int i = 0; i < n; ++i) {\n        remainder *= 10;\n        int digit = remainder / q;\n        remainder %= q;\n        if (i == n - 1) return digit;\n    }\n    return -1; // Should not reach here\n}", "unique_id": "MBCPP_36_8", "index": 347}
{"task_id": "MBCPP/38", "completion": "    int even = 0, odd = 0;\n    for (int num : list1) {\n        if (even == 0 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == 0 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != 0 && odd != 0) {\n            break;\n        }\n    }\n    if (odd == 0) {\n        return 0;\n    }\n    return even / odd;\n}", "unique_id": "MBCPP_38_9", "index": 358}
{"task_id": "MBCPP/39", "completion": "    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    }\n\n    priority_queue<pair<int, char>> maxHeap;\n    for (auto& [c, count] : freq) {\n        maxHeap.push({count, c});\n    }\n\n    string result;\n    pair<int, char> prev = {-1, '#'};\n\n    while (!maxHeap.empty()) {\n        auto curr = maxHeap.top();\n        maxHeap.pop();\n        result += curr.second;\n\n        if (prev.first > 0) {\n            maxHeap.push(prev);\n        }\n\n        curr.first--;\n        prev = curr;\n    }\n\n    if (result.size() != s.size()) {\n        return \"\";\n    }\n\n    return result;\n}", "unique_id": "MBCPP_39_7", "index": 366}
{"task_id": "MBCPP/40", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& innerVec : nums) {\n        for (int num : innerVec) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_40_5", "index": 374}
{"task_id": "MBCPP/41", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int n) { return n % 2 == 0; });\n    return result;\n}", "unique_id": "MBCPP_41_2", "index": 381}
{"task_id": "MBCPP/42", "completion": "    unordered_map<int, int> freq;\n    int sum = 0;\n    \n    for(int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    \n    for(auto it : freq) {\n        if(it.second > 1) {\n            sum += it.first * (it.second - 1);\n        }\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_42_1", "index": 390}
{"task_id": "MBCPP/43", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_43_10", "index": 409}
{"task_id": "MBCPP/44", "completion": "    if (text.empty()) return \"Not matched!\";\n    size_t firstNonSpace = text.find_first_not_of(' ');\n    if (firstNonSpace == string::npos || firstNonSpace != 0) return \"Not matched!\";\n    if (text.substr(0, 6) == \"python\") return \"Found a match!\";\n    return \"Not matched!\";\n}", "unique_id": "MBCPP_44_1", "index": 410}
{"task_id": "MBCPP/45", "completion": "    if (l.empty()) return 0;\n    int result = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        result = __gcd(result, l[i]);\n        if (result == 1) {\n            return 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_45_8", "index": 427}
{"task_id": "MBCPP/46", "completion": "    unordered_set<int> seen;\n    for (int num : data) {\n        if (seen.count(num)) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_46_3", "index": 432}
{"task_id": "MBCPP/47", "completion": "    if (a > b) return 0;\n    if (a == b) return 1;\n    \n    int lastDigit = 1;\n    for (int i = a + 1; i <= b; i++) {\n        lastDigit = (lastDigit * (i % 10)) % 10;\n        if (lastDigit == 0) break;\n    }\n    return lastDigit;\n}", "unique_id": "MBCPP_47_1", "index": 440}
{"task_id": "MBCPP/48", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n | mask;\n}", "unique_id": "MBCPP_48_4", "index": 453}
{"task_id": "MBCPP/49", "completion": "    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_49_10", "index": 469}
{"task_id": "MBCPP/51", "completion": "    if (x <= 0 || y <= 0 || z <= 0)\n        return false;\n    return x == y && y == z;\n}", "unique_id": "MBCPP_51_3", "index": 472}
{"task_id": "MBCPP/52", "completion": "    return b * h;\n}", "unique_id": "MBCPP_52_8", "index": 487}
{"task_id": "MBCPP/53", "completion": "    if (str.empty())\n        return \"Not Equal\";\n    if (str[0] == str[str.length() - 1])\n        return \"Equal\";\n    else\n        return \"Not Equal\";\n}", "unique_id": "MBCPP_53_9", "index": 498}
{"task_id": "MBCPP/54", "completion": "    if (myList.empty()) return myList;\n\n    int max_val = *max_element(myList.begin(), myList.end());\n    vector<int> count(max_val + 1, 0);\n    vector<int> output(myList.size());\n\n    for (int i = 0; i < myList.size(); i++) {\n        count[myList[i]]++;\n    }\n\n    for (int i = 1; i <= max_val; i++) {\n        count[i] += count[i - 1];\n    }\n\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        output[count[myList[i]] - 1] = myList[i];\n        count[myList[i]]--;\n    }\n\n    return output;\n}", "unique_id": "MBCPP_54_6", "index": 505}
{"task_id": "MBCPP/55", "completion": "    return a * pow(r, n - 1);\n}", "unique_id": "MBCPP_55_1", "index": 510}
{"task_id": "MBCPP/56", "completion": "    int reversed = 0;\n    int original = n;\n    while (n != 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    return original == (2 * reversed - 1);\n}", "unique_id": "MBCPP_56_5", "index": 524}
{"task_id": "MBCPP/57", "completion": "    sort(arr.begin(), arr.end(), greater<int>());\n    int num = 0;\n    for (int i = 0; i < n; i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;\n}", "unique_id": "MBCPP_57_3", "index": 532}
{"task_id": "MBCPP/58", "completion": "    return (x ^ y) < 0;\n}", "unique_id": "MBCPP_58_4", "index": 543}
{"task_id": "MBCPP/59", "completion": "    return n * (3 * n - 2);\n}", "unique_id": "MBCPP_59_9", "index": 558}
{"task_id": "MBCPP/60", "completion": "    if (n == 0) return 0;\n    \n    vector<int> dp(n, 1);\n    int maxLen = 1;\n    \n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (abs(arr[i] - arr[j]) == 1) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLen = max(maxLen, dp[i]);\n    }\n    \n    return maxLen;\n}", "unique_id": "MBCPP_60_7", "index": 566}
{"task_id": "MBCPP/61", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_61_3", "index": 572}
{"task_id": "MBCPP/62", "completion": "    if (xs.empty()) return INT_MIN;\n    int minVal = xs[0];\n    for (int x : xs) {\n        if (x < minVal) {\n            minVal = x;\n        }\n    }\n    return minVal;\n}", "unique_id": "MBCPP_62_3", "index": 582}
{"task_id": "MBCPP/63", "completion": "    int maxDiff = 0;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n    return maxDiff;\n}", "unique_id": "MBCPP_63_1", "index": 590}
{"task_id": "MBCPP/66", "completion": "    int count = 0;\n    for (int num : list) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_66_4", "index": 603}
{"task_id": "MBCPP/68", "completion": "    if (a.size() <= 1) return true;\n    \n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (int i = 1; i < a.size(); ++i) {\n        if (a[i] > a[i - 1]) decreasing = false;\n        if (a[i] < a[i - 1]) increasing = false;\n        if (!increasing && !decreasing) return false;\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_68_4", "index": 613}
{"task_id": "MBCPP/69", "completion": "    if (s.empty()) return true;\n    int n = l.size(), m = s.size();\n    for (int i = 0; i <= n - m; ++i) {\n        if (l[i] == s[0]) {\n            bool match = true;\n            for (int j = 1; j < m; ++j) {\n                if (l[i + j] != s[j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_69_6", "index": 625}
{"task_id": "MBCPP/70", "completion": "    for (const auto& vec : input) {\n        if (vec.size() != k) {\n            return \"All tuples do not have same length\";\n        }\n    }\n    return \"All tuples have same length\";\n}", "unique_id": "MBCPP_70_2", "index": 631}
{"task_id": "MBCPP/71", "completion": "    int n = nums.size();\n    int gap = n;\n    bool swapped = true;\n    while (gap != 1 || swapped == true) {\n        gap = (gap * 10) / 13;\n        if (gap < 1)\n            gap = 1;\n        swapped = false;\n        for (int i = 0; i < n - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}", "unique_id": "MBCPP_71_1", "index": 640}
{"task_id": "MBCPP/72", "completion": "    if (n <= 0)\n        return false;\n    // If n is odd or divisible by 4, it can be represented as difference of squares\n    return (n % 2 != 0 || n % 4 == 0);\n}", "unique_id": "MBCPP_72_1", "index": 650}
{"task_id": "MBCPP/73", "completion": "    regex pattern(\"[\\n*]\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), pattern, -1);\n    sregex_token_iterator end;\n    while (iter != end) {\n        result.push_back(*iter);\n        ++iter;\n    }\n    return result;\n}", "unique_id": "MBCPP_73_5", "index": 664}
{"task_id": "MBCPP/74", "completion": "    if (colors.size() != patterns.size())\n        return false;\n    \n    unordered_map<string, char> colorToPattern;\n    unordered_map<char, string> patternToColor;\n    \n    for (int i = 0; i < colors.size(); ++i) {\n        if (colorToPattern.find(colors[i]) == colorToPattern.end()) {\n            if (patternToColor.find(patterns[i][0]) != patternToColor.end())\n                return false;\n            colorToPattern[colors[i]] = patterns[i][0];\n            patternToColor[patterns[i][0]] = colors[i];\n        } else {\n            if (colorToPattern[colors[i]] != patterns[i][0])\n                return false;\n        }\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_74_4", "index": 673}
{"task_id": "MBCPP/75", "completion": "    vector<vector<int>> result;\n    for (const auto& tuple : testList) {\n        bool allDivisible = true;\n        for (int num : tuple) {\n            if (num % k != 0) {\n                allDivisible = false;\n                break;\n            }\n        }\n        if (allDivisible) {\n            result.push_back(tuple);\n        }\n    }\n    stringstream ss;\n    ss << \"[\";\n    for (size_t i = 0; i < result.size(); ++i) {\n        ss << \"(\";\n        for (size_t j = 0; j < result[i].size(); ++j) {\n            ss << result[i][j];\n            if (j != result[i].size() - 1) {\n                ss << \", \";\n            }\n        }\n        ss << \")\";\n        if (i != result.size() - 1) {\n            ss << \", \";\n        }\n    }\n    ss << \"]\";\n    return ss.str();\n}", "unique_id": "MBCPP_75_10", "index": 689}
{"task_id": "MBCPP/76", "completion": "    int count = 0;\n    while (m > 0 && n > 0) {\n        count += m * n;\n        m--;\n        n--;\n    }\n    return count;\n}", "unique_id": "MBCPP_76_7", "index": 696}
{"task_id": "MBCPP/77", "completion": "    int evenSum = 0, oddSum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 0)\n            evenSum += digit;\n        else\n            oddSum += digit;\n        n /= 10;\n    }\n    return evenSum != oddSum;\n}", "unique_id": "MBCPP_77_9", "index": 708}
{"task_id": "MBCPP/78", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int bits = __builtin_popcount(i);\n        if (bits % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_78_8", "index": 717}
{"task_id": "MBCPP/79", "completion": "    return s.length() % 2 != 0;\n}", "unique_id": "MBCPP_79_7", "index": 726}
{"task_id": "MBCPP/80", "completion": "    return (n * (n + 1) * (n + 2)) / 6.0;\n}", "unique_id": "MBCPP_80_7", "index": 736}
{"task_id": "MBCPP/81", "completion": "    vector<vector<int>> result;\n    int len1 = testTup1.size();\n    int len2 = testTup2.size();\n    for (int i = 0; i < len1; ++i) {\n        vector<int> temp;\n        temp.push_back(testTup1[i]);\n        temp.push_back(testTup2[i % len2]);\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_81_2", "index": 741}
{"task_id": "MBCPP/82", "completion": "    return (4.0 / 3.0) * M_PI * pow(r, 3);\n}", "unique_id": "MBCPP_82_3", "index": 752}
{"task_id": "MBCPP/83", "completion": "    int sum = 0;\n    for (char ch : strr) {\n        sum += ch;\n    }\n    string result;\n    result.push_back(static_cast<char>(sum));\n    return result;\n}", "unique_id": "MBCPP_83_10", "index": 769}
{"task_id": "MBCPP/84", "completion": "    if (n == 1 || n == 2)\n        return 1;\n    int dp[n + 1];\n    dp[1] = 1;\n    dp[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]];\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_84_1", "index": 770}
{"task_id": "MBCPP/85", "completion": "    return 4 * M_PI * r * r;\n}", "unique_id": "MBCPP_85_3", "index": 782}
{"task_id": "MBCPP/86", "completion": "    return 3 * n * (n - 1) + 1;\n}", "unique_id": "MBCPP_86_3", "index": 792}
{"task_id": "MBCPP/87", "completion": "    unordered_map<string, string> result = dict1;\n    result.insert(dict2.begin(), dict2.end());\n    result.insert(dict3.begin(), dict3.end());\n    return result;\n}", "unique_id": "MBCPP_87_7", "index": 806}
{"task_id": "MBCPP/88", "completion": "    unordered_map<int, int> freqMap;\n    for (int num : list1) {\n        freqMap[num]++;\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_88_2", "index": 811}
{"task_id": "MBCPP/89", "completion": "    if (n <= 0)\n        return -1; // Return -1 for invalid input\n    return n - 1;\n}", "unique_id": "MBCPP_89_8", "index": 827}
{"task_id": "MBCPP/90", "completion": "    int max_length = 0;\n    for (const auto& word : list1) {\n        if (word.length() > max_length) {\n            max_length = word.length();\n        }\n    }\n    return max_length;\n}", "unique_id": "MBCPP_90_10", "index": 839}
{"task_id": "MBCPP/91", "completion": "    for (const string& str : str1) {\n        if (str.find(subStr) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_91_1", "index": 840}
{"task_id": "MBCPP/92", "completion": "    if (n.length() < 2)\n        return false;\n    \n    char first = n[0];\n    char second = n[1];\n    \n    if (first == second)\n        return false;\n    \n    for (int i = 2; i < n.length(); i++) {\n        if (i % 2 == 0) {\n            if (n[i] != first)\n                return false;\n        } else {\n            if (n[i] != second)\n                return false;\n        }\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_92_8", "index": 857}
{"task_id": "MBCPP/93", "completion": "    if (b == 0)\n        return 1;\n    int result = 1;\n    while (b > 0) {\n        if (b % 2 == 1)\n            result *= a;\n        a *= a;\n        b /= 2;\n    }\n    return result;\n}", "unique_id": "MBCPP_93_1", "index": 860}
{"task_id": "MBCPP/95", "completion": "    int minLen = INT_MAX;\n    for (const auto& sublist : lst) {\n        if (sublist.size() < minLen) {\n            minLen = sublist.size();\n        }\n    }\n    return minLen;\n}", "unique_id": "MBCPP_95_10", "index": 879}
{"task_id": "MBCPP/96", "completion": "    int count = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_96_6", "index": 885}
{"task_id": "MBCPP/97", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& sublist : list1) {\n        for (int num : sublist) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_97_6", "index": 895}
{"task_id": "MBCPP/98", "completion": "    if (numbers.empty()) return 0.0;\n    double product = 1.0;\n    for (int num : numbers) {\n        product *= num;\n    }\n    return product / numbers.size();\n}", "unique_id": "MBCPP_98_10", "index": 909}
{"task_id": "MBCPP/99", "completion": "    string binary = \"\";\n    if (n == 0)\n        return \"0\";\n    while (n > 0) {\n        binary = to_string(n % 2) + binary;\n        n = n / 2;\n    }\n    return binary;\n}", "unique_id": "MBCPP_99_7", "index": 916}
{"task_id": "MBCPP/100", "completion": "    num++;\n    while (true) {\n        int n = num;\n        int reversed = 0;\n        while (n != 0) {\n            reversed = reversed * 10 + n % 10;\n            n /= 10;\n        }\n        if (reversed == num) {\n            return num;\n        }\n        num++;\n    }\n}", "unique_id": "MBCPP_100_2", "index": 921}
{"task_id": "MBCPP/101", "completion": "    sort(arr.begin(), arr.end());\n    return arr[k - 1];\n}", "unique_id": "MBCPP_101_8", "index": 937}
{"task_id": "MBCPP/102", "completion": "    string result;\n    bool capitalizeNext = true;\n    \n    for (char ch : word) {\n        if (ch == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                result += toupper(ch);\n                capitalizeNext = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_102_10", "index": 949}
{"task_id": "MBCPP/103", "completion": "    if (m == 0)\n        return 1;\n    if (n == 0)\n        return 0;\n    return (n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m);\n}", "unique_id": "MBCPP_103_7", "index": 956}
{"task_id": "MBCPP/104", "completion": "    for (auto& sublist : inputList) {\n        sort(sublist.begin(), sublist.end(), [](const string& a, const string& b) {\n            return a < b;\n        });\n    }\n    return inputList;\n}", "unique_id": "MBCPP_104_5", "index": 964}
{"task_id": "MBCPP/105", "completion": "    int cnt = 0;\n    for(bool b : lst) {\n        if(b) cnt++;\n    }\n    return cnt;\n}", "unique_id": "MBCPP_105_5", "index": 974}
{"task_id": "MBCPP/106", "completion": "    testTup.insert(testTup.end(), testList.begin(), testList.end());\n    return testTup;\n}", "unique_id": "MBCPP_106_7", "index": 986}
{"task_id": "MBCPP/107", "completion": "    int count = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i >= 10 && i <= 15) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_107_3", "index": 992}
{"task_id": "MBCPP/108", "completion": "    vector<int> result;\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n\n    for (int num : num1) {\n        minHeap.push(num);\n    }\n    for (int num : num2) {\n        minHeap.push(num);\n    }\n    for (int num : num3) {\n        minHeap.push(num);\n    }\n\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n\n    return result;\n}", "unique_id": "MBCPP_108_3", "index": 1002}
{"task_id": "MBCPP/109", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(s[i] == '1') {\n            string rotated = s.substr(i) + s.substr(0, i);\n            if(stoi(rotated, nullptr, 2) % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_109_7", "index": 1016}
{"task_id": "MBCPP/110", "completion": "    vector<vector<int>> result;\n    if (testList.empty()) {\n        result.push_back({strtVal, stopVal});\n        return result;\n    }\n\n    // Sort the intervals based on start value\n    sort(testList.begin(), testList.end());\n\n    // Check for missing range before the first interval\n    if (testList[0][0] > strtVal) {\n        result.push_back({strtVal, testList[0][0]});\n    }\n\n    // Check for missing ranges between intervals\n    for (size_t i = 1; i < testList.size(); ++i) {\n        if (testList[i][0] > testList[i-1][1]) {\n            result.push_back({testList[i-1][1], testList[i][0]});\n        }\n    }\n\n    // Check for missing range after the last interval\n    if (testList.back()[1] < stopVal) {\n        result.push_back({testList.back()[1], stopVal});\n    }\n\n    return result;\n}", "unique_id": "MBCPP_110_8", "index": 1027}
{"task_id": "MBCPP/111", "completion": "    if (nestedlist.empty()) return {};\n\n    unordered_set<int> commonElements(nestedlist[0].begin(), nestedlist[0].end());\n\n    for (size_t i = 1; i < nestedlist.size(); ++i) {\n        unordered_set<int> currentSet(nestedlist[i].begin(), nestedlist[i].end());\n        unordered_set<int> tempSet;\n        for (int elem : commonElements) {\n            if (currentSet.find(elem) != currentSet.end()) {\n                tempSet.insert(elem);\n            }\n        }\n        commonElements = tempSet;\n        if (commonElements.empty()) break;\n    }\n\n    vector<int> result(commonElements.begin(), commonElements.end());\n    return result;\n}", "unique_id": "MBCPP_111_8", "index": 1037}
{"task_id": "MBCPP/112", "completion": "    return 2 * (diameter + height);\n}", "unique_id": "MBCPP_112_6", "index": 1045}
{"task_id": "MBCPP/113", "completion": "    if (text.empty()) return false;\n    size_t i = 0;\n    if (text[0] == '+' || text[0] == '-') {\n        i++;\n    }\n    for (; i < text.length(); i++) {\n        if (!isdigit(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_113_7", "index": 1056}
{"task_id": "MBCPP/114", "completion": "    map<vector<int>, int> freqMap;\n    for (auto& tuple : testList) {\n        freqMap[tuple]++;\n    }\n\n    string result = \"[\";\n    for (auto& [tuple, freq] : freqMap) {\n        if (result.size() > 1) {\n            result += \", \";\n        }\n        result += \"(\";\n        for (size_t i = 0; i < tuple.size(); ++i) {\n            if (i > 0) {\n                result += \", \";\n            }\n            result += to_string(tuple[i]);\n        }\n        result += \", \" + to_string(freq) + \")\";\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_114_4", "index": 1063}
{"task_id": "MBCPP/116", "completion": "    int result = 0;\n    for (int num : nums) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "unique_id": "MBCPP_116_4", "index": 1073}
{"task_id": "MBCPP/117", "completion": "    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            try {\n                float num = stof(testList[i][j]);\n                result += to_string(num);\n                size_t dotPos = result.find_last_of('.');\n                if (dotPos != string::npos && result.find_first_not_of('0', dotPos + 1) == string::npos) {\n                    result.erase(dotPos);\n                }\n            } catch (const invalid_argument&) {\n                result += testList[i][j];\n            }\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_117_9", "index": 1088}
{"task_id": "MBCPP/118", "completion": "    vector<string> result;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_118_9", "index": 1098}
{"task_id": "MBCPP/119", "completion": "    int low = 0, high = n - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (mid % 2 == 1) {\n            mid--;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            low = mid + 2;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[low];\n}", "unique_id": "MBCPP_119_10", "index": 1109}
{"task_id": "MBCPP/120", "completion": "    int maxProd = 0;\n    for (auto& pair : list1) {\n        int currentProd = pair[0] * pair[1];\n        if (currentProd > maxProd) {\n            maxProd = currentProd;\n        }\n    }\n    return maxProd;\n}", "unique_id": "MBCPP_120_8", "index": 1117}
{"task_id": "MBCPP/121", "completion": "    if (count == 3 && sum == 0)\n        return true;\n    if (count == 3 || n == 0 || sum < 0)\n        return false;\n    return checkTriplet(a, n - 1, sum - a[n - 1], count + 1) || checkTriplet(a, n - 1, sum, count);\n}", "unique_id": "MBCPP_121_8", "index": 1127}
{"task_id": "MBCPP/122", "completion": "    vector<int> smartNumbers;\n    for (int i = 30; ; i++) {\n        int num = i;\n        int count = 0;\n        for (int p : {2, 3, 5}) {\n            while (num % p == 0) {\n                num /= p;\n                count++;\n            }\n        }\n        if (num == 1 && count >= 3) {\n            smartNumbers.push_back(i);\n            if (smartNumbers.size() == n) {\n                return smartNumbers.back();\n            }\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_122_4", "index": 1133}
{"task_id": "MBCPP/123", "completion": "    int sum = 0;\n    for (int i = 1; i <= limit; ++i) {\n        int sumDivisors1 = 1;\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                sumDivisors1 += j;\n                if (j != i / j) {\n                    sumDivisors1 += i / j;\n                }\n            }\n        }\n        if (sumDivisors1 != i) {\n            int sumDivisors2 = 1;\n            for (int j = 2; j * j <= sumDivisors1; ++j) {\n                if (sumDivisors1 % j == 0) {\n                    sumDivisors2 += j;\n                    if (j != sumDivisors1 / j) {\n                        sumDivisors2 += sumDivisors1 / j;\n                    }\n                }\n            }\n            if (sumDivisors2 == i && i < sumDivisors1) {\n                sum += i + sumDivisors1;\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_123_1", "index": 1140}
{"task_id": "MBCPP/125", "completion": "    int max_diff = -1;\n    int count_0 = 0, count_1 = 0;\n    for (int i = 0; i < n; i++) {\n        if (str[i] == '0')\n            count_0++;\n        else\n            count_1++;\n        int current_diff = count_0 - count_1;\n        if (current_diff > max_diff)\n            max_diff = current_diff;\n        if (current_diff < 0) {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    return max_diff;\n}", "unique_id": "MBCPP_125_9", "index": 1158}
{"task_id": "MBCPP/126", "completion": "    int result = 0;\n    int min_num = min(a, b);\n    for (int i = 1; i <= min_num; i++) {\n        if (a % i == 0 && b % i == 0) {\n            result += i;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_126_9", "index": 1168}
{"task_id": "MBCPP/127", "completion": "    int result = 0;\n    while (y > 0) {\n        if (y & 1)\n            result += x;\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}", "unique_id": "MBCPP_127_10", "index": 1179}
{"task_id": "MBCPP/128", "completion": "    vector<string> result;\n    string word;\n    for (char ch : str) {\n        if (ch == ' ') {\n            if (word.size() > n) {\n                result.push_back(word);\n            }\n            word.clear();\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty() && word.size() > n) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_128_10", "index": 1189}
{"task_id": "MBCPP/129", "completion": "    int n = myMatrix.size();\n    if (n == 0) return false;\n    for (const auto& row : myMatrix) {\n        if (row.size() != n) return false;\n    }\n\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += myMatrix[0][i];\n    }\n\n    for (int i = 1; i < n; ++i) {\n        int rowSum = 0;\n        for (int j = 0; j < n; ++j) {\n            rowSum += myMatrix[i][j];\n        }\n        if (rowSum != sum) return false;\n    }\n\n    for (int j = 0; j < n; ++j) {\n        int colSum = 0;\n        for (int i = 0; i < n; ++i) {\n            colSum += myMatrix[i][j];\n        }\n        if (colSum != sum) return false;\n    }\n\n    int diag1 = 0, diag2 = 0;\n    for (int i = 0; i < n; ++i) {\n        diag1 += myMatrix[i][i];\n        diag2 += myMatrix[i][n - 1 - i];\n    }\n    if (diag1 != sum || diag2 != sum) return false;\n\n    return true;\n}", "unique_id": "MBCPP_129_7", "index": 1196}
{"task_id": "MBCPP/130", "completion": "    unordered_map<int, int> freqMap;\n    for (int num : nums) {\n        freqMap[num]++;\n    }\n\n    int maxFreq = 0;\n    int maxNum = 0;\n    for (auto& pair : freqMap) {\n        if (pair.second > maxFreq || (pair.second == maxFreq && pair.first < maxNum)) {\n            maxFreq = pair.second;\n            maxNum = pair.first;\n        }\n    }\n\n    return {maxNum, maxFreq};\n}", "unique_id": "MBCPP_130_6", "index": 1205}
{"task_id": "MBCPP/131", "completion": "    string vowels = \"aeiouAEIOU\";\n    int left = 0, right = str1.length() - 1;\n    while (left < right) {\n        while (left < right && vowels.find(str1[left]) == string::npos) {\n            left++;\n        }\n        while (left < right && vowels.find(str1[right]) == string::npos) {\n            right--;\n        }\n        if (left < right) {\n            swap(str1[left], str1[right]);\n            left++;\n            right--;\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_131_3", "index": 1212}
{"task_id": "MBCPP/132", "completion": "    string result = \"\";\n    for (const auto& s : tup1) {\n        result += s;\n    }\n    return result;\n}", "unique_id": "MBCPP_132_10", "index": 1229}
{"task_id": "MBCPP/133", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {\n        return num < 0 ? sum + num : sum;\n    });\n}", "unique_id": "MBCPP_133_7", "index": 1236}
{"task_id": "MBCPP/134", "completion": "    for (int i = 0; i < p; i++) {\n        for (int j = 0; j < n - 1; j++) {\n            arr[j] += arr[j + 1];\n        }\n    }\n    if (arr[n - 1] % 2 == 0) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }\n}", "unique_id": "MBCPP_134_6", "index": 1245}
{"task_id": "MBCPP/135", "completion": "    return n * (2 * n - 1);\n}", "unique_id": "MBCPP_135_9", "index": 1258}
{"task_id": "MBCPP/136", "completion": "    double bill = 0.0;\n    if (units <= 50) {\n        bill = units * 1.75;\n    } else if (units <= 150) {\n        bill = 50 * 1.75 + (units - 50) * 2.50;\n    } else if (units <= 250) {\n        bill = 50 * 1.75 + 100 * 2.50 + (units - 150) * 3.75;\n    } else {\n        bill = 50 * 1.75 + 100 * 2.50 + 100 * 3.75 + (units - 250) * 5.00;\n    }\n    return bill;\n}", "unique_id": "MBCPP_136_7", "index": 1266}
{"task_id": "MBCPP/137", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num == 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "unique_id": "MBCPP_137_3", "index": 1272}
{"task_id": "MBCPP/138", "completion": "    if (n == 0)\n        return false;\n    while (n > 0) {\n        if ((n & 1) == 0)\n            return false;\n        n = n >> 1;\n    }\n    return true;\n}", "unique_id": "MBCPP_138_3", "index": 1282}
{"task_id": "MBCPP/139", "completion": "    const double pi = 3.14159265358979323846;\n    return 2 * pi * r;\n}", "unique_id": "MBCPP_139_8", "index": 1297}
{"task_id": "MBCPP/140", "completion": "    unordered_map<int, int> freq;\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            freq[num]++;\n        }\n    }\n    vector<int> result;\n    for (const auto& [num, count] : freq) {\n        if (count >= 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_140_10", "index": 1309}
{"task_id": "MBCPP/141", "completion": "    int n = nums.size();\n    for (int i = n; i > 1; --i) {\n        int max_idx = max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_idx != i - 1) {\n            reverse(nums.begin(), nums.begin() + max_idx + 1);\n            reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return nums;\n}", "unique_id": "MBCPP_141_5", "index": 1314}
{"task_id": "MBCPP/142", "completion": "    int count = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_142_9", "index": 1328}
{"task_id": "MBCPP/144", "completion": "    sort(arr.begin(), arr.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i] * i - arr[i] * (n - 1 - i);\n    }\n    return sum;\n}", "unique_id": "MBCPP_144_4", "index": 1333}
{"task_id": "MBCPP/145", "completion": "    if (n == 0)\n        return 0;\n    int minElement = arr[0], maxElement = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < minElement)\n            minElement = arr[i];\n        if (arr[i] > maxElement)\n            maxElement = arr[i];\n    }\n    return maxElement - minElement;\n}", "unique_id": "MBCPP_145_4", "index": 1343}
{"task_id": "MBCPP/146", "completion": "    int sum = 0;\n    for (char ch : str1) {\n        sum += ch;\n    }\n    return sum;\n}", "unique_id": "MBCPP_146_6", "index": 1355}
{"task_id": "MBCPP/147", "completion": "    for (int i = m - 1; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            if (i + 1 <= m) {\n                tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n            }\n        }\n    }\n    return tri[0][0];\n}", "unique_id": "MBCPP_147_5", "index": 1364}
{"task_id": "MBCPP/148", "completion": "    int maxSum = 0;\n    for (int i = 1; i <= n; i++) {\n        int a = i;\n        int b = n - i;\n        int sum = 0;\n        while (a > 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        while (b > 0) {\n            sum += b % 10;\n            b /= 10;\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_148_2", "index": 1371}
{"task_id": "MBCPP/149", "completion": "    if (n == 0)\n        return 0;\n\n    vector<int> dp(n, 1);\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (abs(arr[i] - arr[j]) == 1 && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_149_7", "index": 1386}
{"task_id": "MBCPP/150", "completion": "    if (c == 0) {\n        return a == b;\n    }\n    int diff = b - a;\n    if (diff % c != 0) {\n        return false;\n    }\n    int n = diff / c;\n    return n >= 0;\n}", "unique_id": "MBCPP_150_5", "index": 1394}
{"task_id": "MBCPP/151", "completion": "    int gcd = __gcd(x, y);\n    return gcd == 1;\n}", "unique_id": "MBCPP_151_7", "index": 1406}
{"task_id": "MBCPP/152", "completion": "    if (x.size() <= 1)\n        return x;\n    \n    int mid = x.size() / 2;\n    vector<int> left(x.begin(), x.begin() + mid);\n    vector<int> right(x.begin() + mid, x.end());\n    \n    left = mergeSort(left);\n    right = mergeSort(right);\n    \n    vector<int> result;\n    int i = 0, j = 0;\n    while (i < left.size() && j < right.size()) {\n        if (left[i] < right[j]) {\n            result.push_back(left[i]);\n            i++;\n        } else {\n            result.push_back(right[j]);\n            j++;\n        }\n    }\n    \n    while (i < left.size()) {\n        result.push_back(left[i]);\n        i++;\n    }\n    \n    while (j < right.size()) {\n        result.push_back(right[j]);\n        j++;\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_152_2", "index": 1411}
{"task_id": "MBCPP/153", "completion": "    vector<double> vertex(2);\n    vertex[0] = -b / (2.0 * a);\n    vertex[1] = c - (b * b) / (4.0 * a);\n    return vertex;\n}", "unique_id": "MBCPP_153_1", "index": 1420}
{"task_id": "MBCPP/154", "completion": "    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_154_3", "index": 1432}
{"task_id": "MBCPP/155", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010 (all even bits set)\n    return n ^ mask; // XOR with mask to toggle even bits\n}", "unique_id": "MBCPP_155_1", "index": 1440}
{"task_id": "MBCPP/156", "completion": "    vector<vector<int>> result;\n    for (const auto& row : tupleStr) {\n        vector<int> intRow;\n        for (const auto& str : row) {\n            intRow.push_back(stoi(str));\n        }\n        result.push_back(intRow);\n    }\n    return result;\n}", "unique_id": "MBCPP_156_4", "index": 1453}
{"task_id": "MBCPP/158", "completion": "    if (n == 0)\n        return 0;\n    \n    sort(arr.begin(), arr.end());\n    \n    int median = arr[n / 2];\n    int operations = 0;\n    \n    for (int i = 0; i < n; i++) {\n        int diff = abs(arr[i] - median);\n        if (diff % k != 0)\n            return -1;\n        operations += diff / k;\n    }\n    \n    return operations;\n}", "unique_id": "MBCPP_158_5", "index": 1464}
{"task_id": "MBCPP/159", "completion": "    if (month == \"December\" && days >= 21 || month == \"January\" || month == \"February\" || month == \"March\" && days < 20)\n        return \"winter\";\n    else if (month == \"March\" && days >= 20 || month == \"April\" || month == \"May\" || month == \"June\" && days < 21)\n        return \"spring\";\n    else if (month == \"June\" && days >= 21 || month == \"July\" || month == \"August\" || month == \"September\" && days < 22)\n        return \"summer\";\n    else if (month == \"September\" && days >= 22 || month == \"October\" || month == \"November\" || month == \"December\" && days < 21)\n        return \"autumn\";\n    return \"\";\n}", "unique_id": "MBCPP_159_5", "index": 1474}
{"task_id": "MBCPP/161", "completion": "    unordered_set<int> toRemove(list2.begin(), list2.end());\n    vector<int> result;\n    for (int num : list1) {\n        if (toRemove.find(num) == toRemove.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_161_2", "index": 1481}
{"task_id": "MBCPP/162", "completion": "    int sum = 0;\n    while (n > 0) {\n        sum += n;\n        n -= 2;\n    }\n    return sum;\n}", "unique_id": "MBCPP_162_2", "index": 1491}
{"task_id": "MBCPP/163", "completion": "    double n = static_cast<double>(s);\n    double a = static_cast<double>(l);\n    return (n * a * a) / (4 * tan(M_PI / n));\n}", "unique_id": "MBCPP_163_1", "index": 1500}
{"task_id": "MBCPP/164", "completion": "    auto sumOfDivisors = [](int n) {\n        if (n == 1) return 1;\n        int sum = 1 + n;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                if (i == n / i)\n                    sum += i;\n                else\n                    sum += i + n / i;\n            }\n        }\n        return sum;\n    };\n    \n    return sumOfDivisors(num1) == sumOfDivisors(num2);\n}", "unique_id": "MBCPP_164_5", "index": 1514}
{"task_id": "MBCPP/165", "completion": "    int count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        char ch = str1[i];\n        if (isalpha(ch)) {\n            int pos = tolower(ch) - 'a' + 1;\n            if (pos == i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_165_9", "index": 1528}
{"task_id": "MBCPP/166", "completion": "    int evenCount = 0, oddCount = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0)\n            evenCount++;\n        else\n            oddCount++;\n    }\n    return evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2 + evenCount * oddCount;\n}", "unique_id": "MBCPP_166_4", "index": 1533}
{"task_id": "MBCPP/167", "completion": "    if (n == 0)\n        return 1;\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    n++;\n    return n;\n}", "unique_id": "MBCPP_167_9", "index": 1548}
{"task_id": "MBCPP/168", "completion": "    int count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x)\n            count++;\n    }\n    return count;\n}", "unique_id": "MBCPP_168_3", "index": 1552}
{"task_id": "MBCPP/169", "completion": "    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_169_8", "index": 1567}
{"task_id": "MBCPP/170", "completion": "    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_170_4", "index": 1573}
{"task_id": "MBCPP/171", "completion": "    return 5 * a;\n}", "unique_id": "MBCPP_171_2", "index": 1581}
{"task_id": "MBCPP/172", "completion": "    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_172_2", "index": 1591}
{"task_id": "MBCPP/173", "completion": "    string result;\n    for (char ch : text) {\n        if (isalnum(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_173_8", "index": 1607}
{"task_id": "MBCPP/175", "completion": "    stack<char> s;\n    for (char c : str1) {\n        if (c == '(' || c == '{' || c == '[') {\n            s.push(c);\n        } else {\n            if (s.empty()) return false;\n            char top = s.top();\n            s.pop();\n            if ((c == ')' && top != '(') || \n                (c == '}' && top != '{') || \n                (c == ']' && top != '[')) {\n                return false;\n            }\n        }\n    }\n    return s.empty();\n}", "unique_id": "MBCPP_175_2", "index": 1611}
{"task_id": "MBCPP/176", "completion": "    return a + b + c;\n}", "unique_id": "MBCPP_176_10", "index": 1629}
{"task_id": "MBCPP/177", "completion": "    vector<int> result;\n    for (int i = l; i <= r; i++) {\n        for (int j = i + 1; j <= r; j++) {\n            int lcm = (i * j) / __gcd(i, j);\n            if (lcm >= l && lcm <= r) {\n                result.push_back(i);\n                result.push_back(j);\n                return result;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_177_9", "index": 1638}
{"task_id": "MBCPP/178", "completion": "    for (const auto& pattern : patterns) {\n        if (text.find(pattern) != string::npos) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "unique_id": "MBCPP_178_2", "index": 1641}
{"task_id": "MBCPP/179", "completion": "    if (x < 10) return false;\n    \n    vector<int> sequence;\n    int temp = x, digits = 0;\n    \n    while (temp > 0) {\n        sequence.insert(sequence.begin(), temp % 10);\n        temp /= 10;\n        digits++;\n    }\n    \n    int next = 0;\n    while (next < x) {\n        next = 0;\n        for (int i = sequence.size() - digits; i < sequence.size(); i++) {\n            next += sequence[i];\n        }\n        sequence.push_back(next);\n    }\n    \n    return next == x;\n}", "unique_id": "MBCPP_179_6", "index": 1655}
{"task_id": "MBCPP/181", "completion": "    if (n == 0)\n        return \"\";\n    string prefix = arr[0];\n    for (int i = 1; i < n; i++) {\n        while (arr[i].find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty())\n                return \"\";\n        }\n    }\n    return prefix;\n}", "unique_id": "MBCPP_181_2", "index": 1661}
{"task_id": "MBCPP/183", "completion": "    sort(arr.begin(), arr.end());\n    int count = 0;\n    int left = 0, right = 1;\n    while (right < n) {\n        int diff = arr[right] - arr[left];\n        if (diff == k) {\n            count++;\n            left++;\n            right++;\n        } else if (diff < k) {\n            right++;\n        } else {\n            left++;\n        }\n        if (left == right) {\n            right++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_183_9", "index": 1678}
{"task_id": "MBCPP/184", "completion": "    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > num) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_184_1", "index": 1680}
{"task_id": "MBCPP/185", "completion": "    double x = -b / (2.0 * a);\n    double y = c - (b * b) / (4.0 * a);\n    return {x, y};\n}", "unique_id": "MBCPP_185_7", "index": 1696}
{"task_id": "MBCPP/186", "completion": "    for (const auto& pattern : patterns) {\n        regex r(pattern);\n        if (regex_search(text, r)) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";", "unique_id": "MBCPP_186_9", "index": 1708}
{"task_id": "MBCPP/187", "completion": "    int dp[m + 1][n + 1];\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (x[i - 1] == y[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[m][n];\n}", "unique_id": "MBCPP_187_9", "index": 1718}
{"task_id": "MBCPP/188", "completion": "    for (int i = 1; i * i <= n; ++i) {\n        if (n % (i * i) == 0) {\n            int rem = n / (i * i);\n            int sqrt_rem = sqrt(rem);\n            if (sqrt_rem * sqrt_rem == rem) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_188_1", "index": 1720}
{"task_id": "MBCPP/189", "completion": "    for (int i = 0; i < n; i++) {\n        while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {\n            swap(arr[i], arr[arr[i] - 1]);\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}", "unique_id": "MBCPP_189_1", "index": 1730}
{"task_id": "MBCPP/190", "completion": "    if (x1 > x2) swap(x1, x2);\n    if (y1 > y2) swap(y1, y2);\n    \n    int width = x2 - x1 - 1;\n    int height = y2 - y1 - 1;\n    \n    if (width < 0 || height < 0)\n        return 0;\n    \n    return (width + 1) * (height + 1);\n}", "unique_id": "MBCPP_190_4", "index": 1743}
{"task_id": "MBCPP/191", "completion": "    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\")\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_191_9", "index": 1758}
{"task_id": "MBCPP/192", "completion": "    bool hasLetter = false;\n    bool hasNumber = false;\n    for (char ch : str) {\n        if (isalpha(ch)) {\n            hasLetter = true;\n        } else if (isdigit(ch)) {\n            hasNumber = true;\n        }\n        if (hasLetter && hasNumber) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_192_3", "index": 1762}
{"task_id": "MBCPP/193", "completion": "    unordered_set<int> seen;\n    vector<int> result;\n    for (int num : testTup) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_193_9", "index": 1778}
{"task_id": "MBCPP/194", "completion": "    int decimal = 0, i = 0;\n    while (n != 0) {\n        int remainder = n % 10;\n        decimal += remainder * pow(8, i);\n        n /= 10;\n        i++;\n    }\n    return decimal;\n}", "unique_id": "MBCPP_194_2", "index": 1781}
{"task_id": "MBCPP/195", "completion": "    int low = 0, high = n - 1, res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x)\n            high = mid - 1;\n        else if (arr[mid] < x)\n            low = mid + 1;\n        else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}", "unique_id": "MBCPP_195_6", "index": 1795}
{"task_id": "MBCPP/196", "completion": "    vector<vector<int>> result;\n    for (const auto& vec : testList) {\n        if (vec.size() != k) {\n            result.push_back(vec);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_196_9", "index": 1808}
{"task_id": "MBCPP/197", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(pow(testTup1[i], testTup2[i]));\n    }\n    return result;\n}", "unique_id": "MBCPP_197_1", "index": 1810}
{"task_id": "MBCPP/198", "completion": "    double x = a * sqrt(3) / 2;\n    double y = b / 2.0;\n    double area = 3 * x * y;\n    return area;\n}", "unique_id": "MBCPP_198_6", "index": 1825}
{"task_id": "MBCPP/199", "completion": "    if (n < 1)\n        return 0;\n    \n    int res = 1;\n    while (res * 2 <= n) {\n        res *= 2;\n    }\n    return res;\n}", "unique_id": "MBCPP_199_4", "index": 1833}
{"task_id": "MBCPP/200", "completion": "    vector<int> result;\n    if (list1.empty()) return result;\n    \n    int max_val = *max_element(list1.begin(), list1.end());\n    \n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == max_val) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_200_8", "index": 1847}
{"task_id": "MBCPP/201", "completion": "    if (lst.empty()) return true;\n    string first = lst[0];\n    for (const auto& item : lst) {\n        if (item != first) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_201_3", "index": 1852}
{"task_id": "MBCPP/202", "completion": "    string result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 != 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_202_3", "index": 1862}
{"task_id": "MBCPP/203", "completion": "    int x = n1 ^ n2;\n    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_203_2", "index": 1871}
{"task_id": "MBCPP/204", "completion": "    int cnt = 0;\n    for (char ch : s) {\n        if (ch == c[0]) {\n            cnt++;\n        }\n    }\n    return cnt;\n}", "unique_id": "MBCPP_204_2", "index": 1881}
{"task_id": "MBCPP/205", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup.size(); i++) {\n        result.push_back(-testTup[i] - 1);\n    }\n    return result;\n}", "unique_id": "MBCPP_205_5", "index": 1894}
{"task_id": "MBCPP/206", "completion": "    vector<string> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_206_1", "index": 1900}
{"task_id": "MBCPP/207", "completion": "    int n = str.length();\n    int dp[n+1][n+1];\n    for (int i=0; i<=n; i++) {\n        for (int j=0; j<=n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (str[i-1] == str[j-1] && i != j)\n                dp[i][j] = dp[i-1][j-1] + 1;\n            else\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]);\n        }\n    }\n    return dp[n][n];\n}", "unique_id": "MBCPP_207_5", "index": 1914}
{"task_id": "MBCPP/208", "completion": "    regex pattern(R\"(^\\d+\\.\\d{2}$)\");\n    return regex_match(num, pattern);\n}", "unique_id": "MBCPP_208_5", "index": 1924}
{"task_id": "MBCPP/209", "completion": "    if (heap.empty()) return heap;\n    auto min_it = min_element(heap.begin(), heap.end());\n    *min_it = a;\n    make_heap(heap.begin(), heap.end(), greater<int>());\n    return heap;\n}", "unique_id": "MBCPP_209_10", "index": 1939}
{"task_id": "MBCPP/210", "completion": "    regex pattern(\"^[a-zA-Z0-9]*$\");\n    return regex_match(str, pattern);\n}", "unique_id": "MBCPP_210_10", "index": 1949}
{"task_id": "MBCPP/211", "completion": "    int count = 0;\n    for (int i = 0; i < (1 << (n + 1)); i++) {\n        if ((i & 1) && (i & (1 << n))) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_211_1", "index": 1950}
{"task_id": "MBCPP/212", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_212_2", "index": 1961}
{"task_id": "MBCPP/213", "completion": "    vector<string> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] + testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_213_1", "index": 1970}
{"task_id": "MBCPP/214", "completion": "    return radian * (180.0 / M_PI);\n}", "unique_id": "MBCPP_214_1", "index": 1980}
{"task_id": "MBCPP/217", "completion": "    unordered_set<char> seen;\n    for (char c : str) {\n        if (seen.find(c) != seen.end()) {\n            return string(1, c);\n        }\n        seen.insert(c);\n    }\n    return string(1, '\\0');\n}", "unique_id": "MBCPP_217_4", "index": 1993}
{"task_id": "MBCPP/218", "completion": "    if (a == b)\n        return 0;\n    if (a > b)\n        swap(a, b);\n    int operations = 0;\n    while (a != b) {\n        if (b % 2 == 0 && b / 2 >= a) {\n            b /= 2;\n        } else {\n            b -= 1;\n        }\n        operations++;\n    }\n    return operations;\n}", "unique_id": "MBCPP_218_3", "index": 2002}
{"task_id": "MBCPP/219", "completion": "    sort(testTup.begin(), testTup.end());\n    vector<int> result;\n    for(int i = 0; i < k; i++) {\n        result.push_back(testTup[i]);\n    }\n    for(int i = testTup.size() - k; i < testTup.size(); i++) {\n        result.push_back(testTup[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_219_7", "index": 2016}
{"task_id": "MBCPP/220", "completion": "    int count = 0;\n    for (size_t i = 0; i < text.length(); ++i) {\n        if ((text[i] == ' ' || text[i] == ',' || text[i] == '.') && count < n) {\n            text[i] = ':';\n            count++;\n        }\n    }\n    return text;\n}", "unique_id": "MBCPP_220_5", "index": 2024}
{"task_id": "MBCPP/221", "completion": "    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1; // Return -1 if no even number is found\n}", "unique_id": "MBCPP_221_9", "index": 2038}
{"task_id": "MBCPP/222", "completion": "    if (testTuple.empty()) return true;\n    int firstType = typeid(testTuple[0]).hash_code();\n    for (const auto& element : testTuple) {\n        if (typeid(element).hash_code() != firstType) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_222_7", "index": 2046}
{"task_id": "MBCPP/223", "completion": "    int first = lower_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int last = upper_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int count = last - first;\n    return count > n / 2;\n}", "unique_id": "MBCPP_223_4", "index": 2053}
{"task_id": "MBCPP/224", "completion": "    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_224_2", "index": 2061}
{"task_id": "MBCPP/225", "completion": "    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[low];\n}", "unique_id": "MBCPP_225_1", "index": 2070}
{"task_id": "MBCPP/226", "completion": "    string result;\n    for (int i = 0; i < str.length(); i += 2) {\n        result += str[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_226_2", "index": 2081}
{"task_id": "MBCPP/227", "completion": "    return min(a, min(b, c));\n}", "unique_id": "MBCPP_227_2", "index": 2091}
{"task_id": "MBCPP/228", "completion": "    int mask = (1 << (r - l + 1)) - 1;\n    mask = mask << l;\n    return (n & mask) == mask;\n}", "unique_id": "MBCPP_228_7", "index": 2106}
{"task_id": "MBCPP/229", "completion": "    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            if (i != j)\n                swap(arr[i], arr[j]);\n            j++;\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_229_10", "index": 2119}
{"task_id": "MBCPP/230", "completion": "    for (size_t i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1.replace(i, 1, chr);\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_230_4", "index": 2123}
{"task_id": "MBCPP/231", "completion": "    for (int i = n - 2; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n        }\n    }\n    return tri[0][0];\n}", "unique_id": "MBCPP_231_10", "index": 2139}
{"task_id": "MBCPP/232", "completion": "    sort(list1.begin(), list1.end(), greater<int>());\n    vector<int> result(list1.begin(), list1.begin() + n);\n    return result;\n}", "unique_id": "MBCPP_232_2", "index": 2141}
{"task_id": "MBCPP/233", "completion": "    return 2 * M_PI * r * h;\n}", "unique_id": "MBCPP_233_6", "index": 2155}
{"task_id": "MBCPP/234", "completion": "    return l * l * l;\n}", "unique_id": "MBCPP_234_3", "index": 2162}
{"task_id": "MBCPP/235", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n | mask;\n}", "unique_id": "MBCPP_235_2", "index": 2171}
{"task_id": "MBCPP/236", "completion": "    if (k > n || n <= 0 || k <= 0)\n        return -1;\n    \n    int count = 0;\n    for (int i = 1; i <= n - k + 1; ++i) {\n        count += i * i;\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_236_5", "index": 2184}
{"task_id": "MBCPP/238", "completion": "    int n = str.length();\n    return n * (n + 1) / 2;\n}", "unique_id": "MBCPP_238_5", "index": 2194}
{"task_id": "MBCPP/239", "completion": "    int dp[m+1][n+1];\n    memset(dp, 0, sizeof(dp));\n    \n    for (int i = 1; i <= m; i++)\n        dp[i][1] = 1;\n        \n    for (int i = 1; i <= m; i++) {\n        for (int j = 2; j <= n; j++) {\n            for (int k = 1; k <= i/2; k++) {\n                dp[i][j] += dp[k][j-1];\n            }\n        }\n    }\n    \n    int result = 0;\n    for (int i = 1; i <= m; i++)\n        result += dp[i][n];\n        \n    return result;\n}", "unique_id": "MBCPP_239_10", "index": 2209}
{"task_id": "MBCPP/241", "completion": "    vector<vector<vector<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n    return result;\n}", "unique_id": "MBCPP_241_9", "index": 2218}
{"task_id": "MBCPP/242", "completion": "    return str1.length();\n}", "unique_id": "MBCPP_242_9", "index": 2228}
{"task_id": "MBCPP/244", "completion": "    int sqrtVal = sqrt(n);\n    if (sqrtVal * sqrtVal == n) {\n        return (sqrtVal + 1) * (sqrtVal + 1);\n    } else {\n        return (sqrtVal + 1) * (sqrtVal + 1);\n    }\n}", "unique_id": "MBCPP_244_3", "index": 2232}
{"task_id": "MBCPP/245", "completion": "    vector<int> dp1(n, 0), dp2(n, 0);\n    for (int i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp1[i] < dp1[j] + arr[i]) {\n                dp1[i] = dp1[j] + arr[i];\n            }\n        }\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        dp2[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum = max(max_sum, dp1[i] + dp2[i] - arr[i]);\n    }\n    return max_sum;\n}", "unique_id": "MBCPP_245_1", "index": 2240}
{"task_id": "MBCPP/246", "completion": "    if (number == 0 || number == 1)\n        return number;\n\n    double guess = number / 2.0;\n    double epsilon = 0.000001; // Precision level\n\n    while (abs(guess * guess - number) > epsilon) {\n        guess = (guess + number / guess) / 2.0;\n    }\n\n    return guess;\n}", "unique_id": "MBCPP_246_3", "index": 2252}
{"task_id": "MBCPP/247", "completion": "    int n = str.length();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2) {\n                dp[i][j] = 2;\n            } else if (str[i] == str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}", "unique_id": "MBCPP_247_2", "index": 2261}
{"task_id": "MBCPP/248", "completion": "    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_248_2", "index": 2271}
{"task_id": "MBCPP/249", "completion": "    vector<int> result;\n    sort(arrayNums1.begin(), arrayNums1.end());\n    sort(arrayNums2.begin(), arrayNums2.end());\n    auto it1 = arrayNums1.begin();\n    auto it2 = arrayNums2.begin();\n    while (it1 != arrayNums1.end() && it2 != arrayNums2.end()) {\n        if (*it1 < *it2) {\n            ++it1;\n        } else if (*it2 < *it1) {\n            ++it2;\n        } else {\n            result.push_back(*it1);\n            ++it1;\n            ++it2;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_249_7", "index": 2286}
{"task_id": "MBCPP/250", "completion": "    int count = 0;\n    for (int num : tup) {\n        if (num == x) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_250_10", "index": 2299}
{"task_id": "MBCPP/251", "completion": "    vector<string> result;\n    for (const auto& item : list) {\n        result.push_back(element);\n        result.push_back(item);\n    }\n    return result;\n}", "unique_id": "MBCPP_251_1", "index": 2300}
{"task_id": "MBCPP/252", "completion": "    vector<double> polar;\n    polar.push_back(static_cast<double>(numbers));\n    polar.push_back(0.0);\n    return polar;\n}", "unique_id": "MBCPP_252_10", "index": 2319}
{"task_id": "MBCPP/253", "completion": "    return list1.size();\n}", "unique_id": "MBCPP_253_8", "index": 2327}
{"task_id": "MBCPP/254", "completion": "    vector<string> result;\n    string word;\n    for (char ch : text) {\n        if (ch == ' ') {\n            if (!word.empty() && (word[0] == 'a' || word[0] == 'e')) {\n                result.push_back(word);\n            }\n            word.clear();\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty() && (word[0] == 'a' || word[0] == 'e')) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_254_8", "index": 2337}
{"task_id": "MBCPP/255", "completion": "    vector<vector<string>> result;\n    vector<string> current(n);\n    function<void(int)> backtrack = [&](int index) {\n        if (index == n) {\n            result.push_back(current);\n            return;\n        }\n        for (const string& color : l) {\n            current[index] = color;\n            backtrack(index + 1);\n        }\n    };\n    backtrack(0);\n    return result;\n}", "unique_id": "MBCPP_255_1", "index": 2340}
{"task_id": "MBCPP/256", "completion": "    if (n <= 2)\n        return 0;\n\n    vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n\n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n\n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i])\n            count++;\n    }\n\n    return count;\n}", "unique_id": "MBCPP_256_7", "index": 2356}
{"task_id": "MBCPP/257", "completion": "    vector<int> result;\n    result.push_back(b);\n    result.push_back(a);\n    return result;\n}", "unique_id": "MBCPP_257_7", "index": 2366}
{"task_id": "MBCPP/258", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 != 0; });\n}", "unique_id": "MBCPP_258_10", "index": 2379}
{"task_id": "MBCPP/259", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0], testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1], testTup2[i][1]));\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_259_3", "index": 2382}
{"task_id": "MBCPP/260", "completion": "    if (n == 0)\n        return 1;\n    if (n == 1)\n        return 1;\n    int a = 1, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_260_7", "index": 2396}
{"task_id": "MBCPP/261", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] / testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_261_7", "index": 2406}
{"task_id": "MBCPP/263", "completion": "    for (const auto& pair : d2) {\n        d1[pair.first] = pair.second;\n    }\n    return d1;\n}", "unique_id": "MBCPP_263_2", "index": 2411}
{"task_id": "MBCPP/264", "completion": "    if (hAge <= 0)\n        return 0;\n    if (hAge == 1)\n        return 15;\n    if (hAge == 2)\n        return 24;\n    return 24 + (hAge - 2) * 5;\n}", "unique_id": "MBCPP_264_7", "index": 2426}
{"task_id": "MBCPP/266", "completion": "    return 4 * l * l;\n}", "unique_id": "MBCPP_266_10", "index": 2439}
{"task_id": "MBCPP/267", "completion": "    int sum = 0;\n    int count = 0;\n    int num = 1;\n    while (count < n) {\n        sum += num * num;\n        num += 2;\n        count++;\n    }\n    return sum;\n}", "unique_id": "MBCPP_267_10", "index": 2449}
{"task_id": "MBCPP/268", "completion": "    return 6 * n * (n - 1) + 1;\n}", "unique_id": "MBCPP_268_3", "index": 2452}
{"task_id": "MBCPP/269", "completion": "    if (k.empty())\n        return 0;\n    return static_cast<int>(k[0]);\n}", "unique_id": "MBCPP_269_1", "index": 2460}
{"task_id": "MBCPP/270", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_270_6", "index": 2475}
{"task_id": "MBCPP/271", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNumber = 2 * i;\n        sum += pow(evenNumber, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_271_5", "index": 2484}
{"task_id": "MBCPP/273", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] - testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_273_2", "index": 2491}
{"task_id": "MBCPP/274", "completion": "    int sum = 0;\n    for (int i = 0; i <= n; i += 2) {\n        sum += (1 << (n - 1));\n    }\n    return sum;\n}", "unique_id": "MBCPP_274_4", "index": 2503}
{"task_id": "MBCPP/275", "completion": "    int pos = 0;\n    for (int i = 1; i <= n; i++) {\n        pos = (pos + m) % i;\n    }\n    return pos + 1;\n}", "unique_id": "MBCPP_275_2", "index": 2511}
{"task_id": "MBCPP/276", "completion": "    return M_PI * r * r * h;\n}", "unique_id": "MBCPP_276_2", "index": 2521}
{"task_id": "MBCPP/277", "completion": "    unordered_map<string, int> result;\n    for (const auto& pair : dict) {\n        if (pair.second >= n) {\n            result.insert(pair);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_277_3", "index": 2532}
{"task_id": "MBCPP/279", "completion": "    return 4 * n * n - 3 * n;\n}", "unique_id": "MBCPP_279_2", "index": 2541}
{"task_id": "MBCPP/281", "completion": "    unordered_set<int> seen;\n    for (int num : testList) {\n        if (seen.count(num))\n            return false;\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_281_1", "index": 2550}
{"task_id": "MBCPP/282", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a - b; });\n    return result;\n}", "unique_id": "MBCPP_282_2", "index": 2561}
{"task_id": "MBCPP/283", "completion": "    unordered_map<int, int> freq;\n    while (n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (auto it : freq) {\n        if (it.second > it.first)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_283_3", "index": 2572}
{"task_id": "MBCPP/285", "completion": "    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_285_10", "index": 2589}
{"task_id": "MBCPP/286", "completion": "    int totalSum = 0;\n    for(int i = 0; i < n; i++) {\n        totalSum += a[i];\n    }\n    \n    int maxSum = INT_MIN;\n    int currentSum = 0;\n    \n    for(int i = 0; i < n * min(k, 2); i++) {\n        currentSum += a[i % n];\n        if(currentSum < 0) {\n            currentSum = 0;\n        }\n        if(currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    \n    if(k > 2 && totalSum > 0) {\n        maxSum += totalSum * (k - 2);\n    }\n    \n    return maxSum;\n}", "unique_id": "MBCPP_286_3", "index": 2592}
{"task_id": "MBCPP/287", "completion": "    int sum = 0;\n    int count = 0;\n    int num = 2;\n    while (count < n) {\n        sum += num * num;\n        num += 2;\n        count++;\n    }\n    return sum;\n}", "unique_id": "MBCPP_287_5", "index": 2604}
{"task_id": "MBCPP/288", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == 0) continue;\n        long long inverse = 1;\n        long long base = arr[i];\n        long long exponent = p - 2;\n        while (exponent > 0) {\n            if (exponent % 2 == 1) {\n                inverse = (inverse * base) % p;\n            }\n            base = (base * base) % p;\n            exponent /= 2;\n        }\n        if (inverse == arr[i]) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_288_7", "index": 2616}
{"task_id": "MBCPP/289", "completion": "    int odd = 0;\n    if (n % 400 == 0)\n        odd = 0;\n    else if (n % 100 == 0)\n        odd = 5;\n    else if (n % 4 == 0)\n        odd = 2;\n    else\n        odd = 1;\n    return odd;\n}", "unique_id": "MBCPP_289_3", "index": 2622}
{"task_id": "MBCPP/291", "completion": "    if (n == 0) return 0;\n    if (n == 1) return k;\n    int same = k;\n    int diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        int prev_diff = diff;\n        diff = (same + diff) * (k - 1);\n        same = prev_diff;\n    }\n    return same + diff;\n}", "unique_id": "MBCPP_291_7", "index": 2636}
{"task_id": "MBCPP/292", "completion": "    return n / m;\n}", "unique_id": "MBCPP_292_10", "index": 2649}
{"task_id": "MBCPP/295", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; ++i) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_295_1", "index": 2650}
{"task_id": "MBCPP/296", "completion": "    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}", "unique_id": "MBCPP_296_8", "index": 2667}
{"task_id": "MBCPP/297", "completion": "    vector<int> result;\n    for (const auto& innerList : list1) {\n        for (int num : innerList) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_297_4", "index": 2673}
{"task_id": "MBCPP/300", "completion": "    if (n == 0) return 1.0;\n    double result = 0.0;\n    for (int k = 0; k <= n; ++k) {\n        double c1 = tgamma(n + 1) / (tgamma(k + 1) * tgamma(n - k + 1));\n        double c2 = tgamma(n + 1) / (tgamma(k + 1) * tgamma(n - k + 1));\n        result += c1 * c2;\n    }\n    return result;\n}", "unique_id": "MBCPP_300_9", "index": 2688}
{"task_id": "MBCPP/302", "completion": "    if (n == 0)\n        return 0;\n    \n    int msb = 0;\n    n = n / 2;\n    \n    while (n != 0) {\n        n = n / 2;\n        msb++;\n    }\n    \n    return (1 << msb);\n}", "unique_id": "MBCPP_302_4", "index": 2693}
{"task_id": "MBCPP/303", "completion": "    int inv1 = 0, inv2 = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                inv1++;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (a[i] < a[j]) {\n                inv2++;\n            }\n        }\n    }\n    return inv1 == inv2;\n}", "unique_id": "MBCPP_303_3", "index": 2702}
{"task_id": "MBCPP/304", "completion": "    for (int i = rotations - 1; i >= 0; i--) {\n        int left = ranges[i][0];\n        int right = ranges[i][1];\n        if (index >= left && index <= right) {\n            if (index == left)\n                index = right;\n            else\n                index--;\n        }\n    }\n    return arr[index];\n}", "unique_id": "MBCPP_304_4", "index": 2713}
{"task_id": "MBCPP/305", "completion": "    vector<string> result;\n    for (const auto& word : words) {\n        stringstream ss(word);\n        string token;\n        while (ss >> token) {\n            if (!token.empty() && (token[0] == 'p' || token[0] == 'P')) {\n                result.push_back(token);\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_305_3", "index": 2722}
{"task_id": "MBCPP/306", "completion": "    vector<int> dp(n);\n    for (int i = 0; i < n; i++) {\n        dp[i] = a[i];\n    }\n    for (int i = 0; i <= index; i++) {\n        for (int j = 0; j < i; j++) {\n            if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                dp[i] = dp[j] + a[i];\n            }\n        }\n    }\n    int max_sum = dp[index];\n    for (int i = index + 1; i < k; i++) {\n        if (a[i] > a[index]) {\n            max_sum = max(max_sum, dp[index] + a[i]);\n        }\n    }\n    return max_sum;\n}", "unique_id": "MBCPP_306_1", "index": 2730}
{"task_id": "MBCPP/308", "completion": "    vector<int> products;\n    for (int num1 : nums1) {\n        for (int num2 : nums2) {\n            products.push_back(num1 * num2);\n        }\n    }\n    sort(products.begin(), products.end(), greater<int>());\n    if (n > products.size()) {\n        n = products.size();\n    }\n    return vector<int>(products.begin(), products.begin() + n);\n}", "unique_id": "MBCPP_308_10", "index": 2749}
{"task_id": "MBCPP/309", "completion": "    return (a > b) ? a : b;\n}", "unique_id": "MBCPP_309_4", "index": 2753}
{"task_id": "MBCPP/310", "completion": "    vector<string> result;\n    for (char ch : str1) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "unique_id": "MBCPP_310_4", "index": 2763}
{"task_id": "MBCPP/311", "completion": "    int mask = 1;\n    while (mask <= n) {\n        if ((n & mask) == 0) {\n            return n | mask;\n        }\n        mask <<= 1;\n    }\n    return n;\n}", "unique_id": "MBCPP_311_4", "index": 2773}
{"task_id": "MBCPP/312", "completion": "    return (1.0 / 3.0) * M_PI * r * r * h;\n}", "unique_id": "MBCPP_312_3", "index": 2782}
{"task_id": "MBCPP/314", "completion": "    vector<int> dp(n + 1, 0);\n    dp[1] = max(grid[0][0], grid[1][0]);\n    for (int i = 2; i <= n; i++) {\n        int currentMax = max(grid[0][i - 1], grid[1][i - 1]);\n        dp[i] = max(dp[i - 1], dp[i - 2] + currentMax);\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_314_3", "index": 2792}
{"task_id": "MBCPP/315", "completion": "    stringstream ss(str);\n    string word, result = \"-1\";\n    int maxLen = 0;\n    while (ss >> word) {\n        if (word.length() % 2 == 0 && word.length() > maxLen) {\n            maxLen = word.length();\n            result = word;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_315_2", "index": 2801}
{"task_id": "MBCPP/316", "completion": "    int low = 0, high = a.size() - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            low = mid + 1;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_316_9", "index": 2818}
{"task_id": "MBCPP/318", "completion": "    if (s < 3) return 0;\n    int max_vol = 0;\n    for (int a = 1; a <= s / 3; ++a) {\n        for (int b = a; b <= (s - a) / 2; ++b) {\n            int c = s - a - b;\n            if (c >= b) {\n                int volume = a * b * c;\n                if (volume > max_vol) {\n                    max_vol = volume;\n                }\n            }\n        }\n    }\n    return max_vol;\n}", "unique_id": "MBCPP_318_1", "index": 2820}
{"task_id": "MBCPP/319", "completion": "    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{5}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_319_3", "index": 2832}
{"task_id": "MBCPP/320", "completion": "    int sum = n * (n + 1) / 2;\n    int sumSquared = sum * sum;\n    int sumOfSquares = n * (n + 1) * (2 * n + 1) / 6;\n    return sumSquared - sumOfSquares;\n}", "unique_id": "MBCPP_320_2", "index": 2841}
{"task_id": "MBCPP/321", "completion": "    string result;\n    int n = s.length();\n    for(int i = 1; i <= n; i++) {\n        result += to_string(i);\n    }\n    for(int i = n - 1; i >= 1; i--) {\n        result += to_string(i);\n    }\n    return result;\n}", "unique_id": "MBCPP_321_6", "index": 2855}
{"task_id": "MBCPP/322", "completion": "    if (list1.empty()) return {};\n\n    int min_val = *min_element(list1.begin(), list1.end());\n    vector<int> result;\n\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n            result.push_back(i);\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_322_1", "index": 2860}
{"task_id": "MBCPP/323", "completion": "    int pos = 0, neg = 1;\n    vector<int> result(n);\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[i] < 0) {\n            if(neg < n) {\n                result[neg] = arr[i];\n                neg += 2;\n            }\n        } else {\n            if(pos < n) {\n                result[pos] = arr[i];\n                pos += 2;\n            }\n        }\n    }\n    \n    // Fill remaining positions with the rest of the elements\n    for(int i = 0; i < n; i++) {\n        if(result[i] == 0) {\n            if(pos < n) {\n                result[i] = arr[pos];\n                pos++;\n            } else if(neg < n) {\n                result[i] = arr[neg];\n                neg++;\n            }\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_323_1", "index": 2870}
{"task_id": "MBCPP/324", "completion": "    vector<int> result(2, 0);\n    for (size_t i = 0; i < testTuple.size(); ++i) {\n        if (i % 2 == 0) {\n            result[0] += testTuple[i];\n        } else {\n            result[1] += testTuple[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_324_9", "index": 2888}
{"task_id": "MBCPP/325", "completion": "    if (n <= 3)\n        return n;\n\n    int dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n\n    for (int i = 4; i <= n; i++) {\n        dp[i] = i;\n        for (int x = 1; x * x <= i; x++) {\n            dp[i] = min(dp[i], 1 + dp[i - x * x]);\n        }\n    }\n\n    return dp[n];\n}", "unique_id": "MBCPP_325_4", "index": 2893}
{"task_id": "MBCPP/326", "completion": "    unordered_map<string, int> wordCount;\n    for (const auto& str : testList) {\n        stringstream ss(str);\n        string word;\n        while (ss >> word) {\n            wordCount[word]++;\n        }\n    }\n    \n    string result;\n    int maxCount = 0;\n    for (const auto& pair : wordCount) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_326_3", "index": 2902}
{"task_id": "MBCPP/327", "completion": "    if (x == y || y == z || x == z) {\n        if (x + y > z && y + z > x && x + z > y) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_327_6", "index": 2915}
{"task_id": "MBCPP/328", "completion": "    vector<int> result;\n    for (int i = n; i < m + n; i++) {\n        result.push_back(list1[i % list1.size()]);\n    }\n    return result;\n}", "unique_id": "MBCPP_328_6", "index": 2925}
{"task_id": "MBCPP/329", "completion": "    int count = 0;\n    for (int num : list) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_329_10", "index": 2939}
{"task_id": "MBCPP/330", "completion": "    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{3,5}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "unique_id": "MBCPP_330_1", "index": 2940}
{"task_id": "MBCPP/331", "completion": "    int count = 0;\n    while (n > 0) {\n        if ((n & 1) == 0)\n            count++;\n        n = n >> 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_331_1", "index": 2950}
{"task_id": "MBCPP/332", "completion": "    unordered_map<string, int> freqMap;\n    for (char ch : str1) {\n        string s(1, ch);\n        freqMap[s]++;\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_332_6", "index": 2965}
{"task_id": "MBCPP/334", "completion": "    if (a + b <= c || a + c <= b || b + c <= a)\n        return false;\n    else\n        return true;\n}", "unique_id": "MBCPP_334_1", "index": 2970}
{"task_id": "MBCPP/335", "completion": "    return (n * (2 * a + (n - 1) * d)) / 2;\n}", "unique_id": "MBCPP_335_6", "index": 2985}
{"task_id": "MBCPP/336", "completion": "    if (monthname1 == \"February\")\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_336_2", "index": 2991}
{"task_id": "MBCPP/337", "completion": "    regex pattern(R\"(\\b\\w+[.,!?]*\\s*$)\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_337_8", "index": 3007}
{"task_id": "MBCPP/338", "completion": "    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_338_3", "index": 3012}
{"task_id": "MBCPP/339", "completion": "    unordered_map<int, int> freq;\n    for (int i = x; i <= y; ++i) {\n        for (int j = 2; j <= i; ++j) {\n            if (i % j == 0) {\n                freq[j]++;\n            }\n        }\n    }\n    int maxCount = 0;\n    int result = 2;\n    for (auto& pair : freq) {\n        if (pair.second > maxCount || (pair.second == maxCount && pair.first < result)) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_339_6", "index": 3025}
{"task_id": "MBCPP/340", "completion": "    vector<int> positiveNumbers;\n    for (int num : lst) {\n        if (num > 0) {\n            positiveNumbers.push_back(num);\n        }\n    }\n    if (positiveNumbers.size() < 3) {\n        return -1; // or handle as per requirements\n    }\n    sort(positiveNumbers.begin(), positiveNumbers.end());\n    return positiveNumbers[0] + positiveNumbers[1] + positiveNumbers[2];\n}", "unique_id": "MBCPP_340_5", "index": 3034}
{"task_id": "MBCPP/341", "completion": "    vector<int> result(s.begin(), s.end());\n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_341_9", "index": 3048}
{"task_id": "MBCPP/342", "completion": "    vector<pair<int, int>> elements;\n    for (int i = 0; i < list.size(); i++) {\n        for (int j = 0; j < list[i].size(); j++) {\n            elements.push_back({list[i][j], i});\n        }\n    }\n    sort(elements.begin(), elements.end());\n\n    vector<int> count(list.size(), 0);\n    int left = 0, right = 0, total = 0;\n    int min_range = INT_MAX;\n    vector<int> result;\n\n    while (right < elements.size()) {\n        if (count[elements[right].second] == 0) {\n            total++;\n        }\n        count[elements[right].second]++;\n        while (total == list.size()) {\n            int current_range = elements[right].first - elements[left].first;\n            if (current_range < min_range) {\n                min_range = current_range;\n                result = {elements[left].first, elements[right].first};\n            }\n            count[elements[left].second]--;\n            if (count[elements[left].second] == 0) {\n                total--;\n            }\n            left++;\n        }\n        right++;\n    }\n    return result;\n}", "unique_id": "MBCPP_342_3", "index": 3052}
{"task_id": "MBCPP/343", "completion": "    int letters = 0, digits = 0;\n    for (char ch : s) {\n        if (isalpha(ch))\n            letters++;\n        else if (isdigit(ch))\n            digits++;\n    }\n    return {letters, digits};\n}", "unique_id": "MBCPP_343_1", "index": 3060}
{"task_id": "MBCPP/344", "completion": "    int count = 0;\n    int start = ceil(sqrt(n));\n    int end = floor(sqrt(m));\n    count = end - start + 1;\n    return count > 0 ? count : 0;\n}", "unique_id": "MBCPP_344_3", "index": 3072}
{"task_id": "MBCPP/345", "completion": "    vector<int> result;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        result.push_back(nums[i] - nums[i - 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_345_5", "index": 3084}
{"task_id": "MBCPP/346", "completion": "    if (n == 0 && k == 0)\n        return 1;\n    if (k == 0)\n        return 0;\n    if (k > n)\n        return 0;\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n}", "unique_id": "MBCPP_346_4", "index": 3093}
{"task_id": "MBCPP/347", "completion": "    int count = 0;\n    while (m > 0 && n > 0) {\n        count += m * n;\n        m--;\n        n--;\n    }\n    return count;\n}", "unique_id": "MBCPP_347_9", "index": 3108}
{"task_id": "MBCPP/348", "completion": "    if (m % 2 != 0)\n        return 0;\n    \n    int n = m / 2;\n    int dp[n + 1];\n    dp[0] = 1;\n    \n    for (int i = 1; i <= n; i++) {\n        dp[i] = 0;\n        for (int j = 0; j < i; j++) {\n            dp[i] += dp[j] * dp[i - j - 1];\n        }\n    }\n    \n    return dp[n];\n}", "unique_id": "MBCPP_348_7", "index": 3116}
{"task_id": "MBCPP/349", "completion": "    for (char ch : str) {\n        if (ch != '0' && ch != '1') {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}", "unique_id": "MBCPP_349_3", "index": 3122}
{"task_id": "MBCPP/350", "completion": "    int left = 0, right = s.length() - 1;\n    while (left < right && s[left] == s[right]) {\n        char ch = s[left];\n        while (left <= right && s[left] == ch) {\n            left++;\n        }\n        while (left <= right && s[right] == ch) {\n            right--;\n        }\n    }\n    return right - left + 1;\n}", "unique_id": "MBCPP_350_10", "index": 3139}
{"task_id": "MBCPP/351", "completion": "    unordered_map<int, int> freqMap;\n    for (int i = 0; i < n; i++) {\n        freqMap[arr[i]]++;\n        if (freqMap[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1; // If no element occurs k times\n}", "unique_id": "MBCPP_351_3", "index": 3142}
{"task_id": "MBCPP/352", "completion": "    unordered_set<char> charSet;\n    for (char c : str) {\n        if (charSet.find(c) != charSet.end()) {\n            return false;\n        }\n        charSet.insert(c);\n    }\n    return true;\n}", "unique_id": "MBCPP_352_6", "index": 3155}
{"task_id": "MBCPP/353", "completion": "    vector<vector<int>> result;\n    for (auto& row : list1) {\n        if (n < row.size()) {\n            row.erase(row.begin() + n);\n        }\n        result.push_back(row);\n    }\n    return result;\n}", "unique_id": "MBCPP_353_5", "index": 3164}
{"task_id": "MBCPP/354", "completion": "    return a + (n - 1) * d;\n}", "unique_id": "MBCPP_354_5", "index": 3174}
{"task_id": "MBCPP/355", "completion": "    if (radius == 0)\n        return 0;\n    int count = 0;\n    for (int x1 = -radius; x1 <= radius; ++x1) {\n        for (int y1 = -radius; y1 <= radius; ++y1) {\n            for (int x2 = x1 + 1; x2 <= radius; ++x2) {\n                for (int y2 = y1 + 1; y2 <= radius; ++y2) {\n                    if (x1 * x1 + y1 * y1 <= radius * radius &&\n                        x2 * x2 + y1 * y1 <= radius * radius &&\n                        x1 * x1 + y2 * y2 <= radius * radius &&\n                        x2 * x2 + y2 * y2 <= radius * radius) {\n                        ++count;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_355_6", "index": 3185}
{"task_id": "MBCPP/356", "completion": "    return 180 - (a + b);\n}", "unique_id": "MBCPP_356_10", "index": 3199}
{"task_id": "MBCPP/357", "completion": "    int maxElement = INT_MIN;\n    for (const auto& row : testList) {\n        for (int element : row) {\n            if (element > maxElement) {\n                maxElement = element;\n            }\n        }\n    }\n    return maxElement;\n}", "unique_id": "MBCPP_357_10", "index": 3209}
{"task_id": "MBCPP/358", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a % b; });\n    return result;\n}", "unique_id": "MBCPP_358_6", "index": 3215}
{"task_id": "MBCPP/359", "completion": "    int discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n        return \"No\";\n    }\n    double root1 = (-b + sqrt(discriminant)) / (2.0 * a);\n    double root2 = (-b - sqrt(discriminant)) / (2.0 * a);\n    if ((root1 == 2 * root2) || (root2 == 2 * root1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "unique_id": "MBCPP_359_4", "index": 3223}
{"task_id": "MBCPP/360", "completion": "    return (pow(2, n) - 1) * (pow(2, n) - 1) - 2;\n}", "unique_id": "MBCPP_360_8", "index": 3237}
{"task_id": "MBCPP/363", "completion": "    for (auto& row : testList) {\n        for (auto& element : row) {\n            element += k;\n        }\n    }\n    return testList;\n}", "unique_id": "MBCPP_363_8", "index": 3247}
{"task_id": "MBCPP/364", "completion": "    int flip1 = 0, flip2 = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            if (str[i] == '1') flip1++;\n            else flip2++;\n        } else {\n            if (str[i] == '0') flip1++;\n            else flip2++;\n        }\n    }\n    return min(flip1, flip2);\n}", "unique_id": "MBCPP_364_6", "index": 3255}
{"task_id": "MBCPP/365", "completion": "    if (n == 0)\n        return 1;\n    int count = 0;\n    while (n != 0) {\n        n = n / 10;\n        ++count;\n    }\n    return count;\n}", "unique_id": "MBCPP_365_1", "index": 3260}
{"task_id": "MBCPP/366", "completion": "    if (listNums.size() < 2)\n        return 0;\n    int maxProduct = listNums[0] * listNums[1];\n    for (int i = 1; i < listNums.size() - 1; i++) {\n        int currentProduct = listNums[i] * listNums[i + 1];\n        if (currentProduct > maxProduct)\n            maxProduct = currentProduct;\n    }\n    return maxProduct;\n}", "unique_id": "MBCPP_366_3", "index": 3272}
{"task_id": "MBCPP/368", "completion": "    vector<vector<int>> result;\n    for(int i = 0; i < n; i++) {\n        result.push_back(testTup);\n    }\n    return result;\n}", "unique_id": "MBCPP_368_2", "index": 3281}
{"task_id": "MBCPP/369", "completion": "    return 2 * h * (l + w);\n}", "unique_id": "MBCPP_369_8", "index": 3297}
{"task_id": "MBCPP/370", "completion": "    sort(price.begin(), price.end(), [](const vector<string>& a, const vector<string>& b) {\n        float aVal = stof(a[1]);\n        float bVal = stof(b[1]);\n        return aVal > bVal;\n    });\n    return price;\n}", "unique_id": "MBCPP_370_1", "index": 3300}
{"task_id": "MBCPP/371", "completion": "    while (leftElement <= rightElement) {\n        int mid = leftElement + (rightElement - leftElement) / 2;\n        if (a[mid] == mid)\n            leftElement = mid + 1;\n        else\n            rightElement = mid - 1;\n    }\n    return leftElement;\n}", "unique_id": "MBCPP_371_7", "index": 3316}
{"task_id": "MBCPP/372", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num : nums) {\n        minHeap.push(num);\n    }\n    vector<int> sortedNums;\n    while (!minHeap.empty()) {\n        sortedNums.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedNums;\n}", "unique_id": "MBCPP_372_6", "index": 3325}
{"task_id": "MBCPP/373", "completion": "    return l * w * h;\n}", "unique_id": "MBCPP_373_5", "index": 3334}
{"task_id": "MBCPP/374", "completion": "    vector<string> result;\n    sort(str.begin(), str.end());\n    do {\n        result.push_back(str);\n    } while (next_permutation(str.begin(), str.end()));\n    return result;\n}", "unique_id": "MBCPP_374_5", "index": 3344}
{"task_id": "MBCPP/375", "completion": "    int remainder = n % m;\n    if (remainder * 2 >= m)\n        return n + (m - remainder);\n    else\n        return n - remainder;\n}", "unique_id": "MBCPP_375_10", "index": 3359}
{"task_id": "MBCPP/377", "completion": "    s.erase(remove(s.begin(), s.end(), c[0]), s.end());\n    return s;\n}", "unique_id": "MBCPP_377_9", "index": 3368}
{"task_id": "MBCPP/378", "completion": "    if (testList.empty()) return testList;\n    int lastElement = testList.back();\n    testList.pop_back();\n    testList.insert(testList.begin(), lastElement);\n    return testList;\n}", "unique_id": "MBCPP_378_4", "index": 3373}
{"task_id": "MBCPP/379", "completion": "    return 2 * (l * w + w * h + h * l);\n}", "unique_id": "MBCPP_379_8", "index": 3387}
{"task_id": "MBCPP/380", "completion": "    vector<vector<int>> result(rownum, vector<int>(colnum, 0));\n    for (int i = 0; i < rownum; ++i) {\n        for (int j = 0; j < colnum; ++j) {\n            result[i][j] = i * j;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_380_6", "index": 3395}
{"task_id": "MBCPP/382", "completion": "    int n = a.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        if (a[low] <= a[high])\n            return low;\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % n;\n        int prev = (mid + n - 1) % n;\n        if (a[mid] <= a[next] && a[mid] <= a[prev])\n            return mid;\n        else if (a[mid] <= a[high])\n            high = mid - 1;\n        else if (a[mid] >= a[low])\n            low = mid + 1;\n    }\n    return -1;\n}", "unique_id": "MBCPP_382_6", "index": 3405}
{"task_id": "MBCPP/383", "completion": "    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n ^ mask;\n}", "unique_id": "MBCPP_383_8", "index": 3417}
{"task_id": "MBCPP/384", "completion": "    if (n == 0) return 0;\n    int min_val = *min_element(arr.begin(), arr.end());\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == min_val) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_384_4", "index": 3423}
{"task_id": "MBCPP/385", "completion": "    if (n == 0)\n        return 3;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    return getPerrin(n - 2) + getPerrin(n - 3);\n}", "unique_id": "MBCPP_385_3", "index": 3432}
{"task_id": "MBCPP/386", "completion": "    int swap = 0, imbalance = 0;\n    int left = 0, right = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == '[') {\n            left++;\n            if (imbalance > 0) {\n                swap += imbalance;\n                imbalance--;\n            }\n        } else if (s[i] == ']') {\n            right++;\n            imbalance = (right - left);\n        }\n    }\n    return swap;\n}", "unique_id": "MBCPP_386_3", "index": 3442}
{"task_id": "MBCPP/387", "completion": "    char lastChar = n.back();\n    if ((lastChar >= '0' && lastChar <= '9') || (lastChar >= 'A' && lastChar <= 'F')) {\n        int lastDigit = (lastChar >= '0' && lastChar <= '9') ? (lastChar - '0') : (lastChar - 'A' + 10);\n        return (lastDigit % 2 == 0) ? \"Even\" : \"Odd\";\n    }\n    return \"Odd\";\n}", "unique_id": "MBCPP_387_6", "index": 3455}
{"task_id": "MBCPP/388", "completion": "    int res = 1;\n    while (res * 2 <= n) {\n        res *= 2;\n    }\n    return res;\n}", "unique_id": "MBCPP_388_2", "index": 3461}
{"task_id": "MBCPP/389", "completion": "    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    int a = 2, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_389_1", "index": 3470}
{"task_id": "MBCPP/391", "completion": "    vector<unordered_map<string, unordered_map<string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        unordered_map<string, int> innerMap;\n        innerMap[l2[i]] = l3[i];\n        unordered_map<string, unordered_map<string, int>> outerMap;\n        outerMap[l1[i]] = innerMap;\n        result.push_back(outerMap);\n    }\n    return result;\n}", "unique_id": "MBCPP_391_5", "index": 3484}
{"task_id": "MBCPP/392", "completion": "    if (n == 0)\n        return 0;\n    int sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n    return max(sum, n);\n}", "unique_id": "MBCPP_392_1", "index": 3490}
{"task_id": "MBCPP/394", "completion": "    unordered_set<int> seen;\n    for (int num : testTup) {\n        if (seen.find(num) != seen.end()) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_394_8", "index": 3507}
{"task_id": "MBCPP/396", "completion": "    regex pattern(\"^(.).*\\\\1$\");\n    if (regex_match(str, pattern)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}", "unique_id": "MBCPP_396_9", "index": 3518}
{"task_id": "MBCPP/397", "completion": "    if ((a >= b && a <= c) || (a <= b && a >= c))\n        return a;\n    else if ((b >= a && b <= c) || (b <= a && b >= c))\n        return b;\n    else\n        return c;\n}", "unique_id": "MBCPP_397_5", "index": 3524}
{"task_id": "MBCPP/398", "completion": "    int sum = 0;\n    for (int num : nums) {\n        int current = abs(num);\n        while (current > 0) {\n            sum += current % 10;\n            current /= 10;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_398_9", "index": 3538}
{"task_id": "MBCPP/399", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] ^ testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_399_9", "index": 3548}
{"task_id": "MBCPP/400", "completion": "    unordered_set<string> uniqueTuples;\n    for (auto& tuple : testList) {\n        sort(tuple.begin(), tuple.end());\n        string key = to_string(tuple[0]) + \",\" + to_string(tuple[1]);\n        uniqueTuples.insert(key);\n    }\n    return uniqueTuples.size();\n}", "unique_id": "MBCPP_400_3", "index": 3552}
{"task_id": "MBCPP/401", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] + testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_401_6", "index": 3565}
{"task_id": "MBCPP/402", "completion": "    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    if (r > n - r)\n        r = n - r;\n    int dp[r + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = min(i, r); j > 0; j--) {\n            dp[j] = (dp[j] + dp[j - 1]) % p;\n        }\n    }\n    return dp[r];\n}", "unique_id": "MBCPP_402_5", "index": 3574}
{"task_id": "MBCPP/403", "completion": "    regex pattern(\"^(https?://)?(www\\\\.)?[a-zA-Z0-9]+\\\\.[a-zA-Z]{2,}(/\\\\S*)?$\");\n    return regex_match(str, pattern);\n}", "unique_id": "MBCPP_403_10", "index": 3589}
{"task_id": "MBCPP/404", "completion": "    return (a < b) ? a : b;\n}", "unique_id": "MBCPP_404_9", "index": 3598}
{"task_id": "MBCPP/406", "completion": "    if (x % 2 == 0)\n        return \"Even Parity\";\n    else\n        return \"Odd Parity\";\n}", "unique_id": "MBCPP_406_8", "index": 3607}
{"task_id": "MBCPP/408", "completion": "    vector<vector<int>> result;\n    if (nums1.empty() || nums2.empty() || k <= 0) return result;\n    \n    auto cmp = [](const pair<int, pair<int, int>>& a, const pair<int, pair<int, int>>& b) {\n        return a.first > b.first;\n    };\n    \n    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, decltype(cmp)> pq(cmp);\n    \n    for (int i = 0; i < nums1.size(); ++i) {\n        pq.push({nums1[i] + nums2[0], {i, 0}});\n    }\n    \n    while (k-- && !pq.empty()) {\n        auto top = pq.top();\n        pq.pop();\n        int i = top.second.first;\n        int j = top.second.second;\n        result.push_back({nums1[i], nums2[j]});\n        \n        if (j + 1 < nums2.size()) {\n            pq.push({nums1[i] + nums2[j + 1], {i, j + 1}});\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_408_5", "index": 3614}
{"task_id": "MBCPP/409", "completion": "    int minProduct = INT_MAX;\n    for (const auto& tuple : list1) {\n        int product = tuple[0] * tuple[1];\n        if (product < minProduct) {\n            minProduct = product;\n        }\n    }\n    return minProduct;\n}", "unique_id": "MBCPP_409_5", "index": 3624}
{"task_id": "MBCPP/411", "completion": "    string result;\n    bool capitalizeNext = true;\n    for (char ch : word) {\n        if (ch == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                result += toupper(ch);\n                capitalizeNext = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_411_10", "index": 3639}
{"task_id": "MBCPP/412", "completion": "    vector<int> result;\n    for(int num : l) {\n        if(num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_412_5", "index": 3644}
{"task_id": "MBCPP/414", "completion": "    unordered_set<int> set1(list1.begin(), list1.end());\n    for (int num : list2) {\n        if (set1.find(num) != set1.end()) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_414_4", "index": 3653}
{"task_id": "MBCPP/415", "completion": "    int n = arr.size();\n    if (n < 2)\n        return {};\n\n    sort(arr.begin(), arr.end());\n\n    long long product1 = arr[0] * arr[1];\n    long long product2 = arr[n - 1] * arr[n - 2];\n\n    if (product1 > product2)\n        return {arr[0], arr[1]};\n    else\n        return {arr[n - 2], arr[n - 1]};\n}", "unique_id": "MBCPP_415_10", "index": 3669}
{"task_id": "MBCPP/416", "completion": "    if (n == 0 || n == 1)\n        return n;\n    return max(n, breaksum(n / 2) + breaksum(n / 3) + breaksum(n / 4));\n}", "unique_id": "MBCPP_416_2", "index": 3671}
{"task_id": "MBCPP/417", "completion": "    unordered_map<string, vector<string>> groups;\n    for (const auto& tuple : input) {\n        if (!tuple.empty()) {\n            string first = tuple[0];\n            for (size_t i = 1; i < tuple.size(); ++i) {\n                groups[first].push_back(tuple[i]);\n            }\n        }\n    }\n    \n    vector<vector<string>> result;\n    for (const auto& [key, values] : groups) {\n        vector<string> group = {key};\n        group.insert(group.end(), values.begin(), values.end());\n        result.push_back(group);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_417_2", "index": 3681}
{"task_id": "MBCPP/419", "completion": "    int sum = 0;\n    for (double num : list1) {\n        sum += round(num);\n    }\n    return sum * list1.size();\n}", "unique_id": "MBCPP_419_5", "index": 3694}
{"task_id": "MBCPP/420", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += evenNum * evenNum * evenNum;\n    }\n    return sum;\n}", "unique_id": "MBCPP_420_6", "index": 3705}
{"task_id": "MBCPP/423", "completion": "    vector<vector<int>> dp(m, vector<int>(n, 0));\n    for (int col = n - 1; col >= 0; col--) {\n        for (int row = 0; row < m; row++) {\n            int right = (col == n - 1) ? 0 : dp[row][col + 1];\n            int right_up = (row == 0 || col == n - 1) ? 0 : dp[row - 1][col + 1];\n            int right_down = (row == m - 1 || col == n - 1) ? 0 : dp[row + 1][col + 1];\n            dp[row][col] = gold[row][col] + max(right, max(right_up, right_down));\n        }\n    }\n    int max_gold = dp[0][0];\n    for (int i = 1; i < m; i++) {\n        max_gold = max(max_gold, dp[i][0]);\n    }\n    return max_gold;\n}", "unique_id": "MBCPP_423_1", "index": 3710}
{"task_id": "MBCPP/424", "completion": "    vector<string> result;\n    for (const auto& str : testTuple) {\n        if (!str.empty()) {\n            result.push_back(string(1, str.back()));\n        } else {\n            result.push_back(\"\");\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_424_4", "index": 3723}
{"task_id": "MBCPP/426", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int num) {\n        return num % 2 != 0;\n    });\n    return result;\n}", "unique_id": "MBCPP_426_3", "index": 3732}
{"task_id": "MBCPP/427", "completion": "    regex pattern(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch match;\n    if (regex_match(dt, match, pattern)) {\n        return match[3].str() + \"-\" + match[2].str() + \"-\" + match[1].str();\n    }\n    return \"\";\n}", "unique_id": "MBCPP_427_9", "index": 3748}
{"task_id": "MBCPP/428", "completion": "    int n = myList.size();\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int temp = myList[i];\n            int j;\n            for (j = i; j >= gap && myList[j - gap] > temp; j -= gap) {\n                myList[j] = myList[j - gap];\n            }\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}", "unique_id": "MBCPP_428_8", "index": 3757}
{"task_id": "MBCPP/429", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] & testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_429_10", "index": 3769}
{"task_id": "MBCPP/430", "completion": "    return -((b * b) + (4 * a * c));\n}", "unique_id": "MBCPP_430_3", "index": 3772}
{"task_id": "MBCPP/433", "completion": "    for (int i = 0; i < arr.size(); i++) {\n        if (number <= arr[i]) {\n            return \"No, entered number is less than those in the array\";\n        }\n    }\n    return \"Yes, the entered number is greater than those in the array\";\n}", "unique_id": "MBCPP_433_9", "index": 3788}
{"task_id": "MBCPP/434", "completion": "    regex pattern(\"ab+\");\n    if (regex_search(text, pattern))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}", "unique_id": "MBCPP_434_1", "index": 3790}
{"task_id": "MBCPP/435", "completion": "    return abs(n) % 10;\n}", "unique_id": "MBCPP_435_6", "index": 3805}
{"task_id": "MBCPP/436", "completion": "    vector<int> result;\n    for (int num : list1) {\n        if (num < 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_436_8", "index": 3817}
{"task_id": "MBCPP/437", "completion": "    string result;\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (i % 2 != 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_437_8", "index": 3827}
{"task_id": "MBCPP/438", "completion": "    unordered_map<string, int> freq;\n    int count = 0;\n    for (auto& pair : testList) {\n        string key1 = to_string(pair[0]) + \",\" + to_string(pair[1]);\n        string key2 = to_string(pair[1]) + \",\" + to_string(pair[0]);\n        if (freq.find(key2) != freq.end()) {\n            count++;\n            freq.erase(key2);\n        } else {\n            freq[key1]++;\n        }\n    }\n    return to_string(count * 2);\n}", "unique_id": "MBCPP_438_3", "index": 3832}
{"task_id": "MBCPP/439", "completion": "    int result = 0;\n    for (int num : l) {\n        int temp = num;\n        if (temp < 0) {\n            temp = -temp;\n        }\n        while (temp > 0) {\n            result *= 10;\n            temp /= 10;\n        }\n        result += num;\n    }\n    return result;\n}", "unique_id": "MBCPP_439_1", "index": 3840}
{"task_id": "MBCPP/441", "completion": "    return 6 * l * l;\n}", "unique_id": "MBCPP_441_1", "index": 3850}
{"task_id": "MBCPP/442", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "unique_id": "MBCPP_442_4", "index": 3863}
{"task_id": "MBCPP/443", "completion": "    int largest = 0;\n    for (int num : list1) {\n        if (num < 0) {\n            if (largest == 0 || num > largest) {\n                largest = num;\n            }\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_443_3", "index": 3872}
{"task_id": "MBCPP/444", "completion": "    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        vector<int> trimmedTuple(testList[i].begin() + k, testList[i].end() - k);\n        result += \"(\";\n        for (size_t j = 0; j < trimmedTuple.size(); ++j) {\n            result += to_string(trimmedTuple[j]);\n            if (j != trimmedTuple.size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_444_8", "index": 3887}
{"task_id": "MBCPP/445", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] * testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_445_3", "index": 3892}
{"task_id": "MBCPP/447", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [](int n) { return n * n * n; });\n    return nums;\n}", "unique_id": "MBCPP_447_5", "index": 3904}
{"task_id": "MBCPP/448", "completion": "    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    \n    int p0 = 3, p1 = 0, p2 = 2;\n    int sum = p0 + p1 + p2;\n    \n    for (int i = 3; i < n; i++) {\n        int current = p1 + p2;\n        sum += current;\n        p1 = p2;\n        p2 = current;\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_448_1", "index": 3910}
{"task_id": "MBCPP/449", "completion": "    // Calculate the area of the triangle using the shoelace formula\n    int area = abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2;\n    \n    // If the area is zero, the points are collinear and do not form a triangle\n    if (area == 0)\n        return \"No\";\n    else\n        return \"Yes\";\n}", "unique_id": "MBCPP_449_9", "index": 3928}
{"task_id": "MBCPP/450", "completion": "    vector<string> result;\n    for (const auto& s : str) {\n        if (s.size() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_450_6", "index": 3935}
{"task_id": "MBCPP/451", "completion": "    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \"\");\n}", "unique_id": "MBCPP_451_8", "index": 3947}
{"task_id": "MBCPP/453", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0 && i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_453_5", "index": 3954}
{"task_id": "MBCPP/454", "completion": "    regex pattern(\"\\\\b\\\\w*z\\\\w*\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_454_3", "index": 3962}
{"task_id": "MBCPP/455", "completion": "    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_455_9", "index": 3978}
{"task_id": "MBCPP/456", "completion": "    for (auto& str : stringlist) {\n        reverse(str.begin(), str.end());\n    }\n    return stringlist;\n}", "unique_id": "MBCPP_456_5", "index": 3984}
{"task_id": "MBCPP/458", "completion": "    return l * b;\n}", "unique_id": "MBCPP_458_5", "index": 3994}
{"task_id": "MBCPP/459", "completion": "    regex pattern(\"[A-Z]\");\n    return regex_replace(str1, pattern, \"\");\n}", "unique_id": "MBCPP_459_10", "index": 4009}
{"task_id": "MBCPP/460", "completion": "    vector<int> result;\n    for (const auto& sublist : lst) {\n        if (!sublist.empty()) {\n            result.push_back(sublist[0]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_460_3", "index": 4012}
{"task_id": "MBCPP/461", "completion": "    int count = 0;\n    for (char c : str) {\n        if (isupper(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_461_3", "index": 4022}
{"task_id": "MBCPP/463", "completion": "    if (arr.empty()) return 0;\n    int maxProd = arr[0], minProd = arr[0], result = arr[0];\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] < 0)\n            swap(maxProd, minProd);\n        maxProd = max(arr[i], maxProd * arr[i]);\n        minProd = min(arr[i], minProd * arr[i]);\n        result = max(result, maxProd);\n    }\n    return result;\n}", "unique_id": "MBCPP_463_2", "index": 4031}
{"task_id": "MBCPP/464", "completion": "    for (const auto& pair : dict) {\n        if (pair.second != n) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_464_6", "index": 4045}
{"task_id": "MBCPP/466", "completion": "    int left = 0, right = n - 1;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] < arr[mid + 1]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}", "unique_id": "MBCPP_466_3", "index": 4052}
{"task_id": "MBCPP/467", "completion": "    int octalnum = 0, i = 1;\n    while (decinum != 0) {\n        octalnum += (decinum % 8) * i;\n        decinum /= 8;\n        i *= 10;\n    }\n    return octalnum;\n}", "unique_id": "MBCPP_467_4", "index": 4063}
{"task_id": "MBCPP/468", "completion": "    vector<int> dp(n);\n    for (int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_468_1", "index": 4070}
{"task_id": "MBCPP/469", "completion": "    int n = price.size();\n    if (n == 0 || k == 0)\n        return 0;\n    \n    if (k >= n / 2) {\n        int max_profit = 0;\n        for (int i = 1; i < n; i++) {\n            if (price[i] > price[i - 1])\n                max_profit += price[i] - price[i - 1];\n        }\n        return max_profit;\n    }\n    \n    vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n    for (int i = 1; i <= k; i++) {\n        int max_diff = -price[0];\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff);\n            max_diff = max(max_diff, dp[i - 1][j] - price[j]);\n        }\n    }\n    return dp[k][n - 1];\n}", "unique_id": "MBCPP_469_1", "index": 4080}
{"task_id": "MBCPP/470", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_470_3", "index": 4092}
{"task_id": "MBCPP/471", "completion": "    long long product = 1;\n    for (int i = 0; i < lens; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product % n;\n}", "unique_id": "MBCPP_471_3", "index": 4102}
{"task_id": "MBCPP/472", "completion": "    if (l.empty())\n        return false;\n    \n    sort(l.begin(), l.end());\n    \n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1)\n            return false;\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_472_6", "index": 4115}
{"task_id": "MBCPP/474", "completion": "    size_t pos = str1.find(ch);\n    while (pos != string::npos) {\n        str1.replace(pos, ch.length(), newch);\n        pos = str1.find(ch, pos + newch.length());\n    }\n    return str1;\n}", "unique_id": "MBCPP_474_1", "index": 4120}
{"task_id": "MBCPP/476", "completion": "    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return min_val + max_val;\n}", "unique_id": "MBCPP_476_1", "index": 4130}
{"task_id": "MBCPP/477", "completion": "    for (char &c : str) {\n        c = tolower(c);\n    }\n    return str;\n}", "unique_id": "MBCPP_477_10", "index": 4149}
{"task_id": "MBCPP/478", "completion": "    string result;\n    for (char c : str1) {\n        if (!islower(c)) {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_478_4", "index": 4153}
{"task_id": "MBCPP/479", "completion": "    while (n >= 10) {\n        n = n / 10;\n    }\n    return n;\n}", "unique_id": "MBCPP_479_3", "index": 4162}
{"task_id": "MBCPP/480", "completion": "    int count[256] = {0};\n    int len = str1.length();\n    int max = 0;\n    string result;\n\n    for (int i = 0; i < len; i++) {\n        count[str1[i]]++;\n        if (max < count[str1[i]]) {\n            max = count[str1[i]];\n            result = str1[i];\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_480_3", "index": 4172}
{"task_id": "MBCPP/481", "completion": "    bool dp[n + 1][sum + 1];\n    for (int i = 0; i <= n; i++)\n        dp[i][0] = true;\n    for (int i = 1; i <= sum; i++)\n        dp[0][i] = false;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= sum; j++) {\n            if (j < set[i - 1])\n                dp[i][j] = dp[i - 1][j];\n            else\n                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i - 1]];\n        }\n    }\n    return dp[n][sum];\n}", "unique_id": "MBCPP_481_6", "index": 4185}
{"task_id": "MBCPP/482", "completion": "    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "unique_id": "MBCPP_482_1", "index": 4190}
{"task_id": "MBCPP/483", "completion": "    if (x == 1)\n        return 1;\n    int factorial = 1;\n    for (int i = 1; ; i++) {\n        factorial *= i;\n        if (factorial % x == 0)\n            return i;\n    }\n}", "unique_id": "MBCPP_483_3", "index": 4202}
{"task_id": "MBCPP/484", "completion": "    vector<vector<string>> result;\n    for (const auto& tuple1 : testList1) {\n        bool found = false;\n        for (const auto& tuple2 : testList2) {\n            if (tuple1 == tuple2) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push_back(tuple1);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_484_2", "index": 4211}
{"task_id": "MBCPP/485", "completion": "    int largest = -1;\n    for(int i = 0; i < n; i++) {\n        int num = a[i];\n        int reversed = 0;\n        int original = num;\n        while(num != 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n        if(original == reversed && original > largest) {\n            largest = original;\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_485_9", "index": 4228}
{"task_id": "MBCPP/486", "completion": "    if (p < 0 || p > 1 || n < 0 || k < 0 || k > n)\n        return 0.0;\n    \n    double comb = 1.0;\n    for (int i = 1; i <= k; ++i) {\n        comb *= (n - k + i) * 1.0 / i;\n    }\n    \n    return comb * pow(p, k) * pow(1 - p, n - k);\n}", "unique_id": "MBCPP_486_1", "index": 4230}
{"task_id": "MBCPP/487", "completion": "    sort(tup.begin(), tup.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tup;\n}", "unique_id": "MBCPP_487_5", "index": 4244}
{"task_id": "MBCPP/488", "completion": "    return (sqrt(5 * (5 + 2 * sqrt(5))) * a * a) / 4;\n}", "unique_id": "MBCPP_488_9", "index": 4258}
{"task_id": "MBCPP/489", "completion": "    if (n == 0) return 0;\n    int max_val = *max_element(arr.begin(), arr.end());\n    int count = 0;\n    for (int num : arr) {\n        if (num == max_val) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_489_2", "index": 4261}
{"task_id": "MBCPP/491", "completion": "    if (r == 1)\n        return a * n;\n    return a * (pow(r, n) - 1) / (r - 1);\n}", "unique_id": "MBCPP_491_9", "index": 4278}
{"task_id": "MBCPP/492", "completion": "    int left = 0;\n    int right = itemList.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (itemList[mid] == item)\n            return true;\n        else if (itemList[mid] < item)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return false;\n}", "unique_id": "MBCPP_492_1", "index": 4280}
{"task_id": "MBCPP/493", "completion": "    vector<vector<vector<double>>> polygons;\n    double height = radius * sqrt(3);\n    \n    for (int x = startx; x <= endx; x++) {\n        for (int y = starty; y <= endy; y++) {\n            double centerX = x * 1.5 * radius;\n            double centerY = y * height + (x % 2) * (height / 2);\n            \n            vector<vector<double>> hexagon = {\n                {centerX - radius, centerY},\n                {centerX - radius / 2, centerY + height / 2},\n                {centerX + radius / 2, centerY + height / 2},\n                {centerX + radius, centerY},\n                {centerX + radius / 2, centerY - height / 2},\n                {centerX - radius / 2, centerY - height / 2},\n                {centerX - radius, centerY}\n            };\n            \n            polygons.push_back(hexagon);\n        }\n    }\n    \n    return polygons;\n}", "unique_id": "MBCPP_493_4", "index": 4293}
{"task_id": "MBCPP/494", "completion": "    int result = 0;\n    for (int i = 0; i < testTup.size(); ++i) {\n        result += testTup[i] * pow(2, testTup.size() - i - 1);\n    }\n    return to_string(result);\n}", "unique_id": "MBCPP_494_3", "index": 4302}
{"task_id": "MBCPP/495", "completion": "    regex pattern(\"[a-z]\");\n    string result = regex_replace(str1, pattern, \"\");\n    return result;\n}", "unique_id": "MBCPP_495_9", "index": 4318}
{"task_id": "MBCPP/496", "completion": "    priority_queue<int> maxHeap;\n    for (int num : nums) {\n        maxHeap.push(num);\n        if (maxHeap.size() > n) {\n            maxHeap.pop();\n        }\n    }\n    vector<int> result;\n    while (!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_496_5", "index": 4324}
{"task_id": "MBCPP/497", "completion": "    double l = sqrt(r * r + h * h);\n    return M_PI * r * (r + l);\n}", "unique_id": "MBCPP_497_2", "index": 4331}
{"task_id": "MBCPP/498", "completion": "    if (y == 0)\n        return x;\n    return gcd(y, x % y);\n}", "unique_id": "MBCPP_498_10", "index": 4349}
{"task_id": "MBCPP/499", "completion": "    return 2 * r;\n}", "unique_id": "MBCPP_499_10", "index": 4359}
{"task_id": "MBCPP/500", "completion": "    string result = \"  \";\n    for (const auto& s : list) {\n        result += s + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n}", "unique_id": "MBCPP_500_9", "index": 4368}
{"task_id": "MBCPP/501", "completion": "    int count = 0;\n    int gcd = __gcd(x, y);\n    for (int i = 1; i <= gcd; i++) {\n        if (gcd % i == 0)\n            count++;\n    }\n    return count;\n}", "unique_id": "MBCPP_501_2", "index": 4371}
{"task_id": "MBCPP/502", "completion": "    return n % m;\n}", "unique_id": "MBCPP_502_2", "index": 4381}
{"task_id": "MBCPP/503", "completion": "    vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_503_10", "index": 4399}
{"task_id": "MBCPP/504", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_504_9", "index": 4408}
{"task_id": "MBCPP/505", "completion": "    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != 0) {\n            a[count++] = a[i];\n        }\n    }\n    while (count < a.size()) {\n        a[count++] = 0;\n    }\n    return a;\n}", "unique_id": "MBCPP_505_1", "index": 4410}
{"task_id": "MBCPP/506", "completion": "    int result = 1;\n    for (int i = 0; i < k; i++) {\n        result *= (n - i);\n    }\n    return result;\n}", "unique_id": "MBCPP_506_4", "index": 4423}
{"task_id": "MBCPP/507", "completion": "    unordered_set<string> toRemove(removewords.begin(), removewords.end());\n    vector<string> result;\n    for (const auto& word : list1) {\n        if (toRemove.find(word) == toRemove.end()) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_507_7", "index": 4436}
{"task_id": "MBCPP/508", "completion": "    vector<string> common1, common2;\n    for (const auto& s : l1) {\n        if (find(l2.begin(), l2.end(), s) != l2.end()) {\n            common1.push_back(s);\n        }\n    }\n    for (const auto& s : l2) {\n        if (find(l1.begin(), l1.end(), s) != l1.end()) {\n            common2.push_back(s);\n        }\n    }\n    return common1 == common2;\n}", "unique_id": "MBCPP_508_9", "index": 4448}
{"task_id": "MBCPP/509", "completion": "    int sum = 0, count = 0;\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "unique_id": "MBCPP_509_1", "index": 4450}
{"task_id": "MBCPP/510", "completion": "    int n = arr.size();\n    int count = 0;\n    for (int mask = 1; mask < (1 << n); ++mask) {\n        long long product = 1;\n        for (int i = 0; i < n; ++i) {\n            if (mask & (1 << i)) {\n                product *= arr[i];\n                if (product >= k) {\n                    break;\n                }\n            }\n        }\n        if (product < k) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_510_2", "index": 4461}
{"task_id": "MBCPP/511", "completion": "    if (num == 1)\n        return 1;\n    int minSum = num + 1;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            minSum = min(minSum, i + findMinSum(num / i));\n        }\n    }\n    return minSum;\n}", "unique_id": "MBCPP_511_4", "index": 4473}
{"task_id": "MBCPP/514", "completion": "    int sum = 0;\n    for (int num : testTup) {\n        sum += num;\n    }\n    return sum;\n}", "unique_id": "MBCPP_514_1", "index": 4480}
{"task_id": "MBCPP/515", "completion": "    if (n > m)\n        return true;\n\n    vector<bool> dp(m, false);\n    for (int i = 0; i < n; i++) {\n        if (dp[0])\n            return true;\n\n        vector<bool> temp(m, false);\n        for (int j = 0; j < m; j++) {\n            if (dp[j]) {\n                if (!dp[(j + arr[i]) % m])\n                    temp[(j + arr[i]) % m] = true;\n            }\n        }\n\n        for (int j = 0; j < m; j++) {\n            if (temp[j])\n                dp[j] = true;\n        }\n\n        dp[arr[i] % m] = true;\n    }\n\n    return dp[0];\n}", "unique_id": "MBCPP_515_4", "index": 4493}
{"task_id": "MBCPP/516", "completion": "    int maxNum = *max_element(nums.begin(), nums.end());\n    for (int exp = 1; maxNum / exp > 0; exp *= 10) {\n        vector<int> output(nums.size());\n        vector<int> count(10, 0);\n        for (int i = 0; i < nums.size(); i++)\n            count[(nums[i] / exp) % 10]++;\n        for (int i = 1; i < 10; i++)\n            count[i] += count[i - 1];\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\n            count[(nums[i] / exp) % 10]--;\n        }\n        nums = output;\n    }\n    return nums;\n}", "unique_id": "MBCPP_516_8", "index": 4507}
{"task_id": "MBCPP/517", "completion": "    int largest = -1;\n    for (int num : list1) {\n        if (num > largest && num > 0) {\n            largest = num;\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_517_8", "index": 4517}
{"task_id": "MBCPP/518", "completion": "    if (num < 0)\n        return -1; // Invalid input for perfect squares\n\n    int low = 0, high = num, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid * mid == num) {\n            return mid;\n        } else if (mid * mid < num) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result; // Return -1 if num is not a perfect square\n}", "unique_id": "MBCPP_518_1", "index": 4520}
{"task_id": "MBCPP/519", "completion": "    return (pow(num, 3) / (6 * sqrt(2)));\n}", "unique_id": "MBCPP_519_1", "index": 4530}
{"task_id": "MBCPP/520", "completion": "    int result = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        result = (result * l[i]) / __gcd(result, l[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_520_1", "index": 4540}
{"task_id": "MBCPP/521", "completion": "    if (x == y || y == z || x == z)\n        return false;\n    else\n        return true;\n}", "unique_id": "MBCPP_521_7", "index": 4556}
{"task_id": "MBCPP/522", "completion": "    int n = arr.size();\n    if (n == 0) return 0;\n    \n    vector<int> lis(n, 1);\n    vector<int> lds(n, 1);\n    \n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1)\n                lis[i] = lis[j] + 1;\n        }\n    }\n    \n    for (int i = n-2; i >= 0; i--) {\n        for (int j = n-1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + 1)\n                lds[i] = lds[j] + 1;\n        }\n    }\n    \n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        max_len = max(max_len, lis[i] + lds[i] - 1);\n    }\n    \n    return max_len;\n}", "unique_id": "MBCPP_522_10", "index": 4569}
{"task_id": "MBCPP/523", "completion": "    vector<string> result;\n    bool hasUpper = false, hasLower = false, hasNumber = false, hasLength = false;\n\n    auto checkChar = [&](char c) {\n        if (isupper(c)) hasUpper = true;\n        if (islower(c)) hasLower = true;\n        if (isdigit(c)) hasNumber = true;\n    };\n\n    for (char c : str1) {\n        checkChar(c);\n    }\n\n    if (str1.length() >= 8) hasLength = true;\n\n    if (!hasUpper) result.push_back(\"String must have 1 upper case character.\");\n    if (!hasLower) result.push_back(\"String must have 1 lower case character.\");\n    if (!hasNumber) result.push_back(\"String must have 1 number.\");\n    if (!hasLength) result.push_back(\"String length should be atleast 8.\");\n\n    if (result.empty()) result.push_back(\"Valid string.\");\n\n    return result;\n}", "unique_id": "MBCPP_523_1", "index": 4570}
{"task_id": "MBCPP/524", "completion": "    vector<int> dp(arr.begin(), arr.end());\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_524_10", "index": 4589}
{"task_id": "MBCPP/525", "completion": "    if (line1.size() == 2) {\n        // Lines in the form y = mx + c\n        return line1[0] == line2[0];\n    } else if (line1.size() == 3) {\n        // Lines in the form ax + by + c = 0\n        return (line1[0] * line2[1]) == (line1[1] * line2[0]);\n    }\n    return false;\n}", "unique_id": "MBCPP_525_6", "index": 4595}
{"task_id": "MBCPP/526", "completion": "    int length = str1.length();\n    for (int i = 0; i < length; i++) {\n        if (i == 0 || str1[i - 1] == ' ') {\n            str1[i] = toupper(str1[i]);\n        }\n        if (i == length - 1 || str1[i + 1] == ' ') {\n            str1[i] = toupper(str1[i]);\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_526_1", "index": 4600}
{"task_id": "MBCPP/527", "completion": "    unordered_map<int, int> freq;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.find(complement) != freq.end()) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    return count;\n}", "unique_id": "MBCPP_527_1", "index": 4610}
{"task_id": "MBCPP/529", "completion": "    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    int prev = 2, curr = 1;\n    for (int i = 2; i <= n; i++) {\n        int next = prev + 2 * curr;\n        prev = curr;\n        curr = next;\n    }\n    return curr;\n}", "unique_id": "MBCPP_529_6", "index": 4625}
{"task_id": "MBCPP/530", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "unique_id": "MBCPP_530_10", "index": 4639}
{"task_id": "MBCPP/531", "completion": "    vector<int> dp(v + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 1; i <= v; i++) {\n        for (int j = 0; j < m; j++) {\n            if (coins[j] <= i && dp[i - coins[j]] != INT_MAX) {\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1);\n            }\n        }\n    }\n\n    return dp[v] == INT_MAX ? -1 : dp[v];\n}", "unique_id": "MBCPP_531_7", "index": 4646}
{"task_id": "MBCPP/532", "completion": "    if (str1.length() != str2.length())\n        return false;\n        \n    sort(str1.begin(), str1.end());\n    sort(str2.begin(), str2.end());\n    \n    return str1 == str2;\n}", "unique_id": "MBCPP_532_7", "index": 4656}
{"task_id": "MBCPP/534", "completion": "    vector<int> result;\n    size_t found = text.find(pattern);\n    if (found != string::npos) {\n        result.push_back(found);\n        result.push_back(found + pattern.length());\n    }\n    return result;\n}", "unique_id": "MBCPP_534_8", "index": 4667}
{"task_id": "MBCPP/535", "completion": "    const double pi = 3.14159;\n    return pi * r * r;\n}", "unique_id": "MBCPP_535_6", "index": 4675}
{"task_id": "MBCPP/536", "completion": "    vector<int> result;\n    for (int i = 0; i < list.size(); i += n) {\n        result.push_back(list[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_536_3", "index": 4682}
{"task_id": "MBCPP/537", "completion": "    unordered_map<string, int> wordCount;\n    string word;\n    stringstream ss(str1);\n    while (ss >> word) {\n        if (wordCount[word]++) {\n            return word;\n        }\n    }\n    return \"None\";\n}", "unique_id": "MBCPP_537_2", "index": 4691}
{"task_id": "MBCPP/538", "completion": "    vector<string> result;\n    for (char ch : str1) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "unique_id": "MBCPP_538_1", "index": 4700}
{"task_id": "MBCPP/540", "completion": "    unordered_map<int, int> freqMap;\n    for(int i = 0; i < n; i++) {\n        freqMap[arr[i]]++;\n    }\n    \n    int maxFreq = INT_MIN, minFreq = INT_MAX;\n    for(auto it : freqMap) {\n        if(it.second > maxFreq) {\n            maxFreq = it.second;\n        }\n        if(it.second < minFreq) {\n            minFreq = it.second;\n        }\n    }\n    \n    return maxFreq - minFreq;\n}", "unique_id": "MBCPP_540_2", "index": 4711}
{"task_id": "MBCPP/541", "completion": "    if (n < 1)\n        return false;\n    \n    int sum = 0;\n    for (int i = 1; i <= n / 2; ++i) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    \n    return sum > n;\n}", "unique_id": "MBCPP_541_7", "index": 4726}
{"task_id": "MBCPP/542", "completion": "    regex pattern(\"[ ,.]\");\n    return regex_replace(text, pattern, \":\");\n}", "unique_id": "MBCPP_542_4", "index": 4733}
{"task_id": "MBCPP/543", "completion": "    int sum = num1 + num2;\n    if (sum == 0)\n        return 1;\n    int count = 0;\n    while (sum != 0) {\n        sum = sum / 10;\n        count++;\n    }\n    return count;\n}", "unique_id": "MBCPP_543_6", "index": 4745}
{"task_id": "MBCPP/544", "completion": "    string result;\n    for (const auto& vec : testList) {\n        for (const auto& str : vec) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += str;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_544_5", "index": 4754}
{"task_id": "MBCPP/545", "completion": "    int firstBit = 1;\n    int lastBit = n & 1;\n    if (lastBit == 0) {\n        lastBit = 1;\n    } else {\n        lastBit = -1;\n    }\n    n ^= firstBit;\n    n += lastBit;\n    return n;\n}", "unique_id": "MBCPP_545_1", "index": 4760}
{"task_id": "MBCPP/547", "completion": "    int total = 0;\n    for (int i = 0; i < n; ++i) {\n        int xor_result = i ^ (i + 1);\n        while (xor_result > 0) {\n            total += xor_result & 1;\n            xor_result >>= 1;\n        }\n    }\n    return total;\n}", "unique_id": "MBCPP_547_4", "index": 4773}
{"task_id": "MBCPP/548", "completion": "    if (arr.empty()) return 0;\n    vector<int> dp(arr.size(), 1);\n    int maxLen = 1;\n    for (int i = 1; i < arr.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n                maxLen = max(maxLen, dp[i]);\n            }\n        }\n    }\n    return maxLen;\n}", "unique_id": "MBCPP_548_7", "index": 4786}
{"task_id": "MBCPP/549", "completion": "    int sum = 0;\n    int count = 0;\n    int num = 1;\n    while(count < n) {\n        sum += pow(num, 5);\n        num += 2;\n        count++;\n    }\n    return sum;\n}", "unique_id": "MBCPP_549_6", "index": 4795}
{"task_id": "MBCPP/550", "completion": "    if (low == high)\n        return arr[low];\n    int mid = (low + high) / 2;\n    if (mid < high && arr[mid] > arr[mid + 1])\n        return arr[mid];\n    if (mid > low && arr[mid] < arr[mid - 1])\n        return arr[mid - 1];\n    if (arr[low] > arr[mid])\n        return findMax(arr, low, mid - 1);\n    else\n        return findMax(arr, mid + 1, high);\n}", "unique_id": "MBCPP_550_7", "index": 4806}
{"task_id": "MBCPP/551", "completion": "    vector<int> result;\n    for (const auto& row : list1) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_551_1", "index": 4810}
{"task_id": "MBCPP/552", "completion": "    if (seqNums.size() <= 2)\n        return \"Linear Sequence\";\n    \n    int diff = seqNums[1] - seqNums[0];\n    for (int i = 1; i < seqNums.size(); i++) {\n        if (seqNums[i] - seqNums[i-1] != diff)\n            return \"Non Linear Sequence\";\n    }\n    return \"Linear Sequence\";\n}", "unique_id": "MBCPP_552_4", "index": 4823}
{"task_id": "MBCPP/553", "completion": "    int whole = testTup[0];\n    int decimal = testTup[1];\n    int length = to_string(decimal).length();\n    double result = whole + (decimal / pow(10, length));\n    return result;\n}", "unique_id": "MBCPP_553_1", "index": 4830}
{"task_id": "MBCPP/554", "completion": "    vector<int> odds;\n    for (int num : list) {\n        if (num % 2 != 0) {\n            odds.push_back(num);\n        }\n    }\n    return odds;\n}", "unique_id": "MBCPP_554_3", "index": 4842}
{"task_id": "MBCPP/555", "completion": "    int sum = n * (n + 1) / 2;\n    int sumOfCubes = (n * (n + 1) / 2) * (n * (n + 1) / 2);\n    return sumOfCubes - sum;\n}", "unique_id": "MBCPP_555_6", "index": 4855}
{"task_id": "MBCPP/556", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_556_2", "index": 4861}
{"task_id": "MBCPP/557", "completion": "    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}", "unique_id": "MBCPP_557_10", "index": 4879}
{"task_id": "MBCPP/558", "completion": "    int distance = 0;\n    while (n1 > 0 || n2 > 0) {\n        int digit1 = n1 % 10;\n        int digit2 = n2 % 10;\n        distance += abs(digit1 - digit2);\n        n1 /= 10;\n        n2 /= 10;\n    }\n    return distance;\n}", "unique_id": "MBCPP_558_6", "index": 4885}
{"task_id": "MBCPP/559", "completion": "    int max_so_far = INT_MIN, max_ending_here = 0;\n\n    for (int i = 0; i < size; i++) {\n        max_ending_here += a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}", "unique_id": "MBCPP_559_10", "index": 4899}
{"task_id": "MBCPP/560", "completion": "    set<int> s(testTup1.begin(), testTup1.end());\n    s.insert(testTup2.begin(), testTup2.end());\n    vector<int> result(s.begin(), s.end());\n    return result;\n}", "unique_id": "MBCPP_560_6", "index": 4905}
{"task_id": "MBCPP/562", "completion": "    int maxLen = 0;\n    for (const auto& sublist : lst) {\n        if (sublist.size() > maxLen) {\n            maxLen = sublist.size();\n        }\n    }\n    return maxLen;\n}", "unique_id": "MBCPP_562_3", "index": 4912}
{"task_id": "MBCPP/563", "completion": "    vector<string> result;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == '\\\"') {\n            i++;\n            string temp;\n            while (i < text.length() && text[i] != '\\\"') {\n                temp += text[i];\n                i++;\n            }\n            result.push_back(temp);\n        }\n        i++;\n    }\n    return result;\n}", "unique_id": "MBCPP_563_3", "index": 4922}
{"task_id": "MBCPP/564", "completion": "    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] != arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_564_9", "index": 4938}
{"task_id": "MBCPP/565", "completion": "    vector<string> result;\n    for (char c : word) {\n        result.push_back(string(1, c));\n    }\n    return result;\n}", "unique_id": "MBCPP_565_4", "index": 4943}
{"task_id": "MBCPP/566", "completion": "    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "unique_id": "MBCPP_566_4", "index": 4953}
{"task_id": "MBCPP/567", "completion": "    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i] < list1[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_567_8", "index": 4967}
{"task_id": "MBCPP/569", "completion": "    for (auto& sublist : list1) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return list1;\n}", "unique_id": "MBCPP_569_3", "index": 4972}
{"task_id": "MBCPP/570", "completion": "    for (auto& str : list1) {\n        for (const auto& ch : charlist) {\n            size_t pos = str.find(ch);\n            while (pos != string::npos) {\n                str.erase(pos, ch.length());\n                pos = str.find(ch, pos);\n            }\n        }\n    }\n    return list1;\n}", "unique_id": "MBCPP_570_9", "index": 4988}
{"task_id": "MBCPP/571", "completion": "    sort(arr.begin(), arr.end(), greater<int>());\n    int sum = 0;\n    bool used[n] = {false};\n    \n    for (int i = 0; i < n - 1; i++) {\n        if (used[i]) continue;\n        for (int j = i + 1; j < n; j++) {\n            if (!used[j] && (arr[i] - arr[j]) < k) {\n                sum += arr[i] + arr[j];\n                used[i] = true;\n                used[j] = true;\n                break;\n            }\n        }\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_571_6", "index": 4995}
{"task_id": "MBCPP/572", "completion": "    unordered_map<int, int> freq;\n    for (int num : nums) {\n        freq[num]++;\n    }\n    vector<int> result;\n    for (int num : nums) {\n        if (freq[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_572_5", "index": 5004}
{"task_id": "MBCPP/573", "completion": "    unordered_set<int> uniqueNumbers;\n    long long product = 1;\n    for (int num : listData) {\n        if (uniqueNumbers.find(num) == uniqueNumbers.end()) {\n            uniqueNumbers.insert(num);\n            product *= num;\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_573_5", "index": 5014}
{"task_id": "MBCPP/574", "completion": "    double pi = 3.14159;\n    double surfaceArea = 2 * pi * r * h + 2 * pi * r * r;\n    return surfaceArea;\n}", "unique_id": "MBCPP_574_3", "index": 5022}
{"task_id": "MBCPP/575", "completion": "    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % a != 0) {\n            count++;\n            if (count == n) {\n                return i;\n            }\n        }\n    }\n    return -1; // If nth number not found in the range\n}", "unique_id": "MBCPP_575_10", "index": 5039}
{"task_id": "MBCPP/576", "completion": "    if (m == 0) return true;\n    if (n == 0) return false;\n\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (a[i + j] != b[j])\n                break;\n        }\n        if (j == m)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_576_1", "index": 5040}
{"task_id": "MBCPP/577", "completion": "    if (n >= 5)\n        return 0;\n    int result = 1;\n    for (int i = 1; i <= n; i++)\n        result = (result * i) % 10;\n    return result;\n}", "unique_id": "MBCPP_577_3", "index": 5052}
{"task_id": "MBCPP/578", "completion": "    vector<int> result;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        result.push_back(list1[i]);\n        result.push_back(list2[i]);\n        result.push_back(list3[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_578_4", "index": 5063}
{"task_id": "MBCPP/579", "completion": "    unordered_set<int> set1(testTup1.begin(), testTup1.end());\n    unordered_set<int> set2(testTup2.begin(), testTup2.end());\n    vector<int> result;\n\n    for (int num : set1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n\n    for (int num : set2) {\n        if (set1.find(num) == set1.end()) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_579_2", "index": 5071}
{"task_id": "MBCPP/581", "completion": "    int baseArea = b * b;\n    int lateralArea = 2 * b * s;\n    return baseArea + lateralArea;\n}", "unique_id": "MBCPP_581_7", "index": 5086}
{"task_id": "MBCPP/582", "completion": "    return dict1.empty();\n}", "unique_id": "MBCPP_582_3", "index": 5092}
{"task_id": "MBCPP/583", "completion": "    if (num <= 1)\n        return 1;\n\n    int catalan[num + 1];\n    catalan[0] = catalan[1] = 1;\n\n    for (int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (int j = 0; j < i; j++)\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n    }\n\n    return catalan[num];\n}", "unique_id": "MBCPP_583_2", "index": 5101}
{"task_id": "MBCPP/584", "completion": "    regex adverbPattern(\"\\\\b\\\\w+ly\\\\b\");\n    smatch match;\n    if (regex_search(text, match, adverbPattern)) {\n        int start = match.position();\n        int end = start + match.length() - 1;\n        return to_string(start) + \"-\" + to_string(end) + \": \" + match.str();\n    }\n    return \"\";\n}", "unique_id": "MBCPP_584_1", "index": 5110}
{"task_id": "MBCPP/586", "completion": "    vector<int> result;\n    for (int i = k; i < n; i++) {\n        result.push_back(a[i]);\n    }\n    for (int i = 0; i < k; i++) {\n        result.push_back(a[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_586_5", "index": 5124}
{"task_id": "MBCPP/587", "completion": "    return listx;\n}", "unique_id": "MBCPP_587_2", "index": 5131}
{"task_id": "MBCPP/588", "completion": "    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return max_val - min_val;\n}", "unique_id": "MBCPP_588_4", "index": 5143}
{"task_id": "MBCPP/589", "completion": "    vector<int> result;\n    int start = sqrt(a);\n    if (start * start < a) {\n        start++;\n    }\n    int end = sqrt(b);\n    for (int i = start; i <= end; i++) {\n        result.push_back(i * i);\n    }\n    return result;\n}", "unique_id": "MBCPP_589_9", "index": 5158}
{"task_id": "MBCPP/591", "completion": "    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "unique_id": "MBCPP_591_3", "index": 5162}
{"task_id": "MBCPP/592", "completion": "    int dp[n+1][n+1];\n    for(int i=0; i<=n; i++) {\n        for(int j=0; j<=min(i, n); j++) {\n            if(j == 0 || j == i)\n                dp[i][j] = 1;\n            else\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n        }\n    }\n    \n    int sum = 0;\n    for(int i=0; i<=n; i++) {\n        sum += dp[n][i] * dp[n][n-i];\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_592_3", "index": 5172}
{"task_id": "MBCPP/593", "completion": "    string result;\n    stringstream ss(ip);\n    string token;\n    while (getline(ss, token, '.')) {\n        if (!token.empty()) {\n            token.erase(0, token.find_first_not_of('0'));\n            if (token.empty()) token = \"0\";\n            result += token + \".\";\n        }\n    }\n    if (!result.empty()) result.pop_back();\n    return result;\n}", "unique_id": "MBCPP_593_4", "index": 5183}
{"task_id": "MBCPP/594", "completion": "    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    return even - odd;\n}", "unique_id": "MBCPP_594_5", "index": 5194}
{"task_id": "MBCPP/597", "completion": "    int i = 0, j = 0;\n    while (i < m && j < n) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1)\n                return arr1[i];\n            i++;\n        } else {\n            if (i + j == k - 1)\n                return arr2[j];\n            j++;\n        }\n    }\n    while (i < m) {\n        if (i + j == k - 1)\n            return arr1[i];\n        i++;\n    }\n    while (j < n) {\n        if (i + j == k - 1)\n            return arr2[j];\n        j++;\n    }\n    return -1;\n}", "unique_id": "MBCPP_597_7", "index": 5206}
{"task_id": "MBCPP/598", "completion": "    int originalNumber = number;\n    int sum = 0;\n    int digits = 0;\n    \n    while (originalNumber != 0) {\n        originalNumber /= 10;\n        digits++;\n    }\n    \n    originalNumber = number;\n    \n    while (originalNumber != 0) {\n        int digit = originalNumber % 10;\n        sum += pow(digit, digits);\n        originalNumber /= 10;\n    }\n    \n    return sum == number;\n}", "unique_id": "MBCPP_598_4", "index": 5213}
{"task_id": "MBCPP/600", "completion": "    return (n & 1) == 0;\n}", "unique_id": "MBCPP_600_6", "index": 5225}
{"task_id": "MBCPP/602", "completion": "    unordered_set<char> seen;\n    for (char ch : str1) {\n        if (seen.find(ch) != seen.end()) {\n            return string(1, ch);\n        }\n        seen.insert(ch);\n    }\n    return \"None\";\n}", "unique_id": "MBCPP_602_10", "index": 5239}
{"task_id": "MBCPP/603", "completion": "    vector<int> ludic;\n    if (n < 1) return ludic;\n    \n    ludic.push_back(1);\n    for (int i = 2; i <= n; i++) {\n        ludic.push_back(i);\n    }\n    \n    int index = 1;\n    while (index < ludic.size()) {\n        int step = ludic[index];\n        int i = index + step;\n        while (i < ludic.size()) {\n            ludic.erase(ludic.begin() + i);\n            i += step - 1;\n        }\n        index++;\n    }\n    \n    return ludic;\n}", "unique_id": "MBCPP_603_2", "index": 5241}
{"task_id": "MBCPP/604", "completion": "    string result;\n    string word;\n    for (int i = s.length() - 1; i >= 0; i--) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word = s[i] + word;\n        }\n    }\n    result = word + \" \" + result;\n    if (!result.empty() && result.back() == ' ') {\n        result.pop_back();\n    }\n    return result;\n}", "unique_id": "MBCPP_604_2", "index": 5251}
{"task_id": "MBCPP/605", "completion": "    if (num <= 1)\n        return false;\n    if (num == 2 || num == 3)\n        return true;\n    if (num % 2 == 0 || num % 3 == 0)\n        return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_605_8", "index": 5267}
{"task_id": "MBCPP/606", "completion": "    return degree * M_PI / 180.0;\n}", "unique_id": "MBCPP_606_4", "index": 5273}
{"task_id": "MBCPP/608", "completion": "    int bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        bell[i][0] = bell[i-1][i-1];\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];\n}", "unique_id": "MBCPP_608_3", "index": 5282}
{"task_id": "MBCPP/609", "completion": "    int min_val = INT_MAX;\n    for (int i = 0; i <= n; i++) {\n        int current = a * i + b * (n - i);\n        if (current < min_val) {\n            min_val = current;\n        }\n    }\n    return min_val;\n}", "unique_id": "MBCPP_609_2", "index": 5291}
{"task_id": "MBCPP/610", "completion": "    if (l < 1 || l > list1.size()) {\n        return list1;\n    }\n    list1.erase(list1.begin() + l - 1);\n    return list1;\n}", "unique_id": "MBCPP_610_5", "index": 5304}
{"task_id": "MBCPP/611", "completion": "    int maxVal = INT_MIN;\n    for (const auto& row : testList) {\n        if (n < row.size() && row[n] > maxVal) {\n            maxVal = row[n];\n        }\n    }\n    return maxVal;\n}", "unique_id": "MBCPP_611_3", "index": 5312}
{"task_id": "MBCPP/614", "completion": "    int sum = 0;\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            sum += num;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_614_9", "index": 5328}
{"task_id": "MBCPP/615", "completion": "    vector<double> result;\n    if (nums.empty()) return result;\n\n    int n = nums.size();\n    int m = nums[0].size();\n    result.resize(m);\n\n    for (int j = 0; j < m; ++j) {\n        double sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += nums[i][j];\n        }\n        result[j] = sum / n;\n    }\n\n    return result;\n}", "unique_id": "MBCPP_615_1", "index": 5330}
{"task_id": "MBCPP/616", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] % testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_616_5", "index": 5344}
{"task_id": "MBCPP/618", "completion": "    vector<double> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result),\n              [](int a, int b) { return static_cast<double>(a) / b; });\n    return result;\n}", "unique_id": "MBCPP_618_2", "index": 5351}
{"task_id": "MBCPP/619", "completion": "    string nums = \"\";\n    string result = \"\";\n    for (char c : testStr) {\n        if (isdigit(c)) {\n            nums += c;\n        } else {\n            result += c;\n        }\n    }\n    return result + nums;\n}", "unique_id": "MBCPP_619_8", "index": 5367}
{"task_id": "MBCPP/620", "completion": "    sort(a.begin(), a.end());\n    vector<int> dp(n, 1);\n    int max_size = 1;\n    \n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (a[i] % a[j] == 0) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        max_size = max(max_size, dp[i]);\n    }\n    \n    return max_size;\n}", "unique_id": "MBCPP_620_5", "index": 5374}
{"task_id": "MBCPP/621", "completion": "    for (auto& s : testList) {\n        bool isNumeric = true;\n        for (char c : s) {\n            if (!isdigit(c)) {\n                isNumeric = false;\n                break;\n            }\n        }\n        if (isNumeric) {\n            int num = stoi(s);\n            num += k;\n            s = to_string(num);\n        }\n    }\n    return testList;\n}", "unique_id": "MBCPP_621_7", "index": 5386}
{"task_id": "MBCPP/622", "completion": "    int i = 0, j = 0, count;\n    int m1 = -1, m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] <= arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n\n    return (m1 + m2) / 2.0;\n}", "unique_id": "MBCPP_622_3", "index": 5392}
{"task_id": "MBCPP/623", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [n](int x) {\n        return pow(x, n);\n    });\n    return nums;\n}", "unique_id": "MBCPP_623_7", "index": 5406}
{"task_id": "MBCPP/624", "completion": "    for (char &c : str) {\n        c = toupper(c);\n    }\n    return str;\n}", "unique_id": "MBCPP_624_8", "index": 5417}
{"task_id": "MBCPP/625", "completion": "    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "unique_id": "MBCPP_625_5", "index": 5424}
{"task_id": "MBCPP/626", "completion": "    if (r < 0)\n        return -1;\n    if (r == 0)\n        return 0;\n    return r * r;\n}", "unique_id": "MBCPP_626_7", "index": 5436}
{"task_id": "MBCPP/627", "completion": "    if (start > end)\n        return end + 1;\n\n    if (start != array[start])\n        return start;\n\n    int mid = (start + end) / 2;\n\n    if (array[mid] == mid)\n        return findFirstMissing(array, mid + 1, end);\n\n    return findFirstMissing(array, start, mid);\n}", "unique_id": "MBCPP_627_4", "index": 5443}
{"task_id": "MBCPP/628", "completion": "    string result;\n    for (char ch : str) {\n        if (ch == ' ') {\n            result += \"%20\";\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_628_5", "index": 5454}
{"task_id": "MBCPP/629", "completion": "    vector<int> result;\n    for (int num : list) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_629_7", "index": 5466}
{"task_id": "MBCPP/630", "completion": "    vector<vector<int>> result;\n    int x = testTup[0];\n    int y = testTup[1];\n    \n    for(int i = x - 1; i <= x + 1; i++) {\n        for(int j = y - 1; j <= y + 1; j++) {\n            result.push_back({i, j});\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_630_8", "index": 5477}
{"task_id": "MBCPP/631", "completion": "    regex spaceRegex(\"\\\\s\");\n    regex underscoreRegex(\"_\");\n    string result = regex_replace(text, spaceRegex, \"_\");\n    result = regex_replace(result, underscoreRegex, \" \");\n    return result;\n}", "unique_id": "MBCPP_631_1", "index": 5480}
{"task_id": "MBCPP/632", "completion": "    int count = 0;\n    for (int i = 0; i < numList.size(); i++) {\n        if (numList[i] != 0) {\n            numList[count++] = numList[i];\n        }\n    }\n    while (count < numList.size()) {\n        numList[count++] = 0;\n    }\n    return numList;\n}", "unique_id": "MBCPP_632_5", "index": 5494}
{"task_id": "MBCPP/633", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sum += arr[i] ^ arr[j];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_633_3", "index": 5502}
{"task_id": "MBCPP/634", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += pow(evenNum, 4);\n    }\n    return sum;\n}", "unique_id": "MBCPP_634_9", "index": 5518}
{"task_id": "MBCPP/635", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num : iterable) {\n        minHeap.push(num);\n    }\n    vector<int> sorted;\n    while (!minHeap.empty()) {\n        sorted.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sorted;\n}", "unique_id": "MBCPP_635_9", "index": 5528}
{"task_id": "MBCPP/636", "completion": "    if (a == 0)\n        return \"No\";\n    if (c == 0)\n        return \"No\";\n    if (a == c && b == 0)\n        return \"Yes\";\n    if (a * c == 1 && b == 0)\n        return \"Yes\";\n    return \"No\";\n}", "unique_id": "MBCPP_636_6", "index": 5535}
{"task_id": "MBCPP/637", "completion": "    return actualCost == saleAmount;\n}", "unique_id": "MBCPP_637_3", "index": 5542}
{"task_id": "MBCPP/638", "completion": "    if (v < 4 || t > 50)\n        return t;\n    int wci = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16);\n    return round(wci);\n}", "unique_id": "MBCPP_638_6", "index": 5555}
{"task_id": "MBCPP/639", "completion": "    int sum = 0;\n    for (const auto& name : sampleNames) {\n        if (!name.empty() && isupper(name[0])) {\n            sum += name.length();\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_639_7", "index": 5566}
{"task_id": "MBCPP/640", "completion": "    string result = items[0];\n    size_t pos = result.find('(');\n    if (pos != string::npos) {\n        result = result.substr(0, pos);\n    }\n    return result;\n}", "unique_id": "MBCPP_640_5", "index": 5574}
{"task_id": "MBCPP/641", "completion": "    return n * (7 * n - 5) / 2;\n}", "unique_id": "MBCPP_641_7", "index": 5586}
{"task_id": "MBCPP/643", "completion": "    regex pattern(\"\\\\b[^z\\\\W]*z[^z\\\\W]*\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_643_7", "index": 5596}
{"task_id": "MBCPP/644", "completion": "    if (k > input.size()) {\n        k = input.size();\n    }\n    reverse(input.begin(), input.begin() + k);\n    return input;\n}", "unique_id": "MBCPP_644_2", "index": 5601}
{"task_id": "MBCPP/645", "completion": "    int product = 1;\n    for (const auto& vec : testList) {\n        if (k < vec.size()) {\n            product *= vec[k];\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_645_8", "index": 5617}
{"task_id": "MBCPP/646", "completion": "    if (k > n)\n        return 0;\n    int diff = n - k + 1;\n    return diff * diff * diff;\n}", "unique_id": "MBCPP_646_9", "index": 5628}
{"task_id": "MBCPP/647", "completion": "    vector<string> result;\n    string current;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!current.empty()) {\n                result.push_back(current);\n                current.clear();\n            }\n        }\n        current += ch;\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "unique_id": "MBCPP_647_9", "index": 5638}
{"task_id": "MBCPP/648", "completion": "    for (size_t i = 0; i + 1 < lst.size(); i += 2) {\n        swap(lst[i], lst[i + 1]);\n    }\n    return lst;\n}", "unique_id": "MBCPP_648_5", "index": 5644}
{"task_id": "MBCPP/649", "completion": "    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_649_6", "index": 5655}
{"task_id": "MBCPP/650", "completion": "    if (n != m)\n        return false;\n    sort(arr1.begin(), arr1.end());\n    sort(arr2.begin(), arr2.end());\n    for (int i = 0; i < n; i++) {\n        if (arr1[i] != arr2[i])\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_650_4", "index": 5663}
{"task_id": "MBCPP/651", "completion": "    unordered_set<int> s(testTup1.begin(), testTup1.end());\n    for (int num : testTup2) {\n        if (s.find(num) == s.end()) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_651_2", "index": 5671}
{"task_id": "MBCPP/652", "completion": "    string result = \"[\";\n    for (size_t col = 0; col < testList[0][0].size(); ++col) {\n        if (col != 0) {\n            result += \", \";\n        }\n        result += \"(\";\n        for (size_t i = 0; i < testList.size(); ++i) {\n            for (size_t j = 0; j < testList[i].size(); ++j) {\n                if (i != 0 || j != 0) {\n                    result += \", \";\n                }\n                result += to_string(testList[i][j][col]);\n            }\n        }\n        result += \")\";\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_652_3", "index": 5682}
{"task_id": "MBCPP/654", "completion": "    return 2 * (l + b);\n}", "unique_id": "MBCPP_654_7", "index": 5696}
{"task_id": "MBCPP/655", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_655_3", "index": 5702}
{"task_id": "MBCPP/656", "completion": "    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += abs(a[i] - b[i]);\n    }\n    return sum;\n}", "unique_id": "MBCPP_656_3", "index": 5712}
{"task_id": "MBCPP/657", "completion": "    if (n == 0 || n == 1)\n        return 1;\n    \n    double logSum = 0.0;\n    for (int i = 2; i <= n; i++) {\n        logSum += log10(i);\n    }\n    \n    double fractionalPart = logSum - floor(logSum);\n    double firstDigit = pow(10, fractionalPart);\n    \n    return (int)firstDigit;\n}", "unique_id": "MBCPP_657_7", "index": 5726}
{"task_id": "MBCPP/658", "completion": "    unordered_map<int, int> freqMap;\n    for (int num : list1) {\n        freqMap[num]++;\n    }\n    \n    int maxCount = 0;\n    int result = 0;\n    for (auto& pair : freqMap) {\n        if (pair.second > maxCount || (pair.second == maxCount && pair.first < result)) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_658_6", "index": 5735}
{"task_id": "MBCPP/659", "completion": "    unordered_map<int, int> freq;\n    vector<int> result;\n    \n    for (int num : x) {\n        freq[num]++;\n    }\n    \n    for (int num : x) {\n        if (freq[num] > 1) {\n            result.push_back(num);\n            freq[num] = 0; // To avoid adding duplicates in the result\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_659_1", "index": 5740}
{"task_id": "MBCPP/660", "completion": "    vector<int> result;\n    if (r1 < l2 || r2 < l1) {\n        // Ranges are completely separate\n        result.push_back(l1);\n        result.push_back(r2);\n    } else {\n        // Ranges overlap\n        result.push_back(min(l1, l2));\n        result.push_back(max(r1, r2));\n    }\n    return result;\n}", "unique_id": "MBCPP_660_1", "index": 5750}
{"task_id": "MBCPP/661", "completion": "    if (n == 0) return 0;\n    if (n == 1) return arr[0];\n    if (n == 2) return arr[0] + arr[1];\n\n    int dp[n];\n    dp[0] = arr[0];\n    dp[1] = arr[0] + arr[1];\n    dp[2] = max({dp[1], arr[1] + arr[2], arr[0] + arr[2]});\n\n    for (int i = 3; i < n; i++) {\n        dp[i] = max({dp[i - 1], dp[i - 2] + arr[i], dp[i - 3] + arr[i - 1] + arr[i]});\n    }\n\n    return dp[n - 1];\n}", "unique_id": "MBCPP_661_9", "index": 5768}
{"task_id": "MBCPP/662", "completion": "    for (auto& pair : dict1) {\n        sort(pair.second.begin(), pair.second.end());\n    }\n    return dict1;\n}", "unique_id": "MBCPP_662_8", "index": 5777}
{"task_id": "MBCPP/663", "completion": "    int remainder = n % x;\n    if (remainder >= y)\n        return n - (remainder - y);\n    else\n        return n - x + (y - remainder);\n}", "unique_id": "MBCPP_663_8", "index": 5787}
{"task_id": "MBCPP/664", "completion": "    int sum = 0, count = 0;\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "unique_id": "MBCPP_664_10", "index": 5799}
{"task_id": "MBCPP/665", "completion": "    if (numList.empty()) return numList;\n    int first = numList[0];\n    numList.erase(numList.begin());\n    numList.push_back(first);\n    return numList;\n}", "unique_id": "MBCPP_665_1", "index": 5800}
{"task_id": "MBCPP/666", "completion": "    int count = 0;\n    for (char c : str) {\n        if (c == chr[0]) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_666_10", "index": 5819}
{"task_id": "MBCPP/667", "completion": "    int count = 0;\n    for (char ch : str) {\n        if (vowels.find(ch) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_667_7", "index": 5826}
{"task_id": "MBCPP/668", "completion": "    string result;\n    for (size_t i = 0; i < str.size(); ++i) {\n        if (i == 0 || str[i] != str[i-1] || str[i] != chr[0]) {\n            result += str[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_668_10", "index": 5839}
{"task_id": "MBCPP/669", "completion": "    regex pattern(\"^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$\");\n    if (regex_match(ip, pattern)) {\n        return \"Valid IP address\";\n    } else {\n        return \"Invalid IP address\";\n    }\n}", "unique_id": "MBCPP_669_3", "index": 5842}
{"task_id": "MBCPP/670", "completion": "    if (nums.size() < 2) return true;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] >= nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_670_3", "index": 5852}
{"task_id": "MBCPP/671", "completion": "    if ((n & (n + 1)) == 0)\n        return n;\n    return n | (n + 1);\n}", "unique_id": "MBCPP_671_4", "index": 5863}
{"task_id": "MBCPP/672", "completion": "    int max_num = num1;\n    if (num2 > max_num)\n        max_num = num2;\n    if (num3 > max_num)\n        max_num = num3;\n    return max_num;\n}", "unique_id": "MBCPP_672_10", "index": 5879}
{"task_id": "MBCPP/673", "completion": "    int result = 0;\n    for (int num : list) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "unique_id": "MBCPP_673_9", "index": 5888}
{"task_id": "MBCPP/674", "completion": "    stringstream ss(str);\n    string word;\n    unordered_set<string> seen;\n    string result = \"\";\n    \n    while (ss >> word) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_674_4", "index": 5893}
{"task_id": "MBCPP/675", "completion": "    int sum = x + y;\n    if (sum >= m && sum <= n)\n        return 20;\n    else\n        return sum;\n}", "unique_id": "MBCPP_675_9", "index": 5908}
{"task_id": "MBCPP/676", "completion": "    regex pattern(\"[^a-zA-Z0-9]\");\n    return regex_replace(text1, pattern, \"\");\n}", "unique_id": "MBCPP_676_2", "index": 5911}
{"task_id": "MBCPP/677", "completion": "    if (a <= 0 || b <= 0 || c <= 0)\n        return false;\n    if (a + b + c != 180)\n        return false;\n    return true;\n}", "unique_id": "MBCPP_677_9", "index": 5928}
{"task_id": "MBCPP/678", "completion": "    str1.erase(remove(str1.begin(), str1.end(), ' '), str1.end());\n    return str1;\n}", "unique_id": "MBCPP_678_4", "index": 5933}
{"task_id": "MBCPP/679", "completion": "    auto it = ditionary.begin();\n    advance(it, key);\n    return it->first;\n}", "unique_id": "MBCPP_679_5", "index": 5944}
{"task_id": "MBCPP/680", "completion": "    if (nums.empty()) return false;\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] <= nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_680_8", "index": 5957}
{"task_id": "MBCPP/681", "completion": "    if (n % 2 == 0)\n        return 2;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n            return i;\n    }\n    return n;\n}", "unique_id": "MBCPP_681_7", "index": 5966}
{"task_id": "MBCPP/682", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a * b; });\n    return result;\n}", "unique_id": "MBCPP_682_3", "index": 5972}
{"task_id": "MBCPP/683", "completion": "    for (int i = 0; i * i <= n; ++i) {\n        for (int j = 0; j * j <= n; ++j) {\n            if (i * i + j * j == n) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_683_10", "index": 5989}
{"task_id": "MBCPP/684", "completion": "    char target = x[0];\n    int count = 0;\n    for (char ch : str) {\n        if (ch == target) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_684_5", "index": 5994}
{"task_id": "MBCPP/685", "completion": "    if (n < 2)\n        return 0;\n\n    vector<bool> isPrime(n + 1, true);\n    isPrime[0] = isPrime[1] = false;\n\n    for (int p = 2; p * p <= n; p++) {\n        if (isPrime[p]) {\n            for (int i = p * p; i <= n; i += p)\n                isPrime[i] = false;\n        }\n    }\n\n    int sum = 0;\n    for (int i = 2; i <= n; i++) {\n        if (isPrime[i])\n            sum += i;\n    }\n\n    return sum;\n}", "unique_id": "MBCPP_685_3", "index": 6002}
{"task_id": "MBCPP/686", "completion": "    map<int, int> freqMap;\n    for (int num : testTup) {\n        freqMap[num]++;\n    }\n    string result = \"{\";\n    for (auto it = freqMap.begin(); it != freqMap.end(); ++it) {\n        if (it != freqMap.begin()) {\n            result += \", \";\n        }\n        result += to_string(it->first) + \": \" + to_string(it->second);\n    }\n    result += \"}\";\n    return result;\n}", "unique_id": "MBCPP_686_2", "index": 6011}
{"task_id": "MBCPP/687", "completion": "    if (b == 0)\n        return a;\n    else\n        return recurGcd(b, a % b);\n}", "unique_id": "MBCPP_687_9", "index": 6028}
{"task_id": "MBCPP/688", "completion": "    return sqrt(a * a + b * b);\n}", "unique_id": "MBCPP_688_6", "index": 6035}
{"task_id": "MBCPP/689", "completion": "    if (n <= 1)\n        return 0;\n    if (arr[0] == 0)\n        return -1;\n    int maxReach = arr[0];\n    int step = arr[0];\n    int jump = 1;\n    for (int i = 1; i < n; i++) {\n        if (i == n - 1)\n            return jump;\n        maxReach = max(maxReach, i + arr[i]);\n        step--;\n        if (step == 0) {\n            jump++;\n            if (i >= maxReach)\n                return -1;\n            step = maxReach - i;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_689_8", "index": 6047}
{"task_id": "MBCPP/690", "completion": "    vector<int> result;\n    if (nums.empty())\n        return result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] * nums[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_690_6", "index": 6055}
{"task_id": "MBCPP/691", "completion": "    unordered_map<int, vector<int>> result;\n    for (const auto& pair : testList) {\n        result[pair[1]].push_back(pair[0]);\n    }\n    return result;\n}", "unique_id": "MBCPP_691_5", "index": 6064}
{"task_id": "MBCPP/692", "completion": "    if (n == 0 || n == 1)\n        return 1;\n    \n    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        result %= 100; // Keep only the last two digits\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_692_8", "index": 6077}
{"task_id": "MBCPP/693", "completion": "    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \" \");\n}", "unique_id": "MBCPP_693_4", "index": 6083}
{"task_id": "MBCPP/694", "completion": "    set<int> uniqueSet;\n    for (const auto& pair : testDict) {\n        for (int num : pair.second) {\n            uniqueSet.insert(num);\n        }\n    }\n    return vector<int>(uniqueSet.begin(), uniqueSet.end());\n}", "unique_id": "MBCPP_694_3", "index": 6092}
{"task_id": "MBCPP/695", "completion": "    if (testTup1.size() != testTup2.size())\n        return false;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] <= testTup1[i])\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_695_5", "index": 6104}
{"task_id": "MBCPP/697", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 == 0; });\n}", "unique_id": "MBCPP_697_8", "index": 6117}
{"task_id": "MBCPP/701", "completion": "    int totalSum = 0;\n    for (int num : arr) {\n        totalSum += num;\n    }\n    \n    int leftSum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        totalSum -= arr[i];\n        if (leftSum == totalSum) {\n            return i;\n        }\n        leftSum += arr[i];\n    }\n    \n    return -1;\n}", "unique_id": "MBCPP_701_10", "index": 6129}
{"task_id": "MBCPP/702", "completion": "    sort(arr.begin(), arr.end());\n    int minRemovals = n;\n    for (int i = 0; i < n; ++i) {\n        int j = upper_bound(arr.begin(), arr.end(), arr[i] + k) - arr.begin();\n        minRemovals = min(minRemovals, n - (j - i));\n    }\n    return minRemovals;\n}", "unique_id": "MBCPP_702_9", "index": 6138}
{"task_id": "MBCPP/703", "completion": "    return d.find(x) != d.end();\n}", "unique_id": "MBCPP_703_4", "index": 6143}
{"task_id": "MBCPP/704", "completion": "    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_704_9", "index": 6158}
{"task_id": "MBCPP/706", "completion": "    unordered_set<int> s;\n    for (int i = 0; i < m; i++)\n        s.insert(arr1[i]);\n    for (int i = 0; i < n; i++) {\n        if (s.find(arr2[i]) == s.end())\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_706_5", "index": 6164}
{"task_id": "MBCPP/707", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num > 0) {\n            count += num & 1;\n            num >>= 1;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_707_2", "index": 6171}
{"task_id": "MBCPP/708", "completion": "    vector<string> result;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_708_4", "index": 6183}
{"task_id": "MBCPP/709", "completion": "    unordered_map<int, unordered_set<int>> valueToKeys;\n    for (const auto& pair : testList) {\n        int key = pair[0];\n        int value = pair[1];\n        valueToKeys[value].insert(key);\n    }\n\n    map<int, int> valueToUniqueCount;\n    for (const auto& entry : valueToKeys) {\n        valueToUniqueCount[entry.first] = entry.second.size();\n    }\n\n    string result = \"{\";\n    for (auto it = valueToUniqueCount.begin(); it != valueToUniqueCount.end(); ++it) {\n        if (it != valueToUniqueCount.begin()) {\n            result += \", \";\n        }\n        result += to_string(it->first) + \": \" + to_string(it->second);\n    }\n    result += \"}\";\n\n    return result;\n}", "unique_id": "MBCPP_709_8", "index": 6197}
{"task_id": "MBCPP/710", "completion": "    vector<int> result;\n    if (!testTup.empty()) {\n        result.push_back(testTup.front());\n        result.push_back(testTup.back());\n    }\n    return result;\n}", "unique_id": "MBCPP_710_6", "index": 6205}
{"task_id": "MBCPP/711", "completion": "    int evenProduct = 1, oddProduct = 1;\n    bool isEvenPosition = false;\n    \n    while (n > 0) {\n        int digit = n % 10;\n        if (isEvenPosition)\n            evenProduct *= digit;\n        else\n            oddProduct *= digit;\n        isEvenPosition = !isEvenPosition;\n        n /= 10;\n    }\n    \n    return evenProduct == oddProduct;\n}", "unique_id": "MBCPP_711_1", "index": 6210}
{"task_id": "MBCPP/713", "completion": "    for (bool val : testTup) {\n        if (!val) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_713_2", "index": 6221}
{"task_id": "MBCPP/714", "completion": "    int count = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count;\n}", "unique_id": "MBCPP_714_2", "index": 6231}
{"task_id": "MBCPP/715", "completion": "    vector<int> result;\n    stringstream ss(testStr);\n    string token;\n    while (getline(ss, token, ',')) {\n        result.push_back(stoi(token));\n    }\n    return result;\n}", "unique_id": "MBCPP_715_1", "index": 6240}
{"task_id": "MBCPP/716", "completion": "    return 4 * a;\n}", "unique_id": "MBCPP_716_8", "index": 6257}
{"task_id": "MBCPP/717", "completion": "    double mean = accumulate(data.begin(), data.end(), 0.0) / data.size();\n    double variance = 0.0;\n    for (int num : data) {\n        variance += pow(num - mean, 2);\n    }\n    variance /= data.size();\n    return sqrt(variance);\n}", "unique_id": "MBCPP_717_2", "index": 6261}
{"task_id": "MBCPP/719", "completion": "    regex pattern(\"ab*\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_719_1", "index": 6270}
{"task_id": "MBCPP/721", "completion": "    vector<vector<double>> dp(n, vector<double>(n, 0));\n    dp[0][0] = cost[0][0];\n\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n\n    for (int j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n\n    return dp[n-1][n-1] / (2 * n - 1);\n}", "unique_id": "MBCPP_721_2", "index": 6281}
{"task_id": "MBCPP/723", "completion": "    int count = 0;\n    for (size_t i = 0; i < nums1.size() && i < nums2.size(); ++i) {\n        if (nums1[i] == nums2[i]) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_723_4", "index": 6293}
{"task_id": "MBCPP/724", "completion": "    long long num = pow(base, power);\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}", "unique_id": "MBCPP_724_1", "index": 6300}
{"task_id": "MBCPP/725", "completion": "    vector<string> result;\n    regex pattern(\"\\\"([^\\\"]*)\\\"\");\n    smatch matches;\n    string text = text1;\n    while (regex_search(text, matches, pattern)) {\n        result.push_back(matches.str(1));\n        text = matches.suffix().str();\n    }\n    return result;\n}", "unique_id": "MBCPP_725_9", "index": 6318}
{"task_id": "MBCPP/726", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] * testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_726_7", "index": 6326}
{"task_id": "MBCPP/727", "completion": "    regex pattern(\"[^a-zA-Z0-9]\");\n    return regex_replace(s, pattern, \"\");\n}", "unique_id": "MBCPP_727_6", "index": 6335}
{"task_id": "MBCPP/728", "completion": "    vector<int> result;\n    for (size_t i = 0; i < lst1.size(); ++i) {\n        result.push_back(lst1[i] + lst2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_728_6", "index": 6345}
{"task_id": "MBCPP/729", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a + b; });\n    return result;\n}", "unique_id": "MBCPP_729_2", "index": 6351}
{"task_id": "MBCPP/731", "completion": "    double l = sqrt(r * r + h * h);\n    return M_PI * r * l;\n}", "unique_id": "MBCPP_731_8", "index": 6367}
{"task_id": "MBCPP/732", "completion": "    for (char &c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n        }\n    }\n    return text;\n}", "unique_id": "MBCPP_732_3", "index": 6372}
{"task_id": "MBCPP/733", "completion": "    int left = 0, right = a.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            right = mid - 1;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_733_5", "index": 6384}
{"task_id": "MBCPP/734", "completion": "    int result = 0;\n    for (int i = 0; i < n; i++) {\n        int product = 1;\n        for (int j = i; j < n; j++) {\n            product *= arr[j];\n            result += product;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_734_1", "index": 6390}
{"task_id": "MBCPP/735", "completion": "    if (n == 0 || n == 1)\n        return n;\n    \n    int bits = log2(n) + 1;\n    int mask = (1 << (bits - 1)) - 1;\n    mask &= ~1;\n    \n    return n ^ mask;\n}", "unique_id": "MBCPP_735_1", "index": 6400}
{"task_id": "MBCPP/736", "completion": "    int low = 0, high = a.size();\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] < x)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}", "unique_id": "MBCPP_736_2", "index": 6411}
{"task_id": "MBCPP/737", "completion": "    regex pattern(\"^[aeiouAEIOU].*\");\n    if (regex_match(str, pattern))\n        return \"Valid\";\n    else\n        return \"Invalid\";\n}", "unique_id": "MBCPP_737_2", "index": 6421}
{"task_id": "MBCPP/738", "completion": "    if (n == 1)\n        return 1;\n    return geometricSum(n - 1) + 1.0 / (1 << (n - 1));\n}", "unique_id": "MBCPP_738_3", "index": 6432}
{"task_id": "MBCPP/739", "completion": "    int digits = 0;\n    int i = 1;\n    while (true) {\n        long long triangular = i * (i + 1) / 2;\n        digits = to_string(triangular).length();\n        if (digits >= n) {\n            return i;\n        }\n        i++;\n    }\n}", "unique_id": "MBCPP_739_4", "index": 6443}
{"task_id": "MBCPP/740", "completion": "    unordered_map<int, int> result;\n    for (size_t i = 0; i < testTup.size(); i += 2) {\n        result[testTup[i]] = testTup[i + 1];\n    }\n    return result;\n}", "unique_id": "MBCPP_740_8", "index": 6457}
{"task_id": "MBCPP/741", "completion": "    if (s.length() == 0)\n        return true;\n    char firstChar = s[0];\n    for (char c : s) {\n        if (c != firstChar)\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_741_8", "index": 6467}
{"task_id": "MBCPP/742", "completion": "    return (sqrt(3) * side * side);\n}", "unique_id": "MBCPP_742_1", "index": 6470}
{"task_id": "MBCPP/743", "completion": "    int size = list1.size();\n    m = m % size; // Ensure m is within the list size\n    vector<int> rotatedList;\n    rotatedList.insert(rotatedList.end(), list1.begin() + (size - m), list1.end());\n    rotatedList.insert(rotatedList.end(), list1.begin(), list1.begin() + (size - m));\n    if (n > 0) {\n        rotatedList.erase(rotatedList.end() - n, rotatedList.end());\n    }\n    return rotatedList;\n}", "unique_id": "MBCPP_743_6", "index": 6485}
{"task_id": "MBCPP/744", "completion": "    for (int num : testTup) {\n        if (num == -1) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_744_2", "index": 6491}
{"task_id": "MBCPP/745", "completion": "    vector<int> result;\n    for (int num = startnum; num <= endnum; ++num) {\n        int temp = num;\n        bool divisible = true;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || num % digit != 0) {\n                divisible = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (divisible) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_745_8", "index": 6507}
{"task_id": "MBCPP/747", "completion": "    int L[m+1][n+1][o+1];\n    for (int i=0; i<=m; i++) {\n        for (int j=0; j<=n; j++) {\n            for (int k=0; k<=o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    L[i][j][k] = 0;\n                else if (x[i-1] == y[j-1] && y[j-1] == z[k-1])\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                else\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n            }\n        }\n    }\n    return L[m][n][o];\n}", "unique_id": "MBCPP_747_6", "index": 6515}
{"task_id": "MBCPP/748", "completion": "    string result;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (i != 0 && isupper(str1[i])) {\n            result += ' ';\n        }\n        result += str1[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_748_8", "index": 6527}
{"task_id": "MBCPP/749", "completion": "    vector<int> nums;\n    for (const string& s : numsStr) {\n        nums.push_back(stoi(s));\n    }\n    sort(nums.begin(), nums.end());\n    return nums;\n}", "unique_id": "MBCPP_749_7", "index": 6536}
{"task_id": "MBCPP/750", "completion": "    testList.insert(testList.end(), testTup.begin(), testTup.end());\n    return testList;\n}", "unique_id": "MBCPP_750_8", "index": 6547}
{"task_id": "MBCPP/751", "completion": "    int n = arr.size();\n    if (i >= (n - 1) / 2)\n        return true;\n    if (arr[i] > arr[2 * i + 1] || (2 * i + 2 < n && arr[i] > arr[2 * i + 2]))\n        return false;\n    return checkMinHeap(arr, 2 * i + 1) && checkMinHeap(arr, 2 * i + 2);\n}", "unique_id": "MBCPP_751_8", "index": 6557}
{"task_id": "MBCPP/752", "completion": "    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2);\n}", "unique_id": "MBCPP_752_9", "index": 6568}
{"task_id": "MBCPP/754", "completion": "    vector<int> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_754_5", "index": 6574}
{"task_id": "MBCPP/756", "completion": "    regex pattern(\"ab?\");\n    if (regex_search(text, pattern))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}", "unique_id": "MBCPP_756_2", "index": 6581}
{"task_id": "MBCPP/757", "completion": "    unordered_set<string> seen;\n    int count = 0;\n    for (string s : testList) {\n        string reversed = s;\n        reverse(reversed.begin(), reversed.end());\n        if (seen.find(reversed) != seen.end()) {\n            count++;\n        } else {\n            seen.insert(s);\n        }\n    }\n    return to_string(count);\n}", "unique_id": "MBCPP_757_1", "index": 6590}
{"task_id": "MBCPP/759", "completion": "    int dotCount = 0;\n    int dotIndex = -1;\n    \n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dotCount++;\n            dotIndex = i;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n    }\n    \n    if (dotCount != 1) {\n        return false;\n    }\n    \n    int decimalPlaces = num.length() - dotIndex - 1;\n    return decimalPlaces == 2;\n}", "unique_id": "MBCPP_759_2", "index": 6601}
{"task_id": "MBCPP/760", "completion": "    if (n == 0) return \"YES\";\n    int first = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] != first) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "unique_id": "MBCPP_760_3", "index": 6612}
{"task_id": "MBCPP/762", "completion": "    if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_762_2", "index": 6621}
{"task_id": "MBCPP/763", "completion": "    sort(arr.begin(), arr.end());\n    int minDiff = INT_MAX;\n    for (int i = 1; i < n; i++) {\n        int diff = arr[i] - arr[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n        }\n    }\n    return minDiff;\n}", "unique_id": "MBCPP_763_10", "index": 6639}
{"task_id": "MBCPP/764", "completion": "    int count = 0;\n    for (char ch : str) {\n        if (isdigit(ch)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_764_7", "index": 6646}
{"task_id": "MBCPP/765", "completion": "    return n + (n + 1);\n}", "unique_id": "MBCPP_765_10", "index": 6659}
{"task_id": "MBCPP/766", "completion": "    vector<vector<int>> result;\n    if (l1.size() < 2)\n        return result;\n    for (size_t i = 0; i < l1.size() - 1; ++i) {\n        result.push_back({l1[i], l1[i + 1]});\n    }\n    return result;\n}", "unique_id": "MBCPP_766_3", "index": 6662}
{"task_id": "MBCPP/767", "completion": "    unordered_map<int, int> freq;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.find(complement) != freq.end()) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    return count;\n}", "unique_id": "MBCPP_767_4", "index": 6673}
{"task_id": "MBCPP/768", "completion": "    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return count % 2 != 0;\n}", "unique_id": "MBCPP_768_10", "index": 6689}
{"task_id": "MBCPP/769", "completion": "    vector<int> result;\n    unordered_set<int> set2(li2.begin(), li2.end());\n    for (int num : li1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n    for (int num : li2) {\n        if (find(li1.begin(), li1.end(), num) == li1.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_769_3", "index": 6692}
{"task_id": "MBCPP/770", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int oddNum = 2 * i - 1;\n        sum += pow(oddNum, 4);\n    }\n    return sum;\n}", "unique_id": "MBCPP_770_4", "index": 6703}
{"task_id": "MBCPP/771", "completion": "    stack<char> s;\n    for (char c : exp) {\n        if (c == '{' || c == '[' || c == '(') {\n            s.push(c);\n        } else if (c == '}' || c == ']' || c == ')') {\n            if (s.empty())\n                return false;\n            char top = s.top();\n            s.pop();\n            if ((c == '}' && top != '{') || (c == ']' && top != '[') || (c == ')' && top != '('))\n                return false;\n        }\n    }\n    return s.empty();\n}", "unique_id": "MBCPP_771_8", "index": 6717}
{"task_id": "MBCPP/772", "completion": "    string result;\n    string word;\n    for (char ch : testStr) {\n        if (ch != ' ') {\n            word += ch;\n        } else {\n            if (word.length() != k) {\n                if (!result.empty()) {\n                    result += ' ';\n                }\n                result += word;\n            }\n            word.clear();\n        }\n    }\n    if (!word.empty() && word.length() != k) {\n        if (!result.empty()) {\n            result += ' ';\n        }\n        result += word;\n    }\n    return result;\n}", "unique_id": "MBCPP_772_7", "index": 6726}
{"task_id": "MBCPP/774", "completion": "    regex pattern(R\"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\");\n    if (regex_match(email, pattern)) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}", "unique_id": "MBCPP_774_6", "index": 6735}
{"task_id": "MBCPP/775", "completion": "    for (int i = 1; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_775_4", "index": 6743}
{"task_id": "MBCPP/776", "completion": "    int count = 0;\n    for (int i = 0; i < testStr.length(); ++i) {\n        bool left = (i > 0 && (testStr[i - 1] == 'a' || testStr[i - 1] == 'e' || testStr[i - 1] == 'i' || testStr[i - 1] == 'o' || testStr[i - 1] == 'u'));\n        bool right = (i < testStr.length() - 1 && (testStr[i + 1] == 'a' || testStr[i + 1] == 'e' || testStr[i + 1] == 'i' || testStr[i + 1] == 'o' || testStr[i + 1] == 'u'));\n        if (left || right) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_776_6", "index": 6755}
{"task_id": "MBCPP/777", "completion": "    unordered_map<int, int> freq;\n    for(int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    int sum = 0;\n    for(auto it : freq) {\n        if(it.second == 1) {\n            sum += it.first;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_777_5", "index": 6764}
{"task_id": "MBCPP/780", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testList.size(); ++i) {\n        for (size_t j = i + 1; j < testList.size(); ++j) {\n            vector<int> temp;\n            temp.push_back(testList[i][0] + testList[j][0]);\n            temp.push_back(testList[i][1] + testList[j][1]);\n            result.push_back(temp);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_780_9", "index": 6778}
{"task_id": "MBCPP/781", "completion": "    int count = 0;\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (n / i == i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return (count % 2 == 0) ? \"Even\" : \"Odd\";\n}", "unique_id": "MBCPP_781_9", "index": 6788}
{"task_id": "MBCPP/782", "completion": "    int sum = 0;\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j += 2) {\n            for (int k = i; k <= j; k++) {\n                sum += arr[k];\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_782_7", "index": 6796}
{"task_id": "MBCPP/784", "completion": "    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    return even * odd;\n}", "unique_id": "MBCPP_784_10", "index": 6809}
{"task_id": "MBCPP/785", "completion": "    vector<int> result;\n    string temp;\n    for (char ch : testStr) {\n        if (isdigit(ch)) {\n            temp += ch;\n        } else if (ch == ',' || ch == ')') {\n            if (!temp.empty()) {\n                result.push_back(stoi(temp));\n                temp.clear();\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_785_6", "index": 6815}
{"task_id": "MBCPP/786", "completion": "    int low = 0, high = a.size();\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] <= x)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}", "unique_id": "MBCPP_786_5", "index": 6824}
{"task_id": "MBCPP/787", "completion": "    regex pattern(\"ab{3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_787_1", "index": 6830}
{"task_id": "MBCPP/788", "completion": "    testList.push_back(testStr);\n    return testList;\n}", "unique_id": "MBCPP_788_1", "index": 6840}
{"task_id": "MBCPP/789", "completion": "    return s * l;\n}", "unique_id": "MBCPP_789_2", "index": 6851}
{"task_id": "MBCPP/790", "completion": "    for (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_790_6", "index": 6865}
{"task_id": "MBCPP/792", "completion": "    return inputList.size();\n}", "unique_id": "MBCPP_792_3", "index": 6872}
{"task_id": "MBCPP/793", "completion": "    int low = 0, high = n - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            low = mid + 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_793_1", "index": 6880}
{"task_id": "MBCPP/794", "completion": "    regex pattern(\"a.*b\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_794_1", "index": 6890}
{"task_id": "MBCPP/796", "completion": "    int sum = 0;\n    for (auto& item : dict) {\n        sum += item.second;\n    }\n    return sum;\n}", "unique_id": "MBCPP_796_5", "index": 6904}
{"task_id": "MBCPP/797", "completion": "    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_797_2", "index": 6911}
{"task_id": "MBCPP/798", "completion": "    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_798_9", "index": 6928}
{"task_id": "MBCPP/799", "completion": "    const int bits = sizeof(n) * 8;\n    d = d % bits;\n    return (n << d) | (n >> (bits - d));\n}", "unique_id": "MBCPP_799_7", "index": 6936}
{"task_id": "MBCPP/800", "completion": "    text.erase(remove(text.begin(), text.end(), ' '), text.end());\n    return text;\n}", "unique_id": "MBCPP_800_3", "index": 6942}
{"task_id": "MBCPP/801", "completion": "    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}", "unique_id": "MBCPP_801_8", "index": 6957}
{"task_id": "MBCPP/802", "completion": "    int low = 0, high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % n;\n        int prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_802_1", "index": 6960}
{"task_id": "MBCPP/803", "completion": "    if (n < 0)\n        return false;\n    int root = sqrt(n);\n    return root * root == n;\n}", "unique_id": "MBCPP_803_4", "index": 6973}
{"task_id": "MBCPP/804", "completion": "    long long product = 1;\n    for (int i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    return product % 2 == 0;\n}", "unique_id": "MBCPP_804_6", "index": 6985}
{"task_id": "MBCPP/805", "completion": "    if (lists.empty()) return {};\n\n    vector<int> maxList = lists[0];\n    int maxSum = accumulate(maxList.begin(), maxList.end(), 0);\n\n    for (const auto& list : lists) {\n        int currentSum = accumulate(list.begin(), list.end(), 0);\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            maxList = list;\n        }\n    }\n\n    return maxList;\n}", "unique_id": "MBCPP_805_7", "index": 6996}
{"task_id": "MBCPP/806", "completion": "    int maxRun = 0;\n    int currentRun = 0;\n    for (char ch : testStr) {\n        if (isupper(ch)) {\n            currentRun++;\n            if (currentRun > maxRun) {\n                maxRun = currentRun;\n            }\n        } else {\n            currentRun = 0;\n        }\n    }\n    return maxRun;\n}", "unique_id": "MBCPP_806_10", "index": 7009}
{"task_id": "MBCPP/807", "completion": "    for (int num : nums) {\n        if (num % 2 != 0) {\n            return num;\n        }\n    }\n    return -1; // Return -1 if no odd number is found\n}", "unique_id": "MBCPP_807_4", "index": 7013}
{"task_id": "MBCPP/808", "completion": "    for (int num : testTup) {\n        if (num == k) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_808_10", "index": 7029}
{"task_id": "MBCPP/809", "completion": "    if (testTup1.size() != testTup2.size())\n        return false;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] >= testTup1[i])\n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_809_6", "index": 7035}
{"task_id": "MBCPP/810", "completion": "    vector<string> result;\n    for (int i = 0; i < a; ++i) {\n        result.push_back(\"p\");\n    }\n    for (int i = 0; i < b; ++i) {\n        result.push_back(\"q\");\n    }\n    for (int i = 0; i < c; ++i) {\n        result.push_back(\"r\");\n    }\n    for (int i = 0; i < d; ++i) {\n        result.push_back(\"s\");\n    }\n    return result;\n}", "unique_id": "MBCPP_810_2", "index": 7041}
{"task_id": "MBCPP/811", "completion": "    if (testList1.size() != testList2.size())\n        return false;\n    for (size_t i = 0; i < testList1.size(); ++i) {\n        if (testList1[i].size() != testList2[i].size())\n            return false;\n        for (size_t j = 0; j < testList1[i].size(); ++j) {\n            if (testList1[i][j] != testList2[i][j])\n                return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_811_8", "index": 7057}
{"task_id": "MBCPP/812", "completion": "    size_t pos = street.find(\" Road\");\n    if (pos != string::npos) {\n        street.replace(pos, 5, \" Rd.\");\n    }\n    return street;\n}", "unique_id": "MBCPP_812_8", "index": 7067}
{"task_id": "MBCPP/813", "completion": "    return str1.length();\n}", "unique_id": "MBCPP_813_9", "index": 7078}
{"task_id": "MBCPP/814", "completion": "    return (p * q) / 2;\n}", "unique_id": "MBCPP_814_3", "index": 7082}
{"task_id": "MBCPP/815", "completion": "    int low = 0, mid = 0, high = n - 1;\n    while (mid <= high) {\n        if (arr[mid] == 0) {\n            swap(arr[low], arr[mid]);\n            low++;\n            mid++;\n        } else if (arr[mid] == 1) {\n            mid++;\n        } else {\n            swap(arr[mid], arr[high]);\n            high--;\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_815_7", "index": 7096}
{"task_id": "MBCPP/817", "completion": "    vector<int> result;\n    auto isDivisible = [m, n](int num) { return num % m == 0 || num % n == 0; };\n    copy_if(nums.begin(), nums.end(), back_inserter(result), isDivisible);\n    return result;\n}", "unique_id": "MBCPP_817_8", "index": 7107}
{"task_id": "MBCPP/818", "completion": "    int count = 0;\n    for (char c : str) {\n        if (islower(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_818_5", "index": 7114}
{"task_id": "MBCPP/819", "completion": "    vector<vector<int>> result(2);\n    if (lists.empty()) return result;\n\n    int count = 1;\n    result[0].push_back(lists[0]);\n\n    for (size_t i = 1; i < lists.size(); ++i) {\n        if (lists[i] == lists[i - 1]) {\n            count++;\n        } else {\n            result[1].push_back(count);\n            result[0].push_back(lists[i]);\n            count = 1;\n        }\n    }\n    result[1].push_back(count);\n    return result;\n}", "unique_id": "MBCPP_819_7", "index": 7126}
{"task_id": "MBCPP/820", "completion": "    if (monthnum1 == 2)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_820_7", "index": 7136}
{"task_id": "MBCPP/821", "completion": "    unordered_map<string, string> result = dict1;\n    result.insert(dict2.begin(), dict2.end());\n    return result;\n}", "unique_id": "MBCPP_821_3", "index": 7142}
{"task_id": "MBCPP/822", "completion": "    bool hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n    if (p.length() < 8)\n        return false;\n    for (char c : p) {\n        if (isupper(c))\n            hasUpper = true;\n        else if (islower(c))\n            hasLower = true;\n        else if (isdigit(c))\n            hasDigit = true;\n        else if (!isalnum(c))\n            hasSpecial = true;\n    }\n    return hasUpper && hasLower && hasDigit && hasSpecial;\n}", "unique_id": "MBCPP_822_4", "index": 7153}
{"task_id": "MBCPP/823", "completion": "    regex pattern(\"^\" + sample);\n    if (regex_search(str, pattern)) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }\n}", "unique_id": "MBCPP_823_9", "index": 7168}
{"task_id": "MBCPP/824", "completion": "    vector<int> result;\n    for (int num : l) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_824_5", "index": 7174}
{"task_id": "MBCPP/825", "completion": "    vector<int> result;\n    for(int i : listIndex) {\n        if(i >= 0 && i < nums.size()) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_825_6", "index": 7185}
{"task_id": "MBCPP/826", "completion": "    if (a <= 0 || b <= 0 || c <= 0 || (a + b <= c) || (a + c <= b) || (b + c <= a))\n        return \"Not a Triangle\";\n    \n    int maxSide = max(a, max(b, c));\n    int sumSquares = a * a + b * b + c * c;\n    int maxSquare = maxSide * maxSide;\n    \n    if (2 * maxSquare == sumSquares)\n        return \"Right-angled Triangle\";\n    else if (2 * maxSquare > sumSquares)\n        return \"Obtuse-angled Triangle\";\n    else\n        return \"Acute-angled Triangle\";\n}", "unique_id": "MBCPP_826_7", "index": 7196}
{"task_id": "MBCPP/827", "completion": "    int sum = 0;\n    for (const auto& row : list1) {\n        if (c < row.size()) {\n            sum += row[c];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_827_10", "index": 7209}
{"task_id": "MBCPP/828", "completion": "    int alpha = 0, digit = 0, spl = 0;\n    for (char ch : str) {\n        if (isalpha(ch))\n            alpha++;\n        else if (isdigit(ch))\n            digit++;\n        else\n            spl++;\n    }\n    return {alpha, digit, spl};\n}", "unique_id": "MBCPP_828_9", "index": 7218}
{"task_id": "MBCPP/829", "completion": "    unordered_map<string, int> freqMap;\n    for (const auto& str : input) {\n        freqMap[str]++;\n    }\n\n    if (freqMap.size() < 2) {\n        return \"\";\n    }\n\n    vector<pair<string, int>> freqVec(freqMap.begin(), freqMap.end());\n    sort(freqVec.begin(), freqVec.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second > b.second;\n    });\n\n    return freqVec[1].first;\n}", "unique_id": "MBCPP_829_4", "index": 7223}
{"task_id": "MBCPP/831", "completion": "    unordered_map<int, int> freq;\n    int count = 0;\n    \n    for (int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    \n    for (auto it : freq) {\n        int f = it.second;\n        if (f >= 2) {\n            count += (f * (f - 1)) / 2;\n        }\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_831_2", "index": 7231}
{"task_id": "MBCPP/832", "completion": "    regex pattern(\"\\\\d+\");\n    smatch matches;\n    string::const_iterator searchStart(input.cbegin());\n    int maxValue = 0;\n    while (regex_search(searchStart, input.cend(), matches, pattern)) {\n        int currentValue = stoi(matches.str());\n        if (currentValue > maxValue) {\n            maxValue = currentValue;\n        }\n        searchStart = matches.suffix().first;\n    }\n    return maxValue;\n}", "unique_id": "MBCPP_832_5", "index": 7244}
{"task_id": "MBCPP/833", "completion": "    vector<int> keys;\n    for (auto& pair : dict) {\n        keys.push_back(pair.first);\n    }\n    return keys;\n}", "unique_id": "MBCPP_833_1", "index": 7250}
{"task_id": "MBCPP/834", "completion": "    vector<vector<int>> matrix(n, vector<int>(n));\n    int num = 1;\n    int left = 0, right = n - 1, top = 0, bottom = n - 1;\n    \n    while (left <= right && top <= bottom) {\n        for (int i = left; i <= right; i++) {\n            matrix[top][i] = num++;\n        }\n        top++;\n        \n        for (int i = top; i <= bottom; i++) {\n            matrix[i][right] = num++;\n        }\n        right--;\n        \n        if (top <= bottom) {\n            for (int i = right; i >= left; i--) {\n                matrix[bottom][i] = num++;\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                matrix[i][left] = num++;\n            }\n            left++;\n        }\n    }\n    \n    return matrix;\n}", "unique_id": "MBCPP_834_9", "index": 7268}
{"task_id": "MBCPP/836", "completion": "    int max_so_far = INT_MIN, max_ending_here = 0;\n    int start = 0, end = 0, s = 0;\n    \n    for (int i = 0; i < size; i++) {\n        max_ending_here += a[i];\n        \n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        \n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    \n    return end - start + 1;\n}", "unique_id": "MBCPP_836_9", "index": 7278}
{"task_id": "MBCPP/837", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int odd = 2 * i - 1;\n        sum += odd * odd * odd;\n    }\n    return sum;\n}", "unique_id": "MBCPP_837_5", "index": 7284}
{"task_id": "MBCPP/838", "completion": "    int swaps = 0;\n    int n = s1.length();\n    for (int i = 0; i < n; i++) {\n        if (s1[i] != s2[i]) {\n            for (int j = i + 1; j < n; j++) {\n                if (s1[j] != s2[j] && s1[j] == s2[i]) {\n                    swap(s1[i], s1[j]);\n                    swaps++;\n                    break;\n                }\n            }\n        }\n    }\n    return swaps;\n}", "unique_id": "MBCPP_838_7", "index": 7296}
{"task_id": "MBCPP/840", "completion": "    if (b == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "unique_id": "MBCPP_840_8", "index": 7307}
{"task_id": "MBCPP/841", "completion": "    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}", "unique_id": "MBCPP_841_2", "index": 7311}
{"task_id": "MBCPP/842", "completion": "    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_842_4", "index": 7323}
{"task_id": "MBCPP/843", "completion": "    priority_queue<long, vector<long>, greater<long>> minHeap;\n    minHeap.push(1);\n    long ugly = 0;\n    for (int i = 0; i < n; ++i) {\n        ugly = minHeap.top();\n        minHeap.pop();\n        for (int prime : primes) {\n            long nextUgly = ugly * prime;\n            if (nextUgly <= INT_MAX) {\n                minHeap.push(nextUgly);\n            }\n        }\n        while (!minHeap.empty() && minHeap.top() == ugly) {\n            minHeap.pop();\n        }\n    }\n    return ugly;\n}", "unique_id": "MBCPP_843_10", "index": 7339}
{"task_id": "MBCPP/844", "completion": "    vector<int> odd, even;\n    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 1)\n            odd.push_back(i);\n        else\n            even.push_back(i);\n    }\n    if(k <= odd.size())\n        return odd[k-1];\n    else\n        return even[k - odd.size() - 1];\n}", "unique_id": "MBCPP_844_6", "index": 7345}
{"task_id": "MBCPP/845", "completion": "    if (n < 0)\n        return 0;\n    if (n <= 1)\n        return 1;\n    double digits = 0;\n    for (int i = 2; i <= n; i++)\n        digits += log10(i);\n    return floor(digits) + 1;\n}", "unique_id": "MBCPP_845_8", "index": 7357}
{"task_id": "MBCPP/846", "completion": "    sort(arr.begin(), arr.end());\n    sort(dep.begin(), dep.end());\n    \n    int platforms = 1, result = 1;\n    int i = 1, j = 0;\n    \n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            platforms++;\n            i++;\n            if (platforms > result)\n                result = platforms;\n        } else {\n            platforms--;\n            j++;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_846_7", "index": 7366}
{"task_id": "MBCPP/847", "completion": "    vector<int> result;\n    for (int x : xs) {\n        result.push_back(x);\n    }\n    return result;\n}", "unique_id": "MBCPP_847_5", "index": 7374}
{"task_id": "MBCPP/848", "completion": "    return (base1 + base2) * height / 2;\n}", "unique_id": "MBCPP_848_10", "index": 7389}
{"task_id": "MBCPP/849", "completion": "    int sum = 0;\n    while (n % 2 == 0) {\n        sum += 2;\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i = i + 2) {\n        while (n % i == 0) {\n            sum += i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        sum += n;\n    return sum;\n}", "unique_id": "MBCPP_849_7", "index": 7396}
{"task_id": "MBCPP/850", "completion": "    if (a <= 0 || b <= 0 || c <= 0)\n        return false;\n    if (a + b + c != 180)\n        return false;\n    return true;\n}", "unique_id": "MBCPP_850_3", "index": 7402}
{"task_id": "MBCPP/852", "completion": "    vector<int> result;\n    for (int num : numList) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_852_4", "index": 7413}
{"task_id": "MBCPP/853", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_853_2", "index": 7421}
{"task_id": "MBCPP/854", "completion": "    make_heap(rawheap.begin(), rawheap.end());\n    return rawheap;\n}", "unique_id": "MBCPP_854_1", "index": 7430}
{"task_id": "MBCPP/855", "completion": "    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return (count % 2) == 0;\n}", "unique_id": "MBCPP_855_1", "index": 7440}
{"task_id": "MBCPP/856", "completion": "    int swaps = 0;\n    int ones = 0;\n    for (int i = n - 1; i >= 0; i--) {\n        if (arr[i] == 1) {\n            ones++;\n        } else {\n            swaps += ones;\n        }\n    }\n    return swaps;\n}", "unique_id": "MBCPP_856_4", "index": 7453}
{"task_id": "MBCPP/857", "completion": "    vector<vector<string>> result;\n    for (const auto& str : list1) {\n        vector<string> temp;\n        for (char ch : str) {\n            temp.push_back(string(1, ch));\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_857_10", "index": 7469}
{"task_id": "MBCPP/858", "completion": "    int count = inputList.size();\n    return count * count;\n}", "unique_id": "MBCPP_858_1", "index": 7470}
{"task_id": "MBCPP/860", "completion": "    regex pattern(\"[^a-zA-Z0-9]\");\n    if (regex_search(str, pattern))\n        return \"Discard\";\n    else\n        return \"Accept\";\n}", "unique_id": "MBCPP_860_4", "index": 7483}
{"task_id": "MBCPP/861", "completion": "    vector<string> result;\n    string sortedStr = str;\n    sort(sortedStr.begin(), sortedStr.end());\n    copy_if(texts.begin(), texts.end(), back_inserter(result), [&](const string& s) {\n        string temp = s;\n        sort(temp.begin(), temp.end());\n        return temp == sortedStr;\n    });\n    return result;\n}", "unique_id": "MBCPP_861_7", "index": 7496}
{"task_id": "MBCPP/863", "completion": "    unordered_set<int> S;\n    for (int i = 0; i < n; i++)\n        S.insert(arr[i]);\n\n    int ans = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (S.find(arr[i] - 1) == S.end()) {\n            int j = arr[i];\n            while (S.find(j) != S.end())\n                j++;\n\n            ans = max(ans, j - arr[i]);\n        }\n    }\n    return ans;\n}", "unique_id": "MBCPP_863_7", "index": 7506}
{"task_id": "MBCPP/864", "completion": "    auto isPalindrome = [](const string& s) {\n        return equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n\n    vector<string> result;\n    copy_if(texts.begin(), texts.end(), back_inserter(result), isPalindrome);\n    return result;\n}", "unique_id": "MBCPP_864_1", "index": 7510}
{"task_id": "MBCPP/865", "completion": "    vector<int> result;\n    transform(nums.begin(), nums.end(), back_inserter(result), [n](int x) { return x * n; });\n    return result;\n}", "unique_id": "MBCPP_865_6", "index": 7525}
{"task_id": "MBCPP/866", "completion": "    if (monthname2 == \"January\" || monthname2 == \"March\" || monthname2 == \"May\" || \n        monthname2 == \"July\" || monthname2 == \"August\" || monthname2 == \"October\" || \n        monthname2 == \"December\") {\n        return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_866_10", "index": 7539}
{"task_id": "MBCPP/867", "completion": "    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    if(sum % 2 == 0) {\n        return 0;\n    } else {\n        return 1;\n    }\n}", "unique_id": "MBCPP_867_10", "index": 7549}
{"task_id": "MBCPP/868", "completion": "    int len = 0;\n    int i = a.length() - 1;\n    \n    // Skip trailing spaces\n    while (i >= 0 && a[i] == ' ') {\n        i--;\n    }\n    \n    // Count the length of the last word\n    while (i >= 0 && a[i] != ' ') {\n        len++;\n        i--;\n    }\n    \n    return len;\n}", "unique_id": "MBCPP_868_2", "index": 7551}
{"task_id": "MBCPP/869", "completion": "    vector<vector<int>> result;\n    for (const auto& sublist : list1) {\n        bool withinRange = false;\n        for (int num : sublist) {\n            if (num >= leftrange && num <= rigthrange) {\n                withinRange = true;\n                break;\n            }\n        }\n        if (withinRange) {\n            result.push_back(sublist);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_869_10", "index": 7569}
{"task_id": "MBCPP/870", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {\n        return num > 0 ? sum + num : sum;\n    });\n}", "unique_id": "MBCPP_870_6", "index": 7575}
{"task_id": "MBCPP/871", "completion": "    if (string1.length() != string2.length())\n        return false;\n    \n    string temp = string1 + string1;\n    return (temp.find(string2) != string::npos);\n}", "unique_id": "MBCPP_871_4", "index": 7583}
{"task_id": "MBCPP/873", "completion": "    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}", "unique_id": "MBCPP_873_10", "index": 7599}
{"task_id": "MBCPP/874", "completion": "    if (str2.empty()) return str1.empty();\n    int len = str2.length();\n    if (str1.length() % len != 0) return false;\n    for (size_t i = 0; i < str1.length(); i += len) {\n        if (str1.substr(i, len) != str2) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_874_3", "index": 7602}
{"task_id": "MBCPP/875", "completion": "    int minDiff = INT_MAX;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff < minDiff) {\n            minDiff = diff;\n        }\n    }\n    return minDiff;\n}", "unique_id": "MBCPP_875_1", "index": 7610}
{"task_id": "MBCPP/876", "completion": "    int max_num = max(x, y);\n    while (true) {\n        if (max_num % x == 0 && max_num % y == 0)\n            return max_num;\n        max_num++;\n    }\n}", "unique_id": "MBCPP_876_5", "index": 7624}
{"task_id": "MBCPP/877", "completion": "    sort(str.begin(), str.end());\n    return str;\n}", "unique_id": "MBCPP_877_6", "index": 7635}
{"task_id": "MBCPP/878", "completion": "    unordered_set<int> kSet(k.begin(), k.end());\n    unordered_set<int> tupleSet(testTuple.begin(), testTuple.end());\n    \n    if (kSet.size() != tupleSet.size())\n        return false;\n        \n    for (int num : tupleSet) {\n        if (kSet.find(num) == kSet.end())\n            return false;\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_878_5", "index": 7644}
{"task_id": "MBCPP/879", "completion": "    regex pattern(\"a.*b\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_879_10", "index": 7659}
{"task_id": "MBCPP/880", "completion": "    int discriminant = b * b - 4 * a * c;\n    if (discriminant > 0) {\n        return \"2 solutions\";\n    } else if (discriminant == 0) {\n        return \"1 solution\";\n    } else {\n        return \"No solutions\";\n    }\n}", "unique_id": "MBCPP_880_10", "index": 7669}
{"task_id": "MBCPP/881", "completion": "    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    return even + odd;\n}", "unique_id": "MBCPP_881_9", "index": 7678}
{"task_id": "MBCPP/882", "completion": "    return 2 * (b + h);\n}", "unique_id": "MBCPP_882_10", "index": 7689}
{"task_id": "MBCPP/883", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [m, n](int x) {\n        return x % m == 0 && x % n == 0;\n    });\n    return result;\n}", "unique_id": "MBCPP_883_4", "index": 7693}
{"task_id": "MBCPP/884", "completion": "    int mask = (1 << (r - l + 1)) - 1;\n    mask = mask << (l - 1);\n    return (n & mask) == mask;\n}", "unique_id": "MBCPP_884_10", "index": 7709}
{"task_id": "MBCPP/885", "completion": "    if (str1.length() != str2.length())\n        return false;\n\n    unordered_map<char, char> map1, map2;\n\n    for (int i = 0; i < str1.length(); i++) {\n        char c1 = str1[i], c2 = str2[i];\n\n        if (map1.find(c1) != map1.end()) {\n            if (map1[c1] != c2)\n                return false;\n        } else {\n            if (map2.find(c2) != map2.end())\n                return false;\n            map1[c1] = c2;\n            map2[c2] = c1;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_885_7", "index": 7716}
{"task_id": "MBCPP/886", "completion": "    double sum = 0;\n    for (int num : numbers) {\n        sum += num;\n    }\n    return sum / numbers.size();\n}", "unique_id": "MBCPP_886_3", "index": 7722}
{"task_id": "MBCPP/887", "completion": "    return n & 1;\n}", "unique_id": "MBCPP_887_10", "index": 7739}
{"task_id": "MBCPP/888", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] - testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_888_8", "index": 7747}
{"task_id": "MBCPP/889", "completion": "    for (auto& list : lists) {\n        reverse(list.begin(), list.end());\n    }\n    return lists;\n}", "unique_id": "MBCPP_889_10", "index": 7759}
{"task_id": "MBCPP/890", "completion": "    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (mid < arr2.size() && arr1[mid] == arr2[mid]) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}", "unique_id": "MBCPP_890_6", "index": 7765}
{"task_id": "MBCPP/891", "completion": "    int countA = 0, countB = 0;\n    if (a == 0) countA = 1;\n    if (b == 0) countB = 1;\n    while (a != 0) {\n        countA++;\n        a /= 10;\n    }\n    while (b != 0) {\n        countB++;\n        b /= 10;\n    }\n    return countA == countB;\n}", "unique_id": "MBCPP_891_3", "index": 7772}
{"task_id": "MBCPP/892", "completion": "    string result;\n    bool space = false;\n    for (char c : text) {\n        if (c == ' ') {\n            if (!space) {\n                result += c;\n                space = true;\n            }\n        } else {\n            result += c;\n            space = false;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_892_2", "index": 7781}
{"task_id": "MBCPP/894", "completion": "    vector<double> result;\n    stringstream ss(testStr);\n    string token;\n    while (getline(ss, token, ',')) {\n        result.push_back(stod(token));\n    }\n    return result;\n}", "unique_id": "MBCPP_894_8", "index": 7797}
{"task_id": "MBCPP/895", "completion": "    int n = a.size();\n    if (n == 0) return 0;\n    if (n == 1) return a[0];\n\n    vector<int> dp(n, 0);\n    dp[0] = a[0];\n    dp[1] = max(a[0], a[1]);\n\n    for (int i = 2; i < n; i++) {\n        dp[i] = max(dp[i-1], dp[i-2] + a[i]);\n    }\n\n    return dp[n-1];\n}", "unique_id": "MBCPP_895_3", "index": 7802}
{"task_id": "MBCPP/896", "completion": "    sort(tuples.begin(), tuples.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tuples;\n}", "unique_id": "MBCPP_896_2", "index": 7811}
{"task_id": "MBCPP/897", "completion": "    stringstream ss(sentence);\n    string temp;\n    while (ss >> temp) {\n        if (temp == word)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_897_10", "index": 7829}
{"task_id": "MBCPP/898", "completion": "    vector<int> result;\n    if (numbers.empty() || n <= 0) return result;\n    \n    int count = 1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] == numbers[i-1]) {\n            count++;\n            if (count == n) {\n                result.push_back(numbers[i]);\n                count = 1;\n            }\n        } else {\n            count = 1;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_898_2", "index": 7831}
{"task_id": "MBCPP/899", "completion": "    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    int left = 0, right = n - 1;\n    for (int i = 0; i < n; ++i) {\n        if (arr[left] == sortedArr[i]) {\n            left++;\n        } else if (arr[right] == sortedArr[i]) {\n            right--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_899_1", "index": 7840}
{"task_id": "MBCPP/900", "completion": "    if (str.empty())\n        return false;\n    return str[0] == '5' && str.size() > 1 && str[1] == '-';\n}", "unique_id": "MBCPP_900_7", "index": 7856}
{"task_id": "MBCPP/901", "completion": "    if (n == 1) return 1;\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result = (result * i) / __gcd(result, (long)i);\n    }\n    return result;\n}", "unique_id": "MBCPP_901_1", "index": 7860}
{"task_id": "MBCPP/902", "completion": "    for (const auto& pair : d2) {\n        if (d1.find(pair.first) != d1.end()) {\n            d1[pair.first] += pair.second;\n        } else {\n            d1[pair.first] = pair.second;\n        }\n    }\n    return d1;\n}", "unique_id": "MBCPP_902_6", "index": 7875}
{"task_id": "MBCPP/903", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num > 0) {\n            if ((num & 1) == 0) {\n                count++;\n            }\n            num >>= 1;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_903_8", "index": 7887}
{"task_id": "MBCPP/905", "completion": "    int sum = 0;\n    int C[n+1][n+1];\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, n); j++) {\n            if (j == 0 || j == i)\n                C[i][j] = 1;\n            else\n                C[i][j] = C[i-1][j-1] + C[i-1][j];\n        }\n    }\n    for (int i = 0; i <= n; i++) {\n        sum += C[n][i] * C[n][i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_905_1", "index": 7890}
{"task_id": "MBCPP/906", "completion": "    regex pattern(R\"((\\d{4})/(\\d{2})/(\\d{2}))\");\n    smatch match;\n    vector<vector<string>> result;\n    \n    if (regex_search(url, match, pattern)) {\n        vector<string> date;\n        date.push_back(match[1]);\n        date.push_back(match[2]);\n        date.push_back(match[3]);\n        result.push_back(date);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_906_10", "index": 7909}
{"task_id": "MBCPP/907", "completion": "    vector<int> luckyNumbers;\n    int count = 0;\n    int num = 1;\n    \n    while (count < n) {\n        if (num % 2 != 0 && num % 5 != 0) {\n            luckyNumbers.push_back(num);\n            count++;\n        }\n        num++;\n    }\n    \n    return luckyNumbers;\n}", "unique_id": "MBCPP_907_3", "index": 7912}
{"task_id": "MBCPP/908", "completion": "    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == mid)\n            return mid;\n        else if (arr[mid] < mid)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return -1;\n}", "unique_id": "MBCPP_908_10", "index": 7929}
{"task_id": "MBCPP/909", "completion": "    num--;\n    while (num >= 0) {\n        int original = num;\n        int reversed = 0;\n        while (original != 0) {\n            reversed = reversed * 10 + original % 10;\n            original /= 10;\n        }\n        if (reversed == num) {\n            return num;\n        }\n        num--;\n    }\n    return -1;\n}", "unique_id": "MBCPP_909_1", "index": 7930}
{"task_id": "MBCPP/911", "completion": "    priority_queue<int> maxHeap;\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n\n    for (int num : nums) {\n        maxHeap.push(num);\n        minHeap.push(num);\n        if (maxHeap.size() > 2) maxHeap.pop();\n        if (minHeap.size() > 3) minHeap.pop();\n    }\n\n    int max1 = maxHeap.top(); maxHeap.pop();\n    int max2 = maxHeap.top();\n    int min1 = minHeap.top(); minHeap.pop();\n    int min2 = minHeap.top(); minHeap.pop();\n    int min3 = minHeap.top();\n\n    return max(max1 * max2 * min3, min1 * min2 * min3);\n}", "unique_id": "MBCPP_911_2", "index": 7941}
{"task_id": "MBCPP/912", "completion": "    if (m == 0)\n        return 1;\n    if (n == m)\n        return 1;\n    if (n < m)\n        return 0;\n    return ((2 * n - 1) * lobbNum(n - 1, m) - (n + m - 1) * lobbNum(n - 1, m - 1)) / (n - m);\n}", "unique_id": "MBCPP_912_9", "index": 7958}
{"task_id": "MBCPP/913", "completion": "    if (str.empty())\n        return false;\n    return isdigit(str.back());\n}", "unique_id": "MBCPP_913_1", "index": 7960}
{"task_id": "MBCPP/914", "completion": "    if (s.length() < 2)\n        return false;\n    \n    char first = s[0];\n    char second = s[1];\n    \n    if (first == second)\n        return false;\n    \n    for (int i = 2; i < s.length(); i++) {\n        if (i % 2 == 0) {\n            if (s[i] != first)\n                return false;\n        } else {\n            if (s[i] != second)\n                return false;\n        }\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_914_5", "index": 7974}
{"task_id": "MBCPP/915", "completion": "    auto comp = [](int a, int b) {\n        if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {\n            return a < b;\n        }\n        return a >= 0;\n    };\n    sort(arrayNums.begin(), arrayNums.end(), comp);\n    return arrayNums;\n}", "unique_id": "MBCPP_915_4", "index": 7983}
{"task_id": "MBCPP/916", "completion": "    sort(a.begin(), a.end());\n    for (int i = 0; i < arrSize - 2; i++) {\n        int left = i + 1;\n        int right = arrSize - 1;\n        while (left < right) {\n            int currentSum = a[i] + a[left] + a[right];\n            if (currentSum == sum) {\n                return {a[i], a[left], a[right]};\n            } else if (currentSum < sum) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return {};\n}", "unique_id": "MBCPP_916_3", "index": 7992}
{"task_id": "MBCPP/917", "completion": "    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_917_6", "index": 8005}
{"task_id": "MBCPP/918", "completion": "    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    for (int i = 0; i < m; i++) {\n        for (int j = s[i]; j <= n; j++) {\n            dp[j] += dp[j - s[i]];\n        }\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_918_8", "index": 8017}
{"task_id": "MBCPP/919", "completion": "    int result = 1;\n    for (int item : items) {\n        result *= item;\n    }\n    return result;\n}", "unique_id": "MBCPP_919_10", "index": 8029}
{"task_id": "MBCPP/921", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup.size(); i += n) {\n        auto last = min(testTup.size(), i + n);\n        result.emplace_back(testTup.begin() + i, testTup.begin() + last);\n    }\n    return result;\n}", "unique_id": "MBCPP_921_9", "index": 8038}
{"task_id": "MBCPP/922", "completion": "    sort(arr.begin(), arr.end());\n    int n = arr.size();\n    long long product1 = arr[n-1] * arr[n-2];\n    long long product2 = arr[0] * arr[1];\n    if (product1 > product2) {\n        return {arr[n-2], arr[n-1]};\n    } else {\n        return {arr[0], arr[1]};\n    }\n}", "unique_id": "MBCPP_922_5", "index": 8044}
{"task_id": "MBCPP/923", "completion": "    int dp[m+1][n+1];\n    \n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0)\n                dp[i][j] = j;\n            else if (j == 0)\n                dp[i][j] = i;\n            else if (x[i-1] == y[j-1])\n                dp[i][j] = 1 + dp[i-1][j-1];\n            else\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    \n    return dp[m][n];\n}", "unique_id": "MBCPP_923_6", "index": 8055}
{"task_id": "MBCPP/924", "completion": "    return (x > y) ? x : y;\n}", "unique_id": "MBCPP_924_5", "index": 8064}
{"task_id": "MBCPP/925", "completion": "    int product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;\n}", "unique_id": "MBCPP_925_2", "index": 8071}
{"task_id": "MBCPP/926", "completion": "    if (n == 0 && m == 0)\n        return 1;\n    if (n == 1 && m == 0)\n        return 0;\n    if (n == 1 && m == 1)\n        return 1;\n    if (m == 0)\n        return (n - 1) * (rencontresNumber(n - 1, 0) + rencontresNumber(n - 2, 0));\n    return comb(n, m) * rencontresNumber(n - m, 0);\n}\n\nint comb(int n, int k) {\n    if (k == 0 || k == n)\n        return 1;\n    return comb(n - 1, k - 1) + comb(n - 1, k);\n}", "unique_id": "MBCPP_926_1", "index": 8080}
{"task_id": "MBCPP/928", "completion": "    string year = dt.substr(0, 4);\n    string month = dt.substr(5, 2);\n    string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}", "unique_id": "MBCPP_928_2", "index": 8091}
{"task_id": "MBCPP/929", "completion": "    int count = 0;\n    for (int i = 0; i < tuplex.size(); i++) {\n        if (tuplex[i] == value) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_929_1", "index": 8100}
{"task_id": "MBCPP/930", "completion": "    regex pattern(\"a[b]*\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_930_6", "index": 8115}
{"task_id": "MBCPP/931", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_931_3", "index": 8122}
{"task_id": "MBCPP/932", "completion": "    unordered_set<string> seen;\n    vector<string> result;\n    for (const auto& word : l) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_932_10", "index": 8139}
{"task_id": "MBCPP/933", "completion": "    string result;\n    for (size_t i = 0; i < text.length(); ++i) {\n        if (isupper(text[i])) {\n            if (i != 0) {\n                result += '_';\n            }\n            result += tolower(text[i]);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_933_8", "index": 8147}
{"task_id": "MBCPP/934", "completion": "    if (m == 0 || n == 0)\n        return 1;\n    return dealnnoyNum(m - 1, n) + dealnnoyNum(m - 1, n - 1) + dealnnoyNum(m, n - 1);\n}", "unique_id": "MBCPP_934_7", "index": 8156}
{"task_id": "MBCPP/935", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_935_8", "index": 8167}
{"task_id": "MBCPP/936", "completion": "    unordered_map<int, vector<int>> mp;\n    for (const auto& tuple : testList) {\n        mp[tuple[0]] = tuple;\n    }\n    \n    vector<vector<int>> result;\n    for (int key : ordList) {\n        if (mp.find(key) != mp.end()) {\n            result.push_back(mp[key]);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_936_5", "index": 8174}
{"task_id": "MBCPP/937", "completion": "    unordered_map<char, int> charCount;\n    for (char c : str1) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n\n    char maxChar = '\\0';\n    int maxCount = 0;\n    for (auto& pair : charCount) {\n        if (pair.second > maxCount) {\n            maxChar = pair.first;\n            maxCount = pair.second;\n        }\n    }\n\n    return string(1, maxChar);\n}", "unique_id": "MBCPP_937_6", "index": 8185}
{"task_id": "MBCPP/938", "completion": "    vector<int> result(3);\n    int i = 0, j = 0, k = 0;\n    int min_diff = INT_MAX;\n    \n    while (i < p && j < q && k < r) {\n        int current_diff = abs(a[i] - b[j]) + abs(b[j] - c[k]) + abs(c[k] - a[i]);\n        if (current_diff < min_diff) {\n            min_diff = current_diff;\n            result[0] = a[i];\n            result[1] = b[j];\n            result[2] = c[k];\n        }\n        \n        if (a[i] <= b[j] && a[i] <= c[k]) {\n            i++;\n        } else if (b[j] <= a[i] && b[j] <= c[k]) {\n            j++;\n        } else {\n            k++;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_938_7", "index": 8196}
{"task_id": "MBCPP/940", "completion": "    int n = arr.size();\n\n    // Build max heap\n    for (int i = n / 2 - 1; i >= 0; i--)\n        heapify(arr, n, i);\n\n    // Extract elements from heap one by one\n    for (int i = n - 1; i > 0; i--) {\n        swap(arr[0], arr[i]);\n        heapify(arr, i, 0);\n    }\n\n    return arr;\n}\n\nvoid heapify(vector<int>& arr, int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < n && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != i) {\n        swap(arr[i], arr[largest]);\n        heapify(arr, n, largest);\n    }\n}", "unique_id": "MBCPP_940_3", "index": 8202}
{"task_id": "MBCPP/942", "completion": "    for (int num : testTup) {\n        if (find(checkList.begin(), checkList.end(), num) != checkList.end()) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_942_6", "index": 8215}
{"task_id": "MBCPP/943", "completion": "    vector<int> result;\n    int i = 0, j = 0;\n    while (i < num1.size() && j < num2.size()) {\n        if (num1[i] < num2[j]) {\n            result.push_back(num1[i]);\n            i++;\n        } else {\n            result.push_back(num2[j]);\n            j++;\n        }\n    }\n    while (i < num1.size()) {\n        result.push_back(num1[i]);\n        i++;\n    }\n    while (j < num2.size()) {\n        result.push_back(num2[j]);\n        j++;\n    }\n    return result;\n}", "unique_id": "MBCPP_943_10", "index": 8229}
{"task_id": "MBCPP/944", "completion": "    for (size_t i = 0; i < text.length(); ++i) {\n        if (isdigit(text[i])) {\n            return i;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_944_1", "index": 8230}
{"task_id": "MBCPP/945", "completion": "    unordered_set<string> s(t.begin(), t.end());\n    return s;\n}", "unique_id": "MBCPP_945_8", "index": 8247}
{"task_id": "MBCPP/947", "completion": "    if (list1.empty()) return 0;\n    int minLen = list1[0].length();\n    for (const string& word : list1) {\n        if (word.length() < minLen) {\n            minLen = word.length();\n        }\n    }\n    return minLen;\n}", "unique_id": "MBCPP_947_9", "index": 8258}
{"task_id": "MBCPP/949", "completion": "    auto countDigits = [](const vector<int>& v) {\n        int count = 0;\n        for (int num : v) {\n            int temp = num;\n            while (temp != 0) {\n                count++;\n                temp /= 10;\n            }\n        }\n        return count;\n    };\n\n    sort(testList.begin(), testList.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return countDigits(a) < countDigits(b);\n    });\n\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            result += to_string(testList[i][j]);\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_949_9", "index": 8268}
{"task_id": "MBCPP/950", "completion": "    int remainder = (year - 1900) % 12;\n    switch (remainder) {\n        case 0: return \"Rat\";\n        case 1: return \"Ox\";\n        case 2: return \"Tiger\";\n        case 3: return \"Rabbit\";\n        case 4: return \"Dragon\";\n        case 5: return \"Snake\";\n        case 6: return \"Horse\";\n        case 7: return \"Goat\";\n        case 8: return \"Monkey\";\n        case 9: return \"Rooster\";\n        case 10: return \"Dog\";\n        case 11: return \"Pig\";\n        default: return \"\";\n    }\n}", "unique_id": "MBCPP_950_3", "index": 8272}
{"task_id": "MBCPP/951", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testList1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testList1[i].size(); ++j) {\n            temp.push_back(max(testList1[i][j], testList2[i][j]));\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_951_5", "index": 8284}
{"task_id": "MBCPP/952", "completion": "    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    if (r > n - r)\n        r = n - r;\n    int res = 1;\n    for (int i = 0; i < r; i++) {\n        res = (res * (n - i)) % p;\n        res = (res * modInverse(i + 1, p)) % p;\n    }\n    return res;\n}\n\nint modInverse(int a, int p) {\n    int m0 = p, t, q;\n    int x0 = 0, x1 = 1;\n    if (p == 1)\n        return 0;\n    while (a > 1) {\n        q = a / p;\n        t = p;\n        p = a % p;\n        a = t;\n        t = x0;\n        x0 = x1 - q * x0;\n        x1 = t;\n    }\n    if (x1 < 0)\n        x1 += m0;\n    return x1;\n}", "unique_id": "MBCPP_952_4", "index": 8293}
{"task_id": "MBCPP/953", "completion": "    unordered_map<int, int> freq;\n    int max_freq = 0;\n    for (int i = 0; i < n; i++) {\n        freq[ar[i]]++;\n        if (freq[ar[i]] > max_freq)\n            max_freq = freq[ar[i]];\n    }\n    return max_freq;\n}", "unique_id": "MBCPP_953_1", "index": 8300}
{"task_id": "MBCPP/955", "completion": "    if (n < 1)\n        return false;\n    int sum = 0;\n    for (int i = 1; i <= n / 2; ++i) {\n        if (n % i == 0)\n            sum += i;\n    }\n    return sum > n;\n}", "unique_id": "MBCPP_955_3", "index": 8312}
{"task_id": "MBCPP/956", "completion": "    vector<string> result;\n    string current;\n    for (char ch : text) {\n        if (isupper(ch) && !current.empty()) {\n            result.push_back(current);\n            current.clear();\n        }\n        current += ch;\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "unique_id": "MBCPP_956_5", "index": 8324}
{"task_id": "MBCPP/957", "completion": "    if (n == 0)\n        return 0;\n    return log2(n & -n) + 1;\n}", "unique_id": "MBCPP_957_4", "index": 8333}
{"task_id": "MBCPP/958", "completion": "    string roman;\n    vector<pair<int, string>> values = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n    \n    for (const auto& [value, symbol] : values) {\n        while (num >= value) {\n            roman += symbol;\n            num -= value;\n        }\n    }\n    \n    return roman;\n}", "unique_id": "MBCPP_958_1", "index": 8340}
{"task_id": "MBCPP/960", "completion": "    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    int dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_960_8", "index": 8357}
{"task_id": "MBCPP/961", "completion": "    unordered_map<char, int> roman = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n    };\n    \n    int total = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i + 1 < s.length() && roman[s[i]] < roman[s[i + 1]]) {\n            total += roman[s[i + 1]] - roman[s[i]];\n            i++;\n        } else {\n            total += roman[s[i]];\n        }\n    }\n    return total;\n}", "unique_id": "MBCPP_961_7", "index": 8366}
{"task_id": "MBCPP/962", "completion": "    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_962_4", "index": 8373}
{"task_id": "MBCPP/964", "completion": "    return s.length() % 2 == 0;\n}", "unique_id": "MBCPP_964_8", "index": 8387}
{"task_id": "MBCPP/965", "completion": "    string result;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!result.empty()) {\n                result += '_';\n            }\n            result += tolower(ch);\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_965_7", "index": 8396}
{"task_id": "MBCPP/967", "completion": "    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    unordered_set<char> presentVowels;\n    \n    for (char ch : str) {\n        char lowerCh = tolower(ch);\n        if (vowels.find(lowerCh) != vowels.end()) {\n            presentVowels.insert(lowerCh);\n        }\n    }\n    \n    if (presentVowels.size() == vowels.size()) {\n        return \"accepted\";\n    } else {\n        return \"not accepted\";\n    }\n}", "unique_id": "MBCPP_967_4", "index": 8403}
{"task_id": "MBCPP/968", "completion": "    int max_val = 0;\n    for (int x = 0; x <= n; x++) {\n        int current = floor((a * x + b) / (a + b));\n        if (current > max_val) {\n            max_val = current;\n        }\n    }\n    return max_val;\n}", "unique_id": "MBCPP_968_1", "index": 8410}
{"task_id": "MBCPP/969", "completion": "    if (testList.empty()) return {};\n\n    sort(testList.begin(), testList.end());\n    vector<vector<int>> result;\n    vector<int> current = testList[0];\n\n    for (size_t i = 1; i < testList.size(); ++i) {\n        if (testList[i][0] == current[0]) {\n            current.insert(current.end(), testList[i].begin() + 1, testList[i].end());\n        } else {\n            result.push_back(current);\n            current = testList[i];\n        }\n    }\n    result.push_back(current);\n\n    return result;\n}", "unique_id": "MBCPP_969_10", "index": 8429}
{"task_id": "MBCPP/970", "completion": "    return (x < y) ? x : y;\n}", "unique_id": "MBCPP_970_5", "index": 8434}
{"task_id": "MBCPP/971", "completion": "    int dp[n + 1];\n    memset(dp, -1, sizeof(dp));\n    dp[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i >= a && dp[i - a] != -1)\n            dp[i] = max(dp[i], dp[i - a] + 1);\n        if (i >= b && dp[i - b] != -1)\n            dp[i] = max(dp[i], dp[i - b] + 1);\n        if (i >= c && dp[i - c] != -1)\n            dp[i] = max(dp[i], dp[i - c] + 1);\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_971_2", "index": 8441}
{"task_id": "MBCPP/972", "completion": "    vector<int> result = testTup1;\n    result.insert(result.end(), testTup2.begin(), testTup2.end());\n    return result;\n}", "unique_id": "MBCPP_972_3", "index": 8452}
{"task_id": "MBCPP/973", "completion": "    int n = s.length();\n    d = d % n;\n    reverse(s.begin(), s.begin() + d);\n    reverse(s.begin() + d, s.end());\n    reverse(s.begin(), s.end());\n    return s;\n}", "unique_id": "MBCPP_973_8", "index": 8467}
{"task_id": "MBCPP/974", "completion": "    int n = a.size();\n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = 0; j < a[i].size(); j++) {\n            a[i][j] += min(a[i+1][j], a[i+1][j+1]);\n        }\n    }\n    return a[0][0];\n}", "unique_id": "MBCPP_974_6", "index": 8475}
