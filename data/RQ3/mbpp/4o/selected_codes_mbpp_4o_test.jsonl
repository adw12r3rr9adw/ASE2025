{"task_id": "MBCPP/1", "completion": "    int rows = cost.size();\n    int cols = cost[0].size();\n    \n    vector<vector<int>> dp(rows, vector<int>(cols, 0));\n    dp[0][0] = cost[0][0];\n    \n    for (int i = 1; i <= m; ++i) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    \n    for (int j = 1; j <= n; ++j) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    \n    for (int i = 1; i <= m; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            dp[i][j] = min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]}) + cost[i][j];\n        }\n    }\n    \n    return dp[m][n];\n}", "unique_id": "MBCPP_1_1", "index": 0}
{"task_id": "MBCPP/2", "completion": "    vector<int> result;\n    unordered_set<int> set1(testTup1.begin(), testTup1.end());\n    \n    for (int num : testTup2) {\n        if (set1.find(num) != set1.end()) {\n            result.push_back(num);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_2_2", "index": 11}
{"task_id": "MBCPP/3", "completion": "    if (n <= 1) return true;\n    if (n == 2) return false;\n    if (n % 2 == 0) return true;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_3_7", "index": 26}
{"task_id": "MBCPP/4", "completion": "    priority_queue<int> pq(nums.begin(), nums.end());\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}", "unique_id": "MBCPP_4_1", "index": 30}
{"task_id": "MBCPP/5", "completion": "    if (n % 2 != 0) return 0;\n    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    dp[2] = 3;\n    for (int i = 4; i <= n; i += 2) {\n        dp[i] = 4 * dp[i - 2] - dp[i - 4];\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_5_7", "index": 46}
{"task_id": "MBCPP/6", "completion": "    int x = a ^ b;\n    return x && !(x & (x - 1));\n}", "unique_id": "MBCPP_6_9", "index": 58}
{"task_id": "MBCPP/7", "completion": "    vector<string> result;\n    regex word_regex(\"\\\\b\\\\w{4,}\\\\b\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        result.push_back((*i).str());\n    }\n\n    return result;\n}", "unique_id": "MBCPP_7_10", "index": 69}
{"task_id": "MBCPP/8", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [](int x) { return x * x; });\n    return nums;\n}", "unique_id": "MBCPP_8_5", "index": 74}
{"task_id": "MBCPP/9", "completion": "    int n = str.length();\n    string temp = str + str;\n    for (int i = 1; i < n; i++) {\n        if (temp.substr(i, n) == str)\n            return i;\n    }\n    return n;\n}", "unique_id": "MBCPP_9_2", "index": 81}
{"task_id": "MBCPP/10", "completion": "    sort(list1.begin(), list1.end());\n    return vector<int>(list1.begin(), list1.begin() + n);\n}", "unique_id": "MBCPP_10_9", "index": 98}
{"task_id": "MBCPP/11", "completion": "    size_t first = s.find(ch);\n    if (first != string::npos) {\n        s.erase(first, ch.length());\n    }\n    size_t last = s.rfind(ch);\n    if (last != string::npos) {\n        s.erase(last, ch.length());\n    }\n    return s;\n}", "unique_id": "MBCPP_11_9", "index": 108}
{"task_id": "MBCPP/12", "completion": "    sort(m.begin(), m.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return m;\n}", "unique_id": "MBCPP_12_6", "index": 115}
{"task_id": "MBCPP/14", "completion": "    return (l * b * h) / 2;\n}", "unique_id": "MBCPP_14_1", "index": 120}
{"task_id": "MBCPP/15", "completion": "    vector<string> result;\n    string current;\n    for (char c : text) {\n        if (islower(c)) {\n            if (!current.empty()) {\n                result.push_back(current);\n                current.clear();\n            }\n            result.push_back(string(1, c));\n        } else {\n            current += c;\n        }\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "unique_id": "MBCPP_15_4", "index": 133}
{"task_id": "MBCPP/16", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_16_2", "index": 141}
{"task_id": "MBCPP/17", "completion": "    return 4 * a;\n}", "unique_id": "MBCPP_17_4", "index": 153}
{"task_id": "MBCPP/18", "completion": "    unordered_set<char> charSet(secondString.begin(), secondString.end());\n    string result;\n    for (char c : str) {\n        if (charSet.find(c) == charSet.end()) {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_18_9", "index": 168}
{"task_id": "MBCPP/19", "completion": "    unordered_set<int> seen;\n    for (int num : arraynums) {\n        if (seen.count(num) > 0) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "unique_id": "MBCPP_19_1", "index": 170}
{"task_id": "MBCPP/20", "completion": "    for (int n = 1;; n++) {\n        int woodall_number = n * (1 << n) - 1;\n        if (woodall_number == x) {\n            return true;\n        } else if (woodall_number > x) {\n            return false;\n        }\n    }\n}", "unique_id": "MBCPP_20_5", "index": 184}
{"task_id": "MBCPP/21", "completion": "    vector<int> result;\n    for (int i = 1; i <= m; ++i) {\n        result.push_back(i * n);\n    }\n    return result;\n}", "unique_id": "MBCPP_21_4", "index": 193}
{"task_id": "MBCPP/22", "completion": "    unordered_set<int> seen;\n    for (int num : nums) {\n        if (seen.count(num)) {\n            return num;\n        }\n        seen.insert(num);\n    }\n    return -1;\n}", "unique_id": "MBCPP_22_7", "index": 206}
{"task_id": "MBCPP/23", "completion": "    int max_sum = INT_MIN;\n    for (const auto& lst : list1) {\n        int current_sum = accumulate(lst.begin(), lst.end(), 0);\n        max_sum = max(max_sum, current_sum);\n    }\n    return max_sum;\n}", "unique_id": "MBCPP_23_8", "index": 217}
{"task_id": "MBCPP/24", "completion": "    int decimal = 0, base = 1;\n    while (binary > 0) {\n        int last_digit = binary % 10;\n        binary = binary / 10;\n        decimal += last_digit * base;\n        base = base * 2;\n    }\n    return decimal;\n}", "unique_id": "MBCPP_24_3", "index": 222}
{"task_id": "MBCPP/25", "completion": "    unordered_map<int, int> freq;\n    for (int num : arr) {\n        freq[num]++;\n    }\n    int product = 1;\n    for (auto& entry : freq) {\n        if (entry.second == 1) {\n            product *= entry.first;\n        }\n    }\n    return product;\n}", "unique_id": "MBCPP_25_6", "index": 235}
{"task_id": "MBCPP/26", "completion": "    for (const auto& sublist : testList) {\n        if (sublist.size() != k) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_26_1", "index": 240}
{"task_id": "MBCPP/27", "completion": "    vector<string> result;\n    for (string &str : list) {\n        str.erase(remove_if(str.begin(), str.end(), ::isdigit), str.end());\n        result.push_back(str);\n    }\n    return result;\n}", "unique_id": "MBCPP_27_6", "index": 255}
{"task_id": "MBCPP/28", "completion": "    if (k == 0 || k == n)\n        return 1;\n    return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);\n}", "unique_id": "MBCPP_28_9", "index": 268}
{"task_id": "MBCPP/29", "completion": "    unordered_map<int, int> frequency;\n    for (int num : arr) {\n        frequency[num]++;\n    }\n    for (auto& pair : frequency) {\n        if (pair.second % 2 != 0) {\n            return pair.first;\n        }\n    }\n    return -1; // In case no element is found, though per the problem statement it shouldn't happen.\n}", "unique_id": "MBCPP_29_1", "index": 270}
{"task_id": "MBCPP/30", "completion": "    int result = 0;\n    int n = s.length();\n    vector<int> count(26, 0);\n    \n    for (int i = 0; i < n; ++i) {\n        count[s[i] - 'a']++;\n    }\n    \n    for (int i = 0; i < 26; ++i) {\n        result += (count[i] * (count[i] + 1)) / 2;\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_30_4", "index": 283}
{"task_id": "MBCPP/31", "completion": "    unordered_map<int, int> freq;\n    for (const auto& list : nums) {\n        for (int num : list) {\n            freq[num]++;\n        }\n    }\n\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> min_heap;\n    for (const auto& entry : freq) {\n        min_heap.push({entry.second, entry.first});\n        if (min_heap.size() > k) {\n            min_heap.pop();\n        }\n    }\n\n    vector<int> result;\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top().second);\n        min_heap.pop();\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_31_9", "index": 298}
{"task_id": "MBCPP/32", "completion": "    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        maxPrime = n;\n    return maxPrime;\n}", "unique_id": "MBCPP_32_4", "index": 303}
{"task_id": "MBCPP/33", "completion": "    int binaryNumber = 0;\n    int place = 1;\n\n    while (n > 0) {\n        int remainder = n % 2;\n        binaryNumber += remainder * place;\n        n /= 2;\n        place *= 10;\n    }\n\n    return binaryNumber;\n}", "unique_id": "MBCPP_33_7", "index": 316}
{"task_id": "MBCPP/34", "completion": "    int total = (n + 1) * (n + 2) / 2;\n    for (int i = 0; i < n; i++)\n        total -= ar[i];\n    return total;\n}", "unique_id": "MBCPP_34_4", "index": 323}
{"task_id": "MBCPP/35", "completion": "    return n * (n + 1);\n}", "unique_id": "MBCPP_35_4", "index": 333}
{"task_id": "MBCPP/36", "completion": "    string fraction = to_string((double)p / q);\n    int count = 0;\n    for (char c : fraction) {\n        if (c == '.') continue;\n        count++;\n        if (count == n) return c - '0';\n    }\n    return -1; // in case n is out of bounds\n}", "unique_id": "MBCPP_36_2", "index": 341}
{"task_id": "MBCPP/38", "completion": "    int firstEven = -1, firstOdd = -1;\n    for (int num : list1) {\n        if (firstEven == -1 && num % 2 == 0) {\n            firstEven = num;\n        }\n        if (firstOdd == -1 && num % 2 != 0) {\n            firstOdd = num;\n        }\n        if (firstEven != -1 && firstOdd != -1) {\n            break;\n        }\n    }\n    if (firstEven != -1 && firstOdd != -1) {\n        return firstEven / firstOdd;\n    }\n    return 0; // return 0 if either even or odd number is not found\n}", "unique_id": "MBCPP_38_8", "index": 357}
{"task_id": "MBCPP/39", "completion": "    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    }\n\n    priority_queue<pair<int, char>> maxHeap;\n    for (auto& [ch, count] : freq) {\n        maxHeap.push({count, ch});\n    }\n\n    string result = \"\";\n    pair<int, char> prev(-1, ' ');\n\n    while (!maxHeap.empty()) {\n        auto [count, ch] = maxHeap.top();\n        maxHeap.pop();\n        result += ch;\n        if (prev.first > 0) {\n            maxHeap.push(prev);\n        }\n        prev = {count - 1, ch};\n    }\n\n    if (result.length() != s.length()) {\n        return \"\";\n    }\n    return result;\n}", "unique_id": "MBCPP_39_9", "index": 368}
{"task_id": "MBCPP/40", "completion": "    unordered_map<int, int> freq;\n    for (const auto& list : nums) {\n        for (const auto& num : list) {\n            freq[num]++;\n        }\n    }\n    return freq;\n}", "unique_id": "MBCPP_40_5", "index": 374}
{"task_id": "MBCPP/41", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int num) { return num % 2 == 0; });\n    return result;\n}", "unique_id": "MBCPP_41_10", "index": 389}
{"task_id": "MBCPP/42", "completion": "    unordered_map<int, int> freq;\n    int sum = 0;\n\n    for (int i = 0; i < n; ++i) {\n        freq[arr[i]]++;\n    }\n\n    for (const auto& pair : freq) {\n        if (pair.second > 1) {\n            sum += pair.first * (pair.second - 1);\n        }\n    }\n\n    return sum;\n}", "unique_id": "MBCPP_42_1", "index": 390}
{"task_id": "MBCPP/43", "completion": "    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_43_9", "index": 408}
{"task_id": "MBCPP/44", "completion": "    if (text.find(\"python\") == 0) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_44_5", "index": 414}
{"task_id": "MBCPP/45", "completion": "    auto gcd = [](int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    };\n\n    int result = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        result = gcd(result, l[i]);\n        if (result == 1) {\n            return 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_45_6", "index": 425}
{"task_id": "MBCPP/46", "completion": "    unordered_set<int> unique_elements;\n    for (int num : data) {\n        if (unique_elements.find(num) != unique_elements.end()) {\n            return false;\n        }\n        unique_elements.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_46_10", "index": 439}
{"task_id": "MBCPP/47", "completion": "    if (a > b) return 0;\n    int result = 1;\n    for (int i = a + 1; i <= b; ++i) {\n        result = (result * i) % 10;\n    }\n    return result;\n}", "unique_id": "MBCPP_47_10", "index": 449}
{"task_id": "MBCPP/48", "completion": "    int mask = 0xAAAAAAAA; // 10101010101010101010101010101010 in binary\n    return n | mask;\n}", "unique_id": "MBCPP_48_3", "index": 452}
{"task_id": "MBCPP/49", "completion": "    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_49_6", "index": 465}
{"task_id": "MBCPP/51", "completion": "    return (x == y && y == z);\n}", "unique_id": "MBCPP_51_2", "index": 471}
{"task_id": "MBCPP/52", "completion": "    return b * h;\n}", "unique_id": "MBCPP_52_2", "index": 481}
{"task_id": "MBCPP/53", "completion": "    if (str.front() == str.back()) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}", "unique_id": "MBCPP_53_9", "index": 498}
{"task_id": "MBCPP/54", "completion": "    if (myList.empty()) return myList;\n\n    int maxElement = *max_element(myList.begin(), myList.end());\n    int minElement = *min_element(myList.begin(), myList.end());\n    int range = maxElement - minElement + 1;\n\n    vector<int> count(range, 0);\n    vector<int> output(myList.size());\n\n    for (int num : myList) {\n        count[num - minElement]++;\n    }\n\n    for (int i = 1; i < range; i++) {\n        count[i] += count[i - 1];\n    }\n\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        output[count[myList[i] - minElement] - 1] = myList[i];\n        count[myList[i] - minElement]--;\n    }\n\n    return output;\n}", "unique_id": "MBCPP_54_1", "index": 500}
{"task_id": "MBCPP/55", "completion": "    return a * pow(r, n - 1);\n}", "unique_id": "MBCPP_55_6", "index": 515}
{"task_id": "MBCPP/56", "completion": "    int original = n;\n    int reverse = 0;\n    while (n > 0) {\n        reverse = reverse * 10 + (n % 10);\n        n /= 10;\n    }\n    return (original == 2 * reverse - 1);\n}", "unique_id": "MBCPP_56_7", "index": 526}
{"task_id": "MBCPP/57", "completion": "    sort(arr.rbegin(), arr.rend());\n    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        result = result * 10 + arr[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_57_2", "index": 531}
{"task_id": "MBCPP/58", "completion": "    return (x ^ y) < 0;\n}", "unique_id": "MBCPP_58_8", "index": 547}
{"task_id": "MBCPP/59", "completion": "    return n * (3 * n - 2);\n}", "unique_id": "MBCPP_59_9", "index": 558}
{"task_id": "MBCPP/60", "completion": "    if (n == 0) return 0;\n    unordered_map<int, int> dp;\n    int maxLen = 1;\n\n    for (int i = 0; i < n; ++i) {\n        if (dp.find(arr[i] - 1) != dp.end()) {\n            dp[arr[i]] = dp[arr[i] - 1] + 1;\n        } else {\n            dp[arr[i]] = 1;\n        }\n        maxLen = max(maxLen, dp[arr[i]]);\n    }\n\n    return maxLen;\n}", "unique_id": "MBCPP_60_4", "index": 563}
{"task_id": "MBCPP/61", "completion": "    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        int sum = 0;\n        for (int j = i; j < n; ++j) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1) {\n                ++count;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_61_9", "index": 578}
{"task_id": "MBCPP/62", "completion": "    return *min_element(xs.begin(), xs.end());\n}", "unique_id": "MBCPP_62_6", "index": 585}
{"task_id": "MBCPP/63", "completion": "    int max_diff = INT_MIN;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return max_diff;\n}", "unique_id": "MBCPP_63_9", "index": 598}
{"task_id": "MBCPP/66", "completion": "    int count = 0;\n    for (int num : list) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_66_1", "index": 600}
{"task_id": "MBCPP/68", "completion": "    bool increasing = true, decreasing = true;\n    for (int i = 1; i < a.size(); i++) {\n        if (a[i] > a[i - 1])\n            decreasing = false;\n        if (a[i] < a[i - 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}", "unique_id": "MBCPP_68_7", "index": 616}
{"task_id": "MBCPP/69", "completion": "    if (s.empty()) return true;\n    if (l.size() < s.size()) return false;\n\n    for (size_t i = 0; i <= l.size() - s.size(); ++i) {\n        if (equal(s.begin(), s.end(), l.begin() + i)) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_69_5", "index": 624}
{"task_id": "MBCPP/70", "completion": "    for (const auto &tuple : input) {\n        if (tuple.size() != k) {\n            return \"All tuples do not have same length\";\n        }\n    }\n    return \"All tuples have same length\";\n}", "unique_id": "MBCPP_70_5", "index": 634}
{"task_id": "MBCPP/71", "completion": "    int n = nums.size();\n    int gap = n;\n    bool swapped = true;\n\n    while (gap != 1 || swapped) {\n        gap = max(1, int(gap / 1.3));\n        swapped = false;\n\n        for (int i = 0; i + gap < n; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n\n    return nums;\n}", "unique_id": "MBCPP_71_10", "index": 649}
{"task_id": "MBCPP/72", "completion": "    if (n < 0) return false;\n    return n % 2 == 0 || n % 4 == 1;\n}", "unique_id": "MBCPP_72_5", "index": 654}
{"task_id": "MBCPP/73", "completion": "    regex re(\"[\\\\n*]+\");\n    sregex_token_iterator it(text.begin(), text.end(), re, -1);\n    sregex_token_iterator end;\n    vector<string> result;\n    while (it != end) {\n        result.push_back(*it++);\n    }\n    return result;\n}", "unique_id": "MBCPP_73_8", "index": 667}
{"task_id": "MBCPP/74", "completion": "    if (colors.size() != patterns.size()) {\n        return false;\n    }\n    \n    unordered_map<string, string> colorToPattern;\n    unordered_map<string, string> patternToColor;\n    \n    for (int i = 0; i < colors.size(); i++) {\n        string color = colors[i];\n        string pattern = patterns[i];\n        \n        if (colorToPattern.count(color) && colorToPattern[color] != pattern) {\n            return false;\n        }\n        \n        if (patternToColor.count(pattern) && patternToColor[pattern] != color) {\n            return false;\n        }\n        \n        colorToPattern[color] = pattern;\n        patternToColor[pattern] = color;\n    }\n    \n    return true;\n}", "unique_id": "MBCPP_74_6", "index": 675}
{"task_id": "MBCPP/75", "completion": "    vector<string> result;\n    for (const auto& tuple : testList) {\n        bool allDivisible = true;\n        for (int num : tuple) {\n            if (num % k != 0) {\n                allDivisible = false;\n                break;\n            }\n        }\n        if (allDivisible) {\n            result.push_back(\"(\" + to_string(tuple[0]) + \", \" + to_string(tuple[1]) + \", \" + to_string(tuple[2]) + \")\");\n        }\n    }\n    return \"[\" + (result.empty() ? \"\" : result[0]) + \"]\";\n}", "unique_id": "MBCPP_75_2", "index": 681}
{"task_id": "MBCPP/76", "completion": "    int count = 0;\n    for (int i = 1; i <= min(m, n); ++i) {\n        count += (m - i + 1) * (n - i + 1);\n    }\n    return count;\n}", "unique_id": "MBCPP_76_1", "index": 690}
{"task_id": "MBCPP/77", "completion": "    int sum_even = 0, sum_odd = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 0) {\n            sum_even += digit;\n        } else {\n            sum_odd += digit;\n        }\n        n /= 10;\n    }\n    return sum_even > sum_odd;\n}", "unique_id": "MBCPP_77_2", "index": 701}
{"task_id": "MBCPP/78", "completion": "    int count = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (__builtin_popcount(i) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_78_3", "index": 712}
{"task_id": "MBCPP/79", "completion": "    return s.length() % 2 != 0;\n}", "unique_id": "MBCPP_79_10", "index": 729}
{"task_id": "MBCPP/80", "completion": "    return (n * (n + 1) * (n + 2)) / 6.0;\n}", "unique_id": "MBCPP_80_9", "index": 738}
{"task_id": "MBCPP/81", "completion": "    vector<vector<int>> result;\n    int n = testTup1.size();\n    int m = testTup2.size();\n    for (int i = 0; i < n; ++i) {\n        result.push_back({testTup1[i], testTup2[i % m]});\n    }\n    return result;\n}", "unique_id": "MBCPP_81_10", "index": 749}
{"task_id": "MBCPP/82", "completion": "    return (4.0 / 3.0) * M_PI * pow(r, 3);\n}", "unique_id": "MBCPP_82_9", "index": 758}
{"task_id": "MBCPP/83", "completion": "    char result = 0;\n    for(char c : strr) {\n        result += c;\n    }\n    result %= 256;\n    return string(1, result);\n}", "unique_id": "MBCPP_83_8", "index": 767}
{"task_id": "MBCPP/84", "completion": "    if (n == 1 || n == 2) \n        return 1;\n    vector<int> seq(n + 1);\n    seq[1] = 1;\n    seq[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]];\n    }\n    return seq[n];\n}", "unique_id": "MBCPP_84_3", "index": 772}
{"task_id": "MBCPP/85", "completion": "    return 4 * M_PI * r * r;\n}", "unique_id": "MBCPP_85_10", "index": 789}
{"task_id": "MBCPP/86", "completion": "    return 3 * n * (n - 1) + 1;\n}", "unique_id": "MBCPP_86_7", "index": 796}
{"task_id": "MBCPP/87", "completion": "    unordered_map<string, string> mergedDict = dict1;\n\n    for (const auto& pair : dict2) {\n        mergedDict[pair.first] = pair.second;\n    }\n\n    for (const auto& pair : dict3) {\n        mergedDict[pair.first] = pair.second;\n    }\n\n    return mergedDict;\n}", "unique_id": "MBCPP_87_10", "index": 809}
{"task_id": "MBCPP/88", "completion": "    unordered_map<int, int> frequency;\n    for (int num : list1) {\n        frequency[num]++;\n    }\n    return frequency;\n}", "unique_id": "MBCPP_88_4", "index": 813}
{"task_id": "MBCPP/89", "completion": "    return n - 1;\n}", "unique_id": "MBCPP_89_6", "index": 825}
{"task_id": "MBCPP/90", "completion": "    int maxLength = 0;\n    for (const string& word : list1) {\n        maxLength = max(maxLength, (int)word.length());\n    }\n    return maxLength;\n}", "unique_id": "MBCPP_90_10", "index": 839}
{"task_id": "MBCPP/91", "completion": "    for (const string& s : str1) {\n        if (s.find(subStr) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_91_9", "index": 848}
{"task_id": "MBCPP/92", "completion": "    if (n.length() < 3) return false;\n    char a = n[0], b = n[1];\n    if (a == b) return false;\n    for (int i = 2; i < n.length(); ++i) {\n        if (i % 2 == 0 && n[i] != a) return false;\n        if (i % 2 == 1 && n[i] != b) return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_92_10", "index": 859}
{"task_id": "MBCPP/93", "completion": "    if (b == 0)\n        return 1;\n    int half = power(a, b / 2);\n    if (b % 2 == 0)\n        return half * half;\n    else\n        return half * half * a;\n}", "unique_id": "MBCPP_93_8", "index": 867}
{"task_id": "MBCPP/95", "completion": "    int minLength = INT_MAX;\n    for (const auto& sublist : lst) {\n        if (sublist.size() < minLength) {\n            minLength = sublist.size();\n        }\n    }\n    return minLength;\n}", "unique_id": "MBCPP_95_2", "index": 871}
{"task_id": "MBCPP/96", "completion": "    int count = 0;\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (i == (n / i))\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_96_5", "index": 884}
{"task_id": "MBCPP/97", "completion": "    unordered_map<int, int> freqMap;\n    for (const auto& sublist : list1) {\n        for (int num : sublist) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "unique_id": "MBCPP_97_7", "index": 896}
{"task_id": "MBCPP/98", "completion": "    if (numbers.empty()) return 0.0;\n    double product = 1.0;\n    for (int num : numbers) {\n        product *= num;\n    }\n    return product / numbers.size();\n}", "unique_id": "MBCPP_98_9", "index": 908}
{"task_id": "MBCPP/99", "completion": "    if (n == 0) return \"0\";\n    string binary = \"\";\n    while (n > 0) {\n        binary = (n % 2 == 0 ? \"0\" : \"1\") + binary;\n        n = n / 2;\n    }\n    return binary;\n}", "unique_id": "MBCPP_99_6", "index": 915}
{"task_id": "MBCPP/100", "completion": "    if (num < 9)\n        return num + 1;\n    string s = to_string(num);\n    int n = s.size();\n    string left = s.substr(0, (n + 1) / 2);\n    string nextLeft = to_string(stoll(left) + 1);\n    string palindrome = nextLeft + string(nextLeft.rbegin() + (n % 2), nextLeft.rend());\n    if (stoll(palindrome) > num)\n        return stoll(palindrome);\n    nextLeft = to_string(stoll(left));\n    palindrome = nextLeft + string(nextLeft.rbegin() + (n % 2), nextLeft.rend());\n    return stoll(palindrome);\n}", "unique_id": "MBCPP_100_3", "index": 922}
{"task_id": "MBCPP/101", "completion": "    sort(arr.begin(), arr.end());\n    return arr[k - 1];\n}", "unique_id": "MBCPP_101_5", "index": 934}
{"task_id": "MBCPP/102", "completion": "    string result;\n    bool toUpper = true;\n    for (char ch : word) {\n        if (ch == '_') {\n            toUpper = true;\n        } else {\n            if (toUpper) {\n                result += toupper(ch);\n                toUpper = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_102_8", "index": 947}
{"task_id": "MBCPP/103", "completion": "    if (m >= n || n == 0)\n        return 0;\n    if (m == 0)\n        return 1;\n    return (n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m);\n}", "unique_id": "MBCPP_103_7", "index": 956}
{"task_id": "MBCPP/104", "completion": "    for(auto& sublist : inputList) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return inputList;\n}", "unique_id": "MBCPP_104_10", "index": 969}
{"task_id": "MBCPP/105", "completion": "    return std::count(lst.begin(), lst.end(), true);\n}", "unique_id": "MBCPP_105_3", "index": 972}
{"task_id": "MBCPP/106", "completion": "    testTup.insert(testTup.end(), testList.begin(), testList.end());\n    return testTup;\n}", "unique_id": "MBCPP_106_4", "index": 983}
{"task_id": "MBCPP/107", "completion": "    int count = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i >= 10 && i <= 15) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_107_4", "index": 993}
{"task_id": "MBCPP/108", "completion": "    vector<int> result;\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    \n    for (int num : num1) {\n        minHeap.push(num);\n    }\n    for (int num : num2) {\n        minHeap.push(num);\n    }\n    for (int num : num3) {\n        minHeap.push(num);\n    }\n    \n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_108_5", "index": 1004}
{"task_id": "MBCPP/109", "completion": "    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if ((s[n-1] - '0') % 2 == 1) {\n            ++count;\n        }\n        rotate(s.begin(), s.begin() + 1, s.end());\n    }\n    return count;\n}", "unique_id": "MBCPP_109_3", "index": 1012}
{"task_id": "MBCPP/110", "completion": "    vector<vector<int>> result;\n    sort(testList.begin(), testList.end());\n    \n    if (strtVal < testList[0][0]) {\n        result.push_back({strtVal, testList[0][0]});\n    }\n    \n    for (int i = 0; i < testList.size() - 1; ++i) {\n        if (testList[i][1] < testList[i + 1][0]) {\n            result.push_back({testList[i][1], testList[i + 1][0]});\n        }\n    }\n    \n    if (testList.back()[1] < stopVal) {\n        result.push_back({testList.back()[1], stopVal});\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_110_4", "index": 1023}
{"task_id": "MBCPP/111", "completion": "    if (nestedlist.empty()) return {};\n\n    unordered_map<int, int> count_map;\n    for (const auto& list : nestedlist) {\n        unordered_set<int> unique_elements(list.begin(), list.end());\n        for (int num : unique_elements) {\n            count_map[num]++;\n        }\n    }\n\n    vector<int> common_elements;\n    int list_count = nestedlist.size();\n    for (const auto& pair : count_map) {\n        if (pair.second == list_count) {\n            common_elements.push_back(pair.first);\n        }\n    }\n\n    return common_elements;\n}", "unique_id": "MBCPP_111_7", "index": 1036}
{"task_id": "MBCPP/112", "completion": "    return 2 * (diameter + height);\n}", "unique_id": "MBCPP_112_8", "index": 1047}
{"task_id": "MBCPP/113", "completion": "    for (char c : text) {\n        if (!isdigit(c)) {\n            return false;\n        }\n    }\n    return !text.empty();\n}", "unique_id": "MBCPP_113_8", "index": 1057}
{"task_id": "MBCPP/114", "completion": "    map<vector<int>, int> freqMap;\n    for (const auto& vec : testList) {\n        freqMap[vec]++;\n    }\n    \n    vector<vector<int>> result;\n    set<vector<int>> visited;\n    \n    for (const auto& vec : testList) {\n        if (visited.find(vec) == visited.end()) {\n            vector<int> temp = vec;\n            temp.push_back(freqMap[vec]);\n            result.push_back(temp);\n            visited.insert(vec);\n        }\n    }\n    \n    stringstream ss;\n    ss << \"[\";\n    for (size_t i = 0; i < result.size(); ++i) {\n        ss << \"(\";\n        for (size_t j = 0; j < result[i].size(); ++j) {\n            ss << result[i][j];\n            if (j < result[i].size() - 1) {\n                ss << \", \";\n            }\n        }\n        ss << \")\";\n        if (i < result.size() - 1) {\n            ss << \", \";\n        }\n    }\n    ss << \"]\";\n    \n    return ss.str();\n}", "unique_id": "MBCPP_114_1", "index": 1060}
{"task_id": "MBCPP/116", "completion": "    int result = 0;\n    for (int num : nums) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "unique_id": "MBCPP_116_8", "index": 1077}
{"task_id": "MBCPP/117", "completion": "    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            try {\n                float num = stof(testList[i][j]);\n                result += to_string(num);\n            } catch (const invalid_argument& e) {\n                result += \"null\";\n            }\n            if (j < testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i < testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_117_7", "index": 1086}
{"task_id": "MBCPP/118", "completion": "    vector<string> result;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_118_3", "index": 1092}
{"task_id": "MBCPP/119", "completion": "    int low = 0, high = n - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (mid % 2 == 1) mid--; // Ensure mid is even\n        if (arr[mid] == arr[mid + 1])\n            low = mid + 2;\n        else\n            high = mid;\n    }\n    return arr[low];\n}", "unique_id": "MBCPP_119_4", "index": 1103}
{"task_id": "MBCPP/120", "completion": "    int maxProduct = INT_MIN;\n    for(const auto& tuple : list1) {\n        int product = tuple[0] * tuple[1];\n        if (product > maxProduct) {\n            maxProduct = product;\n        }\n    }\n    return maxProduct;\n}", "unique_id": "MBCPP_120_2", "index": 1111}
{"task_id": "MBCPP/121", "completion": "    for (int i = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] == sum) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_121_6", "index": 1125}
{"task_id": "MBCPP/122", "completion": "    return 30 + (n - 1) * 27;\n}", "unique_id": "MBCPP_122_2", "index": 1131}
{"task_id": "MBCPP/123", "completion": "    auto sumOfDivisors = [](int n) {\n        int sum = 1;\n        for (int i = 2; i <= sqrt(n); ++i) {\n            if (n % i == 0) {\n                if (i == (n / i))\n                    sum += i;\n                else\n                    sum += (i + n / i);\n            }\n        }\n        return sum;\n    };\n\n    int sum = 0;\n    for (int i = 2; i < limit; ++i) {\n        int sum1 = sumOfDivisors(i);\n        if (sum1 > i && sum1 < limit) {\n            int sum2 = sumOfDivisors(sum1);\n            if (sum2 == i) {\n                sum += (i + sum1);\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_123_6", "index": 1145}
{"task_id": "MBCPP/125", "completion": "    int max_diff = 0, current_diff = 0;\n    for (int i = 0; i < n; ++i) {\n        current_diff += (str[i] == '0') ? 1 : -1;\n        if (current_diff < 0) {\n            current_diff = 0;\n        }\n        max_diff = max(max_diff, current_diff);\n    }\n    return max_diff;\n}", "unique_id": "MBCPP_125_10", "index": 1159}
{"task_id": "MBCPP/126", "completion": "    int gcd = __gcd(a, b);\n    int result = 0;\n    for (int i = 1; i <= gcd; ++i) {\n        if (gcd % i == 0) {\n            result += i;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_126_8", "index": 1167}
{"task_id": "MBCPP/127", "completion": "    int result = 0;\n    while (y > 0) {\n        if (y & 1) {\n            result += x;\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}", "unique_id": "MBCPP_127_8", "index": 1177}
{"task_id": "MBCPP/128", "completion": "    vector<string> result;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        if (word.length() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_128_2", "index": 1181}
{"task_id": "MBCPP/129", "completion": "    int n = myMatrix.size();\n    int sum = 0;\n    for (int j = 0; j < n; j++) {\n        sum += myMatrix[0][j];\n    }\n\n    for (int i = 1; i < n; i++) {\n        int rowSum = 0;\n        for (int j = 0; j < n; j++) {\n            rowSum += myMatrix[i][j];\n        }\n        if (rowSum != sum) {\n            return false;\n        }\n    }\n\n    for (int j = 0; j < n; j++) {\n        int colSum = 0;\n        for (int i = 0; i < n; i++) {\n            colSum += myMatrix[i][j];\n        }\n        if (colSum != sum) {\n            return false;\n        }\n    }\n\n    int diagSum1 = 0;\n    int diagSum2 = 0;\n    for (int i = 0; i < n; i++) {\n        diagSum1 += myMatrix[i][i];\n        diagSum2 += myMatrix[i][n - i - 1];\n    }\n\n    if (diagSum1 != sum || diagSum2 != sum) {\n        return false;\n    }\n\n    return true;\n}", "unique_id": "MBCPP_129_1", "index": 1190}
{"task_id": "MBCPP/130", "completion": "    unordered_map<int, int> freq;\n    for (int num : nums) {\n        freq[num]++;\n    }\n    int maxFreq = 0, maxItem = -1;\n    for (auto &p : freq) {\n        if (p.second > maxFreq) {\n            maxFreq = p.second;\n            maxItem = p.first;\n        }\n    }\n    return {maxItem, maxFreq};\n}", "unique_id": "MBCPP_130_7", "index": 1206}
{"task_id": "MBCPP/131", "completion": "    int left = 0, right = str1.size() - 1;\n    string vowels = \"aeiouAEIOU\";\n    while (left < right) {\n        if (vowels.find(str1[left]) == string::npos) {\n            left++;\n            continue;\n        }\n        if (vowels.find(str1[right]) == string::npos) {\n            right--;\n            continue;\n        }\n        swap(str1[left], str1[right]);\n        left++;\n        right--;\n    }\n    return str1;\n}", "unique_id": "MBCPP_131_10", "index": 1219}
{"task_id": "MBCPP/132", "completion": "    string result;\n    for(const auto& s : tup1) {\n        result += s;\n    }\n    return result;\n}", "unique_id": "MBCPP_132_8", "index": 1227}
{"task_id": "MBCPP/133", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int acc, int num) {\n        return num < 0 ? acc + num : acc;\n    });\n}", "unique_id": "MBCPP_133_5", "index": 1234}
{"task_id": "MBCPP/134", "completion": "    if (arr[n-1] % 2 == 0)\n        return \"EVEN\";\n    else\n        return \"ODD\";\n}", "unique_id": "MBCPP_134_9", "index": 1248}
{"task_id": "MBCPP/135", "completion": "    return n * (2 * n - 1);\n}", "unique_id": "MBCPP_135_9", "index": 1258}
{"task_id": "MBCPP/136", "completion": "    double bill = 0;\n    if (units <= 50) {\n        bill = units * 0.5;\n    } else if (units <= 150) {\n        bill = 50 * 0.5 + (units - 50) * 0.75;\n    } else if (units <= 250) {\n        bill = 50 * 0.5 + 100 * 0.75 + (units - 150) * 1.2;\n    } else {\n        bill = 50 * 0.5 + 100 * 0.75 + 100 * 1.2 + (units - 250) * 1.5;\n    }\n    bill += bill * 0.2; // Adding 20% surcharge\n    return bill;\n}", "unique_id": "MBCPP_136_5", "index": 1264}
{"task_id": "MBCPP/137", "completion": "    int zeroes = count(nums.begin(), nums.end(), 0);\n    return static_cast<double>(zeroes) / nums.size();\n}", "unique_id": "MBCPP_137_5", "index": 1274}
{"task_id": "MBCPP/138", "completion": "    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n--;\n        }\n    }\n    return (n == 0);\n}", "unique_id": "MBCPP_138_10", "index": 1289}
{"task_id": "MBCPP/139", "completion": "    return 2 * M_PI * r;\n}", "unique_id": "MBCPP_139_6", "index": 1295}
{"task_id": "MBCPP/140", "completion": "    set<int> result;\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            result.insert(num);\n        }\n    }\n    return vector<int>(result.begin(), result.end());\n}", "unique_id": "MBCPP_140_9", "index": 1308}
{"task_id": "MBCPP/141", "completion": "    auto flip = [](vector<int>& arr, int k) {\n        reverse(arr.begin(), arr.begin() + k + 1);\n    };\n\n    for (int curr_size = nums.size(); curr_size > 1; --curr_size) {\n        int max_idx = max_element(nums.begin(), nums.begin() + curr_size) - nums.begin();\n\n        if (max_idx != curr_size - 1) {\n            if (max_idx != 0) {\n                flip(nums, max_idx);\n            }\n            flip(nums, curr_size - 1);\n        }\n    }\n\n    return nums;\n}", "unique_id": "MBCPP_141_10", "index": 1319}
{"task_id": "MBCPP/142", "completion": "    int count = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_142_1", "index": 1320}
{"task_id": "MBCPP/144", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sum += abs(arr[i] - arr[j]);\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_144_1", "index": 1330}
{"task_id": "MBCPP/145", "completion": "    if (n < 2) return 0;\n    int maxElement = *max_element(arr.begin(), arr.end());\n    int minElement = *min_element(arr.begin(), arr.end());\n    return maxElement - minElement;\n}", "unique_id": "MBCPP_145_10", "index": 1349}
{"task_id": "MBCPP/146", "completion": "    if (str1.empty()) return 0;\n    return str1[0];\n}", "unique_id": "MBCPP_146_1", "index": 1350}
{"task_id": "MBCPP/147", "completion": "    for (int i = m - 1; i >= 0; --i) {\n        for (int j = 0; j <= i; ++j) {\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n        }\n    }\n    return tri[0][0];\n}", "unique_id": "MBCPP_147_10", "index": 1369}
{"task_id": "MBCPP/148", "completion": "    string str = to_string(n);\n    int max_sum = 0;\n    for (int i = 1; i < str.length(); ++i) {\n        int part1 = stoi(str.substr(0, i));\n        int part2 = stoi(str.substr(i));\n        int sum = part1 + part2;\n        max_sum = max(max_sum, sum);\n    }\n    return max_sum;\n}", "unique_id": "MBCPP_148_3", "index": 1372}
{"task_id": "MBCPP/149", "completion": "    vector<int> dp(n, 1);\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) == 1) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_149_4", "index": 1383}
{"task_id": "MBCPP/150", "completion": "    if (c == 0)\n        return a == b;\n    return (b - a) % c == 0 && (b - a) / c >= 0;\n}", "unique_id": "MBCPP_150_7", "index": 1396}
{"task_id": "MBCPP/151", "completion": "    return __gcd(x, y) == 1;\n}", "unique_id": "MBCPP_151_5", "index": 1404}
{"task_id": "MBCPP/152", "completion": "    if (x.size() <= 1) \n        return x;\n\n    int mid = x.size() / 2;\n    vector<int> left(x.begin(), x.begin() + mid);\n    vector<int> right(x.begin() + mid, x.end());\n\n    left = mergeSort(left);\n    right = mergeSort(right);\n\n    vector<int> result;\n    auto it1 = left.begin();\n    auto it2 = right.begin();\n\n    while (it1 != left.end() && it2 != right.end()) {\n        if (*it1 < *it2) {\n            result.push_back(*it1);\n            ++it1;\n        } else {\n            result.push_back(*it2);\n            ++it2;\n        }\n    }\n\n    while (it1 != left.end()) {\n        result.push_back(*it1);\n        ++it1;\n    }\n\n    while (it2 != right.end()) {\n        result.push_back(*it2);\n        ++it2;\n    }\n\n    return result;\n}", "unique_id": "MBCPP_152_4", "index": 1413}
{"task_id": "MBCPP/153", "completion": "    double x = -b / (2.0 * a);\n    double y = (a * x * x) + (b * x) + c;\n    return {x, y};\n}", "unique_id": "MBCPP_153_2", "index": 1421}
{"task_id": "MBCPP/154", "completion": "    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_154_1", "index": 1430}
{"task_id": "MBCPP/155", "completion": "    for (int i = 0; i < 32; i += 2) {\n        n ^= (1 << i);\n    }\n    return n;\n}", "unique_id": "MBCPP_155_3", "index": 1442}
{"task_id": "MBCPP/156", "completion": "    vector<vector<int>> result;\n    for (const auto& vec : tupleStr) {\n        vector<int> intVec;\n        for (const auto& str : vec) {\n            intVec.push_back(stoi(str));\n        }\n        result.push_back(intVec);\n    }\n    return result;\n}", "unique_id": "MBCPP_156_10", "index": 1459}
{"task_id": "MBCPP/158", "completion": "    unordered_map<int, int> freq;\n    for (int num : arr) {\n        freq[num % k]++;\n    }\n\n    int maxFreq = 0;\n    for (auto it : freq) {\n        maxFreq = max(maxFreq, it.second);\n    }\n\n    if (maxFreq == n) {\n        return 0;\n    }\n\n    if (maxFreq == 1) {\n        return -1;\n    }\n\n    int ops = 0;\n    for (auto it : freq) {\n        if (it.second != maxFreq) {\n            ops += abs(maxFreq - it.second) * k;\n        }\n    }\n\n    return ops;\n}", "unique_id": "MBCPP_158_2", "index": 1461}
{"task_id": "MBCPP/159", "completion": "    if ((month == \"December\" && days >= 21) || month == \"January\" || month == \"February\" || (month == \"March\" && days < 20))\n        return \"winter\";\n    else if ((month == \"March\" && days >= 20) || month == \"April\" || month == \"May\" || (month == \"June\" && days < 21))\n        return \"spring\";\n    else if ((month == \"June\" && days >= 21) || month == \"July\" || month == \"August\" || (month == \"September\" && days < 22))\n        return \"summer\";\n    else\n        return \"autumn\";\n}", "unique_id": "MBCPP_159_2", "index": 1471}
{"task_id": "MBCPP/161", "completion": "    unordered_set<int> set2(list2.begin(), list2.end());\n    vector<int> result;\n    for (int num : list1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_161_9", "index": 1488}
{"task_id": "MBCPP/162", "completion": "    int sum = 0;\n    for (int i = n; i > 0; i -= 2) {\n        sum += i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_162_5", "index": 1494}
{"task_id": "MBCPP/163", "completion": "    return (s * l * l) / (4 * tan(M_PI / s));\n}", "unique_id": "MBCPP_163_2", "index": 1501}
{"task_id": "MBCPP/164", "completion": "    auto sum_of_divisors = [](int n) {\n        int sum = 0;\n        for (int i = 1; i <= n / 2; ++i) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        return sum + n;\n    };\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2);\n}", "unique_id": "MBCPP_164_2", "index": 1511}
{"task_id": "MBCPP/165", "completion": "    int count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        if (tolower(str1[i]) - 'a' == i) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_165_4", "index": 1523}
{"task_id": "MBCPP/166", "completion": "    int evenCount = 0, oddCount = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0)\n            evenCount++;\n        else\n            oddCount++;\n    }\n    return evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2;\n}", "unique_id": "MBCPP_166_1", "index": 1530}
{"task_id": "MBCPP/167", "completion": "    if (n <= 1) \n        return 1;\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return n + 1;\n}", "unique_id": "MBCPP_167_9", "index": 1548}
{"task_id": "MBCPP/168", "completion": "    int count = 0;\n    for (int num : a) {\n        if (num == x) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_168_10", "index": 1559}
{"task_id": "MBCPP/169", "completion": "    if (n == 0) return 0;\n    if (n == 1) return 1;\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; ++i) {\n        c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_169_6", "index": 1565}
{"task_id": "MBCPP/170", "completion": "    int sum = 0;\n    for (int i = m; i <= n; ++i) {\n        sum += list1[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_170_7", "index": 1576}
{"task_id": "MBCPP/171", "completion": "    return 5 * a;\n}", "unique_id": "MBCPP_171_3", "index": 1582}
{"task_id": "MBCPP/172", "completion": "    string target = \"std\";\n    int count = 0;\n    size_t pos = s.find(target);\n    while (pos != string::npos) {\n        count++;\n        pos = s.find(target, pos + target.length());\n    }\n    return count;\n}", "unique_id": "MBCPP_172_6", "index": 1595}
{"task_id": "MBCPP/173", "completion": "    string result;\n    for (char c : text) {\n        if (isalnum(c)) {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_173_7", "index": 1606}
{"task_id": "MBCPP/175", "completion": "    stack<char> s;\n    for (char ch : str1) {\n        if (ch == '(' || ch == '{' || ch == '[') {\n            s.push(ch);\n        } else {\n            if (s.empty()) return false;\n            char top = s.top();\n            s.pop();\n            if ((ch == ')' && top != '(') ||\n                (ch == '}' && top != '{') ||\n                (ch == ']' && top != '[')) {\n                return false;\n            }\n        }\n    }\n    return s.empty();\n}", "unique_id": "MBCPP_175_6", "index": 1615}
{"task_id": "MBCPP/176", "completion": "    return a + b + c;\n}", "unique_id": "MBCPP_176_5", "index": 1624}
{"task_id": "MBCPP/177", "completion": "    for (int a = l; a <= r; ++a) {\n        for (int b = a + 1; b <= r; ++b) {\n            if (lcm(a, b) >= l && lcm(a, b) <= r) {\n                return {a, b};\n            }\n        }\n    }\n    return {};\n}", "unique_id": "MBCPP_177_7", "index": 1636}
{"task_id": "MBCPP/178", "completion": "    for (const string& pattern : patterns) {\n        if (text.find(pattern) != string::npos) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "unique_id": "MBCPP_178_2", "index": 1641}
{"task_id": "MBCPP/179", "completion": "    vector<int> terms;\n    int num = x;\n    while (num > 0) {\n        terms.insert(terms.begin(), num % 10);\n        num /= 10;\n    }\n    int n = terms.size();\n    int next_term = 0;\n    while (next_term < x) {\n        next_term = accumulate(terms.begin(), terms.end(), 0);\n        if (next_term == x) {\n            return true;\n        }\n        terms.erase(terms.begin());\n        terms.push_back(next_term);\n    }\n    return false;\n}", "unique_id": "MBCPP_179_3", "index": 1652}
{"task_id": "MBCPP/181", "completion": "    if (n == 0) return \"\";\n    string prefix = arr[0];\n    for (int i = 1; i < n; i++) {\n        while (arr[i].find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty()) return \"\";\n        }\n    }\n    return prefix;\n}", "unique_id": "MBCPP_181_7", "index": 1666}
{"task_id": "MBCPP/183", "completion": "    unordered_set<int> elements;\n    unordered_set<int> pairs;\n    for (int i = 0; i < n; i++) {\n        if (elements.find(arr[i] + k) != elements.end()) {\n            pairs.insert(arr[i]);\n        }\n        if (elements.find(arr[i] - k) != elements.end()) {\n            pairs.insert(arr[i] - k);\n        }\n        elements.insert(arr[i]);\n    }\n    return pairs.size();\n}", "unique_id": "MBCPP_183_6", "index": 1675}
{"task_id": "MBCPP/184", "completion": "    for (int val : list) {\n        if (val > num) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_184_6", "index": 1685}
{"task_id": "MBCPP/185", "completion": "    double x = -b / (2.0 * a);\n    double y = (4 * a * c - b * b + 1) / (4.0 * a);\n    return {x, y};\n}", "unique_id": "MBCPP_185_5", "index": 1694}
{"task_id": "MBCPP/186", "completion": "    for (const auto& pattern : patterns) {\n        if (regex_search(text, regex(pattern))) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "unique_id": "MBCPP_186_2", "index": 1701}
{"task_id": "MBCPP/187", "completion": "    vector<vector<int>> dp(m + 1, n + 1, 0);\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (x[i - 1] == y[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    \n    return dp[m][n];\n}", "unique_id": "MBCPP_187_3", "index": 1712}
{"task_id": "MBCPP/188", "completion": "    for (int i = 0; i * i <= n; ++i) {\n        for (int j = 0; j * j <= n; ++j) {\n            if (i * i * j * j == n) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_188_4", "index": 1723}
{"task_id": "MBCPP/189", "completion": "    for (int i = 0; i < n; i++) {\n        while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {\n            swap(arr[i], arr[arr[i] - 1]);\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}", "unique_id": "MBCPP_189_10", "index": 1739}
{"task_id": "MBCPP/190", "completion": "    int count = 0;\n    for (int i = min(x1, x2); i <= max(x1, x2); ++i) {\n        for (int j = min(y1, y2); j <= max(y1, y2); ++j) {\n            if (i > min(x1, x2) && i < max(x1, x2) && j > min(y1, y2) && j < max(y1, y2)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_190_7", "index": 1746}
{"task_id": "MBCPP/191", "completion": "    unordered_set<string> months_with_30_days = {\"April\", \"June\", \"September\", \"November\"};\n    return months_with_30_days.find(monthname3) != months_with_30_days.end();\n}", "unique_id": "MBCPP_191_4", "index": 1753}
{"task_id": "MBCPP/192", "completion": "    bool hasLetter = false, hasNumber = false;\n    for (char c : str) {\n        if (isalpha(c))\n            hasLetter = true;\n        if (isdigit(c))\n            hasNumber = true;\n        if (hasLetter && hasNumber)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_192_8", "index": 1767}
{"task_id": "MBCPP/193", "completion": "    set<int> unique_elements(testTup.begin(), testTup.end());\n    return vector<int>(unique_elements.begin(), unique_elements.end());\n}", "unique_id": "MBCPP_193_10", "index": 1779}
{"task_id": "MBCPP/194", "completion": "    int decimalNumber = 0, base = 1;\n    while (n > 0) {\n        int lastDigit = n % 10;\n        n = n / 10;\n        decimalNumber += lastDigit * base;\n        base = base * 8;\n    }\n    return decimalNumber;\n}", "unique_id": "MBCPP_194_4", "index": 1783}
{"task_id": "MBCPP/195", "completion": "    int low = 0, high = n - 1;\n    int result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            high = mid - 1; // Move to the left part\n        } else if (arr[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_195_8", "index": 1797}
{"task_id": "MBCPP/196", "completion": "    vector<vector<int>> result;\n    for (const auto& tuple : testList) {\n        if (tuple.size() != k) {\n            result.push_back(tuple);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_196_5", "index": 1804}
{"task_id": "MBCPP/197", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(pow(testTup1[i], testTup2[i]));\n    }\n    return result;\n}", "unique_id": "MBCPP_197_4", "index": 1813}
{"task_id": "MBCPP/198", "completion": "    return 3 * sqrt(3) / 2 * a * b;\n}", "unique_id": "MBCPP_198_9", "index": 1828}
{"task_id": "MBCPP/199", "completion": "    if (n < 1) return 0;\n    int res = 1;\n    while (res <= n) {\n        res <<= 1;\n    }\n    return res >> 1;\n}", "unique_id": "MBCPP_199_1", "index": 1830}
{"task_id": "MBCPP/200", "completion": "    vector<int> positions;\n    if (list1.empty()) return positions;\n\n    int maxVal = *max_element(list1.begin(), list1.end());\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == maxVal) {\n            positions.push_back(i);\n        }\n    }\n    return positions;\n}", "unique_id": "MBCPP_200_5", "index": 1844}
{"task_id": "MBCPP/201", "completion": "    if (lst.empty()) return true;\n    for (const auto& item : lst) {\n        if (item != lst[0]) return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_201_6", "index": 1855}
{"task_id": "MBCPP/202", "completion": "    string result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 == 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_202_5", "index": 1864}
{"task_id": "MBCPP/203", "completion": "    int x = n1 ^ n2;\n    int distance = 0;\n    while (x > 0) {\n        distance += x & 1;\n        x >>= 1;\n    }\n    return distance;\n}", "unique_id": "MBCPP_203_8", "index": 1877}
{"task_id": "MBCPP/204", "completion": "    return count(s.begin(), s.end(), c[0]);\n}", "unique_id": "MBCPP_204_6", "index": 1885}
{"task_id": "MBCPP/205", "completion": "    vector<int> result;\n    for (int i = 0; i < testTup.size(); ++i) {\n        result.push_back(-(testTup[i] + 1));\n    }\n    return result;\n}", "unique_id": "MBCPP_205_8", "index": 1897}
{"task_id": "MBCPP/206", "completion": "    vector<string> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i+1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_206_3", "index": 1902}
{"task_id": "MBCPP/207", "completion": "    int n = str.size();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    \n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[n][n];\n}", "unique_id": "MBCPP_207_10", "index": 1919}
{"task_id": "MBCPP/208", "completion": "    regex decimal_regex(\"^[0-9]+\\\\.[0-9]{2}$\");\n    return regex_match(num, decimal_regex);\n}", "unique_id": "MBCPP_208_9", "index": 1928}
{"task_id": "MBCPP/209", "completion": "    make_heap(heap.begin(), heap.end(), greater<int>());\n    pop_heap(heap.begin(), heap.end(), greater<int>());\n    heap.back() = a;\n    push_heap(heap.begin(), heap.end(), greater<int>());\n    return heap;\n}", "unique_id": "MBCPP_209_3", "index": 1932}
{"task_id": "MBCPP/210", "completion": "    regex pattern(\"^[a-zA-Z0-9]+$\");\n    return regex_match(str, pattern);\n}", "unique_id": "MBCPP_210_7", "index": 1946}
{"task_id": "MBCPP/211", "completion": "    int count = 0;\n    for (int i = 1; i < (1 << (n + 1)); i++) {\n        if ((i & 1) && (i & (1 << n))) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_211_5", "index": 1954}
{"task_id": "MBCPP/212", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i * i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_212_1", "index": 1960}
{"task_id": "MBCPP/213", "completion": "    vector<string> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] + testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_213_2", "index": 1971}
{"task_id": "MBCPP/214", "completion": "    return radian * (180.0 / M_PI);\n}", "unique_id": "MBCPP_214_5", "index": 1984}
{"task_id": "MBCPP/217", "completion": "    unordered_set<char> seen;\n    for (char c : str) {\n        if (seen.count(c))\n            return string(1, c);\n        seen.insert(c);\n    }\n    return string(1, '\\0');\n}", "unique_id": "MBCPP_217_1", "index": 1990}
{"task_id": "MBCPP/218", "completion": "    return abs(a - b);\n}", "unique_id": "MBCPP_218_6", "index": 2005}
{"task_id": "MBCPP/219", "completion": "    sort(testTup.begin(), testTup.end());\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(testTup[i]);\n    }\n    for (int i = testTup.size() - k; i < testTup.size(); i++) {\n        result.push_back(testTup[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_219_9", "index": 2018}
{"task_id": "MBCPP/220", "completion": "    int count = 0;\n    for (int i = 0; i < text.size() && count < n; ++i) {\n        if (text[i] == ' ' || text[i] == ',' || text[i] == '.') {\n            text[i] = ':';\n            count++;\n        }\n    }\n    return text;\n}", "unique_id": "MBCPP_220_8", "index": 2027}
{"task_id": "MBCPP/221", "completion": "    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1; // If no even number is found\n}", "unique_id": "MBCPP_221_9", "index": 2038}
{"task_id": "MBCPP/222", "completion": "    return true;\n}", "unique_id": "MBCPP_222_6", "index": 2045}
{"task_id": "MBCPP/223", "completion": "    int first_index = lower_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int last_index = upper_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int count = last_index - first_index;\n    return count > n / 2;\n}", "unique_id": "MBCPP_223_5", "index": 2054}
{"task_id": "MBCPP/224", "completion": "    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_224_9", "index": 2068}
{"task_id": "MBCPP/225", "completion": "    if (high < low) \n        return arr[0];\n    if (high == low) \n        return arr[low];\n\n    int mid = low + (high - low) / 2;\n\n    if (mid < high && arr[mid + 1] < arr[mid])\n        return arr[mid + 1];\n    if (mid > low && arr[mid] < arr[mid - 1])\n        return arr[mid];\n\n    if (arr[high] > arr[mid])\n        return findMin(arr, low, mid - 1);\n    return findMin(arr, mid + 1, high);\n}", "unique_id": "MBCPP_225_6", "index": 2075}
{"task_id": "MBCPP/226", "completion": "    string result;\n    for (int i = 0; i < str.length(); i += 2) {\n        result += str[i];\n    }\n    return result;\n}", "unique_id": "MBCPP_226_1", "index": 2080}
{"task_id": "MBCPP/227", "completion": "    return min(a, min(b, c));\n}", "unique_id": "MBCPP_227_4", "index": 2093}
{"task_id": "MBCPP/228", "completion": "    int mask = ((1 << (r - l + 1)) - 1) << (l - 1);\n    return (n & mask) == 0;\n}", "unique_id": "MBCPP_228_1", "index": 2100}
{"task_id": "MBCPP/229", "completion": "    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            if (i != j)\n                swap(arr[i], arr[j]);\n            j++;\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_229_5", "index": 2114}
{"task_id": "MBCPP/230", "completion": "    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1.replace(i, 1, chr);\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_230_1", "index": 2120}
{"task_id": "MBCPP/231", "completion": "    for (int i = n - 2; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n        }\n    }\n    return tri[0][0];\n}", "unique_id": "MBCPP_231_10", "index": 2139}
{"task_id": "MBCPP/232", "completion": "    sort(list1.rbegin(), list1.rend());\n    return vector<int>(list1.begin(), list1.begin() + n);\n}", "unique_id": "MBCPP_232_10", "index": 2149}
{"task_id": "MBCPP/233", "completion": "    return 2 * M_PI * r * h;\n}", "unique_id": "MBCPP_233_5", "index": 2154}
{"task_id": "MBCPP/234", "completion": "    return l * l * l;\n}", "unique_id": "MBCPP_234_7", "index": 2166}
{"task_id": "MBCPP/235", "completion": "    for(int i = 0; i < 32; i += 2) {\n        n |= (1 << i);\n    }\n    return n;\n}", "unique_id": "MBCPP_235_9", "index": 2178}
{"task_id": "MBCPP/236", "completion": "    if (k > n) \n        return -1;\n    return (n*(n+1)/2) - ((n-k)*(n-k+1)/2);\n}", "unique_id": "MBCPP_236_2", "index": 2181}
{"task_id": "MBCPP/238", "completion": "    int n = str.length();\n    return n * (n + 1) / 2;\n}", "unique_id": "MBCPP_238_4", "index": 2193}
{"task_id": "MBCPP/239", "completion": "    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n    for (int j = 1; j <= m; ++j) {\n        dp[1][j] = 1;\n    }\n    for (int len = 2; len <= n; ++len) {\n        for (int j = 1; j <= m; ++j) {\n            for (int k = 1; k <= j / 2; ++k) {\n                dp[len][j] += dp[len - 1][k];\n            }\n        }\n    }\n    int total = 0;\n    for (int j = 1; j <= m; ++j) {\n        total += dp[n][j];\n    }\n    return total;\n}", "unique_id": "MBCPP_239_1", "index": 2200}
{"task_id": "MBCPP/241", "completion": "    return vector<vector<vector<string>>>(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n}", "unique_id": "MBCPP_241_5", "index": 2214}
{"task_id": "MBCPP/242", "completion": "    return str1.length();\n}", "unique_id": "MBCPP_242_4", "index": 2223}
{"task_id": "MBCPP/244", "completion": "    int root = sqrt(n);\n    if (root * root == n) {\n        root++;\n    }\n    return (root + 1) * (root + 1);\n}", "unique_id": "MBCPP_244_5", "index": 2234}
{"task_id": "MBCPP/245", "completion": "    vector<int> inc(n);\n    vector<int> dec(n);\n    \n    for (int i = 0; i < n; i++) {\n        inc[i] = arr[i];\n        dec[i] = arr[i];\n    }\n    \n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    \n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    \n    int max_sum = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    \n    return max_sum;\n}", "unique_id": "MBCPP_245_10", "index": 2249}
{"task_id": "MBCPP/246", "completion": "    double x = number;\n    double y = 1.0;\n    double e = 0.000001; // e decides the accuracy level\n    \n    while (x - y > e) {\n        x = (x + y) / 2;\n        y = number / x;\n    }\n    \n    return x;\n}", "unique_id": "MBCPP_246_9", "index": 2258}
{"task_id": "MBCPP/247", "completion": "    int n = str.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    \n    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    \n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                dp[i][j] = 2;\n            else if (str[i] == str[j])\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n    \n    return dp[0][n - 1];\n}", "unique_id": "MBCPP_247_5", "index": 2264}
{"task_id": "MBCPP/248", "completion": "    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_248_3", "index": 2272}
{"task_id": "MBCPP/249", "completion": "    vector<int> result;\n    unordered_set<int> set1(arrayNums1.begin(), arrayNums1.end());\n    copy_if(arrayNums2.begin(), arrayNums2.end(), back_inserter(result),\n            [&set1](int num) { return set1.find(num) != set1.end(); });\n    return result;\n}", "unique_id": "MBCPP_249_6", "index": 2285}
{"task_id": "MBCPP/250", "completion": "    return count(tup.begin(), tup.end(), x);\n}", "unique_id": "MBCPP_250_5", "index": 2294}
{"task_id": "MBCPP/251", "completion": "    vector<string> result;\n    for (const auto& item : list) {\n        result.push_back(element);\n        result.push_back(item);\n    }\n    return result;\n}", "unique_id": "MBCPP_251_3", "index": 2302}
{"task_id": "MBCPP/252", "completion": "    vector<double> result(2);\n    result[0] = static_cast<double>(numbers);\n    result[1] = 0.0;\n    return result;\n}", "unique_id": "MBCPP_252_10", "index": 2319}
{"task_id": "MBCPP/253", "completion": "    return list1.size();\n}", "unique_id": "MBCPP_253_5", "index": 2324}
{"task_id": "MBCPP/254", "completion": "    vector<string> result;\n    stringstream ss(text);\n    string word;\n    while (ss >> word) {\n        if (word[0] == 'a' || word[0] == 'e') {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_254_3", "index": 2332}
{"task_id": "MBCPP/255", "completion": "    vector<vector<string>> result;\n    vector<string> combination(n);\n\n    function<void(int, int)> generate = [&](int start, int depth) {\n        if (depth == n) {\n            result.push_back(combination);\n            return;\n        }\n        for (int i = start; i < l.size(); ++i) {\n            combination[depth] = l[i];\n            generate(i, depth + 1);\n        }\n    };\n\n    generate(0, 0);\n    return result;\n}", "unique_id": "MBCPP_255_3", "index": 2342}
{"task_id": "MBCPP/256", "completion": "    if (n <= 2) return 0;\n    vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n    for (int i = 2; i * i < n; ++i) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    return count(isPrime.begin(), isPrime.end(), true);\n}", "unique_id": "MBCPP_256_7", "index": 2356}
{"task_id": "MBCPP/257", "completion": "    return {b, a};\n}", "unique_id": "MBCPP_257_1", "index": 2360}
{"task_id": "MBCPP/258", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int x) { return x % 2 != 0; });\n}", "unique_id": "MBCPP_258_4", "index": 2373}
{"task_id": "MBCPP/259", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0], testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1], testTup2[i][1]));\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_259_1", "index": 2380}
{"task_id": "MBCPP/260", "completion": "    if (n == 0 || n == 1) \n        return 1;\n    vector<int> ns(n + 1);\n    ns[0] = 1;\n    ns[1] = 1;\n    for (int i = 2; i <= n; ++i) {\n        ns[i] = 2 * ns[i - 1] + ns[i - 2];\n    }\n    return ns[n];\n}", "unique_id": "MBCPP_260_7", "index": 2396}
{"task_id": "MBCPP/261", "completion": "    vector<int> result;\n    for(size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] / testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_261_2", "index": 2401}
{"task_id": "MBCPP/263", "completion": "    unordered_map<string, int> result = d2;\n    for (const auto& pair : d1) {\n        result[pair.first] = pair.second;\n    }\n    return result;\n}", "unique_id": "MBCPP_263_10", "index": 2419}
{"task_id": "MBCPP/264", "completion": "    if (hAge <= 2) {\n        return hAge * 10.5;\n    } else {\n        return 21 + (hAge - 2) * 4;\n    }\n}", "unique_id": "MBCPP_264_1", "index": 2420}
{"task_id": "MBCPP/266", "completion": "    return 4 * l * l;\n}", "unique_id": "MBCPP_266_2", "index": 2431}
{"task_id": "MBCPP/267", "completion": "    int sum = 0;\n    for (int i = 1; i <= 2 * n; i += 2) {\n        sum += i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_267_8", "index": 2447}
{"task_id": "MBCPP/268", "completion": "    return 6 * n * (n - 1) + 1;\n}", "unique_id": "MBCPP_268_9", "index": 2458}
{"task_id": "MBCPP/269", "completion": "    return (int)k[0];\n}", "unique_id": "MBCPP_269_1", "index": 2460}
{"task_id": "MBCPP/270", "completion": "    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_270_6", "index": 2475}
{"task_id": "MBCPP/271", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        int evenNumber = 2 * i;\n        sum += pow(evenNumber, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_271_1", "index": 2480}
{"task_id": "MBCPP/273", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] - testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_273_1", "index": 2490}
{"task_id": "MBCPP/274", "completion": "    int sum = 0;\n    for (int i = 0; i <= n; i += 2) {\n        sum += (1 << (n - i));\n    }\n    return sum;\n}", "unique_id": "MBCPP_274_5", "index": 2504}
{"task_id": "MBCPP/275", "completion": "    queue<int> q;\n    for (int i = 0; i < n; ++i) {\n        q.push(i + 1);\n    }\n    while (q.size() > 1) {\n        for (int i = 1; i < m; ++i) {\n            q.push(q.front());\n            q.pop();\n        }\n        q.pop();\n    }\n    return q.front();\n}", "unique_id": "MBCPP_275_6", "index": 2515}
{"task_id": "MBCPP/276", "completion": "    return M_PI * r * r * h;\n}", "unique_id": "MBCPP_276_2", "index": 2521}
{"task_id": "MBCPP/277", "completion": "    unordered_map<string, int> filtered_dict;\n    for (const auto& entry : dict) {\n        if (entry.second >= n) {\n            filtered_dict[entry.first] = entry.second;\n        }\n    }\n    return filtered_dict;\n}", "unique_id": "MBCPP_277_2", "index": 2531}
{"task_id": "MBCPP/279", "completion": "    return n * (4 * n - 3);\n}", "unique_id": "MBCPP_279_1", "index": 2540}
{"task_id": "MBCPP/281", "completion": "    unordered_set<int> seen;\n    for (int num : testList) {\n        if (seen.count(num)) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_281_2", "index": 2551}
{"task_id": "MBCPP/282", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a - b; });\n    return result;\n}", "unique_id": "MBCPP_282_1", "index": 2560}
{"task_id": "MBCPP/283", "completion": "    vector<int> frequency(10, 0);\n    int num = n;\n\n    while (num > 0) {\n        frequency[num % 10]++;\n        num /= 10;\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (frequency[i] > 0 && frequency[i] > i) {\n            return false;\n        }\n    }\n\n    return true;\n}", "unique_id": "MBCPP_283_4", "index": 2573}
{"task_id": "MBCPP/285", "completion": "    if (regex_match(text, regex(\"ab{2,3}\"))) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_285_1", "index": 2580}
{"task_id": "MBCPP/286", "completion": "    int maxSum = INT_MIN, currentSum = 0;\n    for (int i = 0; i < n * min(k, 2); ++i) {\n        currentSum = max(a[i % n], currentSum + a[i % n]);\n        maxSum = max(maxSum, currentSum);\n    }\n    if (k > 2) {\n        int totalSum = accumulate(a.begin(), a.end(), 0);\n        if (totalSum > 0) {\n            maxSum += (k - 2) * totalSum;\n        }\n    }\n    return maxSum;\n}", "unique_id": "MBCPP_286_3", "index": 2592}
{"task_id": "MBCPP/287", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += (2 * i) * (2 * i);\n    }\n    return sum;\n}", "unique_id": "MBCPP_287_10", "index": 2609}
{"task_id": "MBCPP/288", "completion": "    int count = 0;\n    for (int i = 0; i < n; i++) {\n        bool found = false;\n        for (int j = 1; j < p; j++) {\n            if ((arr[i] * j) % p == 1) {\n                if (j == arr[i]) {\n                    found = true;\n                }\n                break;\n            }\n        }\n        if (found) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_288_5", "index": 2614}
{"task_id": "MBCPP/289", "completion": "    return (n + n / 4 - n / 100 + n / 400) % 7;\n}", "unique_id": "MBCPP_289_7", "index": 2626}
{"task_id": "MBCPP/291", "completion": "    if (n == 0) return 0;\n    if (n == 1) return k;\n\n    int same = k;\n    int diff = k * (k - 1);\n\n    for (int i = 3; i <= n; i++) {\n        int temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n\n    return same + diff;\n}", "unique_id": "MBCPP_291_6", "index": 2635}
{"task_id": "MBCPP/292", "completion": "    return n / m;\n}", "unique_id": "MBCPP_292_2", "index": 2641}
{"task_id": "MBCPP/295", "completion": "    int sum = 0;\n    for (int i = 1; i <= number / 2; ++i) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_295_2", "index": 2651}
{"task_id": "MBCPP/296", "completion": "    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++)\n        for (int j = i + 1; j < n; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n\n    return inv_count;\n}", "unique_id": "MBCPP_296_7", "index": 2666}
{"task_id": "MBCPP/297", "completion": "    vector<int> result;\n    for (const auto& sublist : list1) {\n        result.insert(result.end(), sublist.begin(), sublist.end());\n    }\n    return result;\n}", "unique_id": "MBCPP_297_10", "index": 2679}
{"task_id": "MBCPP/300", "completion": "    double result = 1.0;\n    for (int i = 0; i < n; ++i) {\n        result *= (n + i + 1) / double(i + 1);\n    }\n    result /= (n + 1);\n    return result;\n}", "unique_id": "MBCPP_300_1", "index": 2680}
{"task_id": "MBCPP/302", "completion": "    if (n == 0)\n        return 0;\n    int msb = 0;\n    while (n != 0) {\n        n = n >> 1;\n        msb++;\n    }\n    return 1 << (msb - 1);\n}", "unique_id": "MBCPP_302_2", "index": 2691}
{"task_id": "MBCPP/303", "completion": "    int type1 = 0, type2 = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            if (a[i] > a[j])\n                type1++;\n            if (a[i] < a[j])\n                type2++;\n        }\n    }\n    return type1 == type2;\n}", "unique_id": "MBCPP_303_5", "index": 2704}
{"task_id": "MBCPP/304", "completion": "    for (int i = rotations - 1; i >= 0; i--) {\n        int start = ranges[i][0];\n        int end = ranges[i][1];\n        if (index >= start && index <= end) {\n            if (index == start) {\n                index = end;\n            } else {\n                index--;\n            }\n        }\n    }\n    return arr[index];\n}", "unique_id": "MBCPP_304_6", "index": 2715}
{"task_id": "MBCPP/305", "completion": "    vector<string> result;\n    for (const string& word : words) {\n        istringstream iss(word);\n        string token;\n        while (iss >> token) {\n            if (token[0] == 'p' || token[0] == 'P') {\n                result.push_back(token);\n                if (result.size() == 2) {\n                    return result;\n                }\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_305_1", "index": 2720}
{"task_id": "MBCPP/306", "completion": "    vector<int> dp(n, 0);\n    dp[0] = a[0];\n\n    for (int i = 1; i <= index; ++i) {\n        dp[i] = a[i];\n        for (int j = 0; j < i; ++j) {\n            if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                dp[i] = dp[j] + a[i];\n            }\n        }\n    }\n\n    int max_sum = 0;\n    for (int i = 0; i <= index; ++i) {\n        if (a[k] > a[i] && max_sum < dp[i] + a[k]) {\n            max_sum = dp[i] + a[k];\n        }\n    }\n\n    return max_sum;\n}", "unique_id": "MBCPP_306_1", "index": 2730}
{"task_id": "MBCPP/308", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num1 : nums1) {\n        for (int num2 : nums2) {\n            int product = num1 * num2;\n            if (minHeap.size() < n) {\n                minHeap.push(product);\n            } else if (product > minHeap.top()) {\n                minHeap.pop();\n                minHeap.push(product);\n            }\n        }\n    }\n    vector<int> result;\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    sort(result.rbegin(), result.rend());\n    return result;\n}", "unique_id": "MBCPP_308_5", "index": 2744}
{"task_id": "MBCPP/309", "completion": "    return (a > b) ? a : b;\n}", "unique_id": "MBCPP_309_9", "index": 2758}
{"task_id": "MBCPP/310", "completion": "    vector<string> result;\n    for (char c : str1) {\n        result.push_back(string(1, c));\n    }\n    return result;\n}", "unique_id": "MBCPP_310_5", "index": 2764}
{"task_id": "MBCPP/311", "completion": "    if ((n & (n + 1)) == 0)\n        return n;\n    int position = 1;\n    while (n & (1 << (position - 1)))\n        position++;\n    return n | (1 << (position - 1));\n}", "unique_id": "MBCPP_311_5", "index": 2774}
{"task_id": "MBCPP/312", "completion": "    return (M_PI * r * r * h) / 3;\n}", "unique_id": "MBCPP_312_5", "index": 2784}
{"task_id": "MBCPP/314", "completion": "    vector<int> dp(n + 1, 0);\n    dp[1] = max(grid[0][0], grid[1][0]);\n\n    for (int i = 2; i <= n; ++i) {\n        int current_max = max(grid[0][i-1], grid[1][i-1]);\n        dp[i] = max(dp[i-1], dp[i-2] + current_max);\n    }\n\n    return dp[n];\n}", "unique_id": "MBCPP_314_1", "index": 2790}
{"task_id": "MBCPP/315", "completion": "    istringstream iss(str);\n    string word, maxEvenWord = \"-1\";\n    int maxLen = 0;\n\n    while (iss >> word) {\n        if (word.length() % 2 == 0 && word.length() > maxLen) {\n            maxLen = word.length();\n            maxEvenWord = word;\n        }\n    }\n\n    return maxEvenWord;\n}", "unique_id": "MBCPP_315_2", "index": 2801}
{"task_id": "MBCPP/316", "completion": "    int left = 0, right = a.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            left = mid + 1;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_316_4", "index": 2813}
{"task_id": "MBCPP/318", "completion": "    if (s < 6) return 0;\n    int a = s / 3;\n    int b = (s - a) / 2;\n    int c = s - a - b;\n    return a * b * c;\n}", "unique_id": "MBCPP_318_2", "index": 2821}
{"task_id": "MBCPP/319", "completion": "    vector<string> result;\n    regex word_regex(\"\\\\b\\\\w{5}\\\\b\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n\n    for (auto it = words_begin; it != words_end; ++it) {\n        result.push_back(it->str());\n    }\n\n    return result;\n}", "unique_id": "MBCPP_319_1", "index": 2830}
{"task_id": "MBCPP/320", "completion": "    int sum_of_squares = 0;\n    int square_of_sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum_of_squares += i * i;\n        square_of_sum += i;\n    }\n    square_of_sum = square_of_sum * square_of_sum;\n    return square_of_sum - sum_of_squares;\n}", "unique_id": "MBCPP_320_5", "index": 2844}
{"task_id": "MBCPP/321", "completion": "    int n = s.size();\n    string result;\n    \n    for (int i = 1; i <= n; ++i) {\n        result += to_string(i);\n    }\n    for (int i = n - 1; i >= 1; --i) {\n        result += to_string(i);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_321_10", "index": 2859}
{"task_id": "MBCPP/322", "completion": "    vector<int> positions;\n    if (list1.empty()) \n        return positions;\n    int minVal = *min_element(list1.begin(), list1.end());\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == minVal) {\n            positions.push_back(i);\n        }\n    }\n    return positions;\n}", "unique_id": "MBCPP_322_3", "index": 2862}
{"task_id": "MBCPP/323", "completion": "    vector<int> pos, neg;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] >= 0) pos.push_back(arr[i]);\n        else neg.push_back(arr[i]);\n    }\n    vector<int> result;\n    int i = 0, j = 0;\n    while (i < pos.size() && j < neg.size()) {\n        result.push_back(neg[j++]);\n        result.push_back(pos[i++]);\n    }\n    while (i < pos.size()) result.push_back(pos[i++]);\n    while (j < neg.size()) result.push_back(neg[j++]);\n    return result;\n}", "unique_id": "MBCPP_323_9", "index": 2878}
{"task_id": "MBCPP/324", "completion": "    int sum1 = 0, sum2 = 0;\n    for (int i = 0; i < testTuple.size(); i++) {\n        if (i % 2 == 0) {\n            sum1 += testTuple[i];\n        } else {\n            sum2 += testTuple[i];\n        }\n    }\n    return {sum1, sum2};\n}", "unique_id": "MBCPP_324_6", "index": 2885}
{"task_id": "MBCPP/325", "completion": "    if(n <= 3)\n        return n;\n    int dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n    for(int i = 4; i <= n; i++) {\n        dp[i] = i;\n        for(int x = 1; x <= ceil(sqrt(i)); x++) {\n            int temp = x*x;\n            if(temp > i)\n                break;\n            else\n                dp[i] = min(dp[i], 1 + dp[i - temp]);\n        }\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_325_10", "index": 2899}
{"task_id": "MBCPP/326", "completion": "    unordered_map<string, int> wordCount;\n    for (const string& sentence : testList) {\n        istringstream stream(sentence);\n        string word;\n        while (stream >> word) {\n            wordCount[word]++;\n        }\n    }\n    \n    string mostFrequentWord;\n    int maxCount = 0;\n    for (const auto& pair : wordCount) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            mostFrequentWord = pair.first;\n        }\n    }\n    \n    return mostFrequentWord;\n}", "unique_id": "MBCPP_326_2", "index": 2901}
{"task_id": "MBCPP/327", "completion": "    return (x == y || y == z || x == z);\n}", "unique_id": "MBCPP_327_5", "index": 2914}
{"task_id": "MBCPP/328", "completion": "    vector<int> result;\n    int len = list1.size();\n    for (int i = 0; i < m; i++) {\n        int index = (i + n) % len;\n        result.push_back(list1[index]);\n    }\n    for (int i = m; i < len; i++) {\n        result.push_back(list1[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_328_2", "index": 2921}
{"task_id": "MBCPP/329", "completion": "    int count = 0;\n    for (int num : list) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_329_10", "index": 2939}
{"task_id": "MBCPP/330", "completion": "    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{3,5}\\\\b\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), pattern);\n    auto words_end = sregex_iterator();\n    \n    for (auto it = words_begin; it != words_end; ++it) {\n        result.push_back(it->str());\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_330_3", "index": 2942}
{"task_id": "MBCPP/331", "completion": "    int count = 0;\n    while (n > 0) {\n        if ((n & 1) == 0) {\n            count++;\n        }\n        n >>= 1;\n    }\n    return count;\n}", "unique_id": "MBCPP_331_5", "index": 2954}
{"task_id": "MBCPP/332", "completion": "    unordered_map<string, int> frequency;\n    for (char c : str1) {\n        string s(1, c);\n        frequency[s]++;\n    }\n    return frequency;\n}", "unique_id": "MBCPP_332_3", "index": 2962}
{"task_id": "MBCPP/334", "completion": "    if (a + b > c && a + c > b && b + c > a)\n        return true;\n    else\n        return false;\n}", "unique_id": "MBCPP_334_8", "index": 2977}
{"task_id": "MBCPP/335", "completion": "    return n / 2.0 * (2 * a + (n - 1) * d);\n}", "unique_id": "MBCPP_335_1", "index": 2980}
{"task_id": "MBCPP/336", "completion": "    return monthname1 == \"February\";\n}", "unique_id": "MBCPP_336_4", "index": 2993}
{"task_id": "MBCPP/337", "completion": "    regex pattern(R\"(\\bpython\\b[[:punct:]]*$)\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_337_6", "index": 3005}
{"task_id": "MBCPP/338", "completion": "    int n = s.length();\n    int count = 0;\n    vector<int> freq(26, 0);\n    \n    for (int i = 0; i < n; ++i) {\n        freq[s[i] - 'a']++;\n    }\n\n    for (int i = 0; i < 26; ++i) {\n        if (freq[i] > 0) {\n            count += (freq[i] * (freq[i] + 1)) / 2;\n        }\n    }\n\n    return count;\n}", "unique_id": "MBCPP_338_7", "index": 3016}
{"task_id": "MBCPP/339", "completion": "    vector<int> divisorCount(y + 1, 0);\n\n    for (int i = x; i <= y; ++i) {\n        for (int j = 1; j <= sqrt(i); ++j) {\n            if (i % j == 0) {\n                divisorCount[j]++;\n                if (j != i / j) {\n                    divisorCount[i / j]++;\n                }\n            }\n        }\n    }\n\n    int maxCount = 0;\n    int maxDivisor = 1;\n    \n    for (int i = 1; i <= y; ++i) {\n        if (divisorCount[i] > maxCount) {\n            maxCount = divisorCount[i];\n            maxDivisor = i;\n        }\n    }\n\n    return maxDivisor;\n}", "unique_id": "MBCPP_339_5", "index": 3024}
{"task_id": "MBCPP/340", "completion": "    sort(lst.begin(), lst.end());\n    int count = 0;\n    int sum = 0;\n    for (int num : lst) {\n        if (num > 0) {\n            sum += num;\n            count++;\n            if (count == 3) {\n                break;\n            }\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_340_5", "index": 3034}
{"task_id": "MBCPP/341", "completion": "    vector<int> result(s.begin(), s.end());\n    return result;\n}", "unique_id": "MBCPP_341_10", "index": 3049}
{"task_id": "MBCPP/342", "completion": "    int n = list.size();\n    vector<int> ptr(n, 0);\n    auto compare = [&](const pair<int, int>& a, const pair<int, int>& b) {\n        return list[a.first][a.second] > list[b.first][b.second];\n    };\n    \n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(compare)> minHeap(compare);\n    int maxVal = INT_MIN;\n    \n    for (int i = 0; i < n; ++i) {\n        minHeap.push({i, 0});\n        maxVal = max(maxVal, list[i][0]);\n    }\n    \n    int start = 0, end = INT_MAX;\n    while (true) {\n        auto [row, col] = minHeap.top();\n        minHeap.pop();\n        int minVal = list[row][col];\n        \n        if (maxVal - minVal < end - start) {\n            start = minVal;\n            end = maxVal;\n        }\n        \n        if (col + 1 < list[row].size()) {\n            minHeap.push({row, col + 1});\n            maxVal = max(maxVal, list[row][col + 1]);\n        } else {\n            break;\n        }\n    }\n    \n    return {start, end};\n}", "unique_id": "MBCPP_342_8", "index": 3057}
{"task_id": "MBCPP/343", "completion": "    int letters = 0, digits = 0;\n    for (char c : s) {\n        if (isalpha(c))\n            letters++;\n        else if (isdigit(c))\n            digits++;\n    }\n    return {letters, digits};\n}", "unique_id": "MBCPP_343_3", "index": 3062}
{"task_id": "MBCPP/344", "completion": "    int count = 0;\n    for (int i = ceil(sqrt(n)); i * i <= m; i++) {\n        if ((i * i) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_344_9", "index": 3078}
{"task_id": "MBCPP/345", "completion": "    vector<int> result;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        result.push_back(nums[i] - nums[i - 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_345_10", "index": 3089}
{"task_id": "MBCPP/346", "completion": "    if (n == 0 && k == 0)\n        return 1;\n    if (k == 0)\n        return zigzag(n - 1, 0);\n    return zigzag(n - 1, k - 1) + zigzag(n - 1, k);\n}", "unique_id": "MBCPP_346_7", "index": 3096}
{"task_id": "MBCPP/347", "completion": "    int count = 0;\n    for (int i = 1; i <= min(m, n); ++i) {\n        count += (m - i + 1) * (n - i + 1);\n    }\n    return count;\n}", "unique_id": "MBCPP_347_6", "index": 3105}
{"task_id": "MBCPP/348", "completion": "    vector<vector<int>> dp(m + 1, vector<int>(m + 1, 0));\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= m; ++i) {\n        for (int j = 0; j <= m; ++j) {\n            if (j > 0) dp[i][j] += dp[i - 1][j - 1];\n            if (j < m) dp[i][j] += dp[i - 1][j + 1];\n        }\n    }\n    \n    return dp[m][0];\n}", "unique_id": "MBCPP_348_3", "index": 3112}
{"task_id": "MBCPP/349", "completion": "    for (char c : str) {\n        if (c != '0' && c != '1') {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}", "unique_id": "MBCPP_349_10", "index": 3129}
{"task_id": "MBCPP/350", "completion": "    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    }\n    int max_freq = 0;\n    for (auto& entry : freq) {\n        max_freq = max(max_freq, entry.second);\n    }\n    return s.length() - max_freq;\n}", "unique_id": "MBCPP_350_3", "index": 3132}
{"task_id": "MBCPP/351", "completion": "    unordered_map<int, int> freq;\n    for (int i = 0; i < n; ++i) {\n        freq[arr[i]]++;\n        if (freq[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_351_9", "index": 3148}
{"task_id": "MBCPP/352", "completion": "    unordered_set<char> charSet;\n    for (char c : str) {\n        if (charSet.find(c) != charSet.end()) {\n            return false;\n        }\n        charSet.insert(c);\n    }\n    return true;\n}", "unique_id": "MBCPP_352_4", "index": 3153}
{"task_id": "MBCPP/353", "completion": "    for (auto& row : list1) {\n        if (n < row.size()) {\n            row.erase(row.begin() + n);\n        }\n    }\n    return list1;\n}", "unique_id": "MBCPP_353_4", "index": 3163}
{"task_id": "MBCPP/354", "completion": "    return a + (n - 1) * d;\n}", "unique_id": "MBCPP_354_5", "index": 3174}
{"task_id": "MBCPP/355", "completion": "    int count = 0;\n    for (int x1 = -radius; x1 <= radius; ++x1) {\n        for (int y1 = -radius; y1 <= radius; ++y1) {\n            for (int x2 = x1 + 1; x2 <= radius; ++x2) {\n                for (int y2 = y1 + 1; y2 <= radius; ++y2) {\n                    if (x1 * x1 + y1 * y1 <= radius * radius && x2 * x2 + y2 * y2 <= radius * radius) {\n                        ++count;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_355_9", "index": 3188}
{"task_id": "MBCPP/356", "completion": "    return 180 - (a + b);\n}", "unique_id": "MBCPP_356_5", "index": 3194}
{"task_id": "MBCPP/357", "completion": "    int maxElement = INT_MAX;\n    for (const auto& tuple : testList) {\n        for (int num : tuple) {\n            if (num > maxElement) {\n                maxElement = num;\n            }\n        }\n    }\n    return maxElement;\n}", "unique_id": "MBCPP_357_1", "index": 3200}
{"task_id": "MBCPP/358", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a % b; });\n    return result;\n}", "unique_id": "MBCPP_358_8", "index": 3217}
{"task_id": "MBCPP/359", "completion": "    int discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) return \"No\";\n    \n    double root1 = (-b + sqrt(discriminant)) / (2 * a);\n    double root2 = (-b - sqrt(discriminant)) / (2 * a);\n    \n    if (root1 == 2 * root2 || root2 == 2 * root1) return \"Yes\";\n    else return \"No\";\n}", "unique_id": "MBCPP_359_2", "index": 3221}
{"task_id": "MBCPP/360", "completion": "    return (1 << (2 * n)) - (1 << (n + 1)) - 1;\n}", "unique_id": "MBCPP_360_1", "index": 3230}
{"task_id": "MBCPP/363", "completion": "    for (auto& row : testList) {\n        for (auto& elem : row) {\n            elem += k;\n        }\n    }\n    return testList;\n}", "unique_id": "MBCPP_363_4", "index": 3243}
{"task_id": "MBCPP/364", "completion": "    int flip1 = 0, flip2 = 0;\n    for (int i = 0; i < str.length(); i++) {\n        // expected character at even index is '0' and at odd index is '1'\n        if (i % 2 == 0) {\n            if (str[i] != '0') flip1++;\n        } else {\n            if (str[i] != '1') flip1++;\n        }\n        // expected character at even index is '1' and at odd index is '0'\n        if (i % 2 == 0) {\n            if (str[i] != '1') flip2++;\n        } else {\n            if (str[i] != '0') flip2++;\n        }\n    }\n    return min(flip1, flip2);\n}", "unique_id": "MBCPP_364_4", "index": 3253}
{"task_id": "MBCPP/365", "completion": "    return n == 0 ? 0 : floor(log10(abs(n))) + 1;\n}", "unique_id": "MBCPP_365_1", "index": 3260}
{"task_id": "MBCPP/366", "completion": "    if (listNums.size() < 2) return 0;\n    int max_product = listNums[0] * listNums[1];\n    for (size_t i = 1; i < listNums.size() - 1; ++i) {\n        int product = listNums[i] * listNums[i + 1];\n        if (product > max_product) {\n            max_product = product;\n        }\n    }\n    return max_product;\n}", "unique_id": "MBCPP_366_1", "index": 3270}
{"task_id": "MBCPP/368", "completion": "    vector<vector<int>> result(n, testTup);\n    return result;\n}", "unique_id": "MBCPP_368_4", "index": 3283}
{"task_id": "MBCPP/369", "completion": "    return 2 * h * (l + w);\n}", "unique_id": "MBCPP_369_1", "index": 3290}
{"task_id": "MBCPP/370", "completion": "    sort(price.begin(), price.end(), [](const vector<string>& a, const vector<string>& b) {\n        return stof(a[1]) > stof(b[1]);\n    });\n    return price;\n}", "unique_id": "MBCPP_370_9", "index": 3308}
{"task_id": "MBCPP/371", "completion": "    if (leftElement > rightElement)\n        return leftElement;\n\n    int mid = leftElement + (rightElement - leftElement) / 2;\n\n    if (a[mid] == mid)\n        return smallestMissing(a, mid + 1, rightElement);\n    else\n        return smallestMissing(a, leftElement, mid - 1);\n}", "unique_id": "MBCPP_371_10", "index": 3319}
{"task_id": "MBCPP/372", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap(nums.begin(), nums.end());\n    vector<int> sortedList;\n    while (!minHeap.empty()) {\n        sortedList.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedList;\n}", "unique_id": "MBCPP_372_6", "index": 3325}
{"task_id": "MBCPP/373", "completion": "    return l * w * h;\n}", "unique_id": "MBCPP_373_8", "index": 3337}
{"task_id": "MBCPP/374", "completion": "    vector<string> result;\n    sort(str.begin(), str.end());\n    do {\n        result.push_back(str);\n    } while (next_permutation(str.begin(), str.end()));\n    return result;\n}", "unique_id": "MBCPP_374_5", "index": 3344}
{"task_id": "MBCPP/375", "completion": "    return round((double)n / m) * m;\n}", "unique_id": "MBCPP_375_4", "index": 3353}
{"task_id": "MBCPP/377", "completion": "    s.erase(remove(s.begin(), s.end(), c[0]), s.end());\n    return s;\n}", "unique_id": "MBCPP_377_8", "index": 3367}
{"task_id": "MBCPP/378", "completion": "    if (testList.empty()) return testList;\n    int lastElement = testList.back();\n    testList.pop_back();\n    testList.insert(testList.begin(), lastElement);\n    return testList;\n}", "unique_id": "MBCPP_378_6", "index": 3375}
{"task_id": "MBCPP/379", "completion": "    return 2 * (l * w + w * h + h * l);\n}", "unique_id": "MBCPP_379_1", "index": 3380}
{"task_id": "MBCPP/380", "completion": "    vector<vector<int>> result(rownum, vector<int>(colnum));\n    for (int i = 0; i < rownum; ++i) {\n        for (int j = 0; j < colnum; ++j) {\n            result[i][j] = i * j;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_380_6", "index": 3395}
{"task_id": "MBCPP/382", "completion": "    int low = 0, high = a.size() - 1;\n    while (low <= high) {\n        if (a[low] <= a[high]) {\n            return low;\n        }\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % a.size();\n        int prev = (mid - 1 + a.size()) % a.size();\n        if (a[mid] <= a[next] && a[mid] <= a[prev]) {\n            return mid;\n        } else if (a[mid] <= a[high]) {\n            high = mid - 1;\n        } else if (a[mid] >= a[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_382_4", "index": 3403}
{"task_id": "MBCPP/383", "completion": "    int mask = 0;\n    for (int i = 0; i < 32; i += 2) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;\n}", "unique_id": "MBCPP_383_9", "index": 3418}
{"task_id": "MBCPP/384", "completion": "    if (n == 0) return 0;\n    int smallest = *min_element(arr.begin(), arr.end());\n    return count(arr.begin(), arr.end(), smallest);\n}", "unique_id": "MBCPP_384_2", "index": 3421}
{"task_id": "MBCPP/385", "completion": "    if (n == 0) return 3;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    return getPerrin(n - 2) + getPerrin(n - 3);\n}", "unique_id": "MBCPP_385_7", "index": 3436}
{"task_id": "MBCPP/386", "completion": "    int countLeft = 0, countRight = 0, swap = 0, imbalance = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == '[') {\n            countLeft++;\n            if (imbalance > 0) {\n                swap += imbalance;\n                imbalance--;\n            }\n        } else if (s[i] == ']') {\n            countRight++;\n            imbalance = countRight - countLeft;\n        }\n    }\n    return swap;\n}", "unique_id": "MBCPP_386_7", "index": 3446}
{"task_id": "MBCPP/387", "completion": "    char lastDigit = n[n.length() - 1];\n    if (lastDigit == '0' || lastDigit == '2' || lastDigit == '4' || lastDigit == '6' || lastDigit == '8' || \n        lastDigit == 'A' || lastDigit == 'C' || lastDigit == 'E') {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}", "unique_id": "MBCPP_387_7", "index": 3456}
{"task_id": "MBCPP/388", "completion": "    int res = 1;\n    while (res <= n) {\n        res <<= 1;\n    }\n    return res >> 1;\n}", "unique_id": "MBCPP_388_9", "index": 3468}
{"task_id": "MBCPP/389", "completion": "    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    return findLucas(n - 1) + findLucas(n - 2);\n}", "unique_id": "MBCPP_389_10", "index": 3479}
{"task_id": "MBCPP/391", "completion": "    vector<unordered_map<string, unordered_map<string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        result.push_back({{l1[i], {{l2[i], l3[i]}}}});\n    }\n    return result;\n}", "unique_id": "MBCPP_391_3", "index": 3482}
{"task_id": "MBCPP/392", "completion": "    if (n < 12) return n;\n    return max(getMaxSum(n/2) + getMaxSum(n/3) + getMaxSum(n/4) + getMaxSum(n/5), n);\n}", "unique_id": "MBCPP_392_2", "index": 3491}
{"task_id": "MBCPP/394", "completion": "    unordered_set<int> elements;\n    for (int num : testTup) {\n        if (elements.find(num) != elements.end()) {\n            return false;\n        }\n        elements.insert(num);\n    }\n    return true;\n}", "unique_id": "MBCPP_394_6", "index": 3505}
{"task_id": "MBCPP/396", "completion": "    regex pattern(\"^(.).*\\\\1$\");\n    if (regex_match(str, pattern)) {\n        return \"Valid\";\n    }\n    return \"Invalid\";\n}", "unique_id": "MBCPP_396_8", "index": 3517}
{"task_id": "MBCPP/397", "completion": "    if ((a >= b && a <= c) || (a <= b && a >= c))\n        return a;\n    else if ((b >= a && b <= c) || (b <= a && b >= c))\n        return b;\n    else\n        return c;\n}", "unique_id": "MBCPP_397_2", "index": 3521}
{"task_id": "MBCPP/398", "completion": "    int totalSum = 0;\n    for (int num : nums) {\n        num = abs(num);\n        while (num > 0) {\n            totalSum += num % 10;\n            num /= 10;\n        }\n    }\n    return totalSum;\n}", "unique_id": "MBCPP_398_3", "index": 3532}
{"task_id": "MBCPP/399", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] ^ testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_399_1", "index": 3540}
{"task_id": "MBCPP/400", "completion": "    map<set<int>, int> freqMap;\n    for (auto &v : testList) {\n        set<int> s(v.begin(), v.end());\n        freqMap[s]++;\n    }\n    return freqMap.size();\n}", "unique_id": "MBCPP_400_7", "index": 3556}
{"task_id": "MBCPP/401", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] + testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_401_2", "index": 3561}
{"task_id": "MBCPP/402", "completion": "    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n\n    vector<int> C(r + 1, 0);\n    C[0] = 1;\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = min(i, r); j > 0; j--) {\n            C[j] = (C[j] + C[j - 1]) % p;\n        }\n    }\n    return C[r];\n}", "unique_id": "MBCPP_402_5", "index": 3574}
{"task_id": "MBCPP/403", "completion": "    const regex pattern(\"^(https?:\\\\/\\\\/)?\"\n                        \"((([a-zA-Z\\\\d]([a-zA-Z\\\\d-]*[a-zA-Z\\\\d])*)\\\\.)+[a-zA-Z]{2,}|\"\n                        \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\"\n                        \"(\\\\:\\\\d+)?\"\n                        \"(\\\\/[-a-zA-Z\\\\d%_.~+]*)*\"\n                        \"(\\\\?[;&a-zA-Z\\\\d%_.~+=-]*)?\"\n                        \"(\\\\#[-a-zA-Z\\\\d_]*)?$\");\n    return regex_match(str, pattern);\n}", "unique_id": "MBCPP_403_2", "index": 3581}
{"task_id": "MBCPP/404", "completion": "    return (a < b) ? a : b;\n}", "unique_id": "MBCPP_404_10", "index": 3599}
{"task_id": "MBCPP/406", "completion": "    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return (count % 2 == 0) ? \"Even Parity\" : \"Odd Parity\";\n}", "unique_id": "MBCPP_406_4", "index": 3603}
{"task_id": "MBCPP/408", "completion": "    vector<vector<int>> result;\n    if (nums1.empty() || nums2.empty() || k == 0) return result;\n\n    auto comp = [&](pair<int, int>& a, pair<int, int>& b) {\n        return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];\n    };\n\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> minHeap(comp);\n\n    for (int i = 0; i < nums1.size() && i < k; ++i) {\n        minHeap.emplace(i, 0);\n    }\n\n    while (k-- > 0 && !minHeap.empty()) {\n        auto [i, j] = minHeap.top();\n        minHeap.pop();\n        result.push_back({nums1[i], nums2[j]});\n        if (j + 1 < nums2.size()) {\n            minHeap.emplace(i, j + 1);\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_408_5", "index": 3614}
{"task_id": "MBCPP/409", "completion": "    int min_product = INT_MAX;\n    for (const auto& pair : list1) {\n        int product = pair[0] * pair[1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;\n}", "unique_id": "MBCPP_409_7", "index": 3626}
{"task_id": "MBCPP/411", "completion": "    string result;\n    smatch match;\n    regex e(\"(_[a-z])\");\n\n    word[0] = toupper(word[0]);\n    for (int i = 1; i < word.size(); ++i) {\n        if (word[i] == '_') {\n            word[i + 1] = toupper(word[i + 1]);\n        }\n    }\n    word.erase(remove(word.begin(), word.end(), '_'), word.end());\n    return word;\n}", "unique_id": "MBCPP_411_9", "index": 3638}
{"task_id": "MBCPP/412", "completion": "    vector<int> result;\n    for (int num : l) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_412_1", "index": 3640}
{"task_id": "MBCPP/414", "completion": "    unordered_set<int> set1(list1.begin(), list1.end());\n    for (int num : list2) {\n        if (set1.count(num) > 0) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_414_7", "index": 3656}
{"task_id": "MBCPP/415", "completion": "    if (arr.size() < 2)\n        return {};\n\n    int max1 = INT_MIN, max2 = INT_MIN;\n    int min1 = INT_MAX, min2 = INT_MAX;\n\n    for (int num : arr) {\n        if (num > max1) {\n            max2 = max1;\n            max1 = num;\n        } else if (num > max2) {\n            max2 = num;\n        }\n\n        if (num < min1) {\n            min2 = min1;\n            min1 = num;\n        } else if (num < min2) {\n            min2 = num;\n        }\n    }\n\n    if (max1 * max2 > min1 * min2)\n        return {max1, max2};\n    else\n        return {min1, min2};\n}", "unique_id": "MBCPP_415_1", "index": 3660}
{"task_id": "MBCPP/416", "completion": "    if (n < 2)\n        return n;\n    return max(n, breaksum(n / 2) + breaksum(n / 3) + breaksum(n / 4));\n}", "unique_id": "MBCPP_416_6", "index": 3675}
{"task_id": "MBCPP/417", "completion": "    unordered_map<string, vector<string>> groups;\n    for (const auto& tup : input) {\n        if (!tup.empty()) {\n            groups[tup[0]].insert(groups[tup[0]].end(), tup.begin() + 1, tup.end());\n        }\n    }\n    \n    vector<vector<string>> result;\n    for (auto& [key, values] : groups) {\n        vector<string> group = {key};\n        group.insert(group.end(), values.begin(), values.end());\n        result.push_back(group);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_417_7", "index": 3686}
{"task_id": "MBCPP/419", "completion": "    int sum = 0;\n    for (double num : list1) {\n        sum += round(num);\n    }\n    return sum * list1.size();\n}", "unique_id": "MBCPP_419_10", "index": 3699}
{"task_id": "MBCPP/420", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        int evenNumber = 2 * i;\n        sum += evenNumber * evenNumber * evenNumber;\n    }\n    return sum;\n}", "unique_id": "MBCPP_420_7", "index": 3706}
{"task_id": "MBCPP/423", "completion": "    vector<vector<int>> dp(m, vector<int>(n, 0));\n    \n    for (int col = n - 1; col >= 0; col--) {\n        for (int row = 0; row < m; row++) {\n            int right = (col == n - 1) ? 0 : dp[row][col + 1];\n            int right_up = (row == 0 || col == n - 1) ? 0 : dp[row - 1][col + 1];\n            int right_down = (row == m - 1 || col == n - 1) ? 0 : dp[row + 1][col + 1];\n            \n            dp[row][col] = gold[row][col] + max({right, right_up, right_down});\n        }\n    }\n    \n    int maxGold = 0;\n    for (int i = 0; i < m; i++) {\n        maxGold = max(maxGold, dp[i][0]);\n    }\n    \n    return maxGold;\n}", "unique_id": "MBCPP_423_1", "index": 3710}
{"task_id": "MBCPP/424", "completion": "    vector<string> result;\n    for (const auto& str : testTuple) {\n        if (!str.empty()) {\n            result.push_back(string(1, str.back()));\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_424_1", "index": 3720}
{"task_id": "MBCPP/426", "completion": "    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int n) { return n % 2 != 0; });\n    return result;\n}", "unique_id": "MBCPP_426_5", "index": 3734}
{"task_id": "MBCPP/427", "completion": "    regex re(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch match;\n    if (regex_match(dt, match, re)) {\n        return match[3].str() + \"-\" + match[2].str() + \"-\" + match[1].str();\n    }\n    return \"\";\n}", "unique_id": "MBCPP_427_3", "index": 3742}
{"task_id": "MBCPP/428", "completion": "    int n = myList.size();\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int temp = myList[i];\n            int j;\n            for (j = i; j >= gap && myList[j - gap] > temp; j -= gap) {\n                myList[j] = myList[j - gap];\n            }\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}", "unique_id": "MBCPP_428_4", "index": 3753}
{"task_id": "MBCPP/429", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] & testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_429_5", "index": 3764}
{"task_id": "MBCPP/430", "completion": "    return b * b - 4 * a * c;\n}", "unique_id": "MBCPP_430_10", "index": 3779}
{"task_id": "MBCPP/433", "completion": "    for(int i = 0; i < arr.size(); i++) {\n        if(number <= arr[i]) {\n            return \"No, entered number is less than those in the array\";\n        }\n    }\n    return \"Yes, the entered number is greater than those in the array\";\n}", "unique_id": "MBCPP_433_1", "index": 3780}
{"task_id": "MBCPP/434", "completion": "    if (text.length() > 1 && text[0] == 'a' && text[1] == 'b') {\n        for (int i = 2; i < text.length(); i++) {\n            if (text[i] != 'b') {\n                return \"Not matched!\";\n            }\n        }\n        return \"Found a match!\";\n    }\n    return \"Not matched!\";\n}", "unique_id": "MBCPP_434_9", "index": 3798}
{"task_id": "MBCPP/435", "completion": "    return abs(n) % 10;\n}", "unique_id": "MBCPP_435_6", "index": 3805}
{"task_id": "MBCPP/436", "completion": "    vector<int> result;\n    for(int num : list1) {\n        if(num < 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_436_9", "index": 3818}
{"task_id": "MBCPP/437", "completion": "    string result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 != 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_437_8", "index": 3827}
{"task_id": "MBCPP/438", "completion": "    map<pair<int, int>, int> countMap;\n    int bidirectionalPairs = 0;\n\n    for (auto &pair : testList) {\n        int a = pair[0];\n        int b = pair[1];\n        if (countMap[{b, a}] > 0) {\n            bidirectionalPairs++;\n            countMap[{b, a}]--;\n        } else {\n            countMap[{a, b}]++;\n        }\n    }\n\n    return to_string(bidirectionalPairs);\n}", "unique_id": "MBCPP_438_3", "index": 3832}
{"task_id": "MBCPP/439", "completion": "    string result = \"\";\n    for (int num : l) {\n        result += to_string(num);\n    }\n    return stoi(result);\n}", "unique_id": "MBCPP_439_3", "index": 3842}
{"task_id": "MBCPP/441", "completion": "    return 6 * l * l;\n}", "unique_id": "MBCPP_441_2", "index": 3851}
{"task_id": "MBCPP/442", "completion": "    int positive = 0;\n    for (int num : nums) {\n        if (num > 0) {\n            positive++;\n        }\n    }\n    return static_cast<double>(positive) / nums.size();\n}", "unique_id": "MBCPP_442_10", "index": 3869}
{"task_id": "MBCPP/443", "completion": "    int largest_negative = INT_MIN;\n    bool found_negative = false;\n    for (int num : list1) {\n        if (num < 0) {\n            found_negative = true;\n            if (num > largest_negative) {\n                largest_negative = num;\n            }\n        }\n    }\n    return found_negative ? largest_negative : 0;\n}", "unique_id": "MBCPP_443_7", "index": 3876}
{"task_id": "MBCPP/444", "completion": "    vector<string> result;\n    for (auto &tuple : testList) {\n        vector<int> trimmedTuple(tuple.begin() + k, tuple.end() - k);\n        string tupleStr = \"(\";\n        for (int i = 0; i < trimmedTuple.size(); ++i) {\n            tupleStr += to_string(trimmedTuple[i]);\n            if (i < trimmedTuple.size() - 1) {\n                tupleStr += \", \";\n            }\n        }\n        tupleStr += \")\";\n        result.push_back(tupleStr);\n    }\n    return \"[\" + accumulate(next(result.begin()), result.end(), result[0], [](string a, string b) { return a + \", \" + b; }) + \"]\";\n}", "unique_id": "MBCPP_444_5", "index": 3884}
{"task_id": "MBCPP/445", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] * testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "unique_id": "MBCPP_445_4", "index": 3893}
{"task_id": "MBCPP/447", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [](int n) { return n * n * n; });\n    return nums;\n}", "unique_id": "MBCPP_447_5", "index": 3904}
{"task_id": "MBCPP/448", "completion": "    if (n == 0) return 3;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n\n    vector<int> perrin(n + 1);\n    perrin[0] = 3;\n    perrin[1] = 0;\n    perrin[2] = 2;\n\n    int sum = perrin[0] + perrin[1] + perrin[2];\n\n    for (int i = 3; i <= n; ++i) {\n        perrin[i] = perrin[i - 2] + perrin[i - 3];\n        sum += perrin[i];\n    }\n\n    return sum;\n}", "unique_id": "MBCPP_448_2", "index": 3911}
{"task_id": "MBCPP/449", "completion": "    int area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2);\n    if (area == 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n}", "unique_id": "MBCPP_449_1", "index": 3920}
{"task_id": "MBCPP/450", "completion": "    vector<string> result;\n    for (const auto& s : str) {\n        if (s.length() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_450_4", "index": 3933}
{"task_id": "MBCPP/451", "completion": "    text1 = regex_replace(text1, regex(\"\\\\s+\"), \"\");\n    return text1;\n}", "unique_id": "MBCPP_451_10", "index": 3949}
{"task_id": "MBCPP/453", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0 && i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_453_8", "index": 3957}
{"task_id": "MBCPP/454", "completion": "    regex pattern(\"\\\\b\\\\w*z\\\\w*\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_454_3", "index": 3962}
{"task_id": "MBCPP/455", "completion": "    return monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12;\n}", "unique_id": "MBCPP_455_2", "index": 3971}
{"task_id": "MBCPP/456", "completion": "    for (string &s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;\n}", "unique_id": "MBCPP_456_2", "index": 3981}
{"task_id": "MBCPP/458", "completion": "    return l * b;\n}", "unique_id": "MBCPP_458_4", "index": 3993}
{"task_id": "MBCPP/459", "completion": "    return regex_replace(str1, regex(\"[A-Z]+\"), \"\");\n}", "unique_id": "MBCPP_459_8", "index": 4007}
{"task_id": "MBCPP/460", "completion": "    vector<int> result;\n    for (const auto& sublist : lst) {\n        if (!sublist.empty()) {\n            result.push_back(sublist[0]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_460_2", "index": 4011}
{"task_id": "MBCPP/461", "completion": "    int count = 0;\n    for (char c : str) {\n        if (isupper(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_461_6", "index": 4025}
{"task_id": "MBCPP/463", "completion": "    if (arr.empty()) return 0;\n\n    int max_product = arr[0];\n    int min_product = arr[0];\n    int result = arr[0];\n\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] < 0) {\n            swap(max_product, min_product);\n        }\n        max_product = max(arr[i], max_product * arr[i]);\n        min_product = min(arr[i], min_product * arr[i]);\n\n        result = max(result, max_product);\n    }\n\n    return result;\n}", "unique_id": "MBCPP_463_8", "index": 4037}
{"task_id": "MBCPP/464", "completion": "    for (const auto& pair : dict) {\n        if (pair.second != n) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_464_4", "index": 4043}
{"task_id": "MBCPP/466", "completion": "    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if ((mid == 0 || arr[mid] >= arr[mid - 1]) && \n            (mid == n - 1 || arr[mid] >= arr[mid + 1])) {\n            return mid;\n        } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_466_7", "index": 4056}
{"task_id": "MBCPP/467", "completion": "    int octalnum = 0, place = 1;\n    while (decinum != 0) {\n        int remainder = decinum % 8;\n        octalnum += remainder * place;\n        decinum /= 8;\n        place *= 10;\n    }\n    return octalnum;\n}", "unique_id": "MBCPP_467_6", "index": 4065}
{"task_id": "MBCPP/468", "completion": "    vector<long long> dp(n, 0);\n    long long result = 0;\n\n    for (int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        result = max(result, dp[i]);\n    }\n\n    return result;\n}", "unique_id": "MBCPP_468_10", "index": 4079}
{"task_id": "MBCPP/469", "completion": "    int n = price.size();\n    if (n == 0 || k == 0) return 0;\n    \n    if (k >= n / 2) {\n        int maxProfit = 0;\n        for (int i = 1; i < n; ++i) {\n            if (price[i] > price[i - 1])\n                maxProfit += price[i] - price[i - 1];\n        }\n        return maxProfit;\n    }\n\n    vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n    \n    for (int i = 1; i <= k; ++i) {\n        int maxDiff = -price[0];\n        for (int j = 1; j < n; ++j) {\n            dp[i][j] = max(dp[i][j - 1], price[j] + maxDiff);\n            maxDiff = max(maxDiff, dp[i - 1][j] - price[j]);\n        }\n    }\n    \n    return dp[k][n - 1];\n}", "unique_id": "MBCPP_469_3", "index": 4082}
{"task_id": "MBCPP/470", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_470_3", "index": 4092}
{"task_id": "MBCPP/471", "completion": "    long long product = 1;\n    for(int i = 0; i < lens; ++i) {\n        product = (product * arr[i]) % n;\n    }\n    return product % n;\n}", "unique_id": "MBCPP_471_9", "index": 4108}
{"task_id": "MBCPP/472", "completion": "    if (l.empty()) return false;\n    sort(l.begin(), l.end());\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_472_1", "index": 4110}
{"task_id": "MBCPP/474", "completion": "    size_t pos = 0;\n    while ((pos = str1.find(ch, pos)) != string::npos) {\n        str1.replace(pos, ch.length(), newch);\n        pos += newch.length();\n    }\n    return str1;\n}", "unique_id": "MBCPP_474_7", "index": 4126}
{"task_id": "MBCPP/476", "completion": "    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return min_val + max_val;\n}", "unique_id": "MBCPP_476_9", "index": 4138}
{"task_id": "MBCPP/477", "completion": "    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    return str;\n}", "unique_id": "MBCPP_477_7", "index": 4146}
{"task_id": "MBCPP/478", "completion": "    str1.erase(remove_if(str1.begin(), str1.end(), ::islower), str1.end());\n    return str1;\n}", "unique_id": "MBCPP_478_3", "index": 4152}
{"task_id": "MBCPP/479", "completion": "    while (n >= 10) {\n        n /= 10;\n    }\n    return n;\n}", "unique_id": "MBCPP_479_7", "index": 4166}
{"task_id": "MBCPP/480", "completion": "    vector<int> freq(256, 0);\n    for (char ch : str1) {\n        freq[ch]++;\n    }\n    int maxFreq = 0;\n    char maxChar;\n    for (char ch : str1) {\n        if (freq[ch] > maxFreq) {\n            maxFreq = freq[ch];\n            maxChar = ch;\n        }\n    }\n    return string(1, maxChar);\n}", "unique_id": "MBCPP_480_5", "index": 4174}
{"task_id": "MBCPP/481", "completion": "    vector<vector<bool>> subset(n + 1, vector<bool>(sum + 1));\n\n    for (int i = 0; i <= n; i++) \n        subset[i][0] = true;\n\n    for (int i = 1; i <= sum; i++) \n        subset[0][i] = false;\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= sum; j++) {\n            if (j < set[i - 1])\n                subset[i][j] = subset[i - 1][j];\n            else\n                subset[i][j] = subset[i - 1][j] || subset[i - 1][j - set[i - 1]];\n        }\n    }\n\n    return subset[n][sum];\n}", "unique_id": "MBCPP_481_8", "index": 4187}
{"task_id": "MBCPP/482", "completion": "    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "unique_id": "MBCPP_482_10", "index": 4199}
{"task_id": "MBCPP/483", "completion": "    int n = 1;\n    int factorial = 1;\n    while (true) {\n        factorial *= n;\n        if (factorial % x == 0) {\n            return n;\n        }\n        n++;\n    }\n}", "unique_id": "MBCPP_483_1", "index": 4200}
{"task_id": "MBCPP/484", "completion": "    vector<vector<string>> result;\n    for (const auto& tuple1 : testList1) {\n        bool matchFound = false;\n        for (const auto& tuple2 : testList2) {\n            if (tuple1 == tuple2) {\n                matchFound = true;\n                break;\n            }\n        }\n        if (!matchFound) {\n            result.push_back(tuple1);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_484_5", "index": 4214}
{"task_id": "MBCPP/485", "completion": "    auto isPalindrome = [](int x) {\n        string s = to_string(x);\n        string rev_s = s;\n        reverse(rev_s.begin(), rev_s.end());\n        return s == rev_s;\n    };\n\n    int largest = -1;\n    for (int num : a) {\n        if (isPalindrome(num)) {\n            largest = max(largest, num);\n        }\n    }\n    return largest;\n}", "unique_id": "MBCPP_485_5", "index": 4224}
{"task_id": "MBCPP/486", "completion": "    double binomialCoefficient = 1;\n    for (int i = 0; i < k; ++i) {\n        binomialCoefficient *= (n - i);\n        binomialCoefficient /= (i + 1);\n    }\n    return binomialCoefficient * pow(p, k) * pow(1 - p, n - k);\n}", "unique_id": "MBCPP_486_1", "index": 4230}
{"task_id": "MBCPP/487", "completion": "    sort(tup.begin(), tup.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tup;\n}", "unique_id": "MBCPP_487_3", "index": 4242}
{"task_id": "MBCPP/488", "completion": "    const double PI = 3.14159265358979323846;\n    double side = static_cast<double>(a);\n    double apothem = side / (2 * tan(PI / 5));\n    return (5 * side * apothem) / 2;\n}", "unique_id": "MBCPP_488_1", "index": 4250}
{"task_id": "MBCPP/489", "completion": "    int max_val = *max_element(arr.begin(), arr.end());\n    return count(arr.begin(), arr.end(), max_val);\n}", "unique_id": "MBCPP_489_2", "index": 4261}
{"task_id": "MBCPP/491", "completion": "    int sum = a * (pow(r, n) - 1) / (r - 1);\n    return sum;\n}", "unique_id": "MBCPP_491_6", "index": 4275}
{"task_id": "MBCPP/492", "completion": "    int left = 0, right = itemList.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (itemList[mid] == item)\n            return true;\n        if (itemList[mid] < item)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return false;\n}", "unique_id": "MBCPP_492_3", "index": 4282}
{"task_id": "MBCPP/493", "completion": "    vector<vector<vector<double>>> result;\n    double height = sqrt(3) * radius;\n    double width = 2 * radius;\n    double vert_dist = height * 3 / 4;\n    \n    for (double y = starty; y <= endy; y += vert_dist) {\n        for (double x = startx; x <= endx; x += width * 3 / 4) {\n            vector<vector<double>> hex;\n            for (int i = 0; i < 6; ++i) {\n                double angle = 2 * M_PI / 6 * i;\n                double x_i = x + radius * cos(angle);\n                double y_i = y + radius * sin(angle);\n                hex.push_back({x_i, y_i});\n            }\n            hex.push_back(hex[0]);\n            result.push_back(hex);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_493_9", "index": 4298}
{"task_id": "MBCPP/494", "completion": "    int result = 0;\n    for (int i = 0; i < testTup.size(); ++i) {\n        result = result * 2 + testTup[i];\n    }\n    return to_string(result);\n}", "unique_id": "MBCPP_494_10", "index": 4309}
{"task_id": "MBCPP/495", "completion": "    return regex_replace(str1, regex(\"[a-z]+\"), \"\");\n}", "unique_id": "MBCPP_495_3", "index": 4312}
{"task_id": "MBCPP/496", "completion": "    priority_queue<int> maxHeap;\n    for (int num : nums) {\n        maxHeap.push(num);\n        if (maxHeap.size() > n) {\n            maxHeap.pop();\n        }\n    }\n    vector<int> result;\n    while (!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "MBCPP_496_1", "index": 4320}
{"task_id": "MBCPP/497", "completion": "    double l = sqrt(r * r + h * h);\n    return M_PI * r * (r + l);\n}", "unique_id": "MBCPP_497_5", "index": 4334}
{"task_id": "MBCPP/498", "completion": "    if (y == 0)\n        return x;\n    return gcd(y, x % y);\n}", "unique_id": "MBCPP_498_2", "index": 4341}
{"task_id": "MBCPP/499", "completion": "    return 2 * r;\n}", "unique_id": "MBCPP_499_10", "index": 4359}
{"task_id": "MBCPP/500", "completion": "    string result = \" \";\n    for (const auto& str : list) {\n        result += str + \" \";\n    }\n    return result;\n}", "unique_id": "MBCPP_500_1", "index": 4360}
{"task_id": "MBCPP/501", "completion": "    int gcd = __gcd(x, y);\n    int count = 0;\n    for (int i = 1; i <= sqrt(gcd); i++) {\n        if (gcd % i == 0) {\n            if (i == gcd / i)\n                count += 1;\n            else\n                count += 2;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_501_9", "index": 4378}
{"task_id": "MBCPP/502", "completion": "    return n % m;\n}", "unique_id": "MBCPP_502_3", "index": 4382}
{"task_id": "MBCPP/503", "completion": "    vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_503_8", "index": 4397}
{"task_id": "MBCPP/504", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_504_9", "index": 4408}
{"task_id": "MBCPP/505", "completion": "    int n = a.size();\n    int index = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (a[i] != 0) {\n            a[index++] = a[i];\n        }\n    }\n    \n    while (index < n) {\n        a[index++] = 0;\n    }\n    \n    return a;\n}", "unique_id": "MBCPP_505_3", "index": 4412}
{"task_id": "MBCPP/506", "completion": "    int result = 1;\n    for (int i = 0; i < k; i++) {\n        result *= (n - i);\n    }\n    return result;\n}", "unique_id": "MBCPP_506_4", "index": 4423}
{"task_id": "MBCPP/507", "completion": "    unordered_set<string> removeSet(removewords.begin(), removewords.end());\n    vector<string> result;\n    for (const auto& word : list1) {\n        if (removeSet.find(word) == removeSet.end()) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_507_2", "index": 4431}
{"task_id": "MBCPP/508", "completion": "    unordered_set<string> set_l1(l1.begin(), l1.end());\n    vector<string> common_elements;\n\n    for (const auto& item : l2) {\n        if (set_l1.find(item) != set_l1.end()) {\n            common_elements.push_back(item);\n        }\n    }\n\n    auto it = l1.begin();\n    for (const auto& item : common_elements) {\n        it = find(it, l1.end(), item);\n        if (it == l1.end()) {\n            return false;\n        }\n        ++it;\n    }\n\n    return true;\n}", "unique_id": "MBCPP_508_8", "index": 4447}
{"task_id": "MBCPP/509", "completion": "    int sum = 0;\n    int count = 0;\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "unique_id": "MBCPP_509_10", "index": 4459}
{"task_id": "MBCPP/510", "completion": "    int n = arr.size();\n    int count = 0;\n    \n    // Iterate over all possible subsequences\n    for (int i = 0; i < (1 << n); i++) {\n        int product = 1;\n        bool valid = true;\n        \n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                product *= arr[j];\n                if (product >= k) {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n        if (valid && product < k) {\n            count++;\n        }\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_510_2", "index": 4461}
{"task_id": "MBCPP/511", "completion": "    int sum = INT_MAX;\n    for (int i = 1; i * i <= num; ++i) {\n        if (num % i == 0) {\n            int factor1 = i;\n            int factor2 = num / i;\n            sum = min(sum, factor1 + factor2);\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_511_9", "index": 4478}
{"task_id": "MBCPP/514", "completion": "    int sum = 0;\n    for (int num : testTup) {\n        sum += num;\n    }\n    return sum;\n}", "unique_id": "MBCPP_514_5", "index": 4484}
{"task_id": "MBCPP/515", "completion": "    if (n > m) return true;\n\n    vector<bool> dp(m, false);\n    dp[0] = true;\n\n    for (int i = 0; i < n; ++i) {\n        vector<bool> temp(dp);\n        for (int j = 0; j < m; ++j) {\n            if (dp[j]) {\n                temp[(j + arr[i]) % m] = true;\n            }\n        }\n        dp = temp;\n    }\n\n    return dp[0];\n}", "unique_id": "MBCPP_515_2", "index": 4491}
{"task_id": "MBCPP/516", "completion": "    if (nums.empty()) return nums;\n\n    int max_num = *max_element(nums.begin(), nums.end());\n    for (int exp = 1; max_num / exp > 0; exp *= 10) {\n        vector<int> output(nums.size());\n        int count[10] = {0};\n\n        // Store count of occurrences in count[]\n        for (int num : nums) {\n            count[(num / exp) % 10]++;\n        }\n\n        // Change count[i] so that count[i] now contains actual\n        // position of this digit in output[]\n        for (int i = 1; i < 10; i++) {\n            count[i] += count[i - 1];\n        }\n\n        // Build the output array\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\n            count[(nums[i] / exp) % 10]--;\n        }\n\n        // Copy the output array to nums, so that nums now\n        // contains sorted numbers according to current digit\n        for (int i = 0; i < nums.size(); i++) {\n            nums[i] = output[i];\n        }\n    }\n\n    return nums;\n}", "unique_id": "MBCPP_516_7", "index": 4506}
{"task_id": "MBCPP/517", "completion": "    int largest = INT_MIN;\n    for (int num : list1) {\n        if (num > 0 && num > largest) {\n            largest = num;\n        }\n    }\n    return largest == INT_MIN ? 0 : largest;\n}", "unique_id": "MBCPP_517_10", "index": 4519}
{"task_id": "MBCPP/518", "completion": "    return sqrt(num);\n}", "unique_id": "MBCPP_518_4", "index": 4523}
{"task_id": "MBCPP/519", "completion": "    return (pow(num, 3) / (6 * sqrt(2)));\n}", "unique_id": "MBCPP_519_1", "index": 4530}
{"task_id": "MBCPP/520", "completion": "    auto lcm = [](int a, int b) {\n        return (a / gcd(a, b)) * b;\n    };\n    return accumulate(l.begin() + 1, l.end(), l[0], lcm);\n}", "unique_id": "MBCPP_520_4", "index": 4543}
{"task_id": "MBCPP/521", "completion": "    return (x != y && y != z && x != z);\n}", "unique_id": "MBCPP_521_10", "index": 4559}
{"task_id": "MBCPP/522", "completion": "    int n = arr.size();\n    if (n == 0) return 0;\n\n    vector<int> lis(n, 1);\n    vector<int> lds(n, 1);\n\n    for (int i = 1; i < n; i++)\n        for (int j = 0; j < i; j++)\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1)\n                lis[i] = lis[j] + 1;\n\n    for (int i = n-2; i >= 0; i--)\n        for (int j = n-1; j > i; j--)\n            if (arr[i] > arr[j] && lds[i] < lds[j] + 1)\n                lds[i] = lds[j] + 1;\n\n    int max_lbs = 0;\n    for (int i = 0; i < n; i++)\n        max_lbs = max(max_lbs, lis[i] + lds[i] - 1);\n\n    return max_lbs;\n}", "unique_id": "MBCPP_522_5", "index": 4564}
{"task_id": "MBCPP/523", "completion": "    vector<string> errors;\n\n    auto has_upper = [](const string& str) {\n        return any_of(str.begin(), str.end(), ::isupper);\n    };\n\n    auto has_lower = [](const string& str) {\n        return any_of(str.begin(), str.end(), ::islower);\n    };\n\n    auto has_digit = [](const string& str) {\n        return any_of(str.begin(), str.end(), ::isdigit);\n    };\n\n    auto has_min_length = [](const string& str, size_t length) {\n        return str.size() >= length;\n    };\n\n    if (!has_upper(str1)) {\n        errors.push_back(\"String must have 1 upper case character.\");\n    }\n\n    if (!has_lower(str1)) {\n        errors.push_back(\"String must have 1 lower case character.\");\n    }\n\n    if (!has_digit(str1)) {\n        errors.push_back(\"String must have 1 number.\");\n    }\n\n    if (!has_min_length(str1, 8)) {\n        errors.push_back(\"String length should be atleast 8.\");\n    }\n\n    if (errors.empty()) {\n        errors.push_back(\"Valid string.\");\n    }\n\n    return errors;\n}", "unique_id": "MBCPP_523_10", "index": 4579}
{"task_id": "MBCPP/524", "completion": "    vector<int> dp = arr;\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "unique_id": "MBCPP_524_5", "index": 4584}
{"task_id": "MBCPP/525", "completion": "    if (line1.size() != line2.size()) \n        return false;\n    if (line1.size() == 2) {\n        return line1[0] * line2[1] == line1[1] * line2[0];\n    } else if (line1.size() == 3) {\n        return line1[0] * line2[1] == line1[1] * line2[0] && line1[0] * line2[2] == line1[2] * line2[0];\n    }\n    return false;\n}", "unique_id": "MBCPP_525_4", "index": 4593}
{"task_id": "MBCPP/526", "completion": "    int n = str1.length();\n    if (n == 0) return str1;\n    if (isalpha(str1[0])) str1[0] = toupper(str1[0]);\n    if (isalpha(str1[n-1])) str1[n-1] = toupper(str1[n-1]);\n    for (int i = 1; i < n - 1; i++) {\n        if (str1[i] == ' ' && i + 1 < n && isalpha(str1[i + 1])) {\n            str1[i + 1] = toupper(str1[i + 1]);\n        }\n        if (str1[i] == ' ' && i - 1 >= 0 && isalpha(str1[i - 1])) {\n            str1[i - 1] = toupper(str1[i - 1]);\n        }\n    }\n    return str1;\n}", "unique_id": "MBCPP_526_1", "index": 4600}
{"task_id": "MBCPP/527", "completion": "    unordered_map<int, int> m;\n    int count = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (m.find(sum - arr[i]) != m.end()) {\n            count += m[sum - arr[i]];\n        }\n        m[arr[i]]++;\n    }\n\n    return count;\n}", "unique_id": "MBCPP_527_1", "index": 4610}
{"task_id": "MBCPP/529", "completion": "    if (n == 0) return 2;\n    if (n == 1) return 1;\n    return jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}", "unique_id": "MBCPP_529_10", "index": 4629}
{"task_id": "MBCPP/530", "completion": "    int negative_count = 0;\n    for (int num : nums) {\n        if (num < 0) {\n            negative_count++;\n        }\n    }\n    return static_cast<double>(negative_count) / nums.size();\n}", "unique_id": "MBCPP_530_1", "index": 4630}
{"task_id": "MBCPP/531", "completion": "    vector<int> dp(v + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 1; i <= v; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (coins[j] <= i) {\n                int sub_res = dp[i - coins[j]];\n                if (sub_res != INT_MAX && sub_res + 1 < dp[i]) {\n                    dp[i] = sub_res + 1;\n                }\n            }\n        }\n    }\n\n    return dp[v] == INT_MAX ? -1 : dp[v];\n}", "unique_id": "MBCPP_531_2", "index": 4641}
{"task_id": "MBCPP/532", "completion": "    if (str1.length() != str2.length()) {\n        return false;\n    }\n    sort(str1.begin(), str1.end());\n    sort(str2.begin(), str2.end());\n    return str1 == str2;\n}", "unique_id": "MBCPP_532_3", "index": 4652}
{"task_id": "MBCPP/534", "completion": "    vector<int> result;\n    size_t pos = text.find(pattern);\n    if (pos != string::npos) {\n        result.push_back(pos);\n        result.push_back(pos + pattern.length() - 1);\n    }\n    return result;\n}", "unique_id": "MBCPP_534_8", "index": 4667}
{"task_id": "MBCPP/535", "completion": "    return M_PI * r * r;\n}", "unique_id": "MBCPP_535_4", "index": 4673}
{"task_id": "MBCPP/536", "completion": "    vector<int> result;\n    for (int i = 0; i < list.size(); i += n) {\n        result.push_back(list[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_536_7", "index": 4686}
{"task_id": "MBCPP/537", "completion": "    unordered_set<string> wordSet;\n    stringstream ss(str1);\n    string word;\n    \n    while (ss >> word) {\n        if (wordSet.find(word) != wordSet.end()) {\n            return word;\n        }\n        wordSet.insert(word);\n    }\n    \n    return \"None\";\n}", "unique_id": "MBCPP_537_4", "index": 4693}
{"task_id": "MBCPP/538", "completion": "    vector<string> result;\n    for (char c : str1) {\n        result.push_back(string(1, c));\n    }\n    return result;\n}", "unique_id": "MBCPP_538_2", "index": 4701}
{"task_id": "MBCPP/540", "completion": "    unordered_map<int, int> freq;\n    for (int num : arr) {\n        freq[num]++;\n    }\n    \n    int maxFreq = INT_MIN;\n    int minFreq = INT_MAX;\n    \n    for (auto& [num, count] : freq) {\n        if (count > maxFreq) {\n            maxFreq = count;\n        }\n        if (count < minFreq) {\n            minFreq = count;\n        }\n    }\n    \n    return maxFreq - minFreq;\n}", "unique_id": "MBCPP_540_8", "index": 4717}
{"task_id": "MBCPP/541", "completion": "    int sum = 1;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (i == (n / i))\n                sum += i;\n            else\n                sum += i + (n / i);\n        }\n    }\n    return sum > n;\n}", "unique_id": "MBCPP_541_7", "index": 4726}
{"task_id": "MBCPP/542", "completion": "    return regex_replace(text, regex(\"[ ,.]+\"), \":\");\n}", "unique_id": "MBCPP_542_1", "index": 4730}
{"task_id": "MBCPP/543", "completion": "    long long sum = (long long)num1 + num2;\n    int digits = 0;\n    while (sum != 0) {\n        digits++;\n        sum /= 10;\n    }\n    return digits;\n}", "unique_id": "MBCPP_543_6", "index": 4745}
{"task_id": "MBCPP/544", "completion": "    string result;\n    for (const auto& sublist : testList) {\n        for (const auto& item : sublist) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += item;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_544_6", "index": 4755}
{"task_id": "MBCPP/545", "completion": "    int num_bits = sizeof(n) * 8;\n    int first_bit_mask = 1;\n    int last_bit_mask = 1 << (num_bits - 1);\n    int mask = first_bit_mask | last_bit_mask;\n    return n ^ mask;\n}", "unique_id": "MBCPP_545_10", "index": 4769}
{"task_id": "MBCPP/547", "completion": "    int total = 0;\n    for (int i = 1; i <= n; ++i) {\n        total += __builtin_popcount(i ^ (i - 1));\n    }\n    return total;\n}", "unique_id": "MBCPP_547_9", "index": 4778}
{"task_id": "MBCPP/548", "completion": "    if (arr.empty()) return 0;\n    vector<int> lis(arr.size(), 1);\n    for (int i = 1; i < arr.size(); ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n    return *max_element(lis.begin(), lis.end());\n}", "unique_id": "MBCPP_548_4", "index": 4783}
{"task_id": "MBCPP/549", "completion": "    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        int oddNum = 2 * i + 1;\n        sum += pow(oddNum, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_549_9", "index": 4798}
{"task_id": "MBCPP/550", "completion": "    if (low == high)\n        return arr[low];\n    int mid = low + (high - low) / 2;\n    if (mid < high && arr[mid] > arr[mid + 1])\n        return arr[mid];\n    if (mid > low && arr[mid] < arr[mid - 1])\n        return arr[mid - 1];\n    if (arr[low] >= arr[mid])\n        return findMax(arr, low, mid - 1);\n    return findMax(arr, mid + 1, high);\n}", "unique_id": "MBCPP_550_4", "index": 4803}
{"task_id": "MBCPP/551", "completion": "    vector<int> result;\n    for (const auto& row : list1) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_551_9", "index": 4818}
{"task_id": "MBCPP/552", "completion": "    if (seqNums.size() < 2) {\n        return \"Linear Sequence\";\n    }\n    \n    int difference = seqNums[1] - seqNums[0];\n    \n    for (size_t i = 1; i < seqNums.size() - 1; ++i) {\n        if (seqNums[i + 1] - seqNums[i] != difference) {\n            return \"Non Linear Sequence\";\n        }\n    }\n    \n    return \"Linear Sequence\";\n}", "unique_id": "MBCPP_552_10", "index": 4829}
{"task_id": "MBCPP/553", "completion": "    return stod(to_string(testTup[0]) + \".\" + to_string(testTup[1]));\n}", "unique_id": "MBCPP_553_2", "index": 4831}
{"task_id": "MBCPP/554", "completion": "    vector<int> result;\n    for(int num : list) {\n        if(num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_554_9", "index": 4848}
{"task_id": "MBCPP/555", "completion": "    int sum_of_cubes = 0;\n    int sum_of_numbers = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum_of_cubes += i * i * i;\n        sum_of_numbers += i;\n    }\n    return sum_of_cubes - sum_of_numbers;\n}", "unique_id": "MBCPP_555_9", "index": 4858}
{"task_id": "MBCPP/556", "completion": "    int odd_count = 0, even_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return odd_count * even_count;\n}", "unique_id": "MBCPP_556_7", "index": 4866}
{"task_id": "MBCPP/557", "completion": "    for (char &c : str) {\n        if (islower(c))\n            c = toupper(c);\n        else if (isupper(c))\n            c = tolower(c);\n    }\n    return str;\n}", "unique_id": "MBCPP_557_6", "index": 4875}
{"task_id": "MBCPP/558", "completion": "    int distance = 0;\n    while (n1 > 0 || n2 > 0) {\n        distance += abs((n1 % 10) - (n2 % 10));\n        n1 /= 10;\n        n2 /= 10;\n    }\n    return distance;\n}", "unique_id": "MBCPP_558_9", "index": 4888}
{"task_id": "MBCPP/559", "completion": "    int max_so_far = INT_MIN, max_ending_here = 0;\n    for (int i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}", "unique_id": "MBCPP_559_3", "index": 4892}
{"task_id": "MBCPP/560", "completion": "    set<int> resultSet(testTup1.begin(), testTup1.end());\n    resultSet.insert(testTup2.begin(), testTup2.end());\n    return vector<int>(resultSet.begin(), resultSet.end());\n}", "unique_id": "MBCPP_560_5", "index": 4904}
{"task_id": "MBCPP/562", "completion": "    int maxLength = 0;\n    for (const auto& sublist : lst) {\n        if (sublist.size() > maxLength) {\n            maxLength = sublist.size();\n        }\n    }\n    return maxLength;\n}", "unique_id": "MBCPP_562_6", "index": 4915}
{"task_id": "MBCPP/563", "completion": "    vector<string> result;\n    size_t start = 0;\n    while ((start = text.find('\\\"', start)) != string::npos) {\n        size_t end = text.find('\\\"', start + 1);\n        if (end == string::npos) break;\n        result.push_back(text.substr(start + 1, end - start - 1));\n        start = end + 1;\n    }\n    return result;\n}", "unique_id": "MBCPP_563_2", "index": 4921}
{"task_id": "MBCPP/564", "completion": "    int count = 0;\n    for(int i = 0; i < n; ++i) {\n        for(int j = i + 1; j < n; ++j) {\n            if(arr[i] != arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_564_10", "index": 4939}
{"task_id": "MBCPP/565", "completion": "    vector<string> result;\n    for (char c : word) {\n        result.push_back(string(1, c));\n    }\n    return result;\n}", "unique_id": "MBCPP_565_10", "index": 4949}
{"task_id": "MBCPP/566", "completion": "    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "unique_id": "MBCPP_566_7", "index": 4956}
{"task_id": "MBCPP/567", "completion": "    for (int i = 1; i < list1.size(); ++i) {\n        if (list1[i] < list1[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_567_3", "index": 4962}
{"task_id": "MBCPP/569", "completion": "    for (auto& sublist : list1) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return list1;\n}", "unique_id": "MBCPP_569_9", "index": 4978}
{"task_id": "MBCPP/570", "completion": "    for (string &str : list1) {\n        for (const string &ch : charlist) {\n            size_t pos;\n            while ((pos = str.find(ch)) != string::npos) {\n                str.erase(pos, ch.length());\n            }\n        }\n    }\n    return list1;\n}", "unique_id": "MBCPP_570_6", "index": 4985}
{"task_id": "MBCPP/571", "completion": "    sort(arr.begin(), arr.end());\n    int sum = 0;\n    for (int i = n - 1; i > 0; i--) {\n        if (arr[i] - arr[i - 1] < k) {\n            sum += arr[i] + arr[i - 1];\n            i--;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_571_9", "index": 4998}
{"task_id": "MBCPP/572", "completion": "    unordered_map<int, int> countMap;\n    for (int num : nums) {\n        countMap[num]++;\n    }\n    \n    vector<int> result;\n    for (int num : nums) {\n        if (countMap[num] < 2) {\n            result.push_back(num);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_572_10", "index": 5009}
{"task_id": "MBCPP/573", "completion": "    set<int> uniqueElements(listData.begin(), listData.end());\n    int product = 1;\n    for (int num : uniqueElements) {\n        product *= num;\n    }\n    return product;\n}", "unique_id": "MBCPP_573_1", "index": 5010}
{"task_id": "MBCPP/574", "completion": "    double surfaceArea = 2 * M_PI * r * (r + h);\n    return surfaceArea;\n}", "unique_id": "MBCPP_574_8", "index": 5027}
{"task_id": "MBCPP/575", "completion": "    int count = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i % n != 0) {\n            count++;\n            if (count == a) {\n                return i;\n            }\n        }\n    }\n    return -1; // In case the nth number is not found within the range\n}", "unique_id": "MBCPP_575_8", "index": 5037}
{"task_id": "MBCPP/576", "completion": "    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (a[i + j] != b[j])\n                break;\n        }\n        if (j == m)\n            return true;\n    }\n    return false;\n}", "unique_id": "MBCPP_576_7", "index": 5046}
{"task_id": "MBCPP/577", "completion": "    if (n == 0 || n == 1)\n        return 1;\n    for (int i = 1; i <= n; ++i) {\n        if (i == 5)\n            return 0;\n    }\n    return (n % 10);\n}", "unique_id": "MBCPP_577_5", "index": 5054}
{"task_id": "MBCPP/578", "completion": "    vector<int> result;\n    int n = list1.size();\n    for (int i = 0; i < n; i++) {\n        result.push_back(list1[i]);\n        result.push_back(list2[i]);\n        result.push_back(list3[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_578_5", "index": 5064}
{"task_id": "MBCPP/579", "completion": "    set<int> set1(testTup1.begin(), testTup1.end());\n    set<int> set2(testTup2.begin(), testTup2.end());\n    vector<int> result;\n\n    for (int num : set1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n\n    for (int num : set2) {\n        if (set1.find(num) == set1.end()) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_579_10", "index": 5079}
{"task_id": "MBCPP/581", "completion": "    int base_area = b * b;\n    int slant_height = sqrt((b / 2.0) * (b / 2.0) + s * s);\n    int lateral_area = 2 * b * slant_height;\n    return base_area + lateral_area;\n}", "unique_id": "MBCPP_581_1", "index": 5080}
{"task_id": "MBCPP/582", "completion": "    return dict1.empty();\n}", "unique_id": "MBCPP_582_3", "index": 5092}
{"task_id": "MBCPP/583", "completion": "    if (num <= 1)\n        return 1;\n    long long res = 0;\n    for (int i = 0; i < num; i++)\n        res += catalanNumber(i) * catalanNumber(num - i - 1);\n    return res;\n}", "unique_id": "MBCPP_583_8", "index": 5107}
{"task_id": "MBCPP/584", "completion": "    vector<string> result;\n    regex adverb_regex(\"\\\\b\\\\w+ly\\\\b\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), adverb_regex);\n    auto words_end = sregex_iterator();\n\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        smatch match = *i;\n        string adverb = match.str();\n        size_t start = match.position();\n        size_t end = start + adverb.length() - 1;\n        result.push_back(to_string(start) + \"-\" + to_string(end) + \": \" + adverb);\n    }\n\n    return result.empty() ? \"\" : accumulate(next(result.begin()), result.end(), result[0],\n                                            [](string a, string b) { return a + \"\\n\" + b; });\n}", "unique_id": "MBCPP_584_1", "index": 5110}
{"task_id": "MBCPP/586", "completion": "    vector<int> result(a.begin() + k, a.end());\n    result.insert(result.end(), a.begin(), a.begin() + k);\n    return result;\n}", "unique_id": "MBCPP_586_3", "index": 5122}
{"task_id": "MBCPP/587", "completion": "    return listx;\n}", "unique_id": "MBCPP_587_7", "index": 5136}
{"task_id": "MBCPP/588", "completion": "    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return max_val - min_val;\n}", "unique_id": "MBCPP_588_3", "index": 5142}
{"task_id": "MBCPP/589", "completion": "    vector<int> result;\n    int start = ceil(sqrt(a));\n    int end = floor(sqrt(b));\n    for (int i = start; i <= end; ++i) {\n        result.push_back(i * i);\n    }\n    return result;\n}", "unique_id": "MBCPP_589_9", "index": 5158}
{"task_id": "MBCPP/591", "completion": "    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "unique_id": "MBCPP_591_2", "index": 5161}
{"task_id": "MBCPP/592", "completion": "    int sum = 0;\n    for (int k = 0; k <= n; ++k) {\n        sum += (1 << n);\n    }\n    return sum;\n}", "unique_id": "MBCPP_592_2", "index": 5171}
{"task_id": "MBCPP/593", "completion": "    stringstream ss(ip);\n    string segment;\n    vector<string> segments;\n    \n    while (getline(ss, segment, '.')) {\n        // Remove leading zeros\n        size_t pos = segment.find_first_not_of('0');\n        if (pos != string::npos) {\n            segment = segment.substr(pos);\n        } else {\n            segment = \"0\";\n        }\n        segments.push_back(segment);\n    }\n    \n    // Join back the segments with '.'\n    string result = \"\";\n    for (int i = 0; i < segments.size(); i++) {\n        result += segments[i];\n        if (i != segments.size() - 1) {\n            result += \".\";\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_593_10", "index": 5189}
{"task_id": "MBCPP/594", "completion": "    int first_even = -1, first_odd = -1;\n    for (int num : list1) {\n        if (num % 2 == 0 && first_even == -1) {\n            first_even = num;\n        } else if (num % 2 != 0 && first_odd == -1) {\n            first_odd = num;\n        }\n        if (first_even != -1 && first_odd != -1) {\n            break;\n        }\n    }\n    if (first_even != -1 && first_odd != -1) {\n        return abs(first_even - first_odd);\n    }\n    return -1; // Return -1 if either even or odd number is not found\n}", "unique_id": "MBCPP_594_1", "index": 5190}
{"task_id": "MBCPP/597", "completion": "    if (m > n) {\n        return findKth(arr2, arr1, n, m, k);\n    }\n    if (m == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return min(arr1[0], arr2[0]);\n    }\n\n    int i = min(m, k / 2);\n    int j = min(n, k / 2);\n\n    if (arr1[i - 1] > arr2[j - 1]) {\n        vector<int> newArr2(arr2.begin() + j, arr2.end());\n        return findKth(arr1, newArr2, m, n - j, k - j);\n    } else {\n        vector<int> newArr1(arr1.begin() + i, arr1.end());\n        return findKth(newArr1, arr2, m - i, n, k - i);\n    }\n}", "unique_id": "MBCPP_597_1", "index": 5200}
{"task_id": "MBCPP/598", "completion": "    int original = number, sum = 0, digits = 0;\n\n    // Calculate the number of digits\n    while (original != 0) {\n        original /= 10;\n        digits++;\n    }\n\n    original = number;\n\n    // Calculate the sum of the nth powers of its digits\n    while (original != 0) {\n        int digit = original % 10;\n        sum += pow(digit, digits);\n        original /= 10;\n    }\n\n    return sum == number;\n}", "unique_id": "MBCPP_598_5", "index": 5214}
{"task_id": "MBCPP/600", "completion": "    return (n & 1) == 0;\n}", "unique_id": "MBCPP_600_9", "index": 5228}
{"task_id": "MBCPP/602", "completion": "    unordered_set<char> seen;\n    for (char c : str1) {\n        if (seen.find(c) != seen.end()) {\n            return string(1, c);\n        }\n        seen.insert(c);\n    }\n    return \"None\";\n}", "unique_id": "MBCPP_602_7", "index": 5236}
{"task_id": "MBCPP/603", "completion": "    vector<int> ludics;\n    for (int i = 1; i <= n; ++i) {\n        ludics.push_back(i);\n    }\n    \n    int index = 1;\n    while (index < ludics.size()) {\n        int step = ludics[index];\n        vector<int> temp;\n        for (int i = 0; i < ludics.size(); ++i) {\n            if ((i + 1) % step != 0) {\n                temp.push_back(ludics[i]);\n            }\n        }\n        ludics = temp;\n        ++index;\n    }\n    \n    return ludics;\n}", "unique_id": "MBCPP_603_10", "index": 5249}
{"task_id": "MBCPP/604", "completion": "    stringstream ss(s);\n    string word;\n    vector<string> words;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    reverse(words.begin(), words.end());\n    string result;\n    for (int i = 0; i < words.size(); ++i) {\n        result += words[i];\n        if (i != words.size() - 1) {\n            result += \" \";\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_604_4", "index": 5253}
{"task_id": "MBCPP/605", "completion": "    if (num <= 1) \n        return false;\n    if (num <= 3) \n        return true;\n    if (num % 2 == 0 || num % 3 == 0) \n        return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) \n            return false;\n    }\n    return true;\n}", "unique_id": "MBCPP_605_5", "index": 5264}
{"task_id": "MBCPP/606", "completion": "    return degree * M_PI / 180.0;\n}", "unique_id": "MBCPP_606_1", "index": 5270}
{"task_id": "MBCPP/608", "completion": "    vector<vector<int>> bell(n + 1, vector<int>(n + 1, 0));\n    bell[0][0] = 1;\n\n    for (int i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n\n        for (int j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n\n    return bell[n][0];\n}", "unique_id": "MBCPP_608_8", "index": 5287}
{"task_id": "MBCPP/609", "completion": "    return min({a, b, n});\n}", "unique_id": "MBCPP_609_3", "index": 5292}
{"task_id": "MBCPP/610", "completion": "    if (l >= 0 && l < list1.size()) {\n        list1.erase(list1.begin() + l);\n    }\n    return list1;\n}", "unique_id": "MBCPP_610_10", "index": 5309}
{"task_id": "MBCPP/611", "completion": "    int maxVal = INT_MIN;\n    for (const auto& row : testList) {\n        if (n < row.size()) {\n            maxVal = max(maxVal, row[n]);\n        }\n    }\n    return maxVal;\n}", "unique_id": "MBCPP_611_9", "index": 5318}
{"task_id": "MBCPP/614", "completion": "    int sum = 0;\n    for (const auto& innerList : testList) {\n        for (int num : innerList) {\n            sum += num;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_614_7", "index": 5326}
{"task_id": "MBCPP/615", "completion": "    vector<double> averages;\n    int numRows = nums.size();\n    int numCols = nums[0].size();\n    \n    for (int col = 0; col < numCols; ++col) {\n        double sum = 0;\n        for (int row = 0; row < numRows; ++row) {\n            sum += nums[row][col];\n        }\n        averages.push_back(sum / numRows);\n    }\n    \n    return averages;\n}", "unique_id": "MBCPP_615_5", "index": 5334}
{"task_id": "MBCPP/616", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] % testTup2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_616_1", "index": 5340}
{"task_id": "MBCPP/618", "completion": "    vector<double> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) {\n        return static_cast<double>(a) / b;\n    });\n    return result;\n}", "unique_id": "MBCPP_618_5", "index": 5354}
{"task_id": "MBCPP/619", "completion": "    string numbers = \"\";\n    string result = \"\";\n    \n    for (char c : testStr) {\n        if (isdigit(c)) {\n            numbers += c;\n        } else {\n            result += c;\n        }\n    }\n    \n    return result + numbers;\n}", "unique_id": "MBCPP_619_2", "index": 5361}
{"task_id": "MBCPP/620", "completion": "    sort(a.begin(), a.end());\n    vector<int> dp(n, 1);\n    int maxSize = 1;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (a[i] % a[j] == 0) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxSize = max(maxSize, dp[i]);\n    }\n\n    return maxSize;\n}", "unique_id": "MBCPP_620_5", "index": 5374}
{"task_id": "MBCPP/621", "completion": "    for (auto& str : testList) {\n        bool isNumeric = all_of(str.begin(), str.end(), ::isdigit);\n        if (isNumeric) {\n            int num = stoi(str);\n            num += k;\n            str = to_string(num);\n        }\n    }\n    return testList;\n}", "unique_id": "MBCPP_621_7", "index": 5386}
{"task_id": "MBCPP/622", "completion": "    int i = 0, j = 0, count;\n    int m1 = -1, m2 = -1;\n\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } \n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        \n        if (arr1[i] <= arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}", "unique_id": "MBCPP_622_2", "index": 5391}
{"task_id": "MBCPP/623", "completion": "    vector<int> result;\n    transform(nums.begin(), nums.end(), back_inserter(result), [n](int num) {\n        return pow(num, n);\n    });\n    return result;\n}", "unique_id": "MBCPP_623_6", "index": 5405}
{"task_id": "MBCPP/624", "completion": "    transform(str.begin(), str.end(), str.begin(), ::toupper);\n    return str;\n}", "unique_id": "MBCPP_624_10", "index": 5419}
{"task_id": "MBCPP/625", "completion": "    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "unique_id": "MBCPP_625_6", "index": 5425}
{"task_id": "MBCPP/626", "completion": "    if (r <= 0) return r;\n    return r * r;\n}", "unique_id": "MBCPP_626_9", "index": 5438}
{"task_id": "MBCPP/627", "completion": "    if (start > end)\n        return start;\n\n    int mid = (start + end) / 2;\n\n    if (array[mid] == mid)\n        return findFirstMissing(array, mid + 1, end);\n    else\n        return findFirstMissing(array, start, mid - 1);\n}", "unique_id": "MBCPP_627_10", "index": 5449}
{"task_id": "MBCPP/628", "completion": "    string result;\n    for (char c : str) {\n        if (c == ' ')\n            result += \"%20\";\n        else\n            result += c;\n    }\n    return result;\n}", "unique_id": "MBCPP_628_5", "index": 5454}
{"task_id": "MBCPP/629", "completion": "    vector<int> result;\n    for(int num : list) {\n        if(num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_629_1", "index": 5460}
{"task_id": "MBCPP/630", "completion": "    vector<vector<int>> result;\n    for (int i = -1; i <= 1; ++i) {\n        for (int j = -1; j <= 1; ++j) {\n            result.push_back({testTup[0] + i, testTup[1] + j});\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_630_5", "index": 5474}
{"task_id": "MBCPP/631", "completion": "    text = regex_replace(text, regex(\" \"), \"_\");\n    text = regex_replace(text, regex(\"_\"), \" \");\n    return text;\n}", "unique_id": "MBCPP_631_1", "index": 5480}
{"task_id": "MBCPP/632", "completion": "    int nonZeroIndex = 0;\n    for (int i = 0; i < numList.size(); i++) {\n        if (numList[i] != 0) {\n            swap(numList[nonZeroIndex], numList[i]);\n            nonZeroIndex++;\n        }\n    }\n    return numList;\n}", "unique_id": "MBCPP_632_10", "index": 5499}
{"task_id": "MBCPP/633", "completion": "    int result = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            result += (arr[i] ^ arr[j]);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_633_9", "index": 5508}
{"task_id": "MBCPP/634", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += pow(evenNum, 4);\n    }\n    return sum;\n}", "unique_id": "MBCPP_634_6", "index": 5515}
{"task_id": "MBCPP/635", "completion": "    priority_queue<int, vector<int>, greater<int>> minHeap(iterable.begin(), iterable.end());\n    vector<int> sorted;\n    while (!minHeap.empty()) {\n        sorted.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sorted;\n}", "unique_id": "MBCPP_635_1", "index": 5520}
{"task_id": "MBCPP/636", "completion": "    if (a == c) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "unique_id": "MBCPP_636_1", "index": 5530}
{"task_id": "MBCPP/637", "completion": "    return actualCost == saleAmount;\n}", "unique_id": "MBCPP_637_5", "index": 5544}
{"task_id": "MBCPP/638", "completion": "    return round(35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16));\n}", "unique_id": "MBCPP_638_9", "index": 5558}
{"task_id": "MBCPP/639", "completion": "    int totalLength = 0;\n    for (const auto& name : sampleNames) {\n        if (!name.empty() && isupper(name[0])) {\n            totalLength += name.length();\n        }\n    }\n    return totalLength;\n}", "unique_id": "MBCPP_639_3", "index": 5562}
{"task_id": "MBCPP/640", "completion": "    string result;\n    for (const auto& item : items) {\n        bool insideParenthesis = false;\n        for (char ch : item) {\n            if (ch == '(') {\n                insideParenthesis = true;\n            } else if (ch == ')') {\n                insideParenthesis = false;\n            } else if (!insideParenthesis) {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_640_8", "index": 5577}
{"task_id": "MBCPP/641", "completion": "    return n * (7 * n - 5) / 2;\n}", "unique_id": "MBCPP_641_5", "index": 5584}
{"task_id": "MBCPP/643", "completion": "    regex pattern(\"\\\\Bz\\\\B\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_643_4", "index": 5593}
{"task_id": "MBCPP/644", "completion": "    reverse(input.begin(), input.begin() + k);\n    return input;\n}", "unique_id": "MBCPP_644_10", "index": 5609}
{"task_id": "MBCPP/645", "completion": "    int product = 1;\n    for (const auto& tuple : testList) {\n        product *= tuple[k];\n    }\n    return product;\n}", "unique_id": "MBCPP_645_5", "index": 5614}
{"task_id": "MBCPP/646", "completion": "    return (n / k) * (n / k) * (n / k);\n}", "unique_id": "MBCPP_646_5", "index": 5624}
{"task_id": "MBCPP/647", "completion": "    vector<string> result;\n    string current = \"\";\n    \n    for (char c : text) {\n        if (isupper(c)) {\n            if (!current.empty()) {\n                result.push_back(current);\n            }\n            current = c;\n        } else {\n            current += c;\n        }\n    }\n    \n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_647_5", "index": 5634}
{"task_id": "MBCPP/648", "completion": "    for (int i = 0; i < lst.size() - 1; i += 2) {\n        swap(lst[i], lst[i + 1]);\n    }\n    return lst;\n}", "unique_id": "MBCPP_648_7", "index": 5646}
{"task_id": "MBCPP/649", "completion": "    int sum = 0;\n    for (int i = m; i <= n; ++i) {\n        sum += nums[i];\n    }\n    return sum;\n}", "unique_id": "MBCPP_649_7", "index": 5656}
{"task_id": "MBCPP/650", "completion": "    if (n != m) {\n        return false;\n    }\n    sort(arr1.begin(), arr1.end());\n    sort(arr2.begin(), arr2.end());\n    for (int i = 0; i < n; i++) {\n        if (arr1[i] != arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_650_8", "index": 5667}
{"task_id": "MBCPP/651", "completion": "    set<int> set1(testTup1.begin(), testTup1.end());\n    for (int elem : testTup2) {\n        if (set1.find(elem) == set1.end()) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_651_7", "index": 5676}
{"task_id": "MBCPP/652", "completion": "    vector<vector<int>> columns;\n    for (const auto& matrix : testList) {\n        for (int i = 0; i < matrix.size(); ++i) {\n            if (columns.size() <= i) {\n                columns.push_back({});\n            }\n            for (int j = 0; j < matrix[i].size(); ++j) {\n                columns[i].push_back(matrix[i][j]);\n            }\n        }\n    }\n\n    string result = \"[\";\n    for (int i = 0; i < columns.size(); ++i) {\n        result += \"(\";\n        for (int j = 0; j < columns[i].size(); ++j) {\n            result += to_string(columns[i][j]);\n            if (j < columns[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i < columns.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_652_5", "index": 5684}
{"task_id": "MBCPP/654", "completion": "    return 2 * (l + b);\n}", "unique_id": "MBCPP_654_7", "index": 5696}
{"task_id": "MBCPP/655", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}", "unique_id": "MBCPP_655_6", "index": 5705}
{"task_id": "MBCPP/656", "completion": "    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    int minSum = 0;\n    for (int i = 0; i < n; i++) {\n        minSum += abs(a[i] - b[i]);\n    }\n    return minSum;\n}", "unique_id": "MBCPP_656_6", "index": 5715}
{"task_id": "MBCPP/657", "completion": "    if (n == 0 || n == 1) \n        return 1;\n    double logSum = 0;\n    for (int i = 2; i <= n; i++) {\n        logSum += log10(i);\n    }\n    double fractionalPart = logSum - floor(logSum);\n    double firstDigit = pow(10, fractionalPart);\n    return (int)firstDigit;\n}", "unique_id": "MBCPP_657_2", "index": 5721}
{"task_id": "MBCPP/658", "completion": "    unordered_map<int, int> freq;\n    for (int num : list1) {\n        freq[num]++;\n    }\n\n    int max_count = 0;\n    int max_item = list1[0];\n    for (auto &entry : freq) {\n        if (entry.second > max_count) {\n            max_count = entry.second;\n            max_item = entry.first;\n        }\n    }\n\n    return max_item;\n}", "unique_id": "MBCPP_658_1", "index": 5730}
{"task_id": "MBCPP/659", "completion": "    unordered_map<int, int> freq;\n    vector<int> result;\n    \n    for (int num : x) {\n        freq[num]++;\n    }\n    \n    for (const auto& pair : freq) {\n        if (pair.second > 1) {\n            result.push_back(pair.first);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_659_10", "index": 5749}
{"task_id": "MBCPP/660", "completion": "    return {l1, r2};\n}", "unique_id": "MBCPP_660_2", "index": 5751}
{"task_id": "MBCPP/661", "completion": "    if (n == 0) return 0;\n    if (n == 1) return arr[0];\n    if (n == 2) return arr[0] + arr[1];\n\n    vector<int> dp(n);\n    dp[0] = arr[0];\n    dp[1] = arr[0] + arr[1];\n    dp[2] = max({arr[0] + arr[1], arr[1] + arr[2], arr[0] + arr[2]});\n\n    for (int i = 3; i < n; i++) {\n        dp[i] = max({dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i] + arr[i-1]});\n    }\n\n    return dp[n-1];\n}", "unique_id": "MBCPP_661_5", "index": 5764}
{"task_id": "MBCPP/662", "completion": "    for (auto &pair : dict1) {\n        sort(pair.second.begin(), pair.second.end());\n    }\n    return dict1;\n}", "unique_id": "MBCPP_662_1", "index": 5770}
{"task_id": "MBCPP/663", "completion": "    return n - (n % x) + y - (n % x < y ? x : 0);\n}", "unique_id": "MBCPP_663_10", "index": 5789}
{"task_id": "MBCPP/664", "completion": "    int sum = 0;\n    int count = 0;\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "unique_id": "MBCPP_664_10", "index": 5799}
{"task_id": "MBCPP/665", "completion": "    if (numList.empty()) return numList;\n    int firstElement = numList.front();\n    numList.erase(numList.begin());\n    numList.push_back(firstElement);\n    return numList;\n}", "unique_id": "MBCPP_665_3", "index": 5802}
{"task_id": "MBCPP/666", "completion": "    return count(str.begin(), str.end(), chr[0]);\n}", "unique_id": "MBCPP_666_2", "index": 5811}
{"task_id": "MBCPP/667", "completion": "    int count = 0;\n    for (char c : str) {\n        if (vowels.find(c) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_667_6", "index": 5825}
{"task_id": "MBCPP/668", "completion": "    string result;\n    bool found = false;\n\n    for (char c : str) {\n        if (c == chr[0]) {\n            if (!found) {\n                result += c;\n                found = true;\n            }\n        } else {\n            result += c;\n            found = false;\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_668_10", "index": 5839}
{"task_id": "MBCPP/669", "completion": "    regex ip_pattern(\"^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})(\\\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})){3}$\");\n    if (regex_match(ip, ip_pattern)) {\n        return \"Valid IP address\";\n    } else {\n        return \"Invalid IP address\";\n    }\n}", "unique_id": "MBCPP_669_1", "index": 5840}
{"task_id": "MBCPP/670", "completion": "    int n = nums.size();\n    if (n <= 1) return true;\n    for (int i = 1; i < n; ++i) {\n        if (nums[i] > nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_670_2", "index": 5851}
{"task_id": "MBCPP/671", "completion": "    if ((n & (n + 1)) == 0)\n        return n;\n    return n | (n + 1);\n}", "unique_id": "MBCPP_671_4", "index": 5863}
{"task_id": "MBCPP/672", "completion": "    return max(num1, max(num2, num3));\n}", "unique_id": "MBCPP_672_4", "index": 5873}
{"task_id": "MBCPP/673", "completion": "    int result = 0;\n    for (int num : list) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "unique_id": "MBCPP_673_8", "index": 5887}
{"task_id": "MBCPP/674", "completion": "    istringstream iss(str);\n    vector<string> words((istream_iterator<string>(iss)), istream_iterator<string>());\n    unordered_set<string> seen;\n    string result;\n    \n    for (const auto &word : words) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_674_6", "index": 5895}
{"task_id": "MBCPP/675", "completion": "    int sum = x + y;\n    if (sum >= m && sum <= n)\n        return 20;\n    return sum;\n}", "unique_id": "MBCPP_675_6", "index": 5905}
{"task_id": "MBCPP/676", "completion": "    return regex_replace(text1, regex(\"[^a-zA-Z0-9]\"), \"\");\n}", "unique_id": "MBCPP_676_10", "index": 5919}
{"task_id": "MBCPP/677", "completion": "    return (a + b + c == 180) && (a > 0) && (b > 0) && (c > 0);\n}", "unique_id": "MBCPP_677_8", "index": 5927}
{"task_id": "MBCPP/678", "completion": "    str1.erase(remove(str1.begin(), str1.end(), ' '), str1.end());\n    return str1;\n}", "unique_id": "MBCPP_678_6", "index": 5935}
{"task_id": "MBCPP/679", "completion": "    auto it = ditionary.begin();\n    advance(it, key);\n    return it->first;\n}", "unique_id": "MBCPP_679_2", "index": 5941}
{"task_id": "MBCPP/680", "completion": "    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] <= nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_680_5", "index": 5954}
{"task_id": "MBCPP/681", "completion": "    if (n <= 1) return n;\n    if (n % 2 == 0) return 2;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return i;\n    }\n    return n;\n}", "unique_id": "MBCPP_681_3", "index": 5962}
{"task_id": "MBCPP/682", "completion": "    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) {\n        return a * b;\n    });\n    return result;\n}", "unique_id": "MBCPP_682_1", "index": 5970}
{"task_id": "MBCPP/683", "completion": "    for (int i = 0; i * i <= n; ++i) {\n        int j = sqrt(n - i * i);\n        if (i * i + j * j == n) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_683_2", "index": 5981}
{"task_id": "MBCPP/684", "completion": "    long long n = str.size();\n    long long total = 0;\n    for(char c : str) {\n        if(c == x[0]) total++;\n    }\n    long long factor = x.size() / n;\n    total *= factor;\n    long long remainder = x.size() % n;\n    for(int i = 0; i < remainder; i++) {\n        if(str[i] == x[0]) total++;\n    }\n    return total;\n}", "unique_id": "MBCPP_684_7", "index": 5996}
{"task_id": "MBCPP/685", "completion": "    auto isPrime = [](int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    };\n\n    int sum = 0;\n    for (int i = 2; i <= n; ++i) {\n        if (isPrime(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_685_8", "index": 6007}
{"task_id": "MBCPP/686", "completion": "    unordered_map<int, int> frequency;\n    for (int num : testTup) {\n        frequency[num]++;\n    }\n\n    string result = \"{\";\n    for (auto it = frequency.begin(); it != frequency.end(); ++it) {\n        if (it != frequency.begin()) {\n            result += \", \";\n        }\n        result += to_string(it->first) + \": \" + to_string(it->second);\n    }\n    result += \"}\";\n\n    return result;\n}", "unique_id": "MBCPP_686_5", "index": 6014}
{"task_id": "MBCPP/687", "completion": "    if (b == 0)\n        return a;\n    return recurGcd(b, a % b);\n}", "unique_id": "MBCPP_687_7", "index": 6026}
{"task_id": "MBCPP/688", "completion": "    return sqrt(a * a + b * b);\n}", "unique_id": "MBCPP_688_2", "index": 6031}
{"task_id": "MBCPP/689", "completion": "    if (n <= 1)\n        return 0;\n    if (arr[0] == 0)\n        return -1;\n\n    int maxReach = arr[0];\n    int step = arr[0];\n    int jump = 1;\n\n    for (int i = 1; i < n; i++) {\n        if (i == n - 1)\n            return jump;\n\n        maxReach = max(maxReach, i + arr[i]);\n        step--;\n\n        if (step == 0) {\n            jump++;\n            if (i >= maxReach)\n                return -1;\n            step = maxReach - i;\n        }\n    }\n\n    return -1;\n}", "unique_id": "MBCPP_689_1", "index": 6040}
{"task_id": "MBCPP/690", "completion": "    vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] * nums[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_690_8", "index": 6057}
{"task_id": "MBCPP/691", "completion": "    unordered_map<int, vector<int>> result;\n    for (const auto& elem : testList) {\n        int first = elem[0];\n        int second = elem[1];\n        result[second].push_back(first);\n    }\n    return result;\n}", "unique_id": "MBCPP_691_1", "index": 6060}
{"task_id": "MBCPP/692", "completion": "    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result = (result * i) % 100;\n    }\n    return result;\n}", "unique_id": "MBCPP_692_1", "index": 6070}
{"task_id": "MBCPP/693", "completion": "    regex r(\"\\\\s+\");\n    return regex_replace(text1, r, \" \");\n}", "unique_id": "MBCPP_693_5", "index": 6084}
{"task_id": "MBCPP/694", "completion": "    set<int> uniqueValues;\n    for (const auto& pair : testDict) {\n        for (int value : pair.second) {\n            uniqueValues.insert(value);\n        }\n    }\n    return vector<int>(uniqueValues.begin(), uniqueValues.end());\n}", "unique_id": "MBCPP_694_8", "index": 6097}
{"task_id": "MBCPP/695", "completion": "    for(int i = 0; i < testTup1.size(); ++i) {\n        if(testTup2[i] <= testTup1[i]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_695_8", "index": 6107}
{"task_id": "MBCPP/697", "completion": "    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 == 0; });\n}", "unique_id": "MBCPP_697_2", "index": 6111}
{"task_id": "MBCPP/701", "completion": "    int total_sum = accumulate(arr.begin(), arr.end(), 0);\n    int left_sum = 0;\n    for (int i = 0; i < arr.size(); ++i) {\n        total_sum -= arr[i];\n        if (left_sum == total_sum) {\n            return i;\n        }\n        left_sum += arr[i];\n    }\n    return -1;\n}", "unique_id": "MBCPP_701_4", "index": 6123}
{"task_id": "MBCPP/702", "completion": "    sort(arr.begin(), arr.end());\n    int left = 0, right = 0;\n    int min_removals = n;\n\n    while (right < n) {\n        if (arr[right] - arr[left] <= k) {\n            min_removals = min(min_removals, n - (right - left + 1));\n            right++;\n        } else {\n            left++;\n        }\n    }\n\n    return min_removals;\n}", "unique_id": "MBCPP_702_2", "index": 6131}
{"task_id": "MBCPP/703", "completion": "    return d.find(x) != d.end();\n}", "unique_id": "MBCPP_703_8", "index": 6147}
{"task_id": "MBCPP/704", "completion": "    double sum = 0.0;\n    for (int i = 1; i < n; ++i) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_704_8", "index": 6157}
{"task_id": "MBCPP/706", "completion": "    unordered_set<int> set(arr1.begin(), arr1.end());\n    for (int i = 0; i < n; i++) {\n        if (set.find(arr2[i]) == set.end()) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_706_3", "index": 6162}
{"task_id": "MBCPP/707", "completion": "    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        count += __builtin_popcount(i);\n    }\n    return count;\n}", "unique_id": "MBCPP_707_3", "index": 6172}
{"task_id": "MBCPP/708", "completion": "    vector<string> result;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "MBCPP_708_1", "index": 6180}
{"task_id": "MBCPP/709", "completion": "    unordered_map<int, unordered_set<int>> valueToKeys;\n    for (const auto& pair : testList) {\n        int key = pair[0];\n        int value = pair[1];\n        valueToKeys[value].insert(key);\n    }\n    \n    string result = \"{\";\n    for (const auto& entry : valueToKeys) {\n        if (result.length() > 1) {\n            result += \", \";\n        }\n        result += to_string(entry.first) + \": \" + to_string(entry.second.size());\n    }\n    result += \"}\";\n    \n    return result;\n}", "unique_id": "MBCPP_709_4", "index": 6193}
{"task_id": "MBCPP/710", "completion": "    return {testTup.front(), testTup.back()};\n}", "unique_id": "MBCPP_710_1", "index": 6200}
{"task_id": "MBCPP/711", "completion": "    int oddProduct = 1, evenProduct = 1;\n    bool isOdd = true;\n    \n    while (n > 0) {\n        int digit = n % 10;\n        if (isOdd)\n            oddProduct *= digit;\n        else\n            evenProduct *= digit;\n        \n        n /= 10;\n        isOdd = !isOdd;\n    }\n    \n    return oddProduct == evenProduct;\n}", "unique_id": "MBCPP_711_9", "index": 6218}
{"task_id": "MBCPP/713", "completion": "    for (bool value : testTup) {\n        if (!value) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_713_7", "index": 6226}
{"task_id": "MBCPP/714", "completion": "    set<int> primeFactors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            primeFactors.insert(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        primeFactors.insert(n);\n    }\n    return primeFactors.size();\n}", "unique_id": "MBCPP_714_3", "index": 6232}
{"task_id": "MBCPP/715", "completion": "    vector<int> result;\n    stringstream ss(testStr);\n    string temp;\n    while (getline(ss, temp, ',')) {\n        result.push_back(stoi(temp));\n    }\n    return result;\n}", "unique_id": "MBCPP_715_9", "index": 6248}
{"task_id": "MBCPP/716", "completion": "    return 4 * a;\n}", "unique_id": "MBCPP_716_5", "index": 6254}
{"task_id": "MBCPP/717", "completion": "    int n = data.size();\n    double mean = accumulate(data.begin(), data.end(), 0.0) / n;\n    double sq_sum = inner_product(data.begin(), data.end(), data.begin(), 0.0, plus<double>(), [mean](double a, double b) { return (a - mean) * (b - mean); });\n    return sqrt(sq_sum / n);\n}", "unique_id": "MBCPP_717_3", "index": 6262}
{"task_id": "MBCPP/719", "completion": "    if (regex_match(text, regex(\"ab*\")))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}", "unique_id": "MBCPP_719_7", "index": 6276}
{"task_id": "MBCPP/721", "completion": "    vector<vector<double>> dp(n, vector<double>(n, 0));\n    dp[0][0] = cost[0][0];\n\n    for(int i = 1; i < n; ++i) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n\n    for(int i = 1; i < n; ++i) {\n        for(int j = 1; j < n; ++j) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n\n    return dp[n-1][n-1] / (2*n - 1);\n}", "unique_id": "MBCPP_721_1", "index": 6280}
{"task_id": "MBCPP/723", "completion": "    int count = 0;\n    int size = min(nums1.size(), nums2.size());\n    for (int i = 0; i < size; ++i) {\n        if (nums1[i] == nums2[i]) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_723_1", "index": 6290}
{"task_id": "MBCPP/724", "completion": "    string result = to_string(static_cast<unsigned long long>(pow(base, power)));\n    int sum = 0;\n    for (char c : result) {\n        sum += c - '0';\n    }\n    return sum;\n}", "unique_id": "MBCPP_724_6", "index": 6305}
{"task_id": "MBCPP/725", "completion": "    vector<string> result;\n    regex re(\"\\\"([^\\\"]*)\\\"\");\n    smatch match;\n    while (regex_search(text1, match, re)) {\n        result.push_back(match[1].str());\n        text1 = match.suffix().str();\n    }\n    return result;\n}", "unique_id": "MBCPP_725_3", "index": 6312}
{"task_id": "MBCPP/726", "completion": "    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] * testTup[i + 1]);\n    }\n    return result;\n}", "unique_id": "MBCPP_726_3", "index": 6322}
{"task_id": "MBCPP/727", "completion": "    return regex_replace(s, regex(\"[^a-zA-Z0-9]\"), \"\");\n}", "unique_id": "MBCPP_727_3", "index": 6332}
{"task_id": "MBCPP/728", "completion": "    vector<int> result;\n    for (size_t i = 0; i < lst1.size(); ++i) {\n        result.push_back(lst1[i] + lst2[i]);\n    }\n    return result;\n}", "unique_id": "MBCPP_728_9", "index": 6348}
{"task_id": "MBCPP/729", "completion": "    vector<int> result(nums1.size());\n    transform(nums1.begin(), nums1.end(), nums2.begin(), result.begin(), [](int a, int b) { return a + b; });\n    return result;\n}", "unique_id": "MBCPP_729_3", "index": 6352}
{"task_id": "MBCPP/731", "completion": "    double l = sqrt(r * r + h * h);\n    return M_PI * r * l;\n}", "unique_id": "MBCPP_731_2", "index": 6361}
{"task_id": "MBCPP/732", "completion": "    for (char &c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n        }\n    }\n    return text;\n}", "unique_id": "MBCPP_732_4", "index": 6373}
{"task_id": "MBCPP/733", "completion": "    int left = 0, right = a.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            right = mid - 1;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_733_4", "index": 6383}
{"task_id": "MBCPP/734", "completion": "    int result = 0;\n    for (int i = 0; i < n; i++) {\n        int prod = 1;\n        for (int j = i; j < n; j++) {\n            prod *= arr[j];\n            result += prod;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_734_4", "index": 6393}
{"task_id": "MBCPP/735", "completion": "    if (n <= 1)\n        return n;\n    int num_bits = sizeof(n) * 8;\n    int mask = (1 << (num_bits - 1)) - 1;\n    mask ^= 1;\n    int toggled = n ^ mask;\n    return toggled;\n}", "unique_id": "MBCPP_735_10", "index": 6409}
{"task_id": "MBCPP/736", "completion": "    return lower_bound(a.begin(), a.end(), x) - a.begin();\n}", "unique_id": "MBCPP_736_1", "index": 6410}
{"task_id": "MBCPP/737", "completion": "    regex vowel_regex(\"^[aeiouAEIOU].*\");\n    if (regex_match(str, vowel_regex)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}", "unique_id": "MBCPP_737_8", "index": 6427}
{"task_id": "MBCPP/738", "completion": "    if (n == 0)\n        return 1;\n    return 1 / pow(2, n - 1) + geometricSum(n - 1);\n}", "unique_id": "MBCPP_738_1", "index": 6430}
{"task_id": "MBCPP/739", "completion": "    int index = 1;\n    while (true) {\n        int triangularNumber = index * (index + 1) / 2;\n        if (to_string(triangularNumber).length() == n) {\n            return index;\n        }\n        index++;\n    }\n}", "unique_id": "MBCPP_739_2", "index": 6441}
{"task_id": "MBCPP/740", "completion": "    unordered_map<int, int> result;\n    for (size_t i = 0; i < testTup.size(); i += 2) {\n        result[testTup[i]] = testTup[i + 1];\n    }\n    return result;\n}", "unique_id": "MBCPP_740_5", "index": 6454}
{"task_id": "MBCPP/741", "completion": "    return s.find_first_not_of(s[0]) == string::npos;\n}", "unique_id": "MBCPP_741_10", "index": 6469}
{"task_id": "MBCPP/742", "completion": "    return sqrt(3) * side * side;\n}", "unique_id": "MBCPP_742_1", "index": 6470}
{"task_id": "MBCPP/743", "completion": "    int len1 = list1.size();\n    if (len1 == 0 || m == 0) return list1;\n    \n    m = m % len1; // In case the number of rotations is greater than the size of the list\n\n    vector<int> rotated_list;\n\n    for (int i = 0; i < n; i++) {\n        // Calculate the starting point for each rotation\n        int start = (len1 - m + i) % len1;\n        for (int j = 0; j < len1; j++) {\n            rotated_list.push_back(list1[(start + j) % len1]);\n        }\n    }\n\n    return rotated_list;\n}", "unique_id": "MBCPP_743_8", "index": 6487}
{"task_id": "MBCPP/744", "completion": "    return find(testTup.begin(), testTup.end(), -1) == testTup.end();\n}", "unique_id": "MBCPP_744_9", "index": 6498}
{"task_id": "MBCPP/745", "completion": "    vector<int> result;\n    for (int i = startnum; i <= endnum; ++i) {\n        int num = i;\n        bool isDivisible = true;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                isDivisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (isDivisible) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_745_7", "index": 6506}
{"task_id": "MBCPP/747", "completion": "    vector<vector<vector<int>>> dp(m+1, vector<vector<int>>(n+1, vector<int>(o+1, 0)));\n\n    for (int i = 1; i <= m; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            for (int k = 1; k <= o; ++k) {\n                if (x[i-1] == y[j-1] && y[j-1] == z[k-1]) {\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                } else {\n                    dp[i][j][k] = max(max(dp[i-1][j][k], dp[i][j-1][k]), dp[i][j][k-1]);\n                }\n            }\n        }\n    }\n\n    return dp[m][n][o];\n}", "unique_id": "MBCPP_747_7", "index": 6516}
{"task_id": "MBCPP/748", "completion": "    return regex_replace(str1, regex(\"([A-Z])\"), \" $1\").substr(1);\n}", "unique_id": "MBCPP_748_2", "index": 6521}
{"task_id": "MBCPP/749", "completion": "    vector<int> nums;\n    for (const auto& str : numsStr) {\n        nums.push_back(stoi(str));\n    }\n    sort(nums.begin(), nums.end());\n    return nums;\n}", "unique_id": "MBCPP_749_1", "index": 6530}
{"task_id": "MBCPP/750", "completion": "    testList.insert(testList.end(), testTup.begin(), testTup.end());\n    return testList;\n}", "unique_id": "MBCPP_750_3", "index": 6542}
{"task_id": "MBCPP/751", "completion": "    int n = arr.size();\n    for (int i = 0; i <= (n - 2) / 2; i++) {\n        if (arr[i] > arr[2 * i + 1] || (2 * i + 2 < n && arr[i] > arr[2 * i + 2])) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_751_8", "index": 6557}
{"task_id": "MBCPP/752", "completion": "    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2);\n}", "unique_id": "MBCPP_752_7", "index": 6566}
{"task_id": "MBCPP/754", "completion": "    vector<int> result;\n    set<int> s1(l1.begin(), l1.end());\n    set<int> s2(l2.begin(), l2.end());\n    set<int> s3(l3.begin(), l3.end());\n    \n    for (int num : s1) {\n        if (s2.count(num) && s3.count(num)) {\n            result.push_back(num);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_754_3", "index": 6572}
{"task_id": "MBCPP/756", "completion": "    regex pattern(\"a(b?)\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_756_2", "index": 6581}
{"task_id": "MBCPP/757", "completion": "    unordered_set<string> seen;\n    int count = 0;\n\n    for (const string &word : testList) {\n        string reversedWord = word;\n        reverse(reversedWord.begin(), reversedWord.end());\n\n        if (seen.find(reversedWord) != seen.end()) {\n            count++;\n        } else {\n            seen.insert(word);\n        }\n    }\n\n    return to_string(count);\n}", "unique_id": "MBCPP_757_9", "index": 6598}
{"task_id": "MBCPP/759", "completion": "    regex pattern(\"^[0-9]+\\\\.[0-9]{2}$\");\n    return regex_match(num, pattern);\n}", "unique_id": "MBCPP_759_3", "index": 6602}
{"task_id": "MBCPP/760", "completion": "    for (int i = 1; i < n; i++) {\n        if (arr[i] != arr[0]) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "unique_id": "MBCPP_760_3", "index": 6612}
{"task_id": "MBCPP/762", "completion": "    return monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11;\n}", "unique_id": "MBCPP_762_4", "index": 6623}
{"task_id": "MBCPP/763", "completion": "    sort(arr.begin(), arr.end());\n    int minDiff = INT_MAX;\n    for (int i = 1; i < n; i++) {\n        minDiff = min(minDiff, arr[i] - arr[i - 1]);\n    }\n    return minDiff;\n}", "unique_id": "MBCPP_763_9", "index": 6638}
{"task_id": "MBCPP/764", "completion": "    int count = 0;\n    for (char c : str) {\n        if (isdigit(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_764_6", "index": 6645}
{"task_id": "MBCPP/765", "completion": "    int count = 0;\n    int num = 1;\n    while (count < n) {\n        int sum = 0;\n        for (int i = num; sum < num; i++) {\n            sum += i;\n        }\n        if (sum == num) {\n            count++;\n        }\n        num++;\n    }\n    return num - 1;\n}", "unique_id": "MBCPP_765_6", "index": 6655}
{"task_id": "MBCPP/766", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < l1.size() - 1; ++i) {\n        result.push_back({l1[i], l1[i + 1]});\n    }\n    return result;\n}", "unique_id": "MBCPP_766_8", "index": 6667}
{"task_id": "MBCPP/767", "completion": "    unordered_map<int, int> m;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (m.find(complement) != m.end()) {\n            count += m[complement];\n        }\n        m[arr[i]]++;\n    }\n    return count;\n}", "unique_id": "MBCPP_767_5", "index": 6674}
{"task_id": "MBCPP/768", "completion": "    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return (count % 2) != 0;\n}", "unique_id": "MBCPP_768_2", "index": 6681}
{"task_id": "MBCPP/769", "completion": "    set<int> set1(li1.begin(), li1.end());\n    set<int> set2(li2.begin(), li2.end());\n    vector<int> result;\n\n    for (int num : set1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n\n    for (int num : set2) {\n        if (set1.find(num) == set1.end()) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}", "unique_id": "MBCPP_769_2", "index": 6691}
{"task_id": "MBCPP/770", "completion": "    int sum = 0;\n    for (int i = 1, count = 0; count < n; i += 2, ++count) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}", "unique_id": "MBCPP_770_6", "index": 6705}
{"task_id": "MBCPP/771", "completion": "    stack<char> s;\n    for(char c : exp) {\n        if(c == '(' || c == '{' || c == '[') {\n            s.push(c);\n        } else {\n            if(s.empty()) return false;\n            char top = s.top();\n            if((c == ')' && top != '(') || \n               (c == '}' && top != '{') || \n               (c == ']' && top != '[')) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();\n}", "unique_id": "MBCPP_771_8", "index": 6717}
{"task_id": "MBCPP/772", "completion": "    istringstream iss(testStr);\n    ostringstream oss;\n    string word;\n    \n    while (iss >> word) {\n        if (word.length() != k) {\n            if (oss.tellp() > 0) {\n                oss << ' ';\n            }\n            oss << word;\n        }\n    }\n    \n    return oss.str();\n}", "unique_id": "MBCPP_772_9", "index": 6728}
{"task_id": "MBCPP/774", "completion": "    const regex pattern(\"(\\\\w+)(\\\\.|_)?(\\\\w*)@(\\\\w+)(\\\\.(\\\\w+))+\");\n    if (regex_match(email, pattern)) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}", "unique_id": "MBCPP_774_9", "index": 6738}
{"task_id": "MBCPP/775", "completion": "    for (int i = 1; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_775_10", "index": 6749}
{"task_id": "MBCPP/776", "completion": "    int count = 0;\n    auto isVowel = [](char c) {\n        c = tolower(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    };\n    for (size_t i = 1; i < testStr.length() - 1; ++i) {\n        if (isVowel(testStr[i - 1]) || isVowel(testStr[i + 1])) {\n            ++count;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_776_5", "index": 6754}
{"task_id": "MBCPP/777", "completion": "    unordered_map<int, int> frequency;\n    for (int num : arr) {\n        frequency[num]++;\n    }\n    \n    int sum = 0;\n    for (const auto &entry : frequency) {\n        if (entry.second == 1) {\n            sum += entry.first;\n        }\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_777_9", "index": 6768}
{"task_id": "MBCPP/780", "completion": "    vector<vector<int>> result;\n    int n = testList.size();\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = 0; k < 2; ++k) {\n                for (int l = 0; l < 2; ++l) {\n                    result.push_back({testList[i][k] + testList[j][l], testList[j][l] + testList[i][k]});\n                }\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_780_1", "index": 6770}
{"task_id": "MBCPP/781", "completion": "    int count = 0;\n    for (int i = 1; i * i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n            if (i != n / i) {\n                count++;\n            }\n        }\n    }\n    return (count % 2 == 0) ? \"Even\" : \"Odd\";\n}", "unique_id": "MBCPP_781_4", "index": 6783}
{"task_id": "MBCPP/782", "completion": "    int n = arr.size();\n    int total_sum = 0;\n    \n    for (int i = 0; i < n; ++i) {\n        int end = i + 1;\n        int start = n - i;\n        int total_subarrays = start * end;\n        int odd_count = (total_subarrays + 1) / 2;\n        total_sum += arr[i] * odd_count;\n    }\n    \n    return total_sum;\n}", "unique_id": "MBCPP_782_1", "index": 6790}
{"task_id": "MBCPP/784", "completion": "    int firstEven = -1, firstOdd = -1;\n    for (int num : list1) {\n        if (num % 2 == 0 && firstEven == -1) {\n            firstEven = num;\n        }\n        if (num % 2 != 0 && firstOdd == -1) {\n            firstOdd = num;\n        }\n        if (firstEven != -1 && firstOdd != -1) {\n            break;\n        }\n    }\n    if (firstEven != -1 && firstOdd != -1) {\n        return firstEven * firstOdd;\n    }\n    return -1;  // in case there is no even or no odd number in the list\n}", "unique_id": "MBCPP_784_3", "index": 6802}
{"task_id": "MBCPP/785", "completion": "    vector<int> result;\n    testStr = testStr.substr(1, testStr.size() - 2); // Remove the parentheses\n    stringstream ss(testStr);\n    string item;\n    while (getline(ss, item, ',')) {\n        result.push_back(stoi(item));\n    }\n    return result;\n}", "unique_id": "MBCPP_785_8", "index": 6817}
{"task_id": "MBCPP/786", "completion": "    return upper_bound(a.begin(), a.end(), x) - a.begin();\n}", "unique_id": "MBCPP_786_3", "index": 6822}
{"task_id": "MBCPP/787", "completion": "    regex pattern(\"abbb\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_787_8", "index": 6837}
{"task_id": "MBCPP/788", "completion": "    testList.push_back(testStr);\n    return testList;\n}", "unique_id": "MBCPP_788_2", "index": 6841}
{"task_id": "MBCPP/789", "completion": "    return s * l;\n}", "unique_id": "MBCPP_789_7", "index": 6856}
{"task_id": "MBCPP/790", "completion": "    for (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_790_10", "index": 6869}
{"task_id": "MBCPP/792", "completion": "    return inputList.size();\n}", "unique_id": "MBCPP_792_8", "index": 6877}
{"task_id": "MBCPP/793", "completion": "    int low = 0, high = n - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            low = mid + 1; // Move to the right half\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_793_2", "index": 6881}
{"task_id": "MBCPP/794", "completion": "    if (text.front() == 'a' && text.back() == 'b') {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_794_9", "index": 6898}
{"task_id": "MBCPP/796", "completion": "    int sum = 0;\n    for (const auto& item : dict) {\n        sum += item.second;\n    }\n    return sum;\n}", "unique_id": "MBCPP_796_10", "index": 6909}
{"task_id": "MBCPP/797", "completion": "    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_797_3", "index": 6912}
{"task_id": "MBCPP/798", "completion": "    int total = 0;\n    for (int num : arr) {\n        total += num;\n    }\n    return total;\n}", "unique_id": "MBCPP_798_8", "index": 6927}
{"task_id": "MBCPP/799", "completion": "    return (n << d) | (n >> (32 - d));\n}", "unique_id": "MBCPP_799_6", "index": 6935}
{"task_id": "MBCPP/800", "completion": "    text.erase(remove(text.begin(), text.end(), ' '), text.end());\n    return text;\n}", "unique_id": "MBCPP_800_3", "index": 6942}
{"task_id": "MBCPP/801", "completion": "    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}", "unique_id": "MBCPP_801_8", "index": 6957}
{"task_id": "MBCPP/802", "completion": "    int min_element_index = 0;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < arr[min_element_index]) {\n            min_element_index = i;\n        }\n    }\n    return min_element_index;\n}", "unique_id": "MBCPP_802_3", "index": 6962}
{"task_id": "MBCPP/803", "completion": "    if (n < 0)\n        return false;\n    int sqrt_n = sqrt(n);\n    return sqrt_n * sqrt_n == n;\n}", "unique_id": "MBCPP_803_9", "index": 6978}
{"task_id": "MBCPP/804", "completion": "    for(int i = 0; i < n; ++i) {\n        if(arr[i] % 2 == 0) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_804_2", "index": 6981}
{"task_id": "MBCPP/805", "completion": "    if (lists.empty())\n        return {};\n\n    vector<int> maxList = lists[0];\n    int maxSum = accumulate(lists[0].begin(), lists[0].end(), 0);\n\n    for (const auto& list : lists) {\n        int currentSum = accumulate(list.begin(), list.end(), 0);\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            maxList = list;\n        }\n    }\n\n    return maxList;\n}", "unique_id": "MBCPP_805_2", "index": 6991}
{"task_id": "MBCPP/806", "completion": "    int maxRun = 0, currentRun = 0;\n    for (char c : testStr) {\n        if (isupper(c)) {\n            currentRun++;\n            maxRun = max(maxRun, currentRun);\n        } else {\n            currentRun = 0;\n        }\n    }\n    return maxRun;\n}", "unique_id": "MBCPP_806_10", "index": 7009}
{"task_id": "MBCPP/807", "completion": "    for (int num : nums) {\n        if (num % 2 != 0) {\n            return num;\n        }\n    }\n    return -1; // If no odd number is found, return -1 or an appropriate value indicating failure\n}", "unique_id": "MBCPP_807_6", "index": 7015}
{"task_id": "MBCPP/808", "completion": "    return find(testTup.begin(), testTup.end(), k) != testTup.end();\n}", "unique_id": "MBCPP_808_2", "index": 7021}
{"task_id": "MBCPP/809", "completion": "    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] >= testTup1[i]) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_809_9", "index": 7038}
{"task_id": "MBCPP/810", "completion": "    vector<string> result;\n    vector<int> counts = {a, b, c, d};\n    vector<string> elements = {\"p\", \"q\", \"r\", \"s\"};\n    \n    for (int i = 0; i < counts.size(); ++i) {\n        for (int j = 0; j < counts[i]; ++j) {\n            result.push_back(elements[i]);\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_810_5", "index": 7044}
{"task_id": "MBCPP/811", "completion": "    return testList1 == testList2;\n}", "unique_id": "MBCPP_811_2", "index": 7051}
{"task_id": "MBCPP/812", "completion": "    size_t pos = street.find(\" Road\");\n    if (pos != string::npos) {\n        street.replace(pos, 5, \" Rd.\");\n    }\n    return street;\n}", "unique_id": "MBCPP_812_3", "index": 7062}
{"task_id": "MBCPP/813", "completion": "    return str1.length();\n}", "unique_id": "MBCPP_813_8", "index": 7077}
{"task_id": "MBCPP/814", "completion": "    return (p * q) / 2;\n}", "unique_id": "MBCPP_814_10", "index": 7089}
{"task_id": "MBCPP/815", "completion": "    int low = 0, mid = 0, high = n - 1;\n    while (mid <= high) {\n        if (arr[mid] == 0) {\n            swap(arr[low++], arr[mid++]);\n        } else if (arr[mid] == 1) {\n            mid++;\n        } else {\n            swap(arr[mid], arr[high--]);\n        }\n    }\n    return arr;\n}", "unique_id": "MBCPP_815_2", "index": 7091}
{"task_id": "MBCPP/817", "completion": "    vector<int> result;\n    for_each(nums.begin(), nums.end(), [&](int num) {\n        if (num % m == 0 || num % n == 0) {\n            result.push_back(num);\n        }\n    });\n    return result;\n}", "unique_id": "MBCPP_817_4", "index": 7103}
{"task_id": "MBCPP/818", "completion": "    int count = 0;\n    for (char c : str) {\n        if (islower(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "MBCPP_818_5", "index": 7114}
{"task_id": "MBCPP/819", "completion": "    vector<vector<int>> result(2);\n    if (lists.empty()) return result;\n    \n    int n = lists.size();\n    result[0].push_back(lists[0]);\n    int count = 1;\n\n    for (int i = 1; i < n; ++i) {\n        if (lists[i] == lists[i - 1]) {\n            count++;\n        } else {\n            result[1].push_back(count);\n            result[0].push_back(lists[i]);\n            count = 1;\n        }\n    }\n    result[1].push_back(count);\n    \n    return result;\n}", "unique_id": "MBCPP_819_6", "index": 7125}
{"task_id": "MBCPP/820", "completion": "    return monthnum1 == 2;\n}", "unique_id": "MBCPP_820_4", "index": 7133}
{"task_id": "MBCPP/821", "completion": "    unordered_map<string, string> mergedDict = dict1;\n    for (const auto& item : dict2) {\n        mergedDict[item.first] = item.second;\n    }\n    return mergedDict;\n}", "unique_id": "MBCPP_821_7", "index": 7146}
{"task_id": "MBCPP/822", "completion": "    if (p.length() < 8) return false;\n\n    bool has_upper = false, has_lower = false, has_digit = false, has_special = false;\n    string special_characters = \"!@#$%^&*()-+\";\n\n    for (char c : p) {\n        if (isupper(c)) has_upper = true;\n        if (islower(c)) has_lower = true;\n        if (isdigit(c)) has_digit = true;\n        if (special_characters.find(c) != string::npos) has_special = true;\n    }\n\n    return has_upper && has_lower && has_digit && has_special;\n}", "unique_id": "MBCPP_822_9", "index": 7158}
{"task_id": "MBCPP/823", "completion": "    regex pattern(\"^\" + sample);\n    if (regex_search(str, pattern))\n        return \"string starts with the given substring\";\n    else\n        return \"string doesnt start with the given substring\";\n}", "unique_id": "MBCPP_823_6", "index": 7165}
{"task_id": "MBCPP/824", "completion": "    vector<int> result;\n    for (int num : l) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_824_3", "index": 7172}
{"task_id": "MBCPP/825", "completion": "    vector<int> result;\n    for(int index : listIndex) {\n        result.push_back(nums[index]);\n    }\n    return result;\n}", "unique_id": "MBCPP_825_10", "index": 7189}
{"task_id": "MBCPP/826", "completion": "    if (a <= 0 || b <= 0 || c <= 0)\n        return \"Not a Triangle\";\n\n    vector<int> sides = {a, b, c};\n    sort(sides.begin(), sides.end());\n\n    if (sides[0] + sides[1] <= sides[2])\n        return \"Not a Triangle\";\n\n    int a2 = sides[0] * sides[0];\n    int b2 = sides[1] * sides[1];\n    int c2 = sides[2] * sides[2];\n\n    if (a2 + b2 == c2)\n        return \"Right-angled Triangle\";\n    else if (a2 + b2 > c2)\n        return \"Acute-angled Triangle\";\n    else\n        return \"Obtuse-angled Triangle\";\n}", "unique_id": "MBCPP_826_5", "index": 7194}
{"task_id": "MBCPP/827", "completion": "    int sum = 0;\n    for (const auto& row : list1) {\n        if (c < row.size()) {\n            sum += row[c];\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_827_8", "index": 7207}
{"task_id": "MBCPP/828", "completion": "    int alphabets = 0, digits = 0, specialChars = 0;\n    for (char ch : str) {\n        if (isalpha(ch)) {\n            alphabets++;\n        } else if (isdigit(ch)) {\n            digits++;\n        } else {\n            specialChars++;\n        }\n    }\n    return {alphabets, digits, specialChars};\n}", "unique_id": "MBCPP_828_10", "index": 7219}
{"task_id": "MBCPP/829", "completion": "    unordered_map<string, int> freq;\n    for (const string& str : input) {\n        freq[str]++;\n    }\n    \n    int first_max = INT_MIN, second_max = INT_MIN;\n    string first_str, second_str;\n    \n    for (const auto& entry : freq) {\n        if (entry.second > first_max) {\n            second_max = first_max;\n            second_str = first_str;\n            first_max = entry.second;\n            first_str = entry.first;\n        } else if (entry.second > second_max && entry.second != first_max) {\n            second_max = entry.second;\n            second_str = entry.first;\n        }\n    }\n    \n    return second_str;\n}", "unique_id": "MBCPP_829_5", "index": 7224}
{"task_id": "MBCPP/831", "completion": "    unordered_map<int, int> freq;\n    for (int i = 0; i < n; ++i) {\n        freq[arr[i]]++;\n    }\n    \n    int count = 0;\n    for (auto& [key, value] : freq) {\n        count += (value * (value - 1)) / 2;\n    }\n    \n    return count;\n}", "unique_id": "MBCPP_831_9", "index": 7238}
{"task_id": "MBCPP/832", "completion": "    regex r(\"\\\\d+\");\n    auto words_begin = sregex_iterator(input.begin(), input.end(), r);\n    auto words_end = sregex_iterator();\n    \n    int max_val = 0;\n    for (auto it = words_begin; it != words_end; ++it) {\n        smatch match = *it;\n        int num = stoi(match.str());\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    return max_val;\n}", "unique_id": "MBCPP_832_2", "index": 7241}
{"task_id": "MBCPP/833", "completion": "    vector<int> keys;\n    for (const auto& pair : dict) {\n        keys.push_back(pair.first);\n    }\n    return keys;\n}", "unique_id": "MBCPP_833_8", "index": 7257}
{"task_id": "MBCPP/834", "completion": "    vector<vector<int>> matrix(n, vector<int>(n));\n    int num = 1;\n    int left = 0, right = n - 1, top = 0, bottom = n - 1;\n\n    while (left <= right && top <= bottom) {\n        for (int i = left; i <= right; ++i) {\n            matrix[top][i] = num++;\n        }\n        ++top;\n\n        for (int i = top; i <= bottom; ++i) {\n            matrix[i][right] = num++;\n        }\n        --right;\n\n        for (int i = right; i >= left; --i) {\n            matrix[bottom][i] = num++;\n        }\n        --bottom;\n\n        for (int i = bottom; i >= top; --i) {\n            matrix[i][left] = num++;\n        }\n        ++left;\n    }\n\n    return matrix;\n}", "unique_id": "MBCPP_834_6", "index": 7265}
{"task_id": "MBCPP/836", "completion": "    int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n\n    for (int i = 0; i < size; i++) {\n        max_ending_here += a[i];\n\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    return end - start + 1;\n}", "unique_id": "MBCPP_836_2", "index": 7271}
{"task_id": "MBCPP/837", "completion": "    int sum = 0;\n    for (int i = 1; i <= 2*n; i += 2) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_837_10", "index": 7289}
{"task_id": "MBCPP/838", "completion": "    int cnt1 = 0, cnt2 = 0, swaps = 0;\n    int n = s1.size();\n    for (int i = 0; i < n; ++i) {\n        if (s1[i] != s2[i]) {\n            if (s1[i] == '0') cnt1++;\n            else cnt2++;\n        }\n    }\n    if ((cnt1 + cnt2) % 2 != 0) return -1;\n    swaps = (cnt1 + 1) / 2 + (cnt2 + 1) / 2;\n    return swaps;\n}", "unique_id": "MBCPP_838_5", "index": 7294}
{"task_id": "MBCPP/840", "completion": "    if (b == 0 && a * c < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "unique_id": "MBCPP_840_7", "index": 7306}
{"task_id": "MBCPP/841", "completion": "    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++)\n        for (int j = i + 1; j < n; j++)\n            if (arr[i] > arr[j])\n                inv_count++;\n    return inv_count;\n}", "unique_id": "MBCPP_841_7", "index": 7316}
{"task_id": "MBCPP/842", "completion": "    unordered_map<int, int> freq;\n    for (int i = 0; i < arrSize; ++i) {\n        freq[arr[i]]++;\n    }\n    for (const auto& entry : freq) {\n        if (entry.second % 2 != 0) {\n            return entry.first;\n        }\n    }\n    return -1; // This line should never be reached if input guarantees an odd occurrence\n}", "unique_id": "MBCPP_842_10", "index": 7329}
{"task_id": "MBCPP/843", "completion": "    vector<int> ugly(n, INT_MAX);\n    vector<int> index(primes.size(), 0);\n    ugly[0] = 1;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < primes.size(); ++j) {\n            ugly[i] = min(ugly[i], primes[j] * ugly[index[j]]);\n        }\n        for (int j = 0; j < primes.size(); ++j) {\n            if (ugly[i] == primes[j] * ugly[index[j]]) {\n                index[j]++;\n            }\n        }\n    }\n    return ugly[n - 1];\n}", "unique_id": "MBCPP_843_9", "index": 7338}
{"task_id": "MBCPP/844", "completion": "    if (k <= (n + 1) / 2) {\n        return 2 * k - 1;\n    } else {\n        return 2 * (k - (n + 1) / 2);\n    }\n}", "unique_id": "MBCPP_844_1", "index": 7340}
{"task_id": "MBCPP/845", "completion": "    if (n == 0 || n == 1)\n        return 1;\n    double digitCount = 0;\n    for (int i = 2; i <= n; i++) {\n        digitCount += log10(i);\n    }\n    return floor(digitCount) + 1;\n}", "unique_id": "MBCPP_845_5", "index": 7354}
{"task_id": "MBCPP/846", "completion": "    sort(arr.begin(), arr.end());\n    sort(dep.begin(), dep.end());\n    \n    int platforms_needed = 1, result = 1;\n    int i = 1, j = 0;\n    \n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            platforms_needed++;\n            i++;\n        } else {\n            platforms_needed--;\n            j++;\n        }\n        if (platforms_needed > result) {\n            result = platforms_needed;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_846_8", "index": 7367}
{"task_id": "MBCPP/847", "completion": "    return xs;\n}", "unique_id": "MBCPP_847_2", "index": 7371}
{"task_id": "MBCPP/848", "completion": "    return ((base1 + base2) * height) / 2;\n}", "unique_id": "MBCPP_848_4", "index": 7383}
{"task_id": "MBCPP/849", "completion": "    int result = 0;\n    for (int i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            bool isPrime = true;\n            for (int j = 2; j * j <= i; ++j) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result += i;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_849_9", "index": 7398}
{"task_id": "MBCPP/850", "completion": "    return (a + b + c == 180) && a > 0 && b > 0 && c > 0;\n}", "unique_id": "MBCPP_850_9", "index": 7408}
{"task_id": "MBCPP/852", "completion": "    vector<int> result;\n    for (int num : numList) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_852_4", "index": 7413}
{"task_id": "MBCPP/853", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_853_5", "index": 7424}
{"task_id": "MBCPP/854", "completion": "    make_heap(rawheap.begin(), rawheap.end(), greater<int>());\n    return rawheap;\n}", "unique_id": "MBCPP_854_9", "index": 7438}
{"task_id": "MBCPP/855", "completion": "    return __builtin_popcount(x) % 2 == 0;\n}", "unique_id": "MBCPP_855_4", "index": 7443}
{"task_id": "MBCPP/856", "completion": "    int count_zeros = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 0) count_zeros++;\n    }\n    \n    int swaps = 0;\n    int left_zeros = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 0) {\n            left_zeros++;\n        } else {\n            swaps += count_zeros - left_zeros;\n        }\n    }\n    \n    return swaps;\n}", "unique_id": "MBCPP_856_9", "index": 7458}
{"task_id": "MBCPP/857", "completion": "    vector<vector<string>> result;\n    for (const auto& str : list1) {\n        vector<string> charList;\n        for (const auto& ch : str) {\n            charList.push_back(string(1, ch));\n        }\n        result.push_back(charList);\n    }\n    return result;\n}", "unique_id": "MBCPP_857_3", "index": 7462}
{"task_id": "MBCPP/858", "completion": "    int count = inputList.size();\n    return count * count;\n}", "unique_id": "MBCPP_858_7", "index": 7476}
{"task_id": "MBCPP/860", "completion": "    regex pattern(\"[a-zA-Z0-9]$\");\n    if (regex_search(str, pattern)) {\n        return \"Accept\";\n    } else {\n        return \"Discard\";\n    }\n}", "unique_id": "MBCPP_860_2", "index": 7481}
{"task_id": "MBCPP/861", "completion": "    vector<string> result;\n    sort(str.begin(), str.end());\n    auto isAnagram = [&str](const string& s) {\n        string temp = s;\n        sort(temp.begin(), temp.end());\n        return temp == str;\n    };\n    copy_if(texts.begin(), texts.end(), back_inserter(result), isAnagram);\n    return result;\n}", "unique_id": "MBCPP_861_7", "index": 7496}
{"task_id": "MBCPP/863", "completion": "    unordered_set<int> S(arr.begin(), arr.end());\n    int longest_streak = 0;\n\n    for (int num : arr) {\n        if (S.find(num - 1) == S.end()) {\n            int current_num = num;\n            int current_streak = 1;\n\n            while (S.find(current_num + 1) != S.end()) {\n                current_num += 1;\n                current_streak += 1;\n            }\n\n            longest_streak = max(longest_streak, current_streak);\n        }\n    }\n\n    return longest_streak;\n}", "unique_id": "MBCPP_863_10", "index": 7509}
{"task_id": "MBCPP/864", "completion": "    vector<string> result;\n    auto isPalindrome = [](const string &s) {\n        return equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n    copy_if(texts.begin(), texts.end(), back_inserter(result), isPalindrome);\n    return result;\n}", "unique_id": "MBCPP_864_10", "index": 7519}
{"task_id": "MBCPP/865", "completion": "    transform(nums.begin(), nums.end(), nums.begin(), [n](int num){ return num * n; });\n    return nums;\n}", "unique_id": "MBCPP_865_3", "index": 7522}
{"task_id": "MBCPP/866", "completion": "    unordered_set<string> months_with_31_days = {\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"};\n    return months_with_31_days.find(monthname2) != months_with_31_days.end();\n}", "unique_id": "MBCPP_866_3", "index": 7532}
{"task_id": "MBCPP/867", "completion": "    int sum = accumulate(arr.begin(), arr.end(), 0);\n    return sum % 2 == 0 ? 2 : 1;\n}", "unique_id": "MBCPP_867_3", "index": 7542}
{"task_id": "MBCPP/868", "completion": "    int length = 0;\n    int i = a.size() - 1;\n    \n    // Remove trailing spaces\n    while (i >= 0 && a[i] == ' ')\n        i--;\n    \n    // Count the length of the last word\n    while (i >= 0 && a[i] != ' ') {\n        length++;\n        i--;\n    }\n    \n    return length;\n}", "unique_id": "MBCPP_868_3", "index": 7552}
{"task_id": "MBCPP/869", "completion": "    vector<vector<int>> result;\n    for (const auto& sublist : list1) {\n        if (!sublist.empty()) {\n            int min_val = *min_element(sublist.begin(), sublist.end());\n            int max_val = *max_element(sublist.begin(), sublist.end());\n            if (min_val >= leftrange && max_val <= rigthrange) {\n                result.push_back(sublist);\n            }\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_869_3", "index": 7562}
{"task_id": "MBCPP/870", "completion": "    return accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {\n        return num > 0 ? sum + num : sum;\n    });\n}", "unique_id": "MBCPP_870_5", "index": 7574}
{"task_id": "MBCPP/871", "completion": "    if (string1.length() != string2.length()) {\n        return false;\n    }\n    string concatenated = string1 + string1;\n    return (concatenated.find(string2) != string::npos);\n}", "unique_id": "MBCPP_871_2", "index": 7581}
{"task_id": "MBCPP/873", "completion": "    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}", "unique_id": "MBCPP_873_3", "index": 7592}
{"task_id": "MBCPP/874", "completion": "    if (str2.empty() || str1.size() % str2.size() != 0) \n        return false;\n    string repeated = \"\";\n    for (size_t i = 0; i < str1.size() / str2.size(); ++i) {\n        repeated += str2;\n    }\n    return repeated == str1;\n}", "unique_id": "MBCPP_874_4", "index": 7603}
{"task_id": "MBCPP/875", "completion": "    int min_diff = INT_MAX;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n        }\n    }\n    return min_diff;\n}", "unique_id": "MBCPP_875_8", "index": 7617}
{"task_id": "MBCPP/876", "completion": "    return (x * (y / __gcd(x, y)));\n}", "unique_id": "MBCPP_876_2", "index": 7621}
{"task_id": "MBCPP/877", "completion": "    sort(str.begin(), str.end());\n    return str;\n}", "unique_id": "MBCPP_877_5", "index": 7634}
{"task_id": "MBCPP/878", "completion": "    unordered_set<int> elements(testTuple.begin(), testTuple.end());\n    for (int num : k) {\n        if (elements.find(num) == elements.end()) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_878_5", "index": 7644}
{"task_id": "MBCPP/879", "completion": "    regex pattern(\"a.*b$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_879_1", "index": 7650}
{"task_id": "MBCPP/880", "completion": "    int discriminant = b * b - 4 * a * c;\n    if (discriminant > 0) {\n        return \"2 solutions\";\n    } else if (discriminant == 0) {\n        return \"1 solution\";\n    } else {\n        return \"No solutions\";\n    }\n}", "unique_id": "MBCPP_880_3", "index": 7662}
{"task_id": "MBCPP/881", "completion": "    int sum = 0;\n    bool foundEven = false, foundOdd = false;\n    \n    for (int num : list1) {\n        if (!foundOdd && num % 2 != 0) {\n            sum += num;\n            foundOdd = true;\n        }\n        if (!foundEven && num % 2 == 0) {\n            sum += num;\n            foundEven = true;\n        }\n        if (foundOdd && foundEven) {\n            break;\n        }\n    }\n    \n    return sum;\n}", "unique_id": "MBCPP_881_8", "index": 7677}
{"task_id": "MBCPP/882", "completion": "    return 2 * (b + h);\n}", "unique_id": "MBCPP_882_4", "index": 7683}
{"task_id": "MBCPP/883", "completion": "    vector<int> result;\n    for (int num : nums) {\n        if ([m, n](int x) { return x % m == 0 && x % n == 0; }(num)) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_883_1", "index": 7690}
{"task_id": "MBCPP/884", "completion": "    for (int i = l; i <= r; ++i) {\n        if ((n & (1 << i)) == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_884_4", "index": 7703}
{"task_id": "MBCPP/885", "completion": "    if (str1.length() != str2.length()) {\n        return false;\n    }\n\n    unordered_map<char, char> map1;\n    unordered_map<char, char> map2;\n\n    for (int i = 0; i < str1.length(); i++) {\n        char c1 = str1[i];\n        char c2 = str2[i];\n\n        if (map1.find(c1) != map1.end()) {\n            if (map1[c1] != c2) {\n                return false;\n            }\n        } else {\n            map1[c1] = c2;\n        }\n\n        if (map2.find(c2) != map2.end()) {\n            if (map2[c2] != c1) {\n                return false;\n            }\n        } else {\n            map2[c2] = c1;\n        }\n    }\n\n    return true;\n}", "unique_id": "MBCPP_885_6", "index": 7715}
{"task_id": "MBCPP/886", "completion": "    double sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    return sum / numbers.size();\n}", "unique_id": "MBCPP_886_4", "index": 7723}
{"task_id": "MBCPP/887", "completion": "    return n & 1;\n}", "unique_id": "MBCPP_887_2", "index": 7731}
{"task_id": "MBCPP/888", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> row;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            row.push_back(testTup1[i][j] - testTup2[i][j]);\n        }\n        result.push_back(row);\n    }\n    return result;\n}", "unique_id": "MBCPP_888_8", "index": 7747}
{"task_id": "MBCPP/889", "completion": "    for (auto &list : lists) {\n        reverse(list.begin(), list.end());\n    }\n    return lists;\n}", "unique_id": "MBCPP_889_5", "index": 7754}
{"task_id": "MBCPP/890", "completion": "    for (int i = 0; i < n; i++) {\n        if (arr1[i] != arr2[i]) {\n            return i;\n        }\n    }\n    return n;\n}", "unique_id": "MBCPP_890_4", "index": 7763}
{"task_id": "MBCPP/891", "completion": "    int lengthA = to_string(a).length();\n    int lengthB = to_string(b).length();\n    return lengthA == lengthB;\n}", "unique_id": "MBCPP_891_5", "index": 7774}
{"task_id": "MBCPP/892", "completion": "    string result;\n    bool inSpace = false;\n    \n    for (char c : text) {\n        if (isspace(c)) {\n            if (!inSpace) {\n                result += ' ';\n                inSpace = true;\n            }\n        } else {\n            result += c;\n            inSpace = false;\n        }\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_892_1", "index": 7780}
{"task_id": "MBCPP/894", "completion": "    vector<double> result;\n    stringstream ss(testStr);\n    string temp;\n    while (getline(ss, temp, ',')) {\n        result.push_back(stod(temp));\n    }\n    return result;\n}", "unique_id": "MBCPP_894_7", "index": 7796}
{"task_id": "MBCPP/895", "completion": "    if (a.empty()) return 0;\n    int n = a.size();\n    if (n == 1) return a[0];\n\n    vector<int> dp(n, 0);\n    dp[0] = a[0];\n    dp[1] = max(a[0], a[1]);\n\n    for (int i = 2; i < n; ++i) {\n        dp[i] = max(dp[i - 1], a[i] + dp[i - 2]);\n    }\n\n    return dp[n - 1];\n}", "unique_id": "MBCPP_895_3", "index": 7802}
{"task_id": "MBCPP/896", "completion": "    sort(tuples.begin(), tuples.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tuples;\n}", "unique_id": "MBCPP_896_9", "index": 7818}
{"task_id": "MBCPP/897", "completion": "    return sentence.find(word) != string::npos;\n}", "unique_id": "MBCPP_897_10", "index": 7829}
{"task_id": "MBCPP/898", "completion": "    vector<int> result;\n    int count = 1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] == numbers[i - 1]) {\n            count++;\n            if (count == n) {\n                result.push_back(numbers[i]);\n            }\n        } else {\n            count = 1;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_898_10", "index": 7839}
{"task_id": "MBCPP/899", "completion": "    for (int i = 0; i < n/2; i++) {\n        if (arr[i] > arr[n-i-1])\n            swap(arr[i], arr[n-i-1]);\n    }\n    return is_sorted(arr.begin(), arr.end());\n}", "unique_id": "MBCPP_899_7", "index": 7846}
{"task_id": "MBCPP/900", "completion": "    return !str.empty() && str[0] == '5';\n}", "unique_id": "MBCPP_900_6", "index": 7855}
{"task_id": "MBCPP/901", "completion": "    auto lcm = [](int a, int b) {\n        return a / __gcd(a, b) * b;\n    };\n    int result = 1;\n    for (int i = 2; i <= n; ++i) {\n        result = lcm(result, i);\n    }\n    return result;\n}", "unique_id": "MBCPP_901_4", "index": 7863}
{"task_id": "MBCPP/902", "completion": "    unordered_map<string, int> result = d1;\n    for (const auto& pair : d2) {\n        result[pair.first] += pair.second;\n    }\n    return result;\n}", "unique_id": "MBCPP_902_7", "index": 7876}
{"task_id": "MBCPP/903", "completion": "    int totalUnsetBits = 0;\n    for (int i = 1; i <= n; ++i) {\n        int num = i;\n        while (num > 0) {\n            if ((num & 1) == 0) {\n                totalUnsetBits++;\n            }\n            num >>= 1;\n        }\n        totalUnsetBits += (sizeof(int) * 8) - __builtin_popcount(i);\n    }\n    return totalUnsetBits;\n}", "unique_id": "MBCPP_903_1", "index": 7880}
{"task_id": "MBCPP/905", "completion": "    long long sum = 0;\n    for(int k = 0; k <= n; ++k) {\n        long long coeff = 1;\n        for(int i = 1; i <= k; ++i) {\n            coeff = coeff * (n - i + 1) / i;\n        }\n        sum += coeff * coeff;\n    }\n    return sum;\n}", "unique_id": "MBCPP_905_1", "index": 7890}
{"task_id": "MBCPP/906", "completion": "    vector<vector<string>> result;\n    regex date_pattern(R\"((\\d{4})/(\\d{2})/(\\d{2}))\");\n    smatch matches;\n    if (regex_search(url, matches, date_pattern)) {\n        result.push_back({matches[1].str(), matches[2].str(), matches[3].str()});\n    }\n    return result;\n}", "unique_id": "MBCPP_906_8", "index": 7907}
{"task_id": "MBCPP/907", "completion": "    vector<int> luckyNumbers;\n    int num = 1;\n    while (luckyNumbers.size() < n) {\n        int sum = 0, temp = num;\n        while (temp) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (sum == 1 || sum == 3 || sum == 7 || sum == 9) {\n            luckyNumbers.push_back(num);\n        }\n        num += 2;\n    }\n    return luckyNumbers;\n}", "unique_id": "MBCPP_907_8", "index": 7917}
{"task_id": "MBCPP/908", "completion": "    for (int i = 0; i < n; i++) {\n        if (arr[i] == i) {\n            return i;\n        }\n    }\n    return -1;\n}", "unique_id": "MBCPP_908_6", "index": 7925}
{"task_id": "MBCPP/909", "completion": "    num--;\n    while (true) {\n        string s = to_string(num);\n        string rev_s = s;\n        reverse(rev_s.begin(), rev_s.end());\n        if (s == rev_s) {\n            return num;\n        }\n        num--;\n    }\n}", "unique_id": "MBCPP_909_1", "index": 7930}
{"task_id": "MBCPP/911", "completion": "    priority_queue<int> maxHeap(nums.begin(), nums.end());\n    int a = maxHeap.top(); maxHeap.pop();\n    int b = maxHeap.top(); maxHeap.pop();\n    int c = maxHeap.top(); maxHeap.pop();\n    \n    return a * b * c;\n}", "unique_id": "MBCPP_911_9", "index": 7948}
{"task_id": "MBCPP/912", "completion": "    return (2 * (n + 1) * tgamma(n + m + 1)) / (tgamma(m + 1) * tgamma(n - m + 1) * tgamma(n + 2));\n}", "unique_id": "MBCPP_912_10", "index": 7959}
{"task_id": "MBCPP/913", "completion": "    if (str.empty())\n        return false;\n    return isdigit(str.back());\n}", "unique_id": "MBCPP_913_10", "index": 7969}
{"task_id": "MBCPP/914", "completion": "    if (s.length() < 2) return false;\n    char first = s[0];\n    char second = s[1];\n    if (first == second) return false;\n    for (int i = 0; i < s.length(); ++i) {\n        if ((i % 2 == 0 && s[i] != first) || (i % 2 == 1 && s[i] != second)) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "MBCPP_914_1", "index": 7970}
{"task_id": "MBCPP/915", "completion": "    sort(arrayNums.begin(), arrayNums.end(), [](int a, int b) {\n        if ((a >= 0 && b >= 0) || (a < 0 && b < 0))\n            return a < b;\n        return a >= 0;\n    });\n    return arrayNums;\n}", "unique_id": "MBCPP_915_5", "index": 7984}
{"task_id": "MBCPP/916", "completion": "    sort(a.begin(), a.end());\n    for (int i = 0; i < arrSize - 2; i++) {\n        int left = i + 1;\n        int right = arrSize - 1;\n        while (left < right) {\n            int current_sum = a[i] + a[left] + a[right];\n            if (current_sum == sum) {\n                return {a[i], a[left], a[right]};\n            } else if (current_sum < sum) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return {};\n}", "unique_id": "MBCPP_916_9", "index": 7998}
{"task_id": "MBCPP/917", "completion": "    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_917_6", "index": 8005}
{"task_id": "MBCPP/918", "completion": "    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    for (int i = 0; i < m; i++) {\n        for (int j = s[i]; j <= n; j++) {\n            dp[j] += dp[j - s[i]];\n        }\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_918_10", "index": 8019}
{"task_id": "MBCPP/919", "completion": "    int result = 1;\n    for (int item : items) {\n        result *= item;\n    }\n    return result;\n}", "unique_id": "MBCPP_919_7", "index": 8026}
{"task_id": "MBCPP/921", "completion": "    vector<vector<int>> result;\n    for (int i = 0; i < testTup.size(); i += n) {\n        vector<int> chunk;\n        for (int j = i; j < i + n && j < testTup.size(); ++j) {\n            chunk.push_back(testTup[j]);\n        }\n        result.push_back(chunk);\n    }\n    return result;\n}", "unique_id": "MBCPP_921_10", "index": 8039}
{"task_id": "MBCPP/922", "completion": "    int n = arr.size();\n    if (n < 2)\n        return {};\n\n    int max1 = INT_MIN, max2 = INT_MIN;\n    int min1 = INT_MAX, min2 = INT_MAX;\n\n    for (int num : arr) {\n        if (num > max1) {\n            max2 = max1;\n            max1 = num;\n        } else if (num > max2) {\n            max2 = num;\n        }\n        \n        if (num < min1) {\n            min2 = min1;\n            min1 = num;\n        } else if (num < min2) {\n            min2 = num;\n        }\n    }\n\n    if (max1 * max2 > min1 * min2)\n        return {max1, max2};\n    else\n        return {min1, min2};\n}", "unique_id": "MBCPP_922_8", "index": 8047}
{"task_id": "MBCPP/923", "completion": "    vector<vector<int>> dp(m + 1, n + 1);\n    \n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0)\n                dp[i][j] = j;\n            else if (j == 0)\n                dp[i][j] = i;\n            else if (x[i - 1] == y[j - 1])\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            else\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[m][n];\n}", "unique_id": "MBCPP_923_8", "index": 8057}
{"task_id": "MBCPP/924", "completion": "    return (x > y) ? x : y;\n}", "unique_id": "MBCPP_924_4", "index": 8063}
{"task_id": "MBCPP/925", "completion": "    int product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;\n}", "unique_id": "MBCPP_925_9", "index": 8078}
{"task_id": "MBCPP/926", "completion": "    if (m > n) return 0;\n    if (n == 0 && m == 0) return 1;\n    if (n == 1 && m == 0) return 0;\n    if (m == 0) return (n - 1) * (rencontresNumber(n - 1, 0) + rencontresNumber(n - 2, 0));\n    return (rencontresNumber(n - 1, m - 1) + (n - 1) * rencontresNumber(n - 1, m));\n}", "unique_id": "MBCPP_926_4", "index": 8083}
{"task_id": "MBCPP/928", "completion": "    return dt.substr(8, 2) + \"-\" + dt.substr(5, 2) + \"-\" + dt.substr(0, 4);\n}", "unique_id": "MBCPP_928_6", "index": 8095}
{"task_id": "MBCPP/929", "completion": "    return count(tuplex.begin(), tuplex.end(), value);\n}", "unique_id": "MBCPP_929_10", "index": 8109}
{"task_id": "MBCPP/930", "completion": "    regex pattern(\"a*b+\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "unique_id": "MBCPP_930_4", "index": 8113}
{"task_id": "MBCPP/931", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_931_7", "index": 8126}
{"task_id": "MBCPP/932", "completion": "    unordered_set<string> seen;\n    vector<string> result;\n    for (const string& word : l) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_932_6", "index": 8135}
{"task_id": "MBCPP/933", "completion": "    regex pattern(\"([a-z])([A-Z])\");\n    string result = regex_replace(text, pattern, \"$1_$2\");\n    transform(result.begin(), result.end(), result.begin(), ::tolower);\n    return result;\n}", "unique_id": "MBCPP_933_9", "index": 8148}
{"task_id": "MBCPP/934", "completion": "    if (n == 0 || m == 0)\n        return 1;\n    return dealnnoyNum(n - 1, m) + dealnnoyNum(n - 1, m - 1) + dealnnoyNum(n, m - 1);\n}", "unique_id": "MBCPP_934_1", "index": 8150}
{"task_id": "MBCPP/935", "completion": "    int sum = 0;\n    for (int i = 1; i <= number; ++i) {\n        sum += i * i;\n    }\n    return sum;\n}", "unique_id": "MBCPP_935_6", "index": 8165}
{"task_id": "MBCPP/936", "completion": "    unordered_map<int, vector<int>> map;\n    for (const auto& tuple : testList) {\n        map[tuple[0]] = tuple;\n    }\n    \n    vector<vector<int>> result;\n    for (int key : ordList) {\n        result.push_back(map[key]);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_936_7", "index": 8176}
{"task_id": "MBCPP/937", "completion": "    unordered_map<char, int> charCount;\n    for (char c : str1) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n    char maxChar = ' ';\n    int maxCount = 0;\n    for (auto& pair : charCount) {\n        if (pair.second > maxCount) {\n            maxChar = pair.first;\n            maxCount = pair.second;\n        }\n    }\n    return string(1, maxChar);\n}", "unique_id": "MBCPP_937_3", "index": 8182}
{"task_id": "MBCPP/938", "completion": "    int i = 0, j = 0, k = 0;\n    int diff = INT_MAX;\n    int res_i = 0, res_j = 0, res_k = 0;\n\n    while (i < p && j < q && k < r) {\n        int minimum = min({a[i], b[j], c[k]});\n        int maximum = max({a[i], b[j], c[k]});\n        int current_diff = maximum - minimum;\n\n        if (current_diff < diff) {\n            diff = current_diff;\n            res_i = i;\n            res_j = j;\n            res_k = k;\n        }\n\n        if (diff == 0) break;\n\n        if (a[i] == minimum) i++;\n        else if (b[j] == minimum) j++;\n        else k++;\n    }\n    \n    return {a[res_i], b[res_j], c[res_k]};\n}", "unique_id": "MBCPP_938_6", "index": 8195}
{"task_id": "MBCPP/940", "completion": "    auto heapify = [](vector<int>& arr, int n, int i) {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n\n        if (left < n && arr[left] > arr[largest])\n            largest = left;\n\n        if (right < n && arr[right] > arr[largest])\n            largest = right;\n\n        if (largest != i) {\n            swap(arr[i], arr[largest]);\n            heapify(arr, n, largest);\n        }\n    };\n\n    int n = arr.size();\n\n    for (int i = n / 2 - 1; i >= 0; i--)\n        heapify(arr, n, i);\n\n    for (int i = n - 1; i > 0; i--) {\n        swap(arr[0], arr[i]);\n        heapify(arr, i, 0);\n    }\n\n    return arr;\n}", "unique_id": "MBCPP_940_5", "index": 8204}
{"task_id": "MBCPP/942", "completion": "    unordered_set<int> elements(testTup.begin(), testTup.end());\n    for (int i : checkList) {\n        if (elements.find(i) != elements.end()) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "MBCPP_942_7", "index": 8216}
{"task_id": "MBCPP/943", "completion": "    vector<int> result;\n    int i = 0, j = 0;\n    while (i < num1.size() && j < num2.size()) {\n        if (num1[i] < num2[j]) {\n            result.push_back(num1[i]);\n            i++;\n        } else {\n            result.push_back(num2[j]);\n            j++;\n        }\n    }\n    while (i < num1.size()) {\n        result.push_back(num1[i]);\n        i++;\n    }\n    while (j < num2.size()) {\n        result.push_back(num2[j]);\n        j++;\n    }\n    return result;\n}", "unique_id": "MBCPP_943_7", "index": 8226}
{"task_id": "MBCPP/944", "completion": "    for (int i = 0; i < text.length(); i++) {\n        if (isdigit(text[i])) {\n            cout << i << endl;\n            return i;\n        }\n    }\n    return -1; // if no digit is found\n}", "unique_id": "MBCPP_944_1", "index": 8230}
{"task_id": "MBCPP/945", "completion": "    return unordered_set<string>(t.begin(), t.end());\n}", "unique_id": "MBCPP_945_7", "index": 8246}
{"task_id": "MBCPP/947", "completion": "    if (list1.empty()) return 0;\n    int minLength = INT_MAX;\n    for (const string& word : list1) {\n        minLength = min(minLength, (int)word.length());\n    }\n    return minLength;\n}", "unique_id": "MBCPP_947_8", "index": 8257}
{"task_id": "MBCPP/949", "completion": "    auto digit_count = [](int num) {\n        int count = 0;\n        while (num != 0) {\n            num /= 10;\n            count++;\n        }\n        return count;\n    };\n\n    auto tuple_digit_count = [&](const vector<int>& tuple) {\n        int total_digits = 0;\n        for (int num : tuple) {\n            total_digits += digit_count(num);\n        }\n        return total_digits;\n    };\n\n    sort(testList.begin(), testList.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return tuple_digit_count(a) < tuple_digit_count(b);\n    });\n\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            result += to_string(testList[i][j]);\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "unique_id": "MBCPP_949_2", "index": 8261}
{"task_id": "MBCPP/950", "completion": "    vector<string> zodiacs = {\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"};\n    return zodiacs[year % 12];\n}", "unique_id": "MBCPP_950_1", "index": 8270}
{"task_id": "MBCPP/951", "completion": "    vector<vector<int>> result;\n    for (size_t i = 0; i < testList1.size(); ++i) {\n        vector<int> maxTuple;\n        for (size_t j = 0; j < testList1[i].size(); ++j) {\n            maxTuple.push_back(max(testList1[i][j], testList2[i][j]));\n        }\n        result.push_back(maxTuple);\n    }\n    return result;\n}", "unique_id": "MBCPP_951_4", "index": 8283}
{"task_id": "MBCPP/952", "completion": "    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    \n    vector<int> C(r + 1, 0);\n    C[0] = 1;\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = min(i, r); j > 0; j--) {\n            C[j] = (C[j] + C[j - 1]) % p;\n        }\n    }\n    return C[r];\n}", "unique_id": "MBCPP_952_3", "index": 8292}
{"task_id": "MBCPP/953", "completion": "    unordered_set<int> unique_elements(ar.begin(), ar.end());\n    return unique_elements.size();\n}", "unique_id": "MBCPP_953_9", "index": 8308}
{"task_id": "MBCPP/955", "completion": "    int sum = 1;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            sum += i;\n            if (i != n / i) {\n                sum += n / i;\n            }\n        }\n    }\n    return sum > n;\n}", "unique_id": "MBCPP_955_8", "index": 8317}
{"task_id": "MBCPP/956", "completion": "    vector<string> result;\n    regex re(\"([A-Z][^A-Z]*)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    \n    for (auto it = words_begin; it != words_end; ++it) {\n        result.push_back(it->str());\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_956_9", "index": 8328}
{"task_id": "MBCPP/957", "completion": "    return log2(n & -n) + 1;\n}", "unique_id": "MBCPP_957_1", "index": 8330}
{"task_id": "MBCPP/958", "completion": "    vector<pair<int, string>> valueSymbols = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n    \n    string roman = \"\";\n    for (const auto &pair : valueSymbols) {\n        while (num >= pair.first) {\n            roman += pair.second;\n            num -= pair.first;\n        }\n    }\n    \n    return roman;\n}", "unique_id": "MBCPP_958_9", "index": 8348}
{"task_id": "MBCPP/960", "completion": "    if (n <= 1)\n        return 1;\n    int a = 1, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "MBCPP_960_3", "index": 8352}
{"task_id": "MBCPP/961", "completion": "    unordered_map<char, int> roman = {\n        {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50},\n        {'C', 100}, {'D', 500}, {'M', 1000}\n    };\n    int result = 0;\n    for (int i = 0; i < s.length(); ++i) {\n        if (i + 1 < s.length() && roman[s[i]] < roman[s[i + 1]]) {\n            result -= roman[s[i]];\n        } else {\n            result += roman[s[i]];\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_961_6", "index": 8365}
{"task_id": "MBCPP/962", "completion": "    int sum = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "unique_id": "MBCPP_962_4", "index": 8373}
{"task_id": "MBCPP/964", "completion": "    return s.length() % 2 == 0;\n}", "unique_id": "MBCPP_964_7", "index": 8386}
{"task_id": "MBCPP/965", "completion": "    string result;\n    for (char c : text) {\n        if (isupper(c)) {\n            if (!result.empty()) {\n                result += '_';\n            }\n            result += tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "MBCPP_965_7", "index": 8396}
{"task_id": "MBCPP/967", "completion": "    string vowels = \"aeiou\";\n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    for (char vowel : vowels) {\n        if (str.find(vowel) == string::npos) {\n            return \"not accepted\";\n        }\n    }\n    return \"accepted\";\n}", "unique_id": "MBCPP_967_2", "index": 8401}
{"task_id": "MBCPP/968", "completion": "    return min(b - 1, a * n / b);\n}", "unique_id": "MBCPP_968_3", "index": 8412}
{"task_id": "MBCPP/969", "completion": "    unordered_map<int, vector<int>> map;\n    for (const auto& tuple : testList) {\n        map[tuple[0]].push_back(tuple[1]);\n    }\n    \n    vector<vector<int>> result;\n    for (auto& elem : map) {\n        vector<int> merged = {elem.first};\n        merged.insert(merged.end(), elem.second.begin(), elem.second.end());\n        result.push_back(merged);\n    }\n    \n    return result;\n}", "unique_id": "MBCPP_969_2", "index": 8421}
{"task_id": "MBCPP/970", "completion": "    return (x < y) ? x : y;\n}", "unique_id": "MBCPP_970_1", "index": 8430}
{"task_id": "MBCPP/971", "completion": "    vector<int> dp(n + 1, -1);\n    dp[0] = 0;\n    for (int i = 0; i <= n; ++i) {\n        if (dp[i] != -1) {\n            if (i + a <= n) dp[i + a] = max(dp[i + a], dp[i] + 1);\n            if (i + b <= n) dp[i + b] = max(dp[i + b], dp[i] + 1);\n            if (i + c <= n) dp[i + c] = max(dp[i + c], dp[i] + 1);\n        }\n    }\n    return dp[n];\n}", "unique_id": "MBCPP_971_6", "index": 8445}
{"task_id": "MBCPP/972", "completion": "    vector<int> result = testTup1;\n    result.insert(result.end(), testTup2.begin(), testTup2.end());\n    return result;\n}", "unique_id": "MBCPP_972_5", "index": 8454}
{"task_id": "MBCPP/973", "completion": "    int n = s.length();\n    d = d % n; // In case d is greater than the length of the string\n    return s.substr(d) + s.substr(0, d);\n}", "unique_id": "MBCPP_973_4", "index": 8463}
{"task_id": "MBCPP/974", "completion": "    int n = a.size();\n    vector<int> dp = a[n-1];\n    for(int i = n-2; i >= 0; --i) {\n        for(int j = 0; j <= i; ++j) {\n            dp[j] = a[i][j] + min(dp[j], dp[j+1]);\n        }\n    }\n    return dp[0];\n}", "unique_id": "MBCPP_974_3", "index": 8472}
