{"task_id": "CPP/0", "completion": "    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (fabs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "CPP_0_9", "index": 8}
{"task_id": "CPP/1", "completion": "    vector<string> result;\n    string current;\n    int balance = 0;\n    \n    for (char ch : paren_string) {\n        if (ch == ' ') continue;\n        if (ch == '(') {\n            balance++;\n            current += ch;\n        } else if (ch == ')') {\n            balance--;\n            current += ch;\n            if (balance == 0) {\n                result.push_back(current);\n                current.clear();\n            }\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_1_6", "index": 15}
{"task_id": "CPP/2", "completion": "    return number - floor(number);\n}", "unique_id": "CPP_2_4", "index": 23}
{"task_id": "CPP/3", "completion": "    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "CPP_3_7", "index": 36}
{"task_id": "CPP/4", "completion": "    float sum = 0.0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float mad_sum = 0.0;\n    for (float num : numbers) {\n        mad_sum += fabs(num - mean);\n    }\n    \n    return mad_sum / numbers.size();\n}", "unique_id": "CPP_4_7", "index": 46}
{"task_id": "CPP/5", "completion": "    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}", "unique_id": "CPP_5_5", "index": 54}
{"task_id": "CPP/6", "completion": "    vector<int> result;\n    int max_depth = 0;\n    int current_depth = 0;\n    \n    for (char ch : paren_string) {\n        if (ch == '(') {\n            current_depth++;\n            if (current_depth > max_depth) {\n                max_depth = current_depth;\n            }\n        } else if (ch == ')') {\n            current_depth--;\n        } else if (ch == ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    \n    if (max_depth != 0) {\n        result.push_back(max_depth);\n    }\n    \n    return result;\n}", "unique_id": "CPP_6_8", "index": 67}
{"task_id": "CPP/7", "completion": "    vector<string> result;\n    for (const string& s : strings) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "unique_id": "CPP_7_1", "index": 70}
{"task_id": "CPP/8", "completion": "    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}", "unique_id": "CPP_8_6", "index": 85}
{"task_id": "CPP/9", "completion": "    vector<int> result;\n    if (numbers.empty()) return result;\n    \n    int current_max = numbers[0];\n    result.push_back(current_max);\n    \n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > current_max) {\n            current_max = numbers[i];\n        }\n        result.push_back(current_max);\n    }\n    \n    return result;\n}", "unique_id": "CPP_9_9", "index": 98}
{"task_id": "CPP/10", "completion": "    if (str.empty())\n        return str;\n\n    int n = str.length();\n    int longest_palindrome_suffix = 0;\n\n    for (int i = n; i >= 0; --i) {\n        if (is_palindrome(str.substr(0, i))) {\n            longest_palindrome_suffix = i;\n            break;\n        }\n    }\n\n    string prefix = str.substr(longest_palindrome_suffix);\n    reverse(prefix.begin(), prefix.end());\n    return str + prefix;\n}", "unique_id": "CPP_10_6", "index": 105}
{"task_id": "CPP/11", "completion": "    string result = \"\";\n    int n = a.length();\n    for (int i = 0; i < n; i++) {\n        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n}", "unique_id": "CPP_11_3", "index": 112}
{"task_id": "CPP/12", "completion": "    if (strings.empty()) {\n        return \"\";\n    }\n    string longest_str = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longest_str.length()) {\n            longest_str = str;\n        }\n    }\n    return longest_str;\n}", "unique_id": "CPP_12_9", "index": 128}
{"task_id": "CPP/13", "completion": "    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "unique_id": "CPP_13_2", "index": 131}
{"task_id": "CPP/14", "completion": "    vector<string> prefixes;\n    for (int i = 1; i <= str.length(); i++) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}", "unique_id": "CPP_14_2", "index": 141}
{"task_id": "CPP/15", "completion": "    string result = \"\";\n    for (int i = 0; i <= n; i++) {\n        result += to_string(i);\n        if (i != n) {\n            result += \" \";\n        }\n    }\n    return result;\n}", "unique_id": "CPP_15_5", "index": 154}
{"task_id": "CPP/16", "completion": "    vector<bool> seen(256, false);\n    int count = 0;\n    for (char c : str) {\n        char lower_c = tolower(c);\n        if (!seen[lower_c]) {\n            seen[lower_c] = true;\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "CPP_16_10", "index": 169}
{"task_id": "CPP/17", "completion": "    vector<int> beats;\n    int i = 0;\n    while (i < music_string.length()) {\n        if (music_string[i] == 'o') {\n            if (i + 1 < music_string.length() && music_string[i + 1] == '|') {\n                beats.push_back(2);\n                i += 2;\n            } else {\n                beats.push_back(4);\n                i += 1;\n            }\n        } else if (music_string[i] == '.') {\n            if (i + 1 < music_string.length() && music_string[i + 1] == '|') {\n                beats.push_back(1);\n                i += 2;\n            }\n        } else {\n            i += 1;\n        }\n    }\n    return beats;\n}", "unique_id": "CPP_17_6", "index": 175}
{"task_id": "CPP/18", "completion": "    int count = 0;\n    size_t pos = str.find(substring, 0);\n    while (pos != string::npos) {\n        count++;\n        pos = str.find(substring, pos + 1);\n    }\n    return count;\n}", "unique_id": "CPP_18_10", "index": 189}
{"task_id": "CPP/19", "completion": "    map<int, string> num_map = {\n        {0, \"zero\"},\n        {1, \"one\"},\n        {2, \"two\"},\n        {3, \"three\"},\n        {4, \"four\"},\n        {5, \"five\"},\n        {6, \"six\"},\n        {7, \"seven\"},\n        {8, \"eight\"},\n        {9, \"nine\"}\n    };\n\n    map<string, int> str_map;\n    for (auto& pair : num_map) {\n        str_map[pair.second] = pair.first;\n    }\n\n    string word;\n    vector<int> nums;\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i] == ' ') {\n            nums.push_back(str_map[word]);\n            word = \"\";\n        } else {\n            word += numbers[i];\n        }\n    }\n    nums.push_back(str_map[word]);\n\n    sort(nums.begin(), nums.end());\n\n    string result;\n    for (int i = 0; i < nums.size(); i++) {\n        result += num_map[nums[i]];\n        if (i != nums.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}", "unique_id": "CPP_19_8", "index": 197}
{"task_id": "CPP/20", "completion": "    sort(numbers.begin(), numbers.end());\n    float min_diff = INFINITY;\n    vector<float> result(2);\n    \n    for (size_t i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            result[0] = numbers[i-1];\n            result[1] = numbers[i];\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_20_5", "index": 204}
{"task_id": "CPP/21", "completion": "    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for (float num : numbers) {\n        if (num < min_val) {\n            min_val = num;\n        }\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    vector<float> rescaled;\n    for (float num : numbers) {\n        rescaled.push_back((num - min_val) / (max_val - min_val));\n    }\n    return rescaled;\n}", "unique_id": "CPP_21_4", "index": 213}
{"task_id": "CPP/22", "completion": "    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}", "unique_id": "CPP_22_1", "index": 220}
{"task_id": "CPP/23", "completion": "    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}", "unique_id": "CPP_23_3", "index": 232}
{"task_id": "CPP/24", "completion": "    for (int i = n - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}", "unique_id": "CPP_24_3", "index": 242}
{"task_id": "CPP/25", "completion": "    vector<int> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n = n / 2;\n    }\n    for (int i = 3; i * i <= n; i = i + 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        factors.push_back(n);\n    return factors;\n}", "unique_id": "CPP_25_9", "index": 258}
{"task_id": "CPP/26", "completion": "    vector<int> result;\n    unordered_map<int, int> count;\n    \n    for (int num : numbers) {\n        count[num]++;\n    }\n    \n    for (int num : numbers) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_26_1", "index": 260}
{"task_id": "CPP/27", "completion": "    for (int i = 0; i < str.length(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}", "unique_id": "CPP_27_7", "index": 276}
{"task_id": "CPP/28", "completion": "    string result;\n    for (const string& s : strings) {\n        result += s;\n    }\n    return result;\n}", "unique_id": "CPP_28_2", "index": 281}
{"task_id": "CPP/29", "completion": "    vector<string> result;\n    for (const string& s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "unique_id": "CPP_29_5", "index": 294}
{"task_id": "CPP/30", "completion": "    vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "unique_id": "CPP_30_3", "index": 302}
{"task_id": "CPP/31", "completion": "    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}", "unique_id": "CPP_31_4", "index": 313}
{"task_id": "CPP/32", "completion": "    double x0 = 0.0;  // Initial guess\n    double x1 = 1.0;  // Second guess\n    double tolerance = 1e-6;\n    int max_iterations = 1000;\n    int iterations = 0;\n\n    while (iterations < max_iterations) {\n        double f0 = poly(xs, x0);\n        double f1 = poly(xs, x1);\n\n        if (fabs(f1) < tolerance) {\n            return x1;\n        }\n\n        double x2 = x1 - f1 * (x1 - x0) / (f1 - f0);\n\n        if (fabs(x2 - x1) < tolerance) {\n            return x2;\n        }\n\n        x0 = x1;\n        x1 = x2;\n        iterations++;\n    }\n\n    return x1;  // Return the last approximation if max_iterations is reached\n}", "unique_id": "CPP_32_4", "index": 323}
{"task_id": "CPP/33", "completion": "    vector<int> indices;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            indices.push_back(i);\n        }\n    }\n    vector<int> values;\n    for (size_t i = 0; i < indices.size(); i++) {\n        values.push_back(l[indices[i]]);\n    }\n    sort(values.begin(), values.end());\n    for (size_t i = 0; i < indices.size(); i++) {\n        l[indices[i]] = values[i];\n    }\n    return l;\n}", "unique_id": "CPP_33_6", "index": 335}
{"task_id": "CPP/34", "completion": "    sort(l.begin(), l.end());\n    auto last = unique(l.begin(), l.end());\n    l.erase(last, l.end());\n    return l;\n}", "unique_id": "CPP_34_3", "index": 342}
{"task_id": "CPP/35", "completion": "    if (l.empty()) {\n        return NAN;\n    }\n    float max_val = l[0];\n    for (float num : l) {\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    return max_val;\n}", "unique_id": "CPP_35_5", "index": 354}
{"task_id": "CPP/36", "completion": "    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "CPP_36_6", "index": 365}
{"task_id": "CPP/37", "completion": "    vector<float> even_indices;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for (size_t i = 0, j = 0; i < l.size(); i += 2, j++) {\n        l[i] = even_indices[j];\n    }\n    return l;\n}", "unique_id": "CPP_37_1", "index": 370}
{"task_id": "CPP/38", "completion": "    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x.back() + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}", "unique_id": "CPP_38_4", "index": 383}
{"task_id": "CPP/39", "completion": "    int count = 0;\n    int a = 1, b = 1;\n    while (true) {\n        int c = a + b;\n        a = b;\n        b = c;\n        if (c < 2) continue;\n        bool is_prime = true;\n        for (int i = 2; i * i <= c; i++) {\n            if (c % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            count++;\n            if (count == n) {\n                return c;\n            }\n        }\n    }\n}", "unique_id": "CPP_39_7", "index": 396}
{"task_id": "CPP/40", "completion": "    int n = l.size();\n    if (n < 3)\n        return false;\n\n    sort(l.begin(), l.end());\n\n    for (int i = 0; i < n - 2; i++) {\n        if (i > 0 && l[i] == l[i - 1])\n            continue;\n\n        int left = i + 1;\n        int right = n - 1;\n\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "CPP_40_8", "index": 407}
{"task_id": "CPP/41", "completion": "    // Each left-to-right car will collide with all right-to-left cars\n    // Since there are n cars in each direction, total collisions = n * n\n    return n * n;\n}", "unique_id": "CPP_41_4", "index": 413}
{"task_id": "CPP/42", "completion": "    for (int i = 0; i < l.size(); i++) {\n        l[i]++;\n    }\n    return l;\n}", "unique_id": "CPP_42_7", "index": 426}
{"task_id": "CPP/43", "completion": "    if (l.size() < 2)\n        return false;\n\n    for (size_t i = 0; i < l.size(); ++i) {\n        for (size_t j = i + 1; j < l.size(); ++j) {\n            if (l[i] + l[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}", "unique_id": "CPP_43_10", "index": 439}
{"task_id": "CPP/44", "completion": "    if (x == 0)\n        return \"0\";\n    string result = \"\";\n    while (x > 0) {\n        int remainder = x % base;\n        result = to_string(remainder) + result;\n        x /= base;\n    }\n    return result;\n}", "unique_id": "CPP_44_5", "index": 444}
{"task_id": "CPP/45", "completion": "    return (a * h) / 2.0f;\n}", "unique_id": "CPP_45_3", "index": 452}
{"task_id": "CPP/46", "completion": "    if (n == 0 || n == 1 || n == 3)\n        return 0;\n    if (n == 2)\n        return 2;\n\n    int a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4; i <= n; i++) {\n        int next = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = next;\n    }\n    return d;\n}", "unique_id": "CPP_46_5", "index": 464}
{"task_id": "CPP/47", "completion": "    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    } else {\n        return l[n/2];\n    }\n}", "unique_id": "CPP_47_4", "index": 473}
{"task_id": "CPP/48", "completion": "    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "unique_id": "CPP_48_2", "index": 481}
{"task_id": "CPP/49", "completion": "    if (n == 0)\n        return 1;\n    long long result = 1;\n    long long base = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = n / 2;\n    }\n    return result;\n}", "unique_id": "CPP_49_1", "index": 490}
{"task_id": "CPP/50", "completion": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a'+26)%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}", "unique_id": "CPP_50_3", "index": 502}
{"task_id": "CPP/51", "completion": "    string result;\n    for (char ch : text) {\n        if (tolower(ch) != 'a' && tolower(ch) != 'e' && tolower(ch) != 'i' && tolower(ch) != 'o' && tolower(ch) != 'u') {\n            result += ch;\n        }\n    }\n    return result;\n}", "unique_id": "CPP_51_8", "index": 517}
{"task_id": "CPP/52", "completion": "    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}", "unique_id": "CPP_52_6", "index": 525}
{"task_id": "CPP/53", "completion": "    return x + y;\n}", "unique_id": "CPP_53_10", "index": 539}
{"task_id": "CPP/54", "completion": "    if (s0.length() != s1.length())\n        return false;\n\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n\n    return s0 == s1;\n}", "unique_id": "CPP_54_1", "index": 540}
{"task_id": "CPP/55", "completion": "    if (n <= 1)\n        return n;\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "unique_id": "CPP_55_6", "index": 555}
{"task_id": "CPP/56", "completion": "    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    return balance == 0;\n}", "unique_id": "CPP_56_7", "index": 566}
{"task_id": "CPP/57", "completion": "    if (l.size() <= 1)\n        return true;\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1])\n            decreasing = false;\n        if (l[i] < l[i - 1])\n            increasing = false;\n    }\n\n    return increasing || decreasing;\n}", "unique_id": "CPP_57_5", "index": 574}
{"task_id": "CPP/58", "completion": "    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    auto last = unique(result.begin(), result.end());\n    result.erase(last, result.end());\n    return result;\n}", "unique_id": "CPP_58_7", "index": 586}
{"task_id": "CPP/59", "completion": "    int largest = -1;\n    while (n % 2 == 0) {\n        largest = 2;\n        n = n / 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        largest = n;\n    return largest;\n}", "unique_id": "CPP_59_4", "index": 593}
{"task_id": "CPP/60", "completion": "    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}", "unique_id": "CPP_60_2", "index": 601}
{"task_id": "CPP/61", "completion": "    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    return balance == 0;\n}", "unique_id": "CPP_61_9", "index": 618}
{"task_id": "CPP/62", "completion": "    vector<float> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}", "unique_id": "CPP_62_10", "index": 629}
{"task_id": "CPP/63", "completion": "    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    \n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}", "unique_id": "CPP_63_7", "index": 636}
{"task_id": "CPP/64", "completion": "    int count = 0;\n    for (char c : s) {\n        c = tolower(c);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    if (!s.empty()) {\n        char last_char = tolower(s.back());\n        if (last_char == 'y') {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "CPP_64_2", "index": 641}
{"task_id": "CPP/65", "completion": "    string s = to_string(x);\n    int n = s.length();\n    if (shift > n) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    string shifted = s.substr(n - shift) + s.substr(0, n - shift);\n    return shifted;\n}", "unique_id": "CPP_65_1", "index": 650}
{"task_id": "CPP/66", "completion": "    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}", "unique_id": "CPP_66_6", "index": 665}
{"task_id": "CPP/67", "completion": "    int apples = 0, oranges = 0;\n    size_t apple_pos = s.find(\"apples\");\n    size_t orange_pos = s.find(\"oranges\");\n    \n    if (apple_pos != string::npos) {\n        size_t start = s.rfind(' ', apple_pos - 2) + 1;\n        apples = stoi(s.substr(start, apple_pos - start));\n    }\n    \n    if (orange_pos != string::npos) {\n        size_t start = s.rfind(' ', orange_pos - 2) + 1;\n        oranges = stoi(s.substr(start, orange_pos - start));\n    }\n    \n    return n - apples - oranges;\n}", "unique_id": "CPP_67_5", "index": 674}
{"task_id": "CPP/68", "completion": "    if (arr.empty()) {\n        return {};\n    }\n\n    int smallest_even = -1;\n    int smallest_index = -1;\n\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                smallest_index = i;\n            }\n        }\n    }\n\n    if (smallest_even == -1) {\n        return {};\n    }\n\n    return {smallest_even, smallest_index};\n}", "unique_id": "CPP_68_1", "index": 680}
{"task_id": "CPP/69", "completion": "    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for (auto& pair : freq) {\n        if (pair.first <= pair.second && pair.first > result) {\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_69_10", "index": 699}
{"task_id": "CPP/70", "completion": "    vector<int> result;\n    while (!lst.empty()) {\n        auto min_it = min_element(lst.begin(), lst.end());\n        result.push_back(*min_it);\n        lst.erase(min_it);\n        if (!lst.empty()) {\n            auto max_it = max_element(lst.begin(), lst.end());\n            result.push_back(*max_it);\n            lst.erase(max_it);\n        }\n    }\n    return result;\n}", "unique_id": "CPP_70_1", "index": 700}
{"task_id": "CPP/71", "completion": "    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return round(area * 100) / 100;\n}", "unique_id": "CPP_71_4", "index": 713}
{"task_id": "CPP/72", "completion": "    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    int left = 0;\n    int right = q.size() - 1;\n    while (left < right) {\n        if (q[left] != q[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "unique_id": "CPP_72_3", "index": 722}
{"task_id": "CPP/73", "completion": "    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            changes++;\n        }\n    }\n    return changes;\n}", "unique_id": "CPP_73_6", "index": 735}
{"task_id": "CPP/74", "completion": "    int count1 = 0, count2 = 0;\n    for (const string& s : lst1) {\n        count1 += s.length();\n    }\n    for (const string& s : lst2) {\n        count2 += s.length();\n    }\n    if (count1 <= count2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}", "unique_id": "CPP_74_1", "index": 740}
{"task_id": "CPP/75", "completion": "    if (a < 2)\n        return false;\n\n    // Function to check if a number is prime\n    auto isPrime = [](int n) {\n        if (n < 2)\n            return false;\n        for (int i = 2; i * i <= n; ++i) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    };\n\n    // Iterate through all possible combinations of three primes\n    for (int i = 2; i < a; ++i) {\n        if (!isPrime(i))\n            continue;\n        for (int j = i; j < a; ++j) {\n            if (!isPrime(j))\n                continue;\n            for (int k = j; k < a; ++k) {\n                if (!isPrime(k))\n                    continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}", "unique_id": "CPP_75_9", "index": 758}
{"task_id": "CPP/76", "completion": "    if (n == 1)\n        return x == 1;\n    if (x == 1)\n        return true;\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}", "unique_id": "CPP_76_2", "index": 761}
{"task_id": "CPP/77", "completion": "    if (a == 0)\n        return true;\n    int cube_root = round(pow(abs(a), 1.0/3.0));\n    return cube_root * cube_root * cube_root == abs(a);\n}", "unique_id": "CPP_77_2", "index": 771}
{"task_id": "CPP/78", "completion": "    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "CPP_78_9", "index": 788}
{"task_id": "CPP/79", "completion": "    string binary = \"\";\n    if (decimal == 0) {\n        binary = \"0\";\n    } else {\n        while (decimal > 0) {\n            binary = (decimal % 2 == 0 ? \"0\" : \"1\") + binary;\n            decimal /= 2;\n        }\n    }\n    return \"db\" + binary + \"db\";\n}", "unique_id": "CPP_79_5", "index": 794}
{"task_id": "CPP/80", "completion": "    if (s.length() < 3)\n        return false;\n    \n    for (size_t i = 0; i < s.length() - 2; ++i) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    \n    return true;\n}", "unique_id": "CPP_80_10", "index": 809}
{"task_id": "CPP/81", "completion": "    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}", "unique_id": "CPP_81_2", "index": 811}
{"task_id": "CPP/82", "completion": "    int n = str.length();\n    if (n < 2)\n        return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}", "unique_id": "CPP_82_1", "index": 820}
{"task_id": "CPP/83", "completion": "    if (n == 1)\n        return 1;\n    \n    int count_start = 1;\n    for (int i = 1; i < n; i++)\n        count_start *= 10;\n    \n    int count_end = 1;\n    for (int i = 1; i < n; i++)\n        count_end *= 10;\n    \n    int count_both = 1;\n    for (int i = 2; i < n; i++)\n        count_both *= 10;\n    \n    return count_start + count_end - count_both;\n}", "unique_id": "CPP_83_9", "index": 838}
{"task_id": "CPP/84", "completion": "    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    \n    if (sum == 0) {\n        return \"0\";\n    }\n    \n    string binary = \"\";\n    while (sum > 0) {\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    \n    return binary;\n}", "unique_id": "CPP_84_7", "index": 846}
{"task_id": "CPP/85", "completion": "    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "unique_id": "CPP_85_7", "index": 856}
{"task_id": "CPP/86", "completion": "    string result;\n    string word;\n    for (char ch : s) {\n        if (ch != ' ') {\n            word += ch;\n        } else {\n            sort(word.begin(), word.end());\n            result += word;\n            result += ' ';\n            word.clear();\n        }\n    }\n    if (!word.empty()) {\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    return result;\n}", "unique_id": "CPP_86_5", "index": 864}
{"task_id": "CPP/87", "completion": "    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    return result;\n}", "unique_id": "CPP_87_5", "index": 874}
{"task_id": "CPP/88", "completion": "    if (array.empty() || array.size() == 1) {\n        return array;\n    }\n    \n    int sum = array[0] + array[array.size() - 1];\n    vector<int> sortedArray = array;\n    \n    if (sum % 2 == 1) {\n        sort(sortedArray.begin(), sortedArray.end());\n    } else {\n        sort(sortedArray.begin(), sortedArray.end(), greater<int>());\n    }\n    \n    return sortedArray;\n}", "unique_id": "CPP_88_9", "index": 888}
{"task_id": "CPP/89", "completion": "    string result = \"\";\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            result += 'a' + (c - 'a' + 4) % 26;\n        } else if (c >= 'A' && c <= 'Z') {\n            result += 'A' + (c - 'A' + 4) % 26;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}", "unique_id": "CPP_89_9", "index": 898}
{"task_id": "CPP/90", "completion": "    if (lst.size() < 2)\n        return -1; // Assuming -1 represents None in this context\n\n    sort(lst.begin(), lst.end());\n    int smallest = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != smallest) {\n            return lst[i];\n        }\n    }\n    return -1; // If all elements are the same\n}", "unique_id": "CPP_90_2", "index": 901}
{"task_id": "CPP/91", "completion": "    int count = 0;\n    size_t pos = 0;\n    while (pos < S.length()) {\n        size_t end = S.find_first_of(\".?!\", pos);\n        if (end == string::npos) {\n            end = S.length();\n        }\n        string sentence = S.substr(pos, end - pos);\n        size_t start = sentence.find_first_not_of(' ');\n        if (start != string::npos && sentence.substr(start, 2) == \"I \") {\n            count++;\n        }\n        pos = end + 1;\n    }\n    return count;\n}", "unique_id": "CPP_91_8", "index": 917}
{"task_id": "CPP/92", "completion": "    if (a != floor(a) || b != floor(b) || c != floor(c)) {\n        return false;\n    }\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n    return false;\n}", "unique_id": "CPP_92_5", "index": 924}
{"task_id": "CPP/93", "completion": "    string result = message;\n    for (char &c : result) {\n        // Swap case\n        if (isalpha(c)) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n        // Replace vowels\n        if (tolower(c) == 'a' || tolower(c) == 'e' || tolower(c) == 'i' || \n            tolower(c) == 'o' || tolower(c) == 'u') {\n            c += 2;\n            // Handle wrap-around for 'y' and 'Y'\n            if (tolower(c) == '{' || tolower(c) == '[') {\n                c -= 26;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "CPP_93_1", "index": 930}
{"task_id": "CPP/94", "completion": "    // Function to check if a number is prime\n    auto isPrime = [](int n) {\n        if (n < 2) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    // Find the largest prime in the list\n    int largestPrime = -1;\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    // If no prime found, return 0\n    if (largestPrime == -1) return 0;\n\n    // Calculate the sum of digits of the largest prime\n    int sum = 0;\n    while (largestPrime > 0) {\n        sum += largestPrime % 10;\n        largestPrime /= 10;\n    }\n\n    return sum;\n}", "unique_id": "CPP_94_4", "index": 943}
{"task_id": "CPP/95", "completion": "    if (dict.empty()) {\n        return false;\n    }\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n        for (char ch : key) {\n            if (!islower(ch)) {\n                all_lower = false;\n            }\n            if (!isupper(ch)) {\n                all_upper = false;\n            }\n        }\n    }\n\n    return all_lower || all_upper;\n}", "unique_id": "CPP_95_3", "index": 952}
{"task_id": "CPP/96", "completion": "    vector<int> primes;\n    if (n < 2) return primes;\n\n    for (int i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (int j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}", "unique_id": "CPP_96_4", "index": 963}
{"task_id": "CPP/97", "completion": "    int unitA = abs(a) % 10;\n    int unitB = abs(b) % 10;\n    return unitA * unitB;\n}", "unique_id": "CPP_97_4", "index": 973}
{"task_id": "CPP/98", "completion": "    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "CPP_98_3", "index": 982}
{"task_id": "CPP/99", "completion": "    double num = stod(value);\n    double fractional = num - floor(num);\n    if (fractional == 0.5) {\n        return (num > 0) ? ceil(num) : floor(num);\n    } else if (fractional == -0.5) {\n        return (num < 0) ? floor(num) : ceil(num);\n    } else {\n        return round(num);\n    }\n}", "unique_id": "CPP_99_6", "index": 995}
{"task_id": "CPP/100", "completion": "    vector<int> result;\n    int current = n;\n    for (int i = 0; i < n; i++) {\n        result.push_back(current);\n        if (current % 2 == 1) {\n            current += 2;\n        } else {\n            current += 2;\n        }\n    }\n    return result;\n}", "unique_id": "CPP_100_8", "index": 1007}
{"task_id": "CPP/101", "completion": "    vector<string> result;\n    string word;\n    for (char ch : s) {\n        if (ch == ' ' || ch == ',') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "unique_id": "CPP_101_10", "index": 1019}
{"task_id": "CPP/102", "completion": "    if (x > y)\n        return -1;\n    \n    for (int i = y; i >= x; i--) {\n        if (i % 2 == 0)\n            return i;\n    }\n    \n    return -1;\n}", "unique_id": "CPP_102_4", "index": 1023}
{"task_id": "CPP/103", "completion": "    if (n > m)\n        return \"-1\";\n    \n    int sum = 0;\n    for (int i = n; i <= m; i++)\n        sum += i;\n    \n    int avg = sum / (m - n + 1);\n    string binary = \"\";\n    while (avg > 0) {\n        binary = to_string(avg % 2) + binary;\n        avg /= 2;\n    }\n    \n    return binary.empty() ? \"0\" : binary;\n}", "unique_id": "CPP_103_9", "index": 1038}
{"task_id": "CPP/104", "completion": "    vector<int> result;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "unique_id": "CPP_104_7", "index": 1046}
{"task_id": "CPP/105", "completion": "    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n    reverse(filtered.begin(), filtered.end());\n    \n    map<int, string> digitToName = {\n        {1, \"One\"},\n        {2, \"Two\"},\n        {3, \"Three\"},\n        {4, \"Four\"},\n        {5, \"Five\"},\n        {6, \"Six\"},\n        {7, \"Seven\"},\n        {8, \"Eight\"},\n        {9, \"Nine\"}\n    };\n    \n    vector<string> result;\n    for (int num : filtered) {\n        result.push_back(digitToName[num]);\n    }\n    \n    return result;\n}", "unique_id": "CPP_105_8", "index": 1057}
{"task_id": "CPP/106", "completion": "    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i-1] = factorial;\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    return result;\n}", "unique_id": "CPP_106_3", "index": 1062}
{"task_id": "CPP/107", "completion": "    vector<int> result(2, 0);\n    for (int i = 1; i <= n; ++i) {\n        string num = to_string(i);\n        string reversed_num = num;\n        reverse(reversed_num.begin(), reversed_num.end());\n        if (num == reversed_num) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "CPP_107_2", "index": 1071}
{"task_id": "CPP/108", "completion": "    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int temp = abs(num);\n        while (temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (num < 0) {\n            sum -= 2 * (abs(num) / (int)pow(10, (int)log10(abs(num))));\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "unique_id": "CPP_108_8", "index": 1087}
{"task_id": "CPP/109", "completion": "    if (arr.empty())\n        return true;\n    \n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1])\n            count++;\n    }\n    if (arr[n - 1] > arr[0])\n        count++;\n    \n    return count <= 1;\n}", "unique_id": "CPP_109_1", "index": 1090}
{"task_id": "CPP/110", "completion": "    int odd1 = 0, even2 = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd1++;\n        }\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even2++;\n        }\n    }\n    if (odd1 <= even2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "unique_id": "CPP_110_3", "index": 1102}
{"task_id": "CPP/111", "completion": "    map<char, int> freqMap;\n    if (test.empty()) {\n        return freqMap;\n    }\n\n    int maxCount = 0;\n    for (char ch : test) {\n        if (ch != ' ') {\n            freqMap[ch]++;\n            if (freqMap[ch] > maxCount) {\n                maxCount = freqMap[ch];\n            }\n        }\n    }\n\n    map<char, int> result;\n    for (auto& pair : freqMap) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}", "unique_id": "CPP_111_6", "index": 1115}
{"task_id": "CPP/112", "completion": "    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed = result;\n    reverse(reversed.begin(), reversed.end());\n    bool is_palindrome = (result == reversed);\n    return {result, is_palindrome ? \"True\" : \"False\"};\n}", "unique_id": "CPP_112_6", "index": 1125}
{"task_id": "CPP/113", "completion": "    vector<string> result;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int count = 0;\n        for (char ch : lst[i]) {\n            if ((ch - '0') % 2 != 0) {\n                ++count;\n            }\n        }\n        string s = \"the number of odd elements \" + to_string(count) + \"n the str\" + to_string(count) + \"ng \" + to_string(count) + \" of the \" + to_string(count) + \"nput.\";\n        result.push_back(s);\n    }\n    return result;\n}", "unique_id": "CPP_113_8", "index": 1137}
{"task_id": "CPP/114", "completion": "    long long min_sum = nums[0];\n    long long current_sum = nums[0];\n    \n    for (size_t i = 1; i < nums.size(); ++i) {\n        current_sum = min(nums[i], current_sum + nums[i]);\n        min_sum = min(min_sum, current_sum);\n    }\n    \n    return min_sum;\n}", "unique_id": "CPP_114_9", "index": 1148}
{"task_id": "CPP/115", "completion": "    int total = 0;\n    for (const auto& row : grid) {\n        int sum = 0;\n        for (int cell : row) {\n            sum += cell;\n        }\n        total += (sum + capacity - 1) / capacity;\n    }\n    return total;\n}", "unique_id": "CPP_115_2", "index": 1151}
{"task_id": "CPP/116", "completion": "    auto countOnes = [](int n) {\n        int count = 0;\n        while (n) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    };\n\n    sort(arr.begin(), arr.end(), [&](int a, int b) {\n        int countA = countOnes(abs(a));\n        int countB = countOnes(abs(b));\n        if (countA == countB)\n            return a < b;\n        return countA < countB;\n    });\n\n    return arr;\n}", "unique_id": "CPP_116_2", "index": 1161}
{"task_id": "CPP/117", "completion": "    vector<string> result;\n    if (s.empty()) {\n        return result;\n    }\n    \n    string word;\n    for (char ch : s) {\n        if (ch != ' ') {\n            word += ch;\n        } else {\n            if (!word.empty()) {\n                int consonant_count = 0;\n                for (char c : word) {\n                    if (tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u') {\n                        consonant_count++;\n                    }\n                }\n                if (consonant_count == n) {\n                    result.push_back(word);\n                }\n                word.clear();\n            }\n        }\n    }\n    \n    if (!word.empty()) {\n        int consonant_count = 0;\n        for (char c : word) {\n            if (tolower(c) != 'a' && tolower(c) != 'e' && tolower(c) != 'i' && tolower(c) != 'o' && tolower(c) != 'u') {\n                consonant_count++;\n            }\n        }\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_117_9", "index": 1178}
{"task_id": "CPP/118", "completion": "    int n = word.length();\n    for (int i = n - 2; i > 0; i--) {\n        if ((word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' ||\n             word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O' || word[i] == 'U') &&\n            !(word[i-1] == 'a' || word[i-1] == 'e' || word[i-1] == 'i' || word[i-1] == 'o' || word[i-1] == 'u' ||\n              word[i-1] == 'A' || word[i-1] == 'E' || word[i-1] == 'I' || word[i-1] == 'O' || word[i-1] == 'U') &&\n            !(word[i+1] == 'a' || word[i+1] == 'e' || word[i+1] == 'i' || word[i+1] == 'o' || word[i+1] == 'u' ||\n              word[i+1] == 'A' || word[i+1] == 'E' || word[i+1] == 'I' || word[i+1] == 'O' || word[i+1] == 'U')) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}", "unique_id": "CPP_118_8", "index": 1187}
{"task_id": "CPP/119", "completion": "    string s1 = lst[0];\n    string s2 = lst[1];\n    \n    // Check if s1 + s2 is balanced\n    int balance = 0;\n    bool valid = true;\n    for (char c : s1) {\n        if (c == '(') balance++;\n        else balance--;\n        if (balance < 0) {\n            valid = false;\n            break;\n        }\n    }\n    for (char c : s2) {\n        if (c == '(') balance++;\n        else balance--;\n        if (balance < 0) {\n            valid = false;\n            break;\n        }\n    }\n    if (valid && balance == 0) return \"Yes\";\n    \n    // Check if s2 + s1 is balanced\n    balance = 0;\n    valid = true;\n    for (char c : s2) {\n        if (c == '(') balance++;\n        else balance--;\n        if (balance < 0) {\n            valid = false;\n            break;\n        }\n    }\n    for (char c : s1) {\n        if (c == '(') balance++;\n        else balance--;\n        if (balance < 0) {\n            valid = false;\n            break;\n        }\n    }\n    if (valid && balance == 0) return \"Yes\";\n    \n    return \"No\";\n}", "unique_id": "CPP_119_7", "index": 1196}
{"task_id": "CPP/120", "completion": "    sort(arr.begin(), arr.end());\n    vector<int> result;\n    for (int i = arr.size() - k; i < arr.size(); i++) {\n        result.push_back(arr[i]);\n    }\n    return result;\n}", "unique_id": "CPP_120_9", "index": 1208}
{"task_id": "CPP/121", "completion": "    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "unique_id": "CPP_121_8", "index": 1217}
{"task_id": "CPP/122", "completion": "    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "unique_id": "CPP_122_5", "index": 1224}
{"task_id": "CPP/123", "completion": "    vector<int> odd_numbers;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    odd_numbers.push_back(1);\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}", "unique_id": "CPP_123_10", "index": 1239}
{"task_id": "CPP/124", "completion": "    if (date.length() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n\n    if (month < 1 || month > 12)\n        return false;\n\n    if (day < 1 || day > 31)\n        return false;\n\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n            return false;\n    } else if (month == 2) {\n        bool isLeap = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n        if (day > 29 || (day == 29 && !isLeap))\n            return false;\n    }\n\n    return true;\n}", "unique_id": "CPP_124_2", "index": 1241}
{"task_id": "CPP/125", "completion": "    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        string word;\n        for (char ch : txt) {\n            if (ch == ' ') {\n                if (!word.empty()) {\n                    result.push_back(word);\n                    word.clear();\n                }\n            } else {\n                word += ch;\n            }\n        }\n        if (!word.empty()) {\n            result.push_back(word);\n        }\n        return result;\n    } else if (txt.find(',') != string::npos) {\n        vector<string> result;\n        string word;\n        for (char ch : txt) {\n            if (ch == ',') {\n                if (!word.empty()) {\n                    result.push_back(word);\n                    word.clear();\n                }\n            } else {\n                word += ch;\n            }\n        }\n        if (!word.empty()) {\n            result.push_back(word);\n        }\n        return result;\n    } else {\n        int count = 0;\n        for (char ch : txt) {\n            if (ch >= 'a' && ch <= 'z' && (ch - 'a') % 2 == 1) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}", "unique_id": "CPP_125_6", "index": 1255}
{"task_id": "CPP/126", "completion": "    if (lst.size() == 1)\n        return true;\n    \n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] < lst[i - 1])\n            return false;\n    }\n    \n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] == lst[i - 1]) {\n            if (i + 1 < lst.size() && lst[i] == lst[i + 1])\n                return false;\n        }\n    }\n    \n    return true;\n}", "unique_id": "CPP_126_1", "index": 1260}
{"task_id": "CPP/127", "completion": "    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    \n    int intersectStart = max(start1, start2);\n    int intersectEnd = min(end1, end2);\n    \n    if (intersectStart > intersectEnd) {\n        return \"NO\";\n    }\n    \n    int length = intersectEnd - intersectStart;\n    \n    if (length < 2) {\n        return \"NO\";\n    }\n    \n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    \n    return \"YES\";\n}", "unique_id": "CPP_127_1", "index": 1270}
{"task_id": "CPP/128", "completion": "    if (arr.empty())\n        return -32768;\n    \n    int product = 1;\n    int sum = 0;\n    \n    for (int num : arr) {\n        if (num > 0) {\n            product *= 1;\n        } else if (num < 0) {\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n        sum += abs(num);\n    }\n    \n    return sum * product;\n}", "unique_id": "CPP_128_1", "index": 1280}
{"task_id": "CPP/129", "completion": "    int n = grid.size();\n    vector<int> result(k, INT_MAX);\n    \n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            vector<int> currentPath;\n            currentPath.push_back(grid[i][j]);\n            dfs(grid, i, j, k - 1, currentPath, result);\n        }\n    }\n    \n    return result;\n}\n\nvoid dfs(vector<vector<int>>& grid, int i, int j, int remainingSteps, vector<int>& currentPath, vector<int>& result) {\n    if (remainingSteps == 0) {\n        if (currentPath < result) {\n            result = currentPath;\n        }\n        return;\n    }\n    \n    int n = grid.size();\n    int dx[] = {-1, 1, 0, 0};\n    int dy[] = {0, 0, -1, 1};\n    \n    for (int d = 0; d < 4; ++d) {\n        int x = i + dx[d];\n        int y = j + dy[d];\n        \n        if (x >= 0 && x < n && y >= 0 && y < n) {\n            currentPath.push_back(grid[x][y]);\n            dfs(grid, x, y, remainingSteps - 1, currentPath, result);\n            currentPath.pop_back();\n        }\n    }\n}", "unique_id": "CPP_129_6", "index": 1295}
{"task_id": "CPP/130", "completion": "    if (n < 0) {\n        return {};\n    }\n\n    vector<int> result(n + 1);\n    if (n >= 0) {\n        result[0] = 1;\n    }\n    if (n >= 1) {\n        result[1] = 3;\n    }\n    if (n >= 2) {\n        result[2] = 2;\n    }\n\n    for (int i = 3; i <= n; ++i) {\n        if (i % 2 == 0) {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n\n    return result;\n}", "unique_id": "CPP_130_2", "index": 1301}
{"task_id": "CPP/131", "completion": "    int product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}", "unique_id": "CPP_131_10", "index": 1319}
{"task_id": "CPP/132", "completion": "    int count = 0;\n    for (char ch : str) {\n        if (ch == '[') {\n            count++;\n        } else if (ch == ']') {\n            count--;\n        }\n        if (count > 1) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "CPP_132_6", "index": 1325}
{"task_id": "CPP/133", "completion": "    int sum = 0;\n    for (float num : lst) {\n        int ceiling = ceil(num);\n        sum += ceiling * ceiling;\n    }\n    return sum;\n}", "unique_id": "CPP_133_2", "index": 1331}
{"task_id": "CPP/134", "completion": "    if (txt.empty())\n        return false;\n    \n    char last_char = txt.back();\n    if (!isalpha(last_char))\n        return false;\n    \n    size_t last_space = txt.find_last_of(' ');\n    if (last_space == string::npos)\n        return true;\n    \n    return last_space == txt.length() - 2;\n}", "unique_id": "CPP_134_7", "index": 1346}
{"task_id": "CPP/135", "completion": "    for (int i = arr.size() - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}", "unique_id": "CPP_135_8", "index": 1357}
{"task_id": "CPP/136", "completion": "    int largest_neg = 0;\n    int smallest_pos = 0;\n    bool has_neg = false;\n    bool has_pos = false;\n\n    for (int num : lst) {\n        if (num < 0) {\n            if (!has_neg || num > largest_neg) {\n                largest_neg = num;\n                has_neg = true;\n            }\n        } else if (num > 0) {\n            if (!has_pos || num < smallest_pos) {\n                smallest_pos = num;\n                has_pos = true;\n            }\n        }\n    }\n\n    return {has_neg ? largest_neg : 0, has_pos ? smallest_pos : 0};\n}", "unique_id": "CPP_136_10", "index": 1369}
{"task_id": "CPP/137", "completion": "    try {\n        double valA, valB;\n        \n        if (a.type() == typeid(int)) {\n            valA = boost::any_cast<int>(a);\n        } else if (a.type() == typeid(double)) {\n            valA = boost::any_cast<double>(a);\n        } else if (a.type() == typeid(string)) {\n            string strA = boost::any_cast<string>(a);\n            replace(strA.begin(), strA.end(), ',', '.');\n            valA = stod(strA);\n        } else {\n            return \"None\";\n        }\n\n        if (b.type() == typeid(int)) {\n            valB = boost::any_cast<int>(b);\n        } else if (b.type() == typeid(double)) {\n            valB = boost::any_cast<double>(b);\n        } else if (b.type() == typeid(string)) {\n            string strB = boost::any_cast<string>(b);\n            replace(strB.begin(), strB.end(), ',', '.');\n            valB = stod(strB);\n        } else {\n            return \"None\";\n        }\n\n        if (valA > valB) {\n            return a;\n        } else if (valB > valA) {\n            return b;\n        } else {\n            return string(\"None\");\n        }\n    } catch (const boost::bad_any_cast&) {\n        return \"None\";\n    }\n}", "unique_id": "CPP_137_3", "index": 1372}
{"task_id": "CPP/138", "completion": "    if (n < 8 || n % 2 != 0)\n        return false;\n    return true;\n}", "unique_id": "CPP_138_8", "index": 1387}
{"task_id": "CPP/139", "completion": "    long long result = 1;\n    long long current_factorial = 1;\n    \n    for (int i = 1; i <= n; i++) {\n        current_factorial *= i;\n        result *= current_factorial;\n    }\n    \n    return result;\n}", "unique_id": "CPP_139_6", "index": 1395}
{"task_id": "CPP/140", "completion": "    string result;\n    int space_count = 0;\n    for (char ch : text) {\n        if (ch == ' ') {\n            space_count++;\n        } else {\n            if (space_count > 2) {\n                result += '-';\n            } else if (space_count > 0) {\n                result += string(space_count, '_');\n            }\n            space_count = 0;\n            result += ch;\n        }\n    }\n    if (space_count > 2) {\n        result += '-';\n    } else if (space_count > 0) {\n        result += string(space_count, '_');\n    }\n    return result;\n}", "unique_id": "CPP_140_1", "index": 1400}
{"task_id": "CPP/141", "completion": "    int dotIndex = file_name.find('.');\n    if (dotIndex == string::npos || dotIndex == 0 || dotIndex == file_name.length() - 1)\n        return \"No\";\n    \n    string name = file_name.substr(0, dotIndex);\n    string ext = file_name.substr(dotIndex + 1);\n    \n    if (!isalpha(name[0]))\n        return \"No\";\n    \n    int digitCount = 0;\n    for (char c : name) {\n        if (isdigit(c))\n            digitCount++;\n    }\n    if (digitCount > 3)\n        return \"No\";\n    \n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n    \n    return \"Yes\";\n}", "unique_id": "CPP_141_7", "index": 1416}
{"task_id": "CPP/142", "completion": "    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "unique_id": "CPP_142_8", "index": 1427}
{"task_id": "CPP/143", "completion": "    string result = \"\";\n    string word = \"\";\n    for (char ch : sentence) {\n        if (ch != ' ') {\n            word += ch;\n        } else {\n            int len = word.length();\n            if (len < 2) {\n                word = \"\";\n                continue;\n            }\n            bool isPrime = true;\n            for (int i = 2; i * i <= len; i++) {\n                if (len % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                if (!result.empty()) {\n                    result += \" \";\n                }\n                result += word;\n            }\n            word = \"\";\n        }\n    }\n    if (!word.empty()) {\n        int len = word.length();\n        if (len >= 2) {\n            bool isPrime = true;\n            for (int i = 2; i * i <= len; i++) {\n                if (len % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                if (!result.empty()) {\n                    result += \" \";\n                }\n                result += word;\n            }\n        }\n    }\n    return result;\n}", "unique_id": "CPP_143_6", "index": 1435}
{"task_id": "CPP/144", "completion": "    int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(), \"%d/%d\", &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n\n    int numerator = x_num * n_num;\n    int denominator = x_den * n_den;\n\n    if (numerator % denominator == 0)\n        return true;\n    else\n        return false;\n}", "unique_id": "CPP_144_6", "index": 1445}
{"task_id": "CPP/145", "completion": "    auto sumDigits = [](int num) {\n        int sum = 0;\n        num = abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    };\n\n    vector<pair<int, int>> indexedSums;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        indexedSums.emplace_back(i, sumDigits(nums[i]));\n    }\n\n    sort(indexedSums.begin(), indexedSums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        if (a.second == b.second) {\n            return a.first < b.first;\n        }\n        return a.second < b.second;\n    });\n\n    vector<int> result;\n    for (const auto& p : indexedSums) {\n        result.push_back(nums[p.first]);\n    }\n\n    return result;\n}", "unique_id": "CPP_145_6", "index": 1455}
{"task_id": "CPP/146", "completion": "    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            int last_digit = abs(num) % 10;\n            int first_digit = abs(num);\n            while (first_digit >= 10) {\n                first_digit /= 10;\n            }\n            if (last_digit % 2 == 1 && first_digit % 2 == 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "unique_id": "CPP_146_6", "index": 1465}
{"task_id": "CPP/147", "completion": "    vector<int> a(n);\n    for (int i = 1; i <= n; i++) {\n        a[i-1] = i * i - i + 1;\n    }\n    \n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i+1; j < n; j++) {\n            for (int k = j+1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}", "unique_id": "CPP_147_8", "index": 1477}
{"task_id": "CPP/148", "completion": "    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    vector<string> result;\n    int index1 = -1, index2 = -1;\n    \n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) {\n            index1 = i;\n        }\n        if (planets[i] == planet2) {\n            index2 = i;\n        }\n    }\n    \n    if (index1 == -1 || index2 == -1) {\n        return result;\n    }\n    \n    if (index1 < index2) {\n        for (int i = index1 + 1; i < index2; i++) {\n            result.push_back(planets[i]);\n        }\n    } else {\n        for (int i = index2 + 1; i < index1; i++) {\n            result.push_back(planets[i]);\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_148_6", "index": 1485}
{"task_id": "CPP/149", "completion": "    vector<string> result;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}", "unique_id": "CPP_149_5", "index": 1494}
{"task_id": "CPP/150", "completion": "    if (n < 2)\n        return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return y;\n    }\n    return x;\n}", "unique_id": "CPP_150_1", "index": 1500}
{"task_id": "CPP/151", "completion": "    long long sum = 0;\n    for (float num : lst) {\n        if (num >= 0 && num == (int)num && (int)num % 2 == 1) {\n            sum += (int)num * (int)num;\n        }\n    }\n    return sum;\n}", "unique_id": "CPP_151_9", "index": 1518}
{"task_id": "CPP/152", "completion": "    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}", "unique_id": "CPP_152_3", "index": 1522}
{"task_id": "CPP/153", "completion": "    int max_strength = INT_MIN;\n    string strongest_extension;\n    \n    for (const string& ext : extensions) {\n        int cap = 0, sm = 0;\n        for (char ch : ext) {\n            if (isupper(ch)) cap++;\n            else if (islower(ch)) sm++;\n        }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}", "unique_id": "CPP_153_1", "index": 1530}
{"task_id": "CPP/154", "completion": "    if (b.empty()) return true;\n    for (size_t i = 0; i < b.length(); ++i) {\n        string rotated = b.substr(i) + b.substr(0, i);\n        if (a.find(rotated) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}", "unique_id": "CPP_154_6", "index": 1545}
{"task_id": "CPP/155", "completion": "    vector<int> result(2, 0);\n    num = abs(num);\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            result[0]++;\n        } else {\n            result[1]++;\n        }\n        num /= 10;\n    }\n    return result;\n}", "unique_id": "CPP_155_7", "index": 1556}
{"task_id": "CPP/156", "completion": "    vector<pair<int, string>> val = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n\n    string result = \"\";\n    for (auto& [value, symbol] : val) {\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    return result;\n}", "unique_id": "CPP_156_3", "index": 1562}
{"task_id": "CPP/157", "completion": "    float max_side = max(a, max(b, c));\n    if (max_side == a) {\n        return fabs(b * b + c * c - a * a) < 1e-6;\n    } else if (max_side == b) {\n        return fabs(a * a + c * c - b * b) < 1e-6;\n    } else {\n        return fabs(a * a + b * b - c * c) < 1e-6;\n    }\n}", "unique_id": "CPP_157_9", "index": 1578}
{"task_id": "CPP/158", "completion": "    string result;\n    int max_unique = 0;\n    for (const string& word : words) {\n        vector<bool> seen(256, false);\n        int unique_count = 0;\n        for (char ch : word) {\n            if (!seen[ch]) {\n                seen[ch] = true;\n                unique_count++;\n            }\n        }\n        if (unique_count > max_unique || (unique_count == max_unique && word < result)) {\n            max_unique = unique_count;\n            result = word;\n        }\n    }\n    return result;\n}", "unique_id": "CPP_158_6", "index": 1585}
{"task_id": "CPP/159", "completion": "    int totalEaten = number;\n    int carrotsLeft = remaining;\n    \n    if (need <= remaining) {\n        totalEaten += need;\n        carrotsLeft -= need;\n    } else {\n        totalEaten += remaining;\n        carrotsLeft = 0;\n    }\n    \n    return {totalEaten, carrotsLeft};\n}", "unique_id": "CPP_159_8", "index": 1597}
{"task_id": "CPP/160", "completion": "    int result = operand[0];\n    for (size_t i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}", "unique_id": "CPP_160_7", "index": 1606}
{"task_id": "CPP/161", "completion": "    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (!hasLetter) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n\n    for (char &c : s) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n        }\n    }\n\n    return s;\n}", "unique_id": "CPP_161_8", "index": 1617}
{"task_id": "CPP/162", "completion": "    if (text.empty()) {\n        return \"\";\n    }\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n\n    char mdString[33];\n    for (int i = 0; i < 16; i++)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n\n    return string(mdString);\n}", "unique_id": "CPP_162_3", "index": 1622}
{"task_id": "CPP/163", "completion": "    vector<int> result;\n    int start = min(a, b);\n    int end = max(a, b);\n    \n    for (int i = start; i <= end; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}", "unique_id": "CPP_163_6", "index": 1635}
