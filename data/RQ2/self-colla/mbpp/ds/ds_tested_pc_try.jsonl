{"task_id": "MBCPP/1", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n * > minCost(vector<vector<int>>{{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}, 2, 2)\n * 8\n * > minCost(vector<vector<int>>{{2, 3, 4}, {5, 9, 3}, {2, 6, 4}}, 2, 2)\n * 12\n * > minCost(vector<vector<int>>{{3, 4, 5}, {6, 10, 4}, {3, 7, 5}}, 2, 2)\n * 16\n */\nint minCost(vector<vector<int>> cost, int m, int n) {\n", "entry_point": "minCost", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n * > minCost(vector<vector<int>>{{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}, 2, 2)\n * 8\n * > minCost(vector<vector<int>>{{2, 3, 4}, {5, 9, 3}, {2, 6, 4}}, 2, 2)\n * 12\n * > minCost(vector<vector<int>>{{3, 4, 5}, {6, 10, 4}, {3, 7, 5}}, 2, 2)\n * 16\n */\nint minCost(vector<vector<int>> cost, int m, int n) {\n    int dp[m+1][n+1];\n    dp[0][0] = cost[0][0];\n    \n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    \n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + cost[i][j];\n        }\n    }\n    \n    return dp[m][n];\n}", "session_history": [], "fallback_mode": "pc"}
{"task_id": "MBCPP/2", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the similar elements from the given two tuple lists.\n * > similarElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {4, 5}\n * > similarElements(vector<int>{1, 2, 3, 4}, vector<int>{5, 4, 3, 7})\n * {3, 4}\n * > similarElements(vector<int>{11, 12, 14, 13}, vector<int>{17, 15, 14, 13})\n * {13, 14}\n */\nvector<int> similarElements(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "similarElements", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the similar elements from the given two tuple lists.\n * > similarElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {4, 5}\n * > similarElements(vector<int>{1, 2, 3, 4}, vector<int>{5, 4, 3, 7})\n * {3, 4}\n * > similarElements(vector<int>{11, 12, 14, 13}, vector<int>{17, 15, 14, 13})\n * {13, 14}\n */\nvector<int> similarElements(vector<int> testTup1, vector<int> testTup2) {\n    unordered_set<int> set1(testTup1.begin(), testTup1.end());\n    vector<int> result;\n    for (int num : testTup2) {\n        if (set1.find(num) != set1.end()) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/3", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to identify non-prime numbers.\n * > isNotPrime(2)\n * false\n * > isNotPrime(10)\n * true\n * > isNotPrime(35)\n * true\n */\nbool isNotPrime(int n) {\n", "entry_point": "isNotPrime", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to identify non-prime numbers.\n * > isNotPrime(2)\n * false\n * > isNotPrime(10)\n * true\n * > isNotPrime(35)\n * true\n */\nbool isNotPrime(int n) {\n    if (n <= 1)\n        return true;\n    if (n <= 3)\n        return false;\n    if (n % 2 == 0 || n % 3 == 0)\n        return true;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return true;\n    }\n    return false;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/4", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3)\n * {85, 75, 65}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2)\n * {85, 75}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {85, 75, 65, 58, 35}\n */\nvector<int> heapQueueLargest(vector<int> nums, int n) {\n", "entry_point": "heapQueueLargest", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3)\n * {85, 75, 65}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2)\n * {85, 75}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {85, 75, 65, 58, 35}\n */\nvector<int> heapQueueLargest(vector<int> nums, int n) {\n    priority_queue<int> pq(nums.begin(), nums.end());\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/5", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n * > countWays(2)\n * 3\n * > countWays(8)\n * 153\n * > countWays(12)\n * 2131\n */\nint countWays(int n) {\n", "entry_point": "countWays", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n * > countWays(2)\n * 3\n * > countWays(8)\n * 153\n * > countWays(12)\n * 2131\n */\nint countWays(int n) {\n    if (n % 2 != 0) return 0;\n    int dp[n+1];\n    dp[0] = 1;\n    dp[1] = 0;\n    dp[2] = 3;\n    for (int i = 4; i <= n; i += 2) {\n        dp[i] = 4 * dp[i-2] - dp[i-4];\n    }\n    return dp[n];\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/6", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two numbers differ at one bit position only or not.\n * > differAtOneBitPos(13, 9)\n * true\n * > differAtOneBitPos(15, 8)\n * false\n * > differAtOneBitPos(2, 4)\n * false\n */\nbool differAtOneBitPos(int a, int b) {\n", "entry_point": "differAtOneBitPos", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two numbers differ at one bit position only or not.\n * > differAtOneBitPos(13, 9)\n * true\n * > differAtOneBitPos(15, 8)\n * false\n * > differAtOneBitPos(2, 4)\n * false\n */\nbool differAtOneBitPos(int a, int b) {\n    int xorResult = a ^ b;\n    if (xorResult == 0)\n        return false;\n    return (xorResult & (xorResult - 1)) == 0;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/7", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\n * > findCharLong(string(\"Please move back to stream\"))\n * {string(\"Please\"), string(\"move\"), string(\"back\"), string(\"stream\")}\n * > findCharLong(string(\"Jing Eco and Tech\"))\n * {string(\"Jing\"), string(\"Tech\")}\n * > findCharLong(string(\"Jhingai wulu road Zone 3\"))\n * {string(\"Jhingai\"), string(\"wulu\"), string(\"road\"), string(\"Zone\")}\n */\nvector<string> findCharLong(string text) {\n", "entry_point": "findCharLong", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\n * > findCharLong(string(\"Please move back to stream\"))\n * {string(\"Please\"), string(\"move\"), string(\"back\"), string(\"stream\")}\n * > findCharLong(string(\"Jing Eco and Tech\"))\n * {string(\"Jing\"), string(\"Tech\")}\n * > findCharLong(string(\"Jhingai wulu road Zone 3\"))\n * {string(\"Jhingai\"), string(\"wulu\"), string(\"road\"), string(\"Zone\")}\n */\nvector<string> findCharLong(string text) {\n    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{4,}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/8", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find squares of individual elements in a list using lambda function.\n * > squareNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n * > squareNums(vector<int>{10, 20, 30})\n * {100, 400, 900}\n * > squareNums(vector<int>{12, 15})\n * {144, 225}\n */\nvector<int> squareNums(vector<int> nums) {\n", "entry_point": "squareNums", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find squares of individual elements in a list using lambda function.\n * > squareNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n * > squareNums(vector<int>{10, 20, 30})\n * {100, 400, 900}\n * > squareNums(vector<int>{12, 15})\n * {144, 225}\n */\nvector<int> squareNums(vector<int> nums) {\n    transform(nums.begin(), nums.end(), nums.begin(), [](int x) { return x * x; });\n    return nums;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/9", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of rotations required to get the same string.\n * > findRotations(string(\"aaaa\"))\n * 1\n * > findRotations(string(\"ab\"))\n * 2\n * > findRotations(string(\"abc\"))\n * 3\n */\nint findRotations(string str) {\n", "entry_point": "findRotations", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of rotations required to get the same string.\n * > findRotations(string(\"aaaa\"))\n * 1\n * > findRotations(string(\"ab\"))\n * 2\n * > findRotations(string(\"abc\"))\n * 3\n */\nint findRotations(string str) {\n    string temp = str + str;\n    int n = str.length();\n    for (int i = 1; i <= n; i++) {\n        if (str == temp.substr(i, n))\n            return i;\n    }\n    return n;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/10", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n smallest items from a dataset.\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {10, 20}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {10, 20, 20, 40, 50}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {10, 20, 20}\n */\nvector<int> smallNnum(vector<int> list1, int n) {\n", "entry_point": "smallNnum", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n smallest items from a dataset.\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {10, 20}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {10, 20, 20, 40, 50}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {10, 20, 20}\n */\nvector<int> smallNnum(vector<int> list1, int n) {\n    sort(list1.begin(), list1.end());\n    vector<int> result(list1.begin(), list1.begin() + n);\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/11", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n * > removeOcc(string(\"hello\"), string(\"l\"))\n * string(\"heo\")\n * > removeOcc(string(\"abcda\"), string(\"a\"))\n * string(\"bcd\")\n * > removeOcc(string(\"PHP\"), string(\"P\"))\n * string(\"H\")\n */\nstring removeOcc(string s, string ch) {\n", "entry_point": "removeOcc", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n * > removeOcc(string(\"hello\"), string(\"l\"))\n * string(\"heo\")\n * > removeOcc(string(\"abcda\"), string(\"a\"))\n * string(\"bcd\")\n * > removeOcc(string(\"PHP\"), string(\"P\"))\n * string(\"H\")\n */\nstring removeOcc(string s, string ch) {\n    size_t first = s.find(ch);\n    if (first != string::npos) {\n        s.erase(first, ch.length());\n    }\n    size_t last = s.rfind(ch);\n    if (last != string::npos) {\n        s.erase(last, ch.length());\n    }\n    return s;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/12", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}})\n * {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}})\n * {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}\n * > sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}})\n * {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n", "entry_point": "sortMatrix", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}})\n * {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}})\n * {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}\n * > sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}})\n * {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n    auto rowSum = [](const vector<int>& row) {\n        return accumulate(row.begin(), row.end(), 0);\n    };\n\n    sort(m.begin(), m.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return rowSum(a) < rowSum(b);\n    });\n\n    return m;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/14", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n * > findVolume(10, 8, 6)\n * 240\n * > findVolume(3, 2, 2)\n * 6\n * > findVolume(1, 2, 1)\n * 1\n */\nint findVolume(int l, int b, int h) {\n", "entry_point": "findVolume", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n * > findVolume(10, 8, 6)\n * 240\n * > findVolume(3, 2, 2)\n * 6\n * > findVolume(1, 2, 1)\n * 1\n */\nint findVolume(int l, int b, int h) {\n    return (b * h * l) / 2;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/15", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n * > splitLowerstring(string(\"AbCd\"))\n * {string(\"bC\"), string(\"d\")}\n * > splitLowerstring(string(\"Python\"))\n * {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > splitLowerstring(string(\"Programming\"))\n * {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}\n */\nvector<string> splitLowerstring(string text) {\n", "entry_point": "splitLowerstring", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n * > splitLowerstring(string(\"AbCd\"))\n * {string(\"bC\"), string(\"d\")}\n * > splitLowerstring(string(\"Python\"))\n * {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > splitLowerstring(string(\"Programming\"))\n * {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}\n */\nvector<string> splitLowerstring(string text) {\n    vector<string> result;\n    string current;\n    for (char ch : text) {\n        if (islower(ch)) {\n            if (!current.empty()) {\n                result.push_back(current);\n                current.clear();\n            }\n            current += ch;\n        } else {\n            current += ch;\n        }\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/16", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n * > textLowercaseUnderscore(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textLowercaseUnderscore(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textLowercaseUnderscore(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textLowercaseUnderscore(string text) {\n", "entry_point": "textLowercaseUnderscore", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n * > textLowercaseUnderscore(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textLowercaseUnderscore(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textLowercaseUnderscore(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textLowercaseUnderscore(string text) {\n    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/17", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n * > squarePerimeter(10)\n * 40\n * > squarePerimeter(5)\n * 20\n * > squarePerimeter(4)\n * 16\n */\nint squarePerimeter(int a) {\n", "entry_point": "squarePerimeter", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n * > squarePerimeter(10)\n * 40\n * > squarePerimeter(5)\n * 20\n * > squarePerimeter(4)\n * 16\n */\nint squarePerimeter(int a) {\n    return 4 * a;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/18", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n * > removeDirtyChars(string(\"probasscurve\"), string(\"pros\"))\n * string(\"bacuve\")\n * > removeDirtyChars(string(\"digitalindia\"), string(\"talent\"))\n * string(\"digiidi\")\n * > removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"))\n * string(\"emles\")\n */\nstring removeDirtyChars(string str, string secondString) {\n", "entry_point": "removeDirtyChars", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n * > removeDirtyChars(string(\"probasscurve\"), string(\"pros\"))\n * string(\"bacuve\")\n * > removeDirtyChars(string(\"digitalindia\"), string(\"talent\"))\n * string(\"digiidi\")\n * > removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"))\n * string(\"emles\")\n */\nstring removeDirtyChars(string str, string secondString) {\n    unordered_set<char> charsToRemove;\n    for (char c : secondString) {\n        charsToRemove.insert(c);\n    }\n    \n    string result;\n    for (char c : str) {\n        if (charsToRemove.find(c) == charsToRemove.end()) {\n            result += c;\n        }\n    }\n    \n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/19", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n * > testDuplicate(vector<int>{1, 2, 3, 4, 5})\n * false\n * > testDuplicate(vector<int>{1, 2, 3, 4, 4})\n * true\n * > testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5})\n * true\n */\nbool testDuplicate(vector<int> arraynums) {\n", "entry_point": "testDuplicate", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n * > testDuplicate(vector<int>{1, 2, 3, 4, 5})\n * false\n * > testDuplicate(vector<int>{1, 2, 3, 4, 4})\n * true\n * > testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5})\n * true\n */\nbool testDuplicate(vector<int> arraynums) {\n    unordered_set<int> seen;\n    for (int num : arraynums) {\n        if (seen.find(num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/20", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n * > isWoodall(383)\n * true\n * > isWoodall(254)\n * false\n * > isWoodall(200)\n * false\n */\nbool isWoodall(int x) {\n", "entry_point": "isWoodall", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n * > isWoodall(383)\n * true\n * > isWoodall(254)\n * false\n * > isWoodall(200)\n * false\n */\nbool isWoodall(int x) {\n    if (x < 1)\n        return false;\n    \n    int n = 1;\n    while (true) {\n        int woodall = n * (1 << n) - 1;\n        if (woodall == x)\n            return true;\n        if (woodall > x)\n            return false;\n        n++;\n    }\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/21", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n * > multiplesOfNum(4, 3)\n * {3, 6, 9, 12}\n * > multiplesOfNum(2, 5)\n * {5, 10}\n * > multiplesOfNum(9, 2)\n * {2, 4, 6, 8, 10, 12, 14, 16, 18}\n */\nvector<int> multiplesOfNum(int m, int n) {\n", "entry_point": "multiplesOfNum", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n * > multiplesOfNum(4, 3)\n * {3, 6, 9, 12}\n * > multiplesOfNum(2, 5)\n * {5, 10}\n * > multiplesOfNum(9, 2)\n * {2, 4, 6, 8, 10, 12, 14, 16, 18}\n */\nvector<int> multiplesOfNum(int m, int n) {\n    vector<int> result;\n    for (int i = 1; i <= m; i++) {\n        result.push_back(n * i);\n    }\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/22", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5})\n * 4\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4})\n * -1\n * > findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2})\n * 1\n */\nint findFirstDuplicate(vector<int> nums) {\n", "entry_point": "findFirstDuplicate", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5})\n * 4\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4})\n * -1\n * > findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2})\n * 1\n */\nint findFirstDuplicate(vector<int> nums) {\n    unordered_set<int> seen;\n    for (int num : nums) {\n        if (seen.count(num))\n            return num;\n        seen.insert(num);\n    }\n    return -1;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/23", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n * > maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * 33\n * > maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}})\n * 6\n * > maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}})\n * 19\n */\nint maximumSum(vector<vector<int>> list1) {\n", "entry_point": "maximumSum", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n * > maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * 33\n * > maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}})\n * 6\n * > maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}})\n * 19\n */\nint maximumSum(vector<vector<int>> list1) {\n    int maxSum = INT_MIN;\n    for (const auto& sublist : list1) {\n        int currentSum = 0;\n        for (int num : sublist) {\n            currentSum += num;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    return maxSum;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/24", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * > binaryToDecimal(100)\n * 4\n * > binaryToDecimal(1011)\n * 11\n * > binaryToDecimal(1101101)\n * 109\n */\nint binaryToDecimal(int binary) {\n", "entry_point": "binaryToDecimal", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * > binaryToDecimal(100)\n * 4\n * > binaryToDecimal(1011)\n * 11\n * > binaryToDecimal(1101101)\n * 109\n */\nint binaryToDecimal(int binary) {\n    int decimal = 0, base = 1;\n    while (binary > 0) {\n        int lastDigit = binary % 10;\n        decimal += lastDigit * base;\n        base *= 2;\n        binary /= 10;\n    }\n    return decimal;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/25", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n * > findProduct(vector<int>{1, 1, 2, 3}, 4)\n * 6\n * > findProduct(vector<int>{1, 2, 3, 1, 1}, 5)\n * 6\n * > findProduct(vector<int>{1, 1, 4, 5, 6}, 5)\n * 120\n */\nint findProduct(vector<int> arr, int n) {\n", "entry_point": "findProduct", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n * > findProduct(vector<int>{1, 1, 2, 3}, 4)\n * 6\n * > findProduct(vector<int>{1, 2, 3, 1, 1}, 5)\n * 6\n * > findProduct(vector<int>{1, 1, 4, 5, 6}, 5)\n * 120\n */\nint findProduct(vector<int> arr, int n) {\n    unordered_map<int, int> freq;\n    for (int num : arr) {\n        freq[num]++;\n    }\n    int product = 1;\n    for (auto& pair : freq) {\n        if (pair.second == 1) {\n            product *= pair.first;\n        }\n    }\n    return product;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/26", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n * > checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4)\n * true\n * > checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7)\n * true\n * > checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7)\n * false\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n", "entry_point": "checkKElements", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n * > checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4)\n * true\n * > checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7)\n * true\n * > checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7)\n * false\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            if (num != k) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/27", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n * > remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")})\n * {string(\"words\"), string(\"letters\"), string(\"digits\")}\n * > remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")})\n * {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}\n * > remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")})\n * {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}\n */\nvector<string> remove(vector<string> list) {\n", "entry_point": "remove", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n * > remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")})\n * {string(\"words\"), string(\"letters\"), string(\"digits\")}\n * > remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")})\n * {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}\n * > remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")})\n * {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}\n */\nvector<string> remove(vector<string> list) {\n    for (auto& str : list) {\n        str.erase(remove_if(str.begin(), str.end(), ::isdigit), str.end());\n    }\n    return list;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/28", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n * > binomialCoeff(5, 2)\n * 10\n * > binomialCoeff(4, 3)\n * 4\n * > binomialCoeff(3, 2)\n * 3\n */\nint binomialCoeff(int n, int k) {\n", "entry_point": "binomialCoeff", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n * > binomialCoeff(5, 2)\n * 10\n * > binomialCoeff(4, 3)\n * 4\n * > binomialCoeff(3, 2)\n * 3\n */\nint binomialCoeff(int n, int k) {\n    int res = 1;\n    if (k > n - k)\n        k = n - k;\n    for (int i = 0; i < k; ++i) {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}", "session_history": [], "fallback_mode": "pc"}
{"task_id": "MBCPP/29", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n * > getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7)\n * 1\n * > getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n", "entry_point": "getOddOccurrence", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n * > getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7)\n * 1\n * > getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/30", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n * > countSubstringWithEqualEnds(string(\"abcda\"))\n * 6\n * > countSubstringWithEqualEnds(string(\"ab\"))\n * 2\n */\nint countSubstringWithEqualEnds(string s) {\n", "entry_point": "countSubstringWithEqualEnds", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n * > countSubstringWithEqualEnds(string(\"abcda\"))\n * 6\n * > countSubstringWithEqualEnds(string(\"ab\"))\n * 2\n */\nint countSubstringWithEqualEnds(string s) {\n    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/31", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3)\n * {5, 7, 1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1)\n * {1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 5)\n * {6, 5, 7, 8, 1}\n */\nvector<int> func(vector<vector<int>> nums, int k) {\n", "entry_point": "func", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3)\n * {5, 7, 1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1)\n * {1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 5)\n * {6, 5, 7, 8, 1}\n */\nvector<int> func(vector<vector<int>> nums, int k) {\n    unordered_map<int, int> freqMap;\n    for (const auto& list : nums) {\n        for (int num : list) {\n            freqMap[num]++;\n        }\n    }\n\n    priority_queue<pair<int, int>> maxHeap;\n    for (const auto& pair : freqMap) {\n        maxHeap.push({pair.second, pair.first});\n    }\n\n    vector<int> result;\n    for (int i = 0; i < k && !maxHeap.empty(); ++i) {\n        result.push_back(maxHeap.top().second);\n        maxHeap.pop();\n    }\n\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/32", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n * > maxPrimeFactors(15)\n * 5\n * > maxPrimeFactors(6)\n * 3\n * > maxPrimeFactors(2)\n * 2\n */\nint maxPrimeFactors(int n) {\n", "entry_point": "maxPrimeFactors", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n * > maxPrimeFactors(15)\n * 5\n * > maxPrimeFactors(6)\n * 3\n * > maxPrimeFactors(2)\n * 2\n */\nint maxPrimeFactors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        maxPrime = n;\n    return maxPrime;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/33", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n * > decimalToBinary(10)\n * 1010\n * > decimalToBinary(1)\n * 1\n * > decimalToBinary(20)\n * 10100\n */\nint decimalToBinary(int n) {\n", "entry_point": "decimalToBinary", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n * > decimalToBinary(10)\n * 1010\n * > decimalToBinary(1)\n * 1\n * > decimalToBinary(20)\n * 10100\n */\nint decimalToBinary(int n) {\n    int binary = 0;\n    int base = 1;\n    while (n > 0) {\n        int remainder = n % 2;\n        binary += remainder * base;\n        n = n / 2;\n        base = base * 10;\n    }\n    return binary;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/34", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n * > findMissing(vector<int>{1, 2, 3, 5}, 4)\n * 4\n * > findMissing(vector<int>{1, 3, 4, 5}, 4)\n * 2\n * > findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5)\n * 4\n */\nint findMissing(vector<int> ar, int n) {\n", "entry_point": "findMissing", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n * > findMissing(vector<int>{1, 2, 3, 5}, 4)\n * 4\n * > findMissing(vector<int>{1, 3, 4, 5}, 4)\n * 2\n * > findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5)\n * 4\n */\nint findMissing(vector<int> ar, int n) {\n    int low = 0, high = ar.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (ar[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/35", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n * > findRectNum(4)\n * 20\n * > findRectNum(5)\n * 30\n * > findRectNum(6)\n * 42\n */\nint findRectNum(int n) {\n", "entry_point": "findRectNum", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n * > findRectNum(4)\n * 20\n * > findRectNum(5)\n * 30\n * > findRectNum(6)\n * 42\n */\nint findRectNum(int n) {\n    return n * (n + 1);\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/36", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n * > findNthDigit(1, 2, 1)\n * 5\n * > findNthDigit(3, 5, 1)\n * 6\n * > findNthDigit(5, 6, 5)\n * 3\n */\nint findNthDigit(int p, int q, int n) {\n", "entry_point": "findNthDigit", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n * > findNthDigit(1, 2, 1)\n * 5\n * > findNthDigit(3, 5, 1)\n * 6\n * > findNthDigit(5, 6, 5)\n * 3\n */\nint findNthDigit(int p, int q, int n) {\n    if (q == 0) return -1;\n    string fraction = \"\";\n    int remainder = p % q;\n    unordered_map<int, int> remainderPositions;\n    while (remainder != 0 && fraction.length() < n) {\n        if (remainderPositions.find(remainder) != remainderPositions.end()) {\n            int start = remainderPositions[remainder];\n            int cycleLength = fraction.length() - start;\n            int pos = start + (n - start) % cycleLength;\n            return fraction[pos] - '0';\n        }\n        remainderPositions[remainder] = fraction.length();\n        remainder *= 10;\n        fraction += to_string(remainder / q);\n        remainder %= q;\n    }\n    if (fraction.length() >= n) {\n        return fraction[n - 1] - '0';\n    }\n    return 0;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/38", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n * > divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > divEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint divEvenOdd(vector<int> list1) {\n", "entry_point": "divEvenOdd", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n * > divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > divEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint divEvenOdd(vector<int> list1) {\n    int even = 0, odd = 0;\n    for (int num : list1) {\n        if (even == 0 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == 0 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != 0 && odd != 0) {\n            break;\n        }\n    }\n    if (odd == 0) {\n        return 0;\n    }\n    return even / odd;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/39", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n * > rearangeString(string(\"aab\"))\n * string(\"aba\")\n * > rearangeString(string(\"aabb\"))\n * string(\"abab\")\n * > rearangeString(string(\"abccdd\"))\n * string(\"cdabcd\")\n */\nstring rearangeString(string s) {\n", "entry_point": "rearangeString", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n * > rearangeString(string(\"aab\"))\n * string(\"aba\")\n * > rearangeString(string(\"aabb\"))\n * string(\"abab\")\n * > rearangeString(string(\"abccdd\"))\n * string(\"cdabcd\")\n */\nstring rearangeString(string s) {\n    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    }\n\n    priority_queue<pair<int, char>> maxHeap;\n    for (auto& [c, count] : freq) {\n        maxHeap.push({count, c});\n    }\n\n    string result;\n    pair<int, char> prev = {-1, '#'};\n\n    while (!maxHeap.empty()) {\n        auto curr = maxHeap.top();\n        maxHeap.pop();\n        result += curr.second;\n\n        if (prev.first > 0) {\n            maxHeap.push(prev);\n        }\n\n        curr.first--;\n        prev = curr;\n    }\n\n    if (result.size() != s.size()) {\n        return \"\";\n    }\n\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/40", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n * > freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}})\n * {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}\n * > freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}})\n * {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\n", "entry_point": "freqElement", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n * > freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}})\n * {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}\n * > freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}})\n * {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\n    unordered_map<int, int> freqMap;\n    for (const auto& innerVec : nums) {\n        for (int num : innerVec) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/41", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n * > filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 4, 6, 8, 10}\n * > filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {10, 20, 84}\n * > filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {8, 6, 4}\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n", "entry_point": "filterEvennumbers", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n * > filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 4, 6, 8, 10}\n * > filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {10, 20, 84}\n * > filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {8, 6, 4}\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int num) { return num % 2 == 0; });\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
