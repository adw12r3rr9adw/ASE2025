{"task_id": "MBCPP/1", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n * > minCost(vector<vector<int>>{{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}, 2, 2)\n * 8\n * > minCost(vector<vector<int>>{{2, 3, 4}, {5, 9, 3}, {2, 6, 4}}, 2, 2)\n * 12\n * > minCost(vector<vector<int>>{{3, 4, 5}, {6, 10, 4}, {3, 7, 5}}, 2, 2)\n * 16\n */\nint minCost(vector<vector<int>> cost, int m, int n) {\n", "entry_point": "minCost", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n * > minCost(vector<vector<int>>{{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}, 2, 2)\n * 8\n * > minCost(vector<vector<int>>{{2, 3, 4}, {5, 9, 3}, {2, 6, 4}}, 2, 2)\n * 12\n * > minCost(vector<vector<int>>{{3, 4, 5}, {6, 10, 4}, {3, 7, 5}}, 2, 2)\n * 16\n */\nint minCost(vector<vector<int>> cost, int m, int n) {\n    if (m == 0 && n == 0) \n        return cost[0][0];\n    if (m < 0 || n < 0) \n        return INT_MAX;\n    \n    return cost[m][n] + min(minCost(cost, m - 1, n), minCost(cost, m, n - 1));\n}", "session_history": [], "fallback_mode": "pc"}
{"task_id": "MBCPP/2", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the similar elements from the given two tuple lists.\n * > similarElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {4, 5}\n * > similarElements(vector<int>{1, 2, 3, 4}, vector<int>{5, 4, 3, 7})\n * {3, 4}\n * > similarElements(vector<int>{11, 12, 14, 13}, vector<int>{17, 15, 14, 13})\n * {13, 14}\n */\nvector<int> similarElements(vector<int> testTup1, vector<int> testTup2) {\n", "entry_point": "similarElements", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the similar elements from the given two tuple lists.\n * > similarElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {4, 5}\n * > similarElements(vector<int>{1, 2, 3, 4}, vector<int>{5, 4, 3, 7})\n * {3, 4}\n * > similarElements(vector<int>{11, 12, 14, 13}, vector<int>{17, 15, 14, 13})\n * {13, 14}\n */\nvector<int> similarElements(vector<int> testTup1, vector<int> testTup2) {\n    set<int> set1(testTup1.begin(), testTup1.end());\n    set<int> set2(testTup2.begin(), testTup2.end());\n    vector<int> result;\n\n    for (const auto& elem : set1) {\n        if (set2.count(elem)) {\n            result.push_back(elem);\n        }\n    }\n\n    sort(result.begin(), result.end());\n    return result;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/3", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to identify non-prime numbers.\n * > isNotPrime(2)\n * false\n * > isNotPrime(10)\n * true\n * > isNotPrime(35)\n * true\n */\nbool isNotPrime(int n) {\n", "entry_point": "isNotPrime", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to identify non-prime numbers.\n * > isNotPrime(2)\n * false\n * > isNotPrime(10)\n * true\n * > isNotPrime(35)\n * true\n */\nbool isNotPrime(int n) {\n    if (n <= 1) \n        return true;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return true;\n    }\n    return false;\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/4", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3)\n * {85, 75, 65}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2)\n * {85, 75}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {85, 75, 65, 58, 35}\n */\nvector<int> heapQueueLargest(vector<int> nums, int n) {\n", "entry_point": "heapQueueLargest", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3)\n * {85, 75, 65}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2)\n * {85, 75}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {85, 75, 65, 58, 35}\n */\nvector<int> heapQueueLargest(vector<int> nums, int n) {\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num : nums) {\n        minHeap.push(num);\n        if (minHeap.size() > n) {\n            minHeap.pop();\n        }\n    }\n    vector<int> result;\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}", "session_history": [], "fallback_mode": "pc"}
{"task_id": "MBCPP/5", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n * > countWays(2)\n * 3\n * > countWays(8)\n * 153\n * > countWays(12)\n * 2131\n */\nint countWays(int n) {\n", "entry_point": "countWays", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n * > countWays(2)\n * 3\n * > countWays(8)\n * 153\n * > countWays(12)\n * 2131\n */\nint countWays(int n) {\n    if (n == 0) return 1;\n    if (n == 1) return 1;\n    int dp[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] * 2;\n    }\n    return dp[n];\n}", "session_history": [], "fallback_mode": "none"}
{"task_id": "MBCPP/6", "prompt": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two numbers differ at one bit position only or not.\n * > differAtOneBitPos(13, 9)\n * true\n * > differAtOneBitPos(15, 8)\n * false\n * > differAtOneBitPos(2, 4)\n * false\n */\nbool differAtOneBitPos(int a, int b) {\n", "entry_point": "differAtOneBitPos", "completion": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two numbers differ at one bit position only or not.\n * > differAtOneBitPos(13, 9)\n * true\n * > differAtOneBitPos(15, 8)\n * false\n * > differAtOneBitPos(2, 4)\n * false\n */\nbool differAtOneBitPos(int a, int b) {\n    return (a ^ b) && !((a ^ b) & ((a ^ b) - 1));\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Calculate the XOR of the two numbers\",\n      \"description\": \"Use the XOR operator to find the bits that differ between the two numbers.\"\n    },\n    {\n      \"name\": \"Count the number of set bits in the XOR result\",\n      \"description\": \"Determine how many bits are set to 1 in the result of the XOR operation.\"\n    },\n    {\n      \"name\": \"Check if the count of set bits is exactly one\",\n      \"description\": \"Return true if the count of set bits is 1, otherwise return false.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function differAtOneBitPos that takes two integers as parameters.\",\n    \"Calculate the XOR of the two integers.\",\n    \"Count the number of set bits in the XOR result using a loop or a built-in function.\",\n    \"Check if the count of set bits is equal to 1.\",\n    \"Return true if the count is 1, otherwise return false.\"\n  ]\n}\n```"}, "fallback_mode": "none(pc_match)"}
