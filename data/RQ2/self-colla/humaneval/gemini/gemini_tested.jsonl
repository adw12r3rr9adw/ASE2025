{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "entry_point": "has_close_elements", "completion": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\nfor (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (fabs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "session_history": []}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "entry_point": "separate_paren_groups", "completion": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\nvector<string> all_paren_groups;\nstring current_group = \"\";\nint balance = 0;\n\n\nfor (char c : paren_string) {\n    if (c == ' ') {\n        continue;\n    }\n\n    current_group += c;\n    if (c == '(') {\n        balance++;\n    } else if (c == ')') {\n        balance--;\n    }\n\n    if (balance == 0 && !current_group.empty()) {\n        all_paren_groups.push_back(current_group);\n        current_group = \"\";\n    }\n}\nreturn all_paren_groups;\n\n\n}", "session_history": []}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "entry_point": "truncate_number", "completion": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\nreturn number - floor(number);\n}", "session_history": []}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "entry_point": "below_zero", "completion": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\nint balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}", "session_history": []}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "entry_point": "mean_absolute_deviation", "completion": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\nfloat sum = 0.0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbersmad_sum = 0.0;\nfor (float num : numbers) {\n    mad_sum += fabs(num - mean);\n}\nreturn mad_sum / numbers.size();\n\n\n}", "session_history": []}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "entry_point": "intersperse", "completion": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \nvector<int> result;\nif (numbers.empty()) {\nreturn result;\n}\nfor (size_t i = 0; i < numbers.size(); ++i) {\nresult.push_back(numbers[i]);\nif (i < numbers.size() - 1) {\nresult.push_back(delimeter);\n}\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle the edge case where the input vector 'numbers' is empty. In this scenario, the output should also be an empty vector, as there are no elements to intersperse.\",\n      \"Iterate through the input vector 'numbers', processing elements two at a time or individually.\",\n      \"For each element in the input vector, append it to the result vector.\",\n      \"After appending an element (except the last one), append the 'delimiter' to the result vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty result vector.\",\n      \"Check if the input vector 'numbers' is empty. If it is, return the empty result vector immediately.\",\n      \"Loop through the 'numbers' vector from the first element to the second-to-last element:\",\n      \"    Append the current element from 'numbers' to the result vector.\",\n      \"    Append the 'delimiter' to the result vector.\",\n      \"Append the last element of the 'numbers' vector to the result vector (it doesn't need a delimiter after it).\",\n      \"Return the populated result vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "entry_point": "parse_nested_parens", "completion": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\nvector<int> result;\nstring current_group;\nfor (char c : paren_string) {\nif (c == ' ') {\nif (!current_group.empty()) {\nint max_depth = 0;\nint current_depth = 0;\nfor (char pc : current_group) {\nif (pc == '(') {\ncurrent_depth++;\nif (current_depth > max_depth) {\nmax_depth = current_depth;\n}\n} else if (pc == ')') {\ncurrent_depth--;\n}\n}\nresult.push_back(max_depth);\ncurrent_group.clear();\n}\n} else {\ncurrent_group += c;\n}\n}\n// Process the last group if it exists\nif (!current_group.empty()) {\nint max_depth = 0;\nint current_depth = 0;\nfor (char pc : current_group) {\nif (pc == '(') {\ncurrent_depth++;\nif (current_depth > max_depth) {\nmax_depth = current_depth;\n}\n} else if (pc == ')') {\ncurrent_depth--;\n}\n}\nresult.push_back(max_depth);\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "entry_point": "filter_by_substring", "completion": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\nvector<string> result;\nfor (const string& s : strings) {\nif (s.find(substring) != string::npos) {\nresult.push_back(s);\n}\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "entry_point": "sum_product", "completion": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\nint sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}", "session_history": []}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "entry_point": "rolling_max", "completion": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\nvector<int> result;\nint current_max = -2147483648;\nfor (int number : numbers) {\nif (number > current_max) {\ncurrent_max = number;\n}\nresult.push_back(current_max);\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Iterate through the input vector of integers.\",\n      \"Maintain a variable to store the maximum element encountered so far.\",\n      \"For each element, compare it with the current maximum.\",\n      \"Update the maximum if the current element is greater.\",\n      \"Add the current maximum to the result vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty result vector.\",\n      \"Initialize a variable `current_max` to the smallest possible integer value (or the first element of the input vector if the vector is not empty).\",\n      \"Loop through each `number` in the input `numbers` vector:\",\n      \"  If `number` is greater than `current_max`, update `current_max` to `number`.\",\n      \"  Append `current_max` to the result vector.\",\n      \"Return the result vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "entry_point": "make_palindrome", "completion": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\nif (str.empty()) {\n        return \"\";\n    }\n    int n = str.length();\n    int longest_palindrome_postfix_len = 0;\n    for (int i = 0; i < n; ++i) {\n        string suffix = str.substr(i);\n        if (is_palindrome(suffix)) {\n            longest_palindrome_postfix_len = suffix.length();\n            break;\n        }\n    }\n    string prefix_to_reverse = str.substr(0, n - longest_palindrome_postfix_len);\n    string reversed_prefix(prefix_to_reverse.rbegin(), prefix_to_reverse.rend());\n    return str + reversed_prefix;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"name\": \"is_palindrome_function\",\n        \"description\": \"Implement the `is_palindrome` function as specified, which checks if a given string is a palindrome. This involves reversing the string and comparing it to the original.\"\n      },\n      {\n        \"name\": \"longest_palindromic_postfix_finder\",\n        \"description\": \"Develop a helper function or logic to find the longest palindromic postfix of a given string. This function will be crucial for the `make_palindrome` implementation.\"\n      },\n      {\n        \"name\": \"prefix_extraction_and_reversal\",\n        \"description\": \"Implement logic to extract the prefix of a string that comes before its longest palindromic postfix, and then reverse this extracted prefix.\"\n      },\n      {\n        \"name\": \"make_palindrome_function\",\n        \"description\": \"Implement the `make_palindrome` function by integrating the logic for finding the longest palindromic postfix, extracting and reversing the leading prefix, and then concatenating these parts to form the shortest palindrome.\"\n      },\n      {\n        \"name\": \"edge_cases_handling\",\n        \"description\": \"Address edge cases for `make_palindrome`, specifically an empty input string, as demonstrated in the example `make_palindrome(\\\"\\\")`.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Implement `is_palindrome(string str)` function. This function will be used as a utility for the `make_palindrome` function.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"For `make_palindrome(string str)`: Handle the base case where the input string is empty; return an empty string.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"Iterate from the beginning of the string to find the longest postfix that is a palindrome. This can be done by checking substrings starting from `str[i]` to the end using the `is_palindrome` function.\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Once the longest palindromic postfix is found, identify the prefix of the original string that precedes this postfix.\"\n      },\n      {\n        \"step\": 5,\n        \"description\": \"Reverse the identified prefix.\"\n      },\n      {\n        \"step\": 6,\n        \"description\": \"Concatenate the original string with the reversed prefix to form the shortest palindrome.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "entry_point": "string_xor", "completion": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\nstring s = \"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i] == b[i]){\n            s += \"0\";\n        }else{\n            s += \"1\";\n        }\n    }\n    return s;\n}", "session_history": []}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "entry_point": "longest", "completion": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\nif (strings.empty())\n        return \"\";\n    string longestString = strings[0];\n    for (size_t i = 1; i < strings.size(); ++i) {\n        if (strings[i].length() > longestString.length()) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle the edge case where the input vector of strings is empty.\",\n      \"Iterate through the vector of strings to find the longest string.\",\n      \"Implement a comparison logic to handle ties (multiple strings of the same length, returning the first one encountered).\",\n      \"Return the identified longest string.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable to store the longest string found so far, potentially starting with an empty string or the first element if the vector is not empty.\",\n      \"Check if the input vector is empty. If so, return an appropriate 'None' equivalent (e.g., an empty string or a special indicator if `std::optional<string>` were used, but given `string` return type, an empty string might be implied for 'None' in C++ context unless specifically handled otherwise).\",\n      \"Loop through each string in the input vector.\",\n      \"Inside the loop, compare the length of the current string with the length of the longest string found so far.\",\n      \"If the current string is longer, or if it's the same length but encountered earlier (due to iteration order), update the longest string variable.\",\n      \"After iterating through all strings, return the longest string variable.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "entry_point": "greatest_common_divisor", "completion": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\nif (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle edge cases where either 'a' or 'b' (or both) are zero, as the GCD is undefined or equal to the non-zero number.\",\n      \"Implement the Euclidean algorithm to find the greatest common divisor for positive integers.\",\n      \"Consider the absolute values of 'a' and 'b' to handle negative input integers correctly, as GCD is typically defined for positive integers.\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function `greatest_common_divisor` that takes two integers `a` and `b` as input.\",\n      \"Inside the function, take the absolute values of `a` and `b` to simplify the GCD calculation.\",\n      \"Implement a loop (e.g., a `while` loop) that continues as long as `b` is not zero.\",\n      \"Inside the loop, update `a` and `b` using the modulo operator (`a % b`). The new `a` becomes the old `b`, and the new `b` becomes the remainder of `a` divided by `b`.\",\n      \"Once `b` becomes zero, `a` will hold the greatest common divisor.\",\n      \"Return the value of `a`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "entry_point": "all_prefixes", "completion": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\nvector<string> prefixes;\nfor (int i = 1; i <= str.length(); ++i) {\nprefixes.push_back(str.substr(0, i));\n}\nreturn prefixes;\n}", "session_history": []}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "entry_point": "string_sequence", "completion": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\nstring result = \"\";\n    for (int i = 0; i <= n; ++i) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "entry_point": "count_distinct_characters", "completion": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \nvector<bool> seen(26, false); // For 'a' through 'z'\nint count = 0;\n\n\nfor (char c : str) {\n    if (isalpha(c)) { // Check if the character is an alphabet\n        char lower_c = tolower(c); // Convert to lowercase\n        if (!seen[lower_c - 'a']) {\n            seen[lower_c - 'a'] = true;\n            count++;\n        }\n    }\n}\nreturn count;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Convert the input string to a consistent case (e.g., all lowercase or all uppercase) to handle case-insensitivity.\",\n      \"Identify a method to store and track unique characters encountered.\",\n      \"Iterate through the processed string, adding each character to the unique character tracker if it's not already present.\",\n      \"Count the total number of unique characters identified.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty data structure (e.g., a hash set or a boolean array for ASCII/extended ASCII) to store distinct characters.\",\n      \"Convert the input string `str` to its lowercase equivalent.\",\n      \"Loop through each character in the converted string:\",\n      \"  If the character is not already in the distinct character data structure, add it.\",\n      \"Return the size of the distinct character data structure.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "entry_point": "parse_music", "completion": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \nvector<int> beats;\nfor (int i = 0; i < music_string.length(); ++i) {\nif (music_string[i] == 'o') {\nif (i + 1 < music_string.length() && music_string[i+1] == '|') {\nbeats.push_back(2); // Half note\ni++;\n} else {\nbeats.push_back(4); // Whole note\n}\n} else if (music_string[i] == '.') {\nif (i + 1 < music_string.length() && music_string[i+1] == '|') {\nbeats.push_back(1); // Quarter note\ni++;\n}\n}\n}\nreturn beats;\n}", "session_history": []}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "entry_point": "how_many_times", "completion": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\nif (substring.empty()) {\n        return 0;\n    }\n    int count = 0;\n    for (size_t i = 0; i + substring.length() <= str.length(); ++i) {\n        if (str.substr(i, substring.length()) == substring) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "entry_point": "sort_numbers", "completion": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\nmap<string, int> word_to_int;\n    word_to_int[\"zero\"] = 0;\n    word_to_int[\"one\"] = 1;\n    word_to_int[\"two\"] = 2;\n    word_to_int[\"three\"] = 3;\n    word_to_int[\"four\"] = 4;\n    word_to_int[\"five\"] = 5;\n    word_to_int[\"six\"] = 6;\n    word_to_int[\"seven\"] = 7;\n    word_to_int[\"eight\"] = 8;\n    word_to_\n\n\nmap<int, string> int_to_word;\nint_to_word[0] = \"zero\";\nint_to_word[1] = \"one\";\nint_to_word[2] = \"two\";\nint_to_word[3] = \"three\";\nint_to_word[4] = \"four\";\nint_to_word[5] = \"five\";\nint_to_word[6] = \"six\";\nint_to_word[7] = \"seven\";\nint_to_word[8] = \"eight\";\nint_to_word[9] = \"nine\";\n\nvector<int> nums;\nstring current_word;\nfor (char c : numbers) {\n    if (c == ' ') {\n        nums.push_back(word_to_int[current_word]);\n        current_word = \"\";\n    } else {\n        current_word += c;\n    }\n}\nnums.push_back(word_to_int[current_word]); // Add the last word\n\nsort(nums.begin(), nums.end());\n\nstring result = \"\";\nfor (int i = 0; i < nums.size(); ++i) {\n    result += int_to_word[nums[i]];\n    if (i < nums.size() - 1) {\n        result += \" \";\n    }\n}\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "entry_point": "find_closest_elements", "completion": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\nfloat min_diff = -1.0;;\nvector<float> result;\n\n\nfor (size_t i = 0; i < numbers.size(); ++i) {\n    for (size_t j = i + 1; j < numbers.size(); ++j) {\n        float diff = fabs(numbers[i] - numbers[j]);\n        if (min_diff == -1.0 || diff < min_diff) {\n            min_diff = diff;\n            result.clear();\n            if (numbers[i] < numbers[j]) {\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            } else {\n                result.push_back(numbers[j]);\n                result.push_back(numbers[i]);\n            }\n        }\n    }\n}\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle edge case: input vector has less than two elements (though requirement states 'at least two', robust handling is good).\",\n      \"Efficiently compare all possible pairs of numbers to find the minimum difference.\",\n      \"Store the pair of numbers that yield the minimum difference.\",\n      \"Return the selected pair in sorted order (smaller, larger).\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize variables to store the minimum difference found so far (e.g., to a very large number) and the closest pair (e.g., to the first two elements).\",\n      \"Iterate through all unique pairs of numbers in the input vector.\",\n      \"For each pair, calculate the absolute difference between them.\",\n      \"If the calculated difference is less than the current minimum difference, update the minimum difference and store the current pair as the closest pair.\",\n      \"After iterating through all pairs, sort the closest pair to ensure the smaller number comes first.\",\n      \"Return the sorted closest pair.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "entry_point": "rescale_to_unit", "completion": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \nfloat min_val = numbers[0];\n    float max_val = numbers[0];\nfor (float num : numbers) {\n    if (num < min_val) {\n        min_val = num;\n    }\n    if (num > max_val) {\n        max_val = num;\n    }\n}\n\nvector<float> rescaled_numbers;\nif (max_val == min_val) {\n    // If all numbers are the same, they all become 0.0\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers.push_back(0.0f);\n    }\n} else {\n    for (float num : numbers) {\n        rescaled_numbers.push_back((num - min_val) / (max_val - min_val));\n    }\n}\n\nreturn rescaled_numbers;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"goal\": \"Implement a C++ function `rescale_to_unit` that takes a vector of floating-point numbers (with at least two elements) and returns a new vector where the original smallest number is scaled to 0 and the original largest number is scaled to 1, with all other numbers scaled linearly in between.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Find the minimum value in the input vector of numbers.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Find the maximum value in the input vector of numbers.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Handle the edge case where the minimum and maximum values are the same. In this scenario, all elements in the output vector should be 0 (or the original value, depending on the desired behavior, needs clarification).\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Iterate through each number in the input vector and apply the linear transformation formula to rescale it to the range [0, 1]. The formula is: `scaled_value = (original_value - min_value) / (max_value - min_value)`.\"\n      },\n      {\n        \"id\": 5,\n        \"description\": \"Store the rescaled values in a new vector.\"\n      },\n      {\n        \"id\": 6,\n        \"description\": \"Return the new vector containing the rescaled numbers.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Define the function `rescale_to_unit` that accepts a `std::vector<float>` as input.\",\n      \"Check if the input vector has at least two elements. If not, handle this case (e.g., return an empty vector or throw an error - this needs clarification).\",\n      \"Find the minimum element in the input vector.\",\n      \"Find the maximum element in the input vector.\",\n      \"Check if the minimum and maximum elements are equal. If they are, create and return a new vector of the same size as the input, with all elements set to 0 (or the original value - clarify this).\",\n      \"Create a new empty `std::vector<float>` to store the rescaled values.\",\n      \"Iterate through each element in the input vector.\",\n      \"For each element, apply the linear transformation formula: `scaled_value = (element - min_value) / (max_value - min_value)`.\",\n      \"Add the `scaled_value` to the new vector.\",\n      \"Return the new vector containing the rescaled numbers.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "entry_point": "filter_integers", "completion": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\nvector<int> integers;\nfor (const auto& val : values) {\nif (val.type() == typeid(int)) {\nintegers.push_back(boost::any_cast<int>(val));\n}\n}\nreturn integers;\n}", "session_history": []}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "entry_point": "strlen", "completion": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\nreturn str.length();\n}", "session_history": []}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "entry_point": "largest_divisor", "completion": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\nfor (int i = n / 2; i >= 1; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // Should not be reached for n > 1 as 1 is always a divisor.\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle edge cases for n (e.g., n <= 1).\",\n      \"Iterate downwards from n-1 to find the first divisor.\",\n      \"Check for divisibility using the modulo operator.\"\n    ],\n    \"high_level_plan\": [\n      \"Define the function `largest_divisor` that takes an integer `n` as input.\",\n      \"Implement a loop that starts from `i = n - 1` and decrements `i` until `i` reaches 1.\",\n      \"Inside the loop, check if `n` is divisible by `i` (i.e., `n % i == 0`).\",\n      \"If `n` is divisible by `i`, then `i` is the largest divisor smaller than `n`, so return `i`.\",\n      \"Consider returning an appropriate value or handling cases where no such divisor exists (though for n > 1, at least 1 will always be a divisor).\"\n    ]\n  }\n}"}}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "entry_point": "factorize", "completion": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\nvector<int> factors;\nfor (int i = 2; i * i <= n; ++i) {\nwhile (n % i == 0) {\nfactors.push_back(i);\nn /= i;\n}\n}\nif (n > 1) {\nfactors.push_back(n);\n}\nreturn factors;\n}", "session_history": []}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "entry_point": "remove_duplicates", "completion": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\nvector<int> result;\nvector<int> counts(101, 0);\nfor (int number : numbers) {\ncounts[number]++;\n}\nfor (int number : numbers) {\nif (counts[number] == 1) {\nresult.push_back(number);\n}\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify unique elements and duplicate elements within the input vector.\",\n      \"Construct a new vector containing only the unique elements from the original vector.\",\n      \"Maintain the relative order of the remaining unique elements.\"\n    ],\n    \"high_level_plan\": [\n      \"Iterate through the input vector to count the occurrences of each element.\",\n      \"Use a suitable data structure (e.g., a hash map or frequency array) to store these counts.\",\n      \"Create a new vector.\",\n      \"Iterate through the original input vector again.\",\n      \"For each element, check its count in the frequency data structure.\",\n      \"If the count is 1 (meaning it's unique), add it to the new vector.\",\n      \"Return the new vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n", "entry_point": "flip_case", "completion": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\nfor (int i = 0; i < str.length(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;\n}", "session_history": []}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "entry_point": "concatenate", "completion": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\nstring result = \"\";\n    for (string s : strings) {\n        result += s;\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "entry_point": "filter_by_prefix", "completion": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\nvector<string> result;\nfor (const string& s : strings) {\nif (s.rfind(prefix, 0) == 0) {\nresult.push_back(s);\n}\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "entry_point": "get_positive", "completion": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\nvector<float> positive_numbers;\nfor (float num : l) {\nif (num > 0) {\npositive_numbers.push_back(num);\n}\n}\nreturn positive_numbers;\n}", "session_history": []}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "entry_point": "is_prime", "completion": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\nif (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    for (long long i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "session_history": []}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "entry_point": "find_zero", "completion": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\ndouble a = xs[xs.size() - 1];\n    double b = xs[xs.size() - 2];\n    if (xs.size() == 2) { // Linear case: ax + b = 0\n        return -xs[0] / xs[1];\n    } else { // Newton-Raphson for higher degree polynomials\n        double x0 = 0.0; // Initial guess\n        double epsilon = 1e-6; // Tolerance\n        int max_iterations = 1000;\n        for (int iter = 0; iter < max_iterations; ++iter) {\n            double fx = poly(xs, x0);\n            double f_prime_x = 0.0;\n            for (int i = 1; i < xs.size(); ++i) {\n                f_prime_x += i * xs[i] * pow(x0, i - 1);\n            }\n            if (abs(f_prime_x) < epsilon) { // Avoid division by zero\n                break;\n            }\n            double x_new = x0 - fx / f_prime_x;\n            if (abs(x_new - x0) < epsilon) {\n                return x_new;\n            }\n            x0 = x_new;\n        }\n        return x0; // Return the best approximation found\n    }\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"name\": \"Polynomial Evaluation (poly function)\",\n        \"description\": \"Implement a function that evaluates a polynomial given its coefficients and a point x. This function is already provided in the requirement but needs to be confirmed for correctness and potentially optimized.\"\n      },\n      {\n        \"name\": \"Zero Finding (find_zero function) - Core Logic\",\n        \"description\": \"Develop the core algorithm to find a zero (root) of a polynomial. This will likely involve an iterative numerical method.\"\n      },\n      {\n        \"name\": \"Input Validation and Preconditions (find_zero)\",\n        \"description\": \"Implement checks for the preconditions specified for `find_zero`: even number of coefficients and largest non-zero coefficient.\"\n      },\n      {\n        \"name\": \"Handling Multiple Zeros (find_zero)\",\n        \"description\": \"Ensure the `find_zero` function returns 'only one zero point, even if there are many' as per the requirement. The specific zero returned should be consistent (e.g., the first one found by the algorithm).\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Review and confirm the correctness of the provided `poly` function. No major development is expected here unless issues are found.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Select an appropriate numerical method for finding polynomial roots (e.g., Bisection Method, Newton-Raphson Method, Brent's Method). Consider the constraints: 'even number of coefficients and largest non zero coefficient as it guarantees a solution'.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"Implement the chosen numerical method within the `find_zero` function.\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Add input validation to `find_zero` to check for an even number of coefficients and identify the largest non-zero coefficient.\"\n      },\n      {\n        \"step\": 5,\n        \"description\": \"Implement the necessary logic to ensure `find_zero` returns only one zero point, even if multiple exist. This might involve setting a search range or stopping criteria for the numerical method.\"\n      },\n      {\n        \"step\": 6,\n        \"description\": \"Develop comprehensive unit tests for both `poly` and `find_zero` functions, including edge cases and the provided examples in the requirement.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "entry_point": "sort_third", "completion": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\nvector<int> result = l;\nvector<int> to_sort;\nvector<int> indices_to_sort;\n\n\nfor (int i = 0; i < l.size(); ++i) {\n    if (i % 3 == 0) {\n        to_sort.push_back(l[i]);\n        indices_to_sort.push_back(i);\n    }\n}\n\nsort(to_sort.begin(), to_sort.end());\n\nfor (int i = 0; i < to_sort.size(); ++i) {\n    result[indices_to_sort[i]] = to_sort[i];\n}\n\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify elements in the input vector whose indices are divisible by three.\",\n      \"Extract these identified elements into a separate temporary storage.\",\n      \"Sort the extracted elements.\",\n      \"Replace the original elements at the divisible-by-three indices with the sorted elements from the temporary storage, maintaining their original positions in the output vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty vector for the result, copying the input vector.\",\n      \"Create a temporary vector to store elements at indices divisible by three.\",\n      \"Iterate through the input vector using an index. If the index is divisible by three, add the element at that index to the temporary vector.\",\n      \"Sort the temporary vector.\",\n      \"Iterate through the input vector again. If the index is divisible by three, assign the next sorted element from the temporary vector to the corresponding position in the result vector.\",\n      \"Return the modified result vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "entry_point": "unique", "completion": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\nsort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}", "session_history": []}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "entry_point": "max_element", "completion": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\nif (l.empty()) {\n        return 0; // Or throw an exception, depending on desired behavior for empty vector\n    }\n    float max_val = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n    return max_val;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle an empty input vector: What should the function return if the vector is empty? (e.g., throw an exception, return a specific value like negative infinity, or assume non-empty inputs based on current examples). For this problem, let's assume we return -FLT_MAX for an empty vector to handle the float type.\",\n      \"Initialize a variable to store the maximum value found so far. This initial value should be the first element of the vector, or the smallest possible float value if the vector might be empty and we are handling that case.\",\n      \"Iterate through the vector: Traverse each element of the input vector.\",\n      \"Compare and update: For each element, compare it with the current maximum value. If the element is greater, update the maximum value.\",\n      \"Return the maximum value: After iterating through all elements, the stored maximum value will be the largest element in the vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Check if the input vector `l` is empty. If it is, return a suitable value indicating an empty input (e.g., `-FLT_MAX`).\",\n      \"Initialize a variable, `max_val`, with the first element of the vector `l`.\",\n      \"Loop through the remaining elements of the vector `l` starting from the second element.\",\n      \"Inside the loop, for each element, compare it with `max_val`.\",\n      \"If the current element is greater than `max_val`, update `max_val` to the current element's value.\",\n      \"After the loop finishes, return the final `max_val`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "entry_point": "fizz_buzz", "completion": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\nint count = 0;\n    for (int i = 1; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "entry_point": "sort_even", "completion": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\nvector<float> even_elements;\nvector<float> result = l;\nfor (size_t i = 0; i < l.size(); ++i) {\nif (i % 2 == 0) {\neven_elements.push_back(l[i]);\n}\n}\nsort(even_elements.begin(), even_elements.end());\nsize_t even_index = 0;\nfor (size_t i = 0; i < result.size(); ++i) {\nif (i % 2 == 0) {\nresult[i] = even_elements[even_index++];\n}\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Identify even-indexed elements from the input vector.\",\n      \"Sort the identified even-indexed elements.\",\n      \"Replace the original even-indexed elements in the input vector with the sorted even-indexed elements.\",\n      \"Return the modified vector.\"\n    ],\n    \"high_level_steps\": [\n      \"Create a temporary vector to store even-indexed elements.\",\n      \"Iterate through the input vector. If the index is even, add the element to the temporary vector.\",\n      \"Sort the temporary vector.\",\n      \"Iterate through the input vector again. If the index is even, replace the element with the next element from the sorted temporary vector.\",\n      \"Return the modified input vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n", "entry_point": "decode_cyclic", "completion": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\nint l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n}", "session_history": []}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "entry_point": "prime_fib", "completion": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\nbool is_prime(int num) {\n    if (num <= 1)\n        return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint fib[100]; // Using a small array for Fibonacci numbers, considering the likely small values of n\n\n// Function to generate Fibonacci numbers up to a certain point\nvoid generate_fib(int limit) {\n    fib[0] = 0;\n    fib[1] = 1;\n    for (int i = 2; i < limit; ++i) {\n        fib[i] = fib[i-1] + fib[i-2];\n    }\n}\n\nint prime_fib(int n){\n    generate_fib(50); // Generate enough Fibonacci numbers, 50 should be sufficient for small n\n    int count = 0;\n    for (int i = 2; i < 50; ++i) { // Start from index 2 to get F(2)=1, F(3)=2, etc. (considering F(0)=0, F(1)=1)\n        if (is_prime(fib[i])) {\n            count++;\n            if (count == n) {\n                return fib[i];\n            }\n        }\n    }\n    return -1; // Should not reach here for valid n as per problem description\n}", "session_history": []}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "entry_point": "triples_sum_to_zero", "completion": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\nint n = l.size();\n    if (n < 3) {\n        return false;\n    }\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Subproblem 1: Handle edge cases for input vector size (less than 3 elements).\",\n      \"Subproblem 2: Efficiently find combinations of three distinct elements.\",\n      \"Subproblem 3: Calculate the sum of each combination.\",\n      \"Subproblem 4: Check if the sum is zero.\"\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Check if the input vector 'l' has fewer than 3 elements. If so, return false immediately.\",\n      \"Step 2: Iterate through all possible unique combinations of three distinct elements from the vector. A nested loop structure (or similar) can be used to achieve this.\",\n      \"Step 3: For each combination, calculate the sum of the three elements.\",\n      \"Step 4: If any sum equals zero, return true.\",\n      \"Step 5: If no such combination is found after checking all possibilities, return false.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n", "entry_point": "car_race_collision", "completion": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\nreturn n * n;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"title\": \"Car Race Collision Counter\",\n    \"description\": \"Develop a function to calculate the number of collisions between two sets of 'n' cars moving in opposite directions on an infinitely long straight road.\",\n    \"subproblems\": [\n      {\n        \"name\": \"Understanding Collision Condition\",\n        \"description\": \"Clearly define what constitutes a collision. In this scenario, it's when a left-to-right car meets a right-to-left car. The key is that cars pass through each other.\",\n        \"input\": \"Conceptual understanding of car movement and collision definition.\",\n        \"output\": \"A clear rule for collision detection.\"\n      },\n      {\n        \"name\": \"Simplifying the Problem\",\n        \"description\": \"Given that cars are infinitely sturdy and continue their trajectory, the individual positions of cars don't matter after a collision. The problem can be simplified to a combinatorial approach.\",\n        \"input\": \"Problem statement regarding car behavior after collision.\",\n        \"output\": \"Recognition that car identities or specific positions are irrelevant to the final count.\"\n      },\n      {\n        \"name\": \"Deriving the Formula\",\n        \"description\": \"Determine a mathematical relationship between 'n' (number of cars in each set) and the total number of collisions. Consider that each car from one set will collide with every car from the other set.\",\n        \"input\": \"The variable 'n' representing the number of cars in each set.\",\n        \"output\": \"A mathematical formula for the number of collisions based on 'n'.\"\n      },\n      {\n        \"name\": \"Implementing the Function\",\n        \"description\": \"Translate the derived formula into the C++ function `car_race_collision(int n)`.\",\n        \"input\": \"The derived formula and the function signature `int car_race_collision(int n)`.\",\n        \"output\": \"Working C++ function `car_race_collision`.\"\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the core problem: How do two sets of 'n' objects moving towards each other on a line interact?\",\n      \"Identify simplifying assumptions: Cars pass through each other, speed is constant, infinite road.\",\n      \"Determine the interaction logic: Each car from the left-to-right set will encounter every car from the right-to-left set.\",\n      \"Formulate the collision count: If there are 'n' cars in the left-to-right set and 'n' cars in the right-to-left set, how many unique pairs can be formed?\",\n      \"Implement the derived formula in the `car_race_collision` function.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "entry_point": "incr_list", "completion": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\nvector<int> result;\nfor (int x : l) {\nresult.push_back(x + 1);\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "entry_point": "pairs_sum_to_zero", "completion": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\nfor (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "session_history": []}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "entry_point": "change_base", "completion": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\nstring result = \"\";\n    while(x > 0){\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle edge case for input x = 0 (result should be \\\"0\\\" for any valid base).\",\n      \"Repeatedly divide the input number x by the target base.\",\n      \"Collect the remainders of each division.\",\n      \"Convert each remainder to its string representation.\",\n      \"Concatenate the string representations of the remainders in reverse order.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty string to store the result.\",\n      \"If x is 0, return \\\"0\\\".\",\n      \"While x is greater than 0:\",\n      \"  Calculate the remainder of x divided by base.\",\n      \"  Convert the remainder to its character/string equivalent (e.g., '0' to '9').\",\n      \"  Prepend the character/string equivalent to the result string.\",\n      \"  Update x by integer division of x by base.\",\n      \"Return the result string.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "entry_point": "triangle_area", "completion": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\nreturn (a*h)/2;\n}", "session_history": []}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "entry_point": "fib4", "completion": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\nif (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3)\nint fib4_n_minus_4 = 0; // fib4(0)\nint fib4_n_minus_3 = 2; // fib4(2) - shifted for calculation, actually fib4(1) is 0, fib4(2) is 2\nint fib4_n_minus_2 = 0; // fib4(3)\nint fib4_n_minus_1 = 4; // fib4(4) which is fib4(3) + fib4(2) + fib4(1) + fib4(0) = 0 + 2 + 0 + 0 = 2, wait, the example fib4(5) is 4. Let's re-evaluate.\n\n// Let's explicitly define the first few values and then iterate.\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(4) = fib4(3) + fib4(2) + fib4(1) + fib4(0) = 0 + 2 + 0 + 0 = 2\n// fib4(5) = fib4(4) + fib4(3) + fib4(2) + fib4(1) = 2 + 0 + 2 + 0 = 4\n// fib4(6) = fib4(5) + fib4(4) + fib4(3) + fib4(2) = 4 + 2 + 0 + 2 = 8\n// fib4(7) = fib4(6) + fib4(5) + fib4(4) + fib4(3) = 8 + 4 + 2 + 0 = 14\n\n// Initialize for n=4 calculation\nint a = 0; // fib4(0)\nint b = 0; // fib4(1)\nint c = 2; // fib4(2)\nint d = 0; // fib4(3)\nint next_fib4;\n\nfor (int i = 4; i <= n; ++i) {\n    next_fib4 = d + c + b + a;\n    a = b;\n    b = c;\n    c = d;\n    d = next_fib4;\n}\nreturn d;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle base cases for fib4(0), fib4(1), fib4(2), and fib4(3) as per the definition.\",\n      \"Implement an iterative approach to calculate fib4(n) for n > 3.\",\n      \"Ensure the iterative approach efficiently stores and updates only the necessary previous four values to avoid excessive memory usage.\",\n      \"Validate the function returns the correct values for given examples (fib4(5), fib4(6), fib4(7)).\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize an array or variables to store the first four fib4 numbers: fib4(0), fib4(1), fib4(2), fib4(3).\",\n      \"If 'n' is less than or equal to 3, return the pre-defined base case value.\",\n      \"Iterate from 4 up to 'n' (inclusive).\",\n      \"In each iteration, calculate the current fib4 number using the sum of the previous four values.\",\n      \"Update the stored values to reflect the shift (e.g., the new fib4(n) becomes the latest value, fib4(n-1) becomes the second latest, etc.).\",\n      \"Return the final calculated fib4(n) value.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "entry_point": "median", "completion": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\nsort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n}", "session_history": []}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "entry_point": "is_palindrome", "completion": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\nint left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle empty string input: An empty string is considered a palindrome.\",\n      \"Compare characters from both ends: Iterate inwards from the beginning and end of the string.\",\n      \"Check for character mismatch: If any pair of characters (one from the beginning, one from the end) does not match, the string is not a palindrome.\"\n    ],\n    \"high_level_steps\": [\n      \"Define a function `is_palindrome` that takes a string `text` as input.\",\n      \"Check if the input string `text` is empty. If it is, return `true`.\",\n      \"Initialize two pointers, one at the beginning of the string (e.g., `left = 0`) and one at the end (e.g., `right = text.length() - 1`).\",\n      \"Loop while `left` is less than `right`:\",\n      \"Compare `text[left]` and `text[right]`.\",\n      \"If they are not equal, return `false`.\",\n      \"Increment `left` and decrement `right`.\",\n      \"If the loop completes, it means all characters have been checked and matched, so return `true`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "entry_point": "modp", "completion": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\nlong long res = 1;\n    long long base = 2; // The base is always 2 for 2^n`\nbase %= p; // Update base if it is more than or equal to p\n\nwhile (n > 0) {\n    // If n is odd, multiply base with result\n    if (n % 2 == 1) { // Same as (n & 1)\n        res = (res * base) % p;\n    }\n\n    // n must be even now\n    n = n >> 1; // n = n / 2\n    base = (base * base) % p;\n}\nreturn static_cast<int>(res);\n\n\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"user_requirement\": \"Return 2^n modulo p (be aware of numerics).\",\n    \"decomposed_subproblems\": [\n      \"Implement a function that takes two integer inputs: 'n' (the exponent) and 'p' (the modulus).\",\n      \"Calculate 2 raised to the power of 'n'.\",\n      \"Compute the result of the exponentiation modulo 'p'.\",\n      \"Handle potential numeric overflow issues when calculating 2^n for large values of 'n'.\"\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Define a function `modp(int n, int p)` that accepts two integer arguments: the exponent `n` and the modulus `p`.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Implement a method to calculate 2 raised to the power of `n` efficiently, considering potential overflow. Iterative multiplication with modulo at each step is recommended to prevent large intermediate values.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"Within the loop (or recursive calls if using that approach), after each multiplication by 2, apply the modulo operation with `p` to keep the result within the bounds of `p`.\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Return the final result after the exponentiation and modulo operations are complete.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n", "entry_point": "decode_shift", "completion": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a');\n        if (w<0)\n            w=w+26;\n        w=w%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}", "session_history": []}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "entry_point": "remove_vowels", "completion": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\nstring result = \"\";\n    string vowels = \"aeiouAEIOU\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "entry_point": "below_threshold", "completion": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\nfor (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}", "session_history": []}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "entry_point": "add", "completion": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\nreturn x + y;\n}", "session_history": []}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "entry_point": "same_chars", "completion": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\nsort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    string t0 = \"\";\n    if(s0.length() > 0)\n        t0 += s0[0];\n    for(int i=1; i<s0.length(); ++i){\n        if(s0[i] != s0[i-1])\n            t0 += s0[i];\n    }\n    string t1 = \"\";\n    if(s1.length() > 0)\n        t1 += s1[0];\n    for(int i=1; i<s1.length(); ++i){\n        if(s1[i] != s1[i-1])\n            t1 += s1[i];\n    }\n    return t0 == t1;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Count character frequencies for the first string.\",\n      \"Count character frequencies for the second string.\",\n      \"Compare the two frequency counts to determine if they are identical.\"\n    ],\n    \"high_level_plan\": [\n      \"Create a frequency map (or array) for characters in string s0.\",\n      \"Iterate through s0, incrementing counts for each character.\",\n      \"Create a frequency map (or array) for characters in string s1.\",\n      \"Iterate through s1, incrementing counts for each character.\",\n      \"Compare the two frequency maps. If all character counts match for all possible characters (e.g., 'a' through 'z' or extended ASCII), return true. Otherwise, return false.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "entry_point": "fib", "completion": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\nif (n <= 1) {\n        return n;\n    }\n    int a = 0;\n    int b = 1;\n    for (int i = 2; i <= n; ++i) {\n        int nextTerm = a + b;\n        a = b;\n        b = nextTerm;\n    }\n    return b;\n}", "session_history": []}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "entry_point": "correct_bracketing", "completion": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\nint depth = 0;\n    for (char c : brackets) {\n        if (c == '<') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}", "session_history": []}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "entry_point": "monotonic", "completion": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\nif (l.size() <= 1) {\n        return true;\n    }\n    bool increasing = false;\n    bool decreasing = false;\n    int i = 0;\n    while (i + 1 < l.size() && l[i] == l[i+1]) {\n        i++;\n    }\n    if (i + 1 == l.size()) { // All elements are the same\n        return true;\n    }\n    if (l[i] < l[i+1]) {\n        increasing = true;\n    } else {\n        decreasing = true;\n    }\n    for (int j = i + 1; j < l.size(); ++j) {\n        if (increasing && l[j] < l[j-1]) {\n            return false;\n        }\n        if (decreasing && l[j] > l[j-1]) {\n            return false;\n        }\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle empty or single-element vectors: These are always considered monotonic.\",\n      \"Check for monotonically increasing sequence: Iterate through the vector, ensuring each element is greater than or equal to the previous one.\",\n      \"Check for monotonically decreasing sequence: Iterate through the vector, ensuring each element is less than or equal to the previous one.\",\n      \"Combine results: If either the increasing check or the decreasing check returns true, the vector is monotonic.\"\n    ],\n    \"high_level_plan\": [\n      \"Function `monotonic(vector<float> l)`:\",\n      \"1. If `l.size() <= 1`, return `true`.\",\n      \"2. Initialize `is_increasing = true`.\",\n      \"3. Iterate from the second element (`i = 1`) to the end of the vector:\",\n      \"   If `l[i] < l[i-1]`, set `is_increasing = false` and break the loop.\",\n      \"4. If `is_increasing` is `true`, return `true`.\",\n      \"5. Initialize `is_decreasing = true`.\",\n      \"6. Iterate from the second element (`i = 1`) to the end of the vector:\",\n      \"   If `l[i] > l[i-1]`, set `is_decreasing = false` and break the loop.\",\n      \"7. Return `is_decreasing`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "entry_point": "common", "completion": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\nvector<int> result;\n\n\n// Sort both vectors to use std::set_intersection\nsort(l1.begin(), l1.end());\nsort(l2.begin(), l2.end());\n\n// Find the intersection of the two sorted vectors\nset_intersection(l1.begin(), l1.end(),\n                 l2.begin(), l2.end(),\n                 back_inserter(result));\n\n// Remove duplicates from the result (set_intersection might include duplicates\n// if input vectors have duplicates and we want only unique common elements)\n// First, sort the result, then use unique.\n// std::unique works on sorted ranges. set_intersection already produces a sorted range,\n// so we just need to use unique to handle potential duplicates introduced by\n// set_intersection if the original vectors had duplicates that resulted in\n// multiple identical common elements.\nresult.erase(unique(result.begin(), result.end()), result.end());\n\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify common elements between two unsorted vectors.\",\n      \"Handle duplicate common elements to ensure uniqueness.\",\n      \"Sort the unique common elements in ascending order.\",\n      \"Return the result as a vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty result vector.\",\n      \"Iterate through the first vector (l1).\",\n      \"For each element in l1, check if it exists in the second vector (l2).\",\n      \"If an element from l1 exists in l2, add it to a temporary collection.\",\n      \"Remove duplicate elements from the temporary collection to get unique common elements.\",\n      \"Sort the unique common elements.\",\n      \"Return the sorted unique common elements.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "entry_point": "largest_prime_factor", "completion": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\nint max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n /= 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        max_prime = n;\n    }\n    return max_prime;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Define a function to check if a number is prime.\",\n      \"Iterate through potential factors of n, starting from 2.\",\n      \"For each factor, check if it's prime.\",\n      \"Keep track of the largest prime factor found.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize 'largest_factor' to 1.\",\n      \"Handle the case for factor 2: repeatedly divide n by 2 until it's odd, updating 'largest_factor' to 2 if 2 is a factor.\",\n      \"Iterate from 'i = 3' up to 'sqrt(n)' (incrementing by 2 to check only odd numbers):\",\n      \"  While 'n' is divisible by 'i':\",\n      \"    Update 'largest_factor' to 'i'.\",\n      \"    Divide 'n' by 'i'.\",\n      \"If 'n' is greater than 2 after the loop (meaning the remaining 'n' is a prime factor), update 'largest_factor' to 'n'.\",\n      \"Return 'largest_factor'.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "entry_point": "sum_to_n", "completion": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\nint sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "entry_point": "correct_bracketing", "completion": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\nint depth = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}", "session_history": []}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "entry_point": "derivative", "completion": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\nvector<float> result;\nif (xs.empty()) {\nreturn result;\n}\nfor (int i = 1; i < xs.size(); ++i) {\nresult.push_back(xs[i] * i);\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle the base case: If the input polynomial has only one coefficient (i.e., a constant), its derivative is an empty polynomial (represented by an empty vector).\",\n      \"Iterate through the coefficients of the input polynomial, starting from the second coefficient (index 1).\",\n      \"For each coefficient $xs[i]$ at index $i$, calculate its derivative contribution: $xs[i] * i$.\",\n      \"Store the calculated derivative contributions in a new vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty vector to store the coefficients of the derivative polynomial.\",\n      \"Check if the input vector `xs` is empty or has only one element. If so, return the empty derivative vector.\",\n      \"Loop from $i=1$ up to `xs.size() - 1` (inclusive):\",\n      \"  Calculate the derivative term: `xs[i] * i`.\",\n      \"  Add this term to the derivative vector.\",\n      \"Return the derivative vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "entry_point": "fibfib", "completion": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\nif (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle base cases for fibfib(0), fibfib(1), and fibfib(2) as per the definition.\",\n      \"Implement the recursive relation fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n > 2.\",\n      \"Ensure the solution is efficient, considering potential memoization or dynamic programming to avoid redundant calculations.\"\n    ],\n    \"high_level_plan\": [\n      \"Define the `fibfib` function that takes an integer `n` as input.\",\n      \"Inside the function, implement `if-else if` statements to handle the base cases for `n = 0`, `n = 1`, and `n = 2`.\",\n      \"For `n > 2`, implement a solution that utilizes dynamic programming (e.g., an array or hash map) to store previously computed fibfib values to avoid re-calculation.\",\n      \"Iteratively compute fibfib values from 3 up to `n`, storing each result.\",\n      \"Return the computed `fibfib(n)`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "entry_point": "vowels_count", "completion": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\nint count = 0;\n    string lower_s = s;\n    transform(lower_s.begin(), lower_s.end(), lower_s.begin(), ::tolower);\n    for (int i = 0; i < lower_s.length(); i++) {\n        if (lower_s[i] == 'a' || lower_s[i] == 'e' || lower_s[i] == 'i' || lower_s[i] == 'o' || lower_s[i] == 'u') {\n            count++;\n        } else if (lower_s[i] == 'y' && i == lower_s.length() - 1) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Initialize a counter for vowels.\",\n      \"Iterate through the input string to check each character.\",\n      \"For each character, determine if it is a standard vowel ('a', 'e', 'i', 'o', 'u') ignoring case.\",\n      \"Handle the special case for 'y': check if 'y' (ignoring case) is present and if it's the last character of the string.\",\n      \"Increment the counter if a vowel is found.\",\n      \"Return the final count.\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function `vowels_count` that takes a string `s` as input.\",\n      \"Inside the function, declare an integer variable, say `count`, and initialize it to 0.\",\n      \"Convert the input string to lowercase to simplify vowel checking (e.g., using `std::transform` and `::tolower`).\",\n      \"Loop through each character in the string from the beginning up to, but not including, the last character.\",\n      \"Inside the loop, use a conditional statement to check if the current character is 'a', 'e', 'i', 'o', or 'u'. If it is, increment `count`.\",\n      \"After the loop, check if the string is not empty and if its last character is 'y'. If both conditions are true, increment `count`.\",\n      \"Return the value of `count`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "entry_point": "circular_shift", "completion": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\nstring s = to_string(x);\n    int n = s.length();\n    if (shift >= n) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    string shifted_part = s.substr(n - shift);\n    string remaining_part = s.substr(0, n - shift);\n    return shifted_part + remaining_part;\n}", "session_history": []}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "entry_point": "digitSum", "completion": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\nint sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "entry_point": "fruit_distribution", "completion": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\nint apples = 0;\n    int oranges = 0;\n    size_t pos_apples = s.find(\"apples\");\n    if (pos_apples != string::npos) {\n        size_t start = 0;\n        while (start < pos_apples && !isdigit(s[start])) {\n            start++;\n        }\n        size_t end = start;\n        while (end < pos_apples && isdigit(s[end])) {\n            end++;\n        }\n        if (start < end) {\n            apples = stoi(s.substr(start, end - start));\n        }\n    }\n    size_t pos_oranges = s.find(\"oranges\");\n    if (pos_oranges != string::npos) {\n        size_t start = 0;\n        size_t and_pos = s.find(\"and\");\n        if (and_pos != string::npos && and_pos < pos_oranges) {\n            start = and_pos + 3;\n            while (start < pos_oranges && !isdigit(s[start])) {\n                start++;\n            }\n        } else {\n             while (start < pos_oranges && !isdigit(s[start])) {\n                start++;\n            }\n        }\n        size_t end = start;\n        while (end < pos_oranges && isdigit(s[end])) {\n            end++;\n        }\n        if (start < end) {\n            oranges = stoi(s.substr(start, end - start));\n        }\n    }\n    return n - apples - oranges;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Extract the number of apples from the input string.\",\n      \"Extract the number of oranges from the input string.\",\n      \"Calculate the number of mangoes by subtracting the total apples and oranges from the total number of fruits.\"\n    ],\n    \"high_level_plan\": [\n      \"Parse the input string 's' to find the numerical value associated with 'apples' and 'oranges'.\",\n      \"Convert the extracted string numbers to integers.\",\n      \"Perform the subtraction: 'n - (apples_count + oranges_count)' to get the mango count.\",\n      \"Return the calculated mango count.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "entry_point": "pluck", "completion": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\nif (arr.empty()) {\n        return {};\n    }\n    int min_even = -1;\n    int min_index = -1;\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n            if (min_even == -1 || arr[i] < min_even) {\n                min_even = arr[i];\n                min_index = i;\n            }\n        }\n    }\n    if (min_even != -1) {\n        return {min_even, min_index};\n    } else {\n        return {};\n    }\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle edge cases: empty input vector.\",\n      \"Iterate through the input vector to find even numbers.\",\n      \"Keep track of the smallest even value found so far and its index.\",\n      \"If multiple nodes have the same smallest even value, prioritize the one with the smallest index.\",\n      \"Return the result in the specified format: {value, index} or {}.\"\n    ],\n    \"high_level_plan\": [\n      \"Check if the input vector 'arr' is empty. If so, return an empty vector {}.\",\n      \"Initialize variables to store the smallest even value found ('min_even_value') and its index ('min_even_index'). Initialize 'min_even_value' to a very large number or an indicator that no even number has been found yet.\",\n      \"Loop through the input vector 'arr' from index 0 to 'arr.size() - 1'.\",\n      \"Inside the loop, for each element 'arr[i]':\",\n      \"Check if 'arr[i]' is an even number (i.e., 'arr[i] % 2 == 0').\",\n      \"If 'arr[i]' is even:\",\n      \"Compare 'arr[i]' with 'min_even_value'.\",\n      \"If 'arr[i]' is smaller than 'min_even_value', update 'min_even_value' to 'arr[i]' and 'min_even_index' to 'i'.\",\n      \"If 'arr[i]' is equal to 'min_even_value', do nothing as the current 'min_even_index' already points to the smallest index for that value.\",\n      \"After the loop, if 'min_even_value' still holds its initial large value (meaning no even numbers were found), return an empty vector {}.\",\n      \"Otherwise, return a vector containing {min_even_value, min_even_index}.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "entry_point": "search", "completion": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\nmap<int, int> freq_map;\n    for (int x : lst) {\n        freq_map\n\n\nint result = -1;\nfor (auto it = freq_map.rbegin(); it != freq_map.rend(); ++it) {\n    int value = it->first;\n    int frequency = it->second;\n    if (value > 0 && frequency >= value) {\n        return value;\n    }\n}\nreturn -1;\n\n\n}", "session_history": []}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "entry_point": "strange_sort_list", "completion": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\nvector<int> result;\nif (lst.empty()) {\nreturn result;\n}\n\n\nsort(lst.begin(), lst.end());\n\nint left = 0;\nint right = lst.size() - 1;\nbool take_min = true;\n\nwhile (left <= right) {\n    if (take_min) {\n        result.push_back(lst[left]);\n        left++;\n    } else {\n        result.push_back(lst[right]);\n        right--;\n    }\n    take_min = !take_min;\n}\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"user_requirement\": \"Given a vector of integers, return a new vector with elements arranged in a 'strange' order: starting with the minimum value, then the maximum of the remaining integers, then the minimum of the remaining, and so on. Handle empty input vectors and vectors with duplicate values correctly.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Handle the base case: If the input vector is empty, return an empty vector.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Create a copy of the input vector to avoid modifying the original vector.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Implement the 'strange sort' logic: iteratively find the minimum or maximum element from the remaining elements in the copied vector and append it to the result vector. Alternate between finding the minimum and maximum in each step.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Keep track of the remaining elements in the copied vector after each minimum/maximum is selected.\"\n      },\n      {\n        \"id\": 5,\n        \"description\": \"Continue the process until all elements from the copied vector have been added to the result vector.\"\n      },\n      {\n        \"id\": 6,\n        \"description\": \"Return the resulting vector in the 'strange' order.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Check if the input vector is empty. If so, return an empty vector.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Create a working copy of the input vector.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"Initialize an empty vector to store the result.\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Use a loop that continues as long as the working copy of the input vector is not empty.\"\n      },\n      {\n        \"step\": 5,\n        \"description\": \"Inside the loop, determine whether to find the minimum or maximum element based on the current iteration (e.g., using a boolean flag that alternates).\"\n      },\n      {\n        \"step\": 6,\n        \"description\": \"Find the minimum or maximum element in the current working copy.\"\n      },\n      {\n        \"step\": 7,\n        \"description\": \"Append the found element to the result vector.\"\n      },\n      {\n        \"step\": 8,\n        \"description\": \"Remove the selected element from the working copy of the input vector.\"\n      },\n      {\n        \"step\": 9,\n        \"description\": \"After the loop finishes, return the result vector.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "entry_point": "triangle_area", "completion": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\nif (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    float s = (a + b + c) / 2;\n    return (float)(round(sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100);\n}", "session_history": []}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "entry_point": "will_it_fly", "completion": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\nint sum = 0;\n    int n = q.size();\n    for (int x : q) {\n        sum += x;\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Subproblem 1: Check if the vector 'q' is a palindrome (balanced).\",\n      \"Subproblem 2: Calculate the sum of all elements in the vector 'q'.\",\n      \"Subproblem 3: Compare the sum of elements with the maximum possible weight 'w'.\"\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Implement a helper function to check if a given vector is a palindrome.\",\n      \"Step 2: Calculate the sum of the elements in the input vector 'q'.\",\n      \"Step 3: Check if the vector 'q' is a palindrome AND if the calculated sum is less than or equal to 'w'.\",\n      \"Step 4: Return true if both conditions in Step 3 are met, otherwise return false.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "entry_point": "smallest_change", "completion": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\nint changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}", "session_history": []}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "entry_point": "total_match", "completion": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\nint sum1 = 0;\n    for(const string& s : lst1){\n        sum1 += s.length();\n    }\n    int sum2 = 0;\n    for(const string& s : lst2){\n        sum2 += s.length();\n    }\n    if(sum1 <= sum2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"user_requirement\": \"Write a C++ function `total_match` that takes two vectors of strings as input and returns the vector whose strings have a smaller total number of characters. If the total number of characters is the same for both vectors, the function should return the first vector.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Implement a helper function to calculate the total number of characters in all strings within a given vector of strings.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Implement the main function `total_match` that accepts two vectors of strings as input.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Inside `total_match`, calculate the total character count for the first input vector using the helper function from subproblem 1.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Inside `total_match`, calculate the total character count for the second input vector using the helper function from subproblem 1.\"\n      },\n      {\n        \"id\": 5,\n        \"description\": \"Compare the total character counts obtained in steps 3 and 4.\"\n      },\n      {\n        \"id\": 6,\n        \"description\": \"Based on the comparison in step 5, return the vector with the smaller total character count. If the counts are equal, return the first vector.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Define a C++ function `calculateTotalChars` that takes a `std::vector<std::string>` as input and returns an integer representing the sum of the lengths of all strings in the vector.\",\n      \"Define the main C++ function `total_match` that takes two `std::vector<std::string>` arguments, `lst1` and `lst2`.\",\n      \"Call `calculateTotalChars` with `lst1` to get the total character count for the first vector.\",\n      \"Call `calculateTotalChars` with `lst2` to get the total character count for the second vector.\",\n      \"Compare the two total character counts.\",\n      \"Use an `if-else if-else` conditional statement to determine the return value:\",\n      \"  - If the total characters in `lst1` is less than the total characters in `lst2`, return `lst1`.\",\n      \"  - Else if the total characters in `lst2` is less than the total characters in `lst1`, return `lst2`.\",\n      \"  - Else (if the total characters are equal), return `lst1`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "entry_point": "is_multiply_prime", "completion": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\nbool isPrime(int n) {\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint countPrimeFactors(int n) {\n    int count = 0;\n    // Count factors of 2\n    if (n % 2 == 0) {\n        count++;\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n    }== 0) {\n        count++;\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n}\n\n// If n is still greater than 2, it means n itself is a prime factor\nif (n > 2) {\n    count++;\n}\nreturn count;\n\n\n}\n\nbool is_multiply_prime(int a) {\nif (a <= 0) return false; // Handle non-positive input\n\n\nint primeFactorCount = 0;\nint temp_a = a;\n\n// Check for factor 2\nif (temp_a % 2 == 0) {\n    if (isPrime(2)) { // Should always be true for 2\n        primeFactorCount++;\n    }\n    while (temp_a % 2 == 0) {\n        temp_a /= 2;\n    }\n}\n\n// Check for odd prime factors\nfor (int i = 3; i <= temp_a; i = i + 2) {\n    if (temp_a % i == 0) {\n        if (isPrime(i)) {\n            primeFactorCount++;\n        }\n        while (temp_a % i == 0) {\n            temp_a /= i;\n        }\n    }\n    if (primeFactorCount > 3) { // Optimization: if we already found more than 3, no need to continue\n        return false;\n    }\n}\n\nreturn primeFactorCount == 3;\n\n\n}", "session_history": []}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "entry_point": "is_simple_power", "completion": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\nif (n == 1) {\n        return x == 1;\n    }\n    if (x == 1) {\n        return true;\n    }\n    if (x < n || n <= 0) { // x must be greater than or equal to n, and n must be positive\n        return false;\n    }\n    while (x % n == 0) {\n        x /= n;\n    }\n    return x == 1;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle edge cases for n: If n is 1, x must also be 1 for it to be a simple power. If n is 0, x must be 0 for it to be a simple power (0^positive_int is 0, 0^0 is usually 1 but for this problem, 0^0 is 0 given the other examples).\",\n      \"Handle edge cases for x: If x is 1, and n is not 1, it's a simple power (n^0 = 1). If x is 0, n must be 0 for it to be a simple power.\",\n      \"Iteratively divide x by n: Repeatedly divide x by n as long as the remainder is 0 and x is greater than 1.\",\n      \"Check the final result: After divisions, if x becomes 1, then the original x was a simple power of n. Otherwise, it was not.\"\n    ],\n    \"high_level_plan\": [\n      \"Function `is_simple_power(int x, int n)`:\",\n      \"1. If n equals 1, return true if x equals 1, false otherwise.\",\n      \"2. If n equals 0, return true if x equals 0, false otherwise.\",\n      \"3. If x equals 1, return true.\",\n      \"4. If x equals 0, return false (unless n is 0, which is handled above).\",\n      \"5. While x is greater than 1 and x is divisible by n (x % n == 0):\",\n      \"   a. Divide x by n (x = x / n).\",\n      \"6. Return true if x equals 1, false otherwise.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "entry_point": "iscube", "completion": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\nlong long low = -20000; \n    long long high = 20000;\n    while(low <= high){\n        long long mid = low + (high - low) / 2;\n        long long cube = mid * mid * mid;\n        if(cube == a){\n            return true;\n        }\n        else if (cube < a){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle the absolute value of the input integer to simplify cube root calculation.\",\n      \"Calculate the cube root of the absolute value of the input integer.\",\n      \"Check if the calculated cube root, when cubed, equals the original absolute input.\",\n      \"Consider the sign of the original input when reconstructing the cube.\"\n    ],\n    \"high_level_steps\": [\n      \"Take the absolute value of the input `a`.\",\n      \"Calculate the integer cube root of `abs(a)`. This can be done using `cbrt()` from `math.h` and casting to an integer, or by iterative methods (e.g., binary search or Newton's method) for finding integer roots if `cbrt()` is not precise enough for large numbers or specific environments. Given the problem context, `cbrt()` is likely sufficient.\",\n      \"Cube the calculated integer root.\",\n      \"Compare the cubed integer root with the original absolute input `abs(a)`. If they are equal, the number is a perfect cube. Otherwise, it is not.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "entry_point": "hex_key", "completion": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\nint count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Convert hexadecimal digits to their decimal equivalents (A=10, B=11, etc.).\",\n      \"Identify which of these decimal equivalents are prime numbers.\",\n      \"Count the occurrences of prime hexadecimal digits in the input string.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a counter for prime hexadecimal digits.\",\n      \"Define a set or list of prime hexadecimal digits (2, 3, 5, 7, B(11), D(13)).\",\n      \"Iterate through each character of the input hexadecimal string.\",\n      \"For each character, convert it to its decimal equivalent.\",\n      \"Check if the decimal equivalent is present in the predefined set of prime hexadecimal digits.\",\n      \"If it is a prime hexadecimal digit, increment the counter.\",\n      \"Return the final count.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "entry_point": "decimal_to_binary", "completion": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\nstring binaryString = \"\";\n    if (decimal == 0) {\n        binaryString = \"0\";\n    } else {\n        while (decimal > 0) {\n            binaryString = (decimal % 2 == 0 ? \"0\" : \"1\") + binaryString;\n            decimal /= 2;\n        }\n    }\n    return \"db\" + binaryString + \"db\";\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"name\": \"Decimal to Binary Conversion Logic\",\n        \"description\": \"Implement the core logic to convert a given decimal integer into its binary string representation.\"\n      },\n      {\n        \"name\": \"String Formatting\",\n        \"description\": \"Add the 'db' prefix and suffix to the generated binary string.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Receive the decimal integer as input.\",\n      \"Initialize an empty string to store the binary representation.\",\n      \"If the decimal is 0, the binary representation is '0'.\",\n      \"While the decimal is greater than 0:\",\n      \"  Get the remainder when the decimal is divided by 2 (this will be '0' or '1').\",\n      \"  Prepend the remainder to the binary string.\",\n      \"  Divide the decimal by 2 (integer division).\",\n      \"Prepend 'db' to the binary string.\",\n      \"Append 'db' to the binary string.\",\n      \"Return the final formatted string.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "entry_point": "is_happy", "completion": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\nif (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= (int)s.length() - 3; ++i) {\n        if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2]) {\n            return false;\n        }\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Check if the string length is at least 3.\",\n      \"Iterate through the string, considering every 3 consecutive characters.\",\n      \"For each set of 3 consecutive characters, check if they are all distinct.\"\n    ],\n    \"high_level_plan\": [\n      \"Function `is_happy(string s)`:\",\n      \"1. Get the length of the input string `s`.\",\n      \"2. If the length is less than 3, return `false`.\",\n      \"3. Loop from index `i = 0` up to `length - 3` (inclusive):\",\n      \"   a. Get the characters at `s[i]`, `s[i+1]`, and `s[i+2]`.\",\n      \"   b. Check if `s[i]`, `s[i+1]`, and `s[i+2]` are all distinct. (i.e., `s[i] != s[i+1]` AND `s[i] != s[i+2]` AND `s[i+1] != s[i+2]`).\",\n      \"   c. If they are not distinct, return `false`.\",\n      \"4. If the loop completes without returning `false`, return `true`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "entry_point": "numerical_letter_grade", "completion": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\nvector<string> letter_grades;\nfor (float gpa : grades) {\nif (gpa == 4.0) {\nletter_grades.push_back(\"A+\");\n} else if (gpa > 3.7) {\nletter_grades.push_back(\"A\");\n} else if (gpa > 3.3) {\nletter_grades.push_back(\"A-\");\n} else if (gpa > 3.0) {\nletter_grades.push_back(\"B+\");\n} else if (gpa > 2.7) {\nletter_grades.push_back(\"B\");\n} else if (gpa > 2.3) {\nletter_grades.push_back(\"B-\");\n} else if (gpa > 2.0) {\nletter_grades.push_back(\"C+\");\n} else if (gpa > 1.7) {\nletter_grades.push_back(\"C\");\n} else if (gpa > 1.3) {\nletter_grades.push_back(\"C-\");\n} else if (gpa > 1.0) {\nletter_grades.push_back(\"D+\");\n} else if (gpa > 0.7) {\nletter_grades.push_back(\"D\");\n} else if (gpa > 0.0) {\nletter_grades.push_back(\"D-\");\n} else {\nletter_grades.push_back(\"E\");\n}\n}\nreturn letter_grades;\n}", "session_history": []}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "entry_point": "prime_length", "completion": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\nint n = str.length();\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}", "session_history": []}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n", "entry_point": "starts_one_ends", "completion": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\nif (n == 1) {\n        return 1; // Only '1' is a 1-digit number that starts andth 1.\n}\n\n\n// Total n-digit numbers: The first digit can be 1-9 (9 options), and the remaining n-1 digits can be 0-9 (10 options each).\n// So, total n-digit numbers = 9 * 10^(n-1). This is not directly used but good for context.\n\n// Case 1: Numbers that start with 1.\n// The first digit is fixed as 1.\n// The remaining n-1 digits can be any digit from 0-9.\n// So, there are 10^(n-1) numbers that start with 1.\nlong long starts_with_1 = 1;\nfor (int i = 0; i < n - 1; ++i) {\n    starts_with_1 *= 10;\n}\n\n// Case 2: Numbers that end with 1.\n// The last digit is fixed as 1.\n// The first digit can be any digit from 1-9 (9 options).\n// The remaining n-2 digits (if n > 1) can be any digit from 0-9.\n// If n=1, this overlaps completely with starts_with_1 (which is 1).\n// If n > 1:\nlong long ends_with_1 = 9;\nif (n > 2) {\n    for (int i = 0; i < n - 2; ++i) {\n        ends_with_1 *= 10;\n    }\n} else if (n == 1) {\n    ends_with_1 = 1; // Only '1'\n} else if (n == 2) {\n    // Numbers ending with 1: 11, 21, ..., 91. That's 9 numbers.\n    ends_with_1 = 9;\n}\n\n\n// Case 3: Numbers that start AND end with 1. (Overlap between Case 1 and Case 2)\n// The first digit is 1 and the last digit is 1.\n// The remaining n-2 digits can be any digit from 0-9.\n// If n=1, this is '1', count is 1.\n// If n=2, this is '11', count is 1.\n// If n > 2: 1 * 10^(n-2) * 1\nlong long starts_and_ends_with_1 = 1;\nif (n > 2) {\n    for (int i = 0; i < n - 2; ++i) {\n        starts_and_ends_with_1 *= 10;\n    }\n} else if (n == 1) {\n    starts_and_ends_with_1 = 1;\n} else if (n == 2) {\n    starts_and_ends_with_1 = 1; // Only '11'\n}\n\n\n// Principle of Inclusion-Exclusion:\n// Total = (Numbers starting with 1) + (Numbers ending with 1) - (Numbers starting AND ending with 1)\nreturn starts_with_1 + ends_with_1 - starts_and_ends_with_1;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Calculate the count of n-digit numbers that start with 1.\",\n      \"Calculate the count of n-digit numbers that end with 1.\",\n      \"Calculate the count of n-digit numbers that start AND end with 1 (to avoid double-counting).\",\n      \"Combine the results using the principle of inclusion-exclusion: (starts with 1) + (ends with 1) - (starts AND ends with 1).\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function `count_starts_with_one(n)` to calculate the number of n-digit integers starting with 1.\",\n      \"Define a function `count_ends_with_one(n)` to calculate the number of n-digit integers ending with 1.\",\n      \"Define a function `count_starts_and_ends_with_one(n)` to calculate the number of n-digit integers starting and ending with 1.\",\n      \"In the main function `starts_one_ends(n)`, call the above three functions and apply the inclusion-exclusion principle to return the final count.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "entry_point": "solve", "completion": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\nint sum_digits = 0;\n    string binary_sum = \"\";\n// Calculate sum of decimal digits\nif (N == 0) {\n    sum_digits = 0;\n} else {\n    int temp_N = N;\n    while (temp_N > 0) {\n        sum_digits += temp_N % 10;\n        temp_N /= 10;\n    }\n}\n\n// Convert sum of digits to binary string\nif (sum_digits == 0) {\n    binary_sum = \"0\";\n} else {\n    while (sum_digits > 0) {\n        binary_sum = (sum_digits % 2 == 0 ? \"0\" : \"1\") + binary_sum;\n        sum_digits /= 2;\n    }\n}\n\nreturn binary_sum;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Convert the given positive integer N into its binary representation.\",\n      \"Calculate the sum of the digits of the binary representation.\",\n      \"Convert the calculated sum into its binary string representation.\"\n    ],\n    \"high_level_plan\": [\n      \"Function `solve(int N)`:\",\n      \"Initialize an integer variable, say `decimalSum`, to 0.\",\n      \"Convert `N` to its binary string representation. (e.g., using `std::bitset` or a loop with modulo and division by 2).\",\n      \"Iterate through the binary string. For each '1' character, increment `decimalSum`.\",\n      \"Convert `decimalSum` to its binary string representation. (e.g., using a loop with modulo and division by 2, appending '0' or '1' to a string, and then reversing the string, or using `std::bitset` if the sum is small enough to fit within its capacity).\",\n      \"Return the resulting binary string.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "entry_point": "add", "completion": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\nint sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Iterate through the input vector 'lst'.\",\n      \"For each element, determine its index.\",\n      \"Check if the current index is odd.\",\n      \"If the index is odd, check if the element at that index is even.\",\n      \"If both conditions are met (odd index and even element), add the element to a running sum.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable, say 'sum_of_evens_at_odd_indices', to 0.\",\n      \"Loop through the input vector 'lst' from the first element to the last.\",\n      \"Inside the loop, use an 'if' statement to check if the current index 'i' is odd (i.e., 'i % 2 != 0') AND if the element 'lst[i]' is even (i.e., 'lst[i] % 2 == 0').\",\n      \"If both conditions are true, add 'lst[i]' to 'sum_of_evens_at_odd_indices'.\",\n      \"After the loop finishes, return 'sum_of_evens_at_odd_indices'.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "entry_point": "anti_shuffle", "completion": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\nstring result = \"\";\n    string current_word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(current_word.begin(), current_word.end());\n            result += current_word;\n            result += ' ';\n            current_word = \"\";\n        } else {\n            current_word += c;\n        }\n    }\n    sort(current_word.begin(), current_word.end());\n    result += current_word;\n    return result;\n}", "session_history": []}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "entry_point": "get_row", "completion": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\nvector<vectorr<int>> result;\nfor (int i = 0; i < lst.size(); ++i) {\nfor (int j = 0; j < lst[i].size(); ++j) {\nif (lst[i][j] == x) {\nresult.push_back({i, j});\n}\n}\n}\n\n\nsort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n    if (a[0] != b[0]) {\n        return a[0] < b[0]; // Sort by row in ascending order\n    }\n    return a[1] > b[1]; // Sort by column in descending order for same row\n});\n\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "entry_point": "sort_array", "completion": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\nvector<int> result = array; // Create a copy of the input vector\n\n\nif (result.empty()) {\n    return result;\n}\n\nint first_val = result[0];\nint last_val = result[result.size() - 1];\n\nif ((first_val + last_val) % 2 != 0) { // Sum is odd, sort ascending\n    sort(result.begin(), result.end());\n} else { // Sum is even, sort descending\n    sort(result.begin(), result.end(), greater<int>());\n}\n\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle edge cases for empty or single-element vectors.\",\n      \"Calculate the sum of the first and last elements of the input vector.\",\n      \"Determine the sorting order (ascending or descending) based on the parity of the sum.\",\n      \"Create a copy of the input vector to avoid modifying the original.\",\n      \"Sort the copied vector according to the determined order.\",\n      \"Return the sorted copy.\"\n    ],\n    \"high_level_steps\": [\n      \"Check if the input vector is empty. If so, return an empty vector.\",\n      \"Check if the input vector has only one element. If so, return a copy of the vector.\",\n      \"Access the first and last elements of the vector.\",\n      \"Calculate the sum of the first and last elements.\",\n      \"Determine if the sum is even or odd.\",\n      \"Create a new vector that is a copy of the input vector.\",\n      \"If the sum is odd, sort the copied vector in ascending order.\",\n      \"If the sum is even, sort the copied vector in descending order.\",\n      \"Return the sorted copied vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "entry_point": "encrypt", "completion": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\nstring result = \"\";\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            // Calculate the new character's position, wrapping around if necessary\n            result += (char)('a' + (c - 'a' + 4) % 26);\n        } else if (c >= 'A' && c <= 'Z') {\n            // Handle uppercase letters similarly\n            result += (char)('A' + (c - 'A' + 4) % 26);\n        } else {\n            // For non-alphabetic characters, append as is\n            result += c;\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n", "entry_point": "next_smallest", "completion": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\nif (lst.size() < 2) {\n        return -1; // Or any value that represents None, as the return type is int.\n                   // A common practice for \"no such element\" for integer returns\n                   // is to use a special value like INT_MIN or INT_MAX fromlied by the problem description.\n}\n\n\nsort(lst.begin(), lst.end());\n\n// Remove duplicates to correctly find the second *smallest unique* element.\n// unique moves duplicates to the end, and returns an iterator to the new logical end.\n// erase then removes the actual elements from that point to the physical end.\nlst.erase(unique(lst.begin(), lst.end()), lst.end());\n\nif (lst.size() < 2) {\n    return -1; // No second smallest element after removing duplicates\n}\n\nreturn lst[1];\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle empty vector case: If the input vector is empty, return None.\",\n      \"Handle vector with less than two unique elements: If the vector has fewer than two unique elements, return None.\",\n      \"Remove duplicates and sort: Create a new vector containing only unique elements from the input vector and sort it in ascending order.\",\n      \"Identify the second smallest element: After sorting the unique elements, the second element in this sorted list will be the second smallest.\"\n    ],\n    \"high_level_plan\": [\n      \"Check if the input vector `lst` is empty. If it is, return `None`.\",\n      \"Create a temporary vector `unique_elements` from `lst`.\",\n      \"Sort `unique_elements`.\",\n      \"Remove duplicate elements from `unique_elements`.\",\n      \"Check if the size of `unique_elements` is less than 2. If it is, return `None`.\",\n      \"Return the element at index 1 of `unique_elements`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "entry_point": "is_bored", "completion": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\nint boredoms = 0;\n    bool new_sentence = true;\n    for (char c : S) {\n        if (new_sentence) {\n            if (c == 'I') {\n                boredoms++;\n            }\n            new_sentence = false;\n        }\n        if (c == '.' || c == '?' || c == '!') {\n            new_sentence = true;\n        } else if (c != ' ' && c != 't' && c != 'n') { // Check for non-whitespace characters to determine if it's not an empty sentence\n            new_sentence = false; // Reset if we encounter a non-whitespace character before punctuation\n        }\n    }\n    return boredoms;\n}", "session_history": []}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "entry_point": "any_int", "completion": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\nif (fmod(a, 1) != 0 || fmod(b, 1) != 0 || fmod(c, 1) != 0) {\n        return false;\n    }\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"name\": \"Check for Integer Values\",\n        \"description\": \"Determine if all three input numbers (a, b, c) are integers.\"\n      },\n      {\n        \"name\": \"Check for Sum Equality\",\n        \"description\": \"Verify if any one number is equal to the sum of the other two, considering all permutations (a = b + c, b = a + c, c = a + b).\"\n      },\n      {\n        \"name\": \"Combine Conditions\",\n        \"description\": \"Return true only if both the integer check and sum equality check are true. Otherwise, return false.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Receive three input numbers: a, b, and c.\",\n      \"Check if 'a' is an integer. If not, return false immediately.\",\n      \"Check if 'b' is an integer. If not, return false immediately.\",\n      \"Check if 'c' is an integer. If not, return false immediately.\",\n      \"Check if (a == b + c) OR (b == a + c) OR (c == a + b).\",\n      \"If any of the sum equalities are true, return true.\",\n      \"Otherwise, return false.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "entry_point": "encode", "completion": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\nfor (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            message[i] = toupper(message[i]);\n            if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n                message[i] = message[i] + 2;\n            }\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            message[i] = tolower(message[i]);\n            if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n                message[i] = message[i] + 2;\n            }\n        }\n    }\n    return message;\n}", "session_history": []}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "entry_point": "skjkasdkd", "completion": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\nauto isPrime = [](int n) {\n        if (n < 2) return false;\n        for (int i = 2; i * i <= n; ++i) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };m = 0;\n    string s = to_string(n);\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n};\n\nint largestPrime = -1;\nfor (int x : lst) {\n    if (isPrime(x)) {\n        if (x > largestPrime) {\n            largestPrime = x;\n        }\n    }\n}\n\nif (largestPrime == -1) {\n    return 0; // Or handle the case where no prime is found as per requirements\n}\n\nreturn sumDigits(largestPrime);\n\n\n}", "session_history": []}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "entry_point": "check_dict_case", "completion": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\nif (dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for (auto const& [key, val] : dict) {\n        bool is_lower = true;\n        bool is_upper = true;\n        for (char c : key) {\n            if (!isalpha(c)) {\n                all_lower = false;\n                all_upper = false;\n                break;\n            }\n            if (islower(c) == 0) {\n                is_lower = false;\n            }\n            if (isupper(c) == 0) {\n                is_upper = false;\n            }\n        }\n        if (!is_lower) {\n            all_lower = false;\n        }\n        if (!is_upper) {\n            all_upper = false;\n        }\n        if (!all_lower && !all_upper) {\n            return false;\n        }\n    }\n    return all_lower || all_upper;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle the edge case of an empty map: if the map is empty, return false immediately.\",\n      \"Determine if all keys are entirely lowercase strings.\",\n      \"Determine if all keys are entirely uppercase strings.\",\n      \"If either of the above conditions is true, return true; otherwise, return false.\"\n    ],\n    \"high_level_steps\": [\n      \"Check if the input map is empty. If it is, return false.\",\n      \"Initialize two boolean flags: `all_lower` to true and `all_upper` to true.\",\n      \"Iterate through each key in the map:\",\n      \"For each key, check if it contains any uppercase characters. If it does, set `all_lower` to false.\",\n      \"For each key, check if it contains any lowercase characters. If it does, set `all_upper` to false.\",\n      \"After iterating through all keys, if `all_lower` is true or `all_upper` is true, return true.\",\n      \"Otherwise, return false.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "entry_point": "count_up_to", "completion": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\nvector<int> result;\nif (n <= 2) {\nreturn result;\n}\n\n\n// Sieve of Eratosthenes to find primes up to n-1\nvector<bool> is_prime(n, true);\nis_prime[0] = false;\nis_prime[1] = false;\n\nfor (int p = 2; p * p < n; ++p) {\n    if (is_prime[p]) {\n        for (int i = p * p; i < n; i += p)\n            is_prime[i] = false;\n    }\n}\n\n// Collect prime numbers less than n\nfor (int p = 2; p < n; ++p) {\n    if (is_prime[p]) {\n        result.push_back(p);\n    }\n}\n\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "entry_point": "multiply", "completion": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\nint unit_a = abs(a % 10);\n    int unit_b = abs(b % 10);\n    return unit_a * unit_b;\n}", "session_history": []}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "entry_point": "count_upper", "completion": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\nint count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "entry_point": "closest_integer", "completion": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\ndouble num = stod(value);\n    if (num > 0) {\n        return floor(num + 0.5);\n    } else {\n        return ceil(num - 0.5);\n    }\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Convert the input string 'value' into a numerical representation (float or double) to allow for mathematical operations.\",\n      \"Determine the integer part of the number.\",\n      \"Calculate the fractional part of the number.\",\n      \"Implement the rounding logic: if the fractional part is exactly 0.5, round away from zero; otherwise, round to the closest integer.\"\n    ],\n    \"high_level_plan\": [\n      \"Parse the input string 'value' to a floating-point number (e.g., `double`).\",\n      \"Use `floor()` to get the lower integer bound and `ceil()` to get the upper integer bound.\",\n      \"Calculate the absolute difference between the original number and both the floor and ceil values.\",\n      \"If the absolute difference to both floor and ceil is 0.5, check the sign of the original number: if positive, return ceil; if negative, return floor (this effectively rounds away from zero).\",\n      \"Otherwise, return the integer (floor or ceil) that has the smaller absolute difference to the original number.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "entry_point": "make_a_pile", "completion": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\nvector<int> pile;\nint current_stones = n;\nfor (int i = 0; i < n; ++i) {\npile.push_back(current_stones);\nif (n % 2 == 0) { // n is even\ncurrent_stones += 2;\n} else { // n is odd\ncurrent_stones += 2;\n}\n}\nreturn pile;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Determine the starting number of stones for the first level based on the input 'n'.\",\n      \"Determine the increment step for subsequent levels (2 for odd 'n', 2 for even 'n' - effectively always 2).\",\n      \"Iterate 'n' times to generate the number of stones for each level.\",\n      \"Store the number of stones for each level in a vector.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize an empty vector to store the pile of stones.\",\n      \"Add 'n' as the first element to the vector (representing the first level).\",\n      \"Loop from the second level up to the 'n'-th level:\",\n      \"   Calculate the number of stones for the current level by adding 2 to the number of stones in the previous level.\",\n      \"   Add the calculated number of stones to the vector.\",\n      \"Return the populated vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "entry_point": "words_string", "completion": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\nvector<string> result;\nstring current_word;\nfor (char c : s) {\nif (c == ' ' || c == ',') {\nif (!current_word.empty()) {\nresult.push_back(current_word);\ncurrent_word.clear();\n}\n} else {\ncurrent_word += c;\n}\n}\nif (!current_word.empty()) {\nresult.push_back(current_word);\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"user_requirement\": \"The user needs a C++ function `words_string` that takes a string as input and returns a vector of strings, where the input string is split into words based on commas and spaces as delimiters.\",\n    \"decomposition\": [\n      {\n        \"subproblem_id\": 1,\n        \"description\": \"Identify and handle both comma (`,`) and space (` `) characters as delimiters within the input string.\"\n      },\n      {\n        \"subproblem_id\": 2,\n        \"description\": \"Iterate through the input string, identifying the boundaries of each word based on the delimiters.\"\n      },\n      {\n        \"subproblem_id\": 3,\n        \"description\": \"Extract each identified word as a substring.\"\n      },\n      {\n        \"subproblem_id\": 4,\n        \"description\": \"Store each extracted word into a `std::vector<std::string>`.\"\n      },\n      {\n        \"subproblem_id\": 5,\n        \"description\": \"Return the populated `std::vector<std::string>`.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step_id\": 1,\n        \"description\": \"Initialize an empty `std::vector<std::string>` to store the resulting words.\"\n      },\n      {\n        \"step_id\": 2,\n        \"description\": \"Iterate through the input string character by character.\"\n      },\n      {\n        \"step_id\": 3,\n        \"description\": \"For each character, check if it is a delimiter (comma or space).\"\n      },\n      {\n        \"step_id\": 4,\n        \"description\": \"If a delimiter is encountered or the end of the string is reached, extract the substring between the previous delimiter (or start of the string) and the current position as a word. Add this word to the vector.\"\n      },\n      {\n        \"step_id\": 5,\n        \"description\": \"Handle potential consecutive delimiters to avoid empty strings in the result.\"\n      },\n      {\n        \"step_id\": 6,\n        \"description\": \"After iterating through the entire string, return the vector of extracted words.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "entry_point": "choose_num", "completion": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\nint result = -1;\n    for (int i = y; i >= x; --i) {\n        if (i % 2 == 0) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle invalid input range (y < x).\",\n      \"Iterate downwards from y to x to find the largest number.\",\n      \"Check if the current number is even.\",\n      \"Return the first even number found within the range.\",\n      \"Return -1 if no even number is found.\"\n    ],\n    \"high_level_plan\": [\n      \"Check if 'y' is less than 'x'. If so, return -1.\",\n      \"Start a loop from 'y' down to 'x' (inclusive).\",\n      \"Inside the loop, check if the current number is even (number % 2 == 0).\",\n      \"If an even number is found, return it immediately.\",\n      \"If the loop completes without finding an even number, return -1.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "entry_point": "rounded_avg", "completion": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\nif (n > m) {\n        return \"-1\";\n    }\n    long long sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    int average = floor((double)sum / (m - n + 1));\n    string binaryString = \"\";\n    if (average == 0) {\n        return \"0\";\n    }\n    while (average > 0) {\n        binaryString = (average % 2 == 0 ? \"0\" : \"1\") + binaryString;\n        average /= 2;\n    }\n    return binaryString;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle the edge case where n > m.\",\n      \"Calculate the sum of integers from n to m (inclusive).\",\n      \"Calculate the average of the integers from n to m.\",\n      \"Round the average to the nearest smaller integer.\",\n      \"Convert the rounded integer to its binary string representation.\"\n    ],\n    \"high_level_plan\": [\n      \"Check if n is greater than m. If true, return \\\"-1\\\".\",\n      \"Calculate the sum of the arithmetic series: sum = (m - n + 1) * (n + m) / 2.\",\n      \"Calculate the average: average = sum / (m - n + 1).\",\n      \"Round the average down to the nearest integer using floor() function.\",\n      \"Convert the rounded integer to binary. This can be done by repeatedly dividing by 2 and appending the remainder to a string, then reversing the string. Handle the case of 0 separately (binary is \\\"0\\\").\"\n    ]\n  }\n}"}}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "entry_point": "unique_digits", "completion": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\nvector<int> result;\nfor (int num : x) {\nbool has_even = false;\nint temp = num;\nwhile (temp > 0) {\nint digit = temp % 10;\nif (digit % 2 == 0) {\nhas_even = true;\nbreak;\n}\ntemp /= 10;\n}\nif (!has_even) {\nresult.push_back(num);\n}\n}\nsort(result.begin(), result.end());\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "entry_point": "by_length", "completion": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\nif (arr.empty()) {\n        return {};map<int, string> digit_names = {\n    {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n    {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n};\n\nvector<int> filtered_arr;\nfor (int num : arr) {\n    if (num >= 1 && num <= 9) {\n        filtered_arr.push_back(num);\n    }\n}\n\nsort(filtered_arr.begin(), filtered_arr.end());\nreverse(filtered_arr.begin(), filtered_arr.end());\n\nvector<string> result;\nfor (int num : filtered_arr) {\n    result.push_back(digit_names[num]);\n}\n\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "entry_point": "f", "completion": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\nvector<int> result;\nfor (int i = 1; i <= n; ++i) {\nif (i % 2 == 0) {\n// If i is even, calculate factorial of i\nlong long factorial = 1;\nfor (int j = 1; j <= i; ++j) {\nfactorial *= j;\n}\nresult.push_back(factorial);\n} else {\n// If i is odd, calculate sum of numbers from 1 to i\nlong long sum = (long long)i * (i + 1) / 2;\nresult.push_back(sum);\n}\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "entry_point": "even_odd_palindrome", "completion": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\nvector<int> result(2, 0); // result[0] for even, result[1] for odd\n\n\nfor (int i = 1; i <= n; ++i) {\n    string s = to_string(i);\n    bool is_palindrome = true;\n    int left = 0;\n    int right = s.length() - 1;\n    while (left < right) {\n        if (s[left] != s[right]) {\n            is_palindrome = false;\n            break;\n        }\n        left++;\n        right--;\n    }\n\n    if (is_palindrome) {\n        if (i % 2 == 0) {\n            result[0]++; // Even palindrome\n        } else {\n            result[1]++; // Odd palindrome\n        }\n    }\n}\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Subproblem 1: Determine if a given integer is a palindrome.\",\n      \"Subproblem 2: Iterate through numbers from 1 to n (inclusive).\",\n      \"Subproblem 3: For each number, check if it's a palindrome.\",\n      \"Subproblem 4: If it's a palindrome, check if it's even or odd.\",\n      \"Subproblem 5: Count the number of even and odd palindromes.\",\n      \"Subproblem 6: Return the counts as a vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize two counters, one for even palindromes and one for odd palindromes, to zero.\",\n      \"Implement a helper function `isPalindrome(int num)` that converts the integer to a string and checks if the string is a palindrome.\",\n      \"Loop from 1 to `n` (inclusive):\",\n      \"  Inside the loop, call `isPalindrome()` for the current number.\",\n      \"  If `isPalindrome()` returns true:\",\n      \"    Check if the number is even or odd using the modulo operator.\",\n      \"    Increment the corresponding even or odd palindrome counter.\",\n      \"Create a `std::vector<int>` and add the even palindrome count and then the odd palindrome count to it.\",\n      \"Return the created vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "entry_point": "count_nums", "completion": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\nint count = 0;\n    for (int num : n) {\n        int sum_digits = 0;\n        if (num < 0) {\n            sum_digits = - (num % 10); // First signed digit is negative\n            num = - (num / 10); // Remaining digits are positive\n        }\n        while (num != 0) {\n            sum_digits += num % 10;\n            num /= 10;\n        }\n        if (sum_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "entry_point": "move_one_ball", "completion": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\nif (arr.empty()) {\n        return true\nint n = arr.size();\nvector<int> sorted_arr = arr;\nsort(sorted_arr.begin(), sorted_arr.end());\n\nfor (int i = 0; i < n; ++i) {\n    vector<int> rotated_arr(n);\n    for (int j = 0; j < n; ++j) {\n        rotated_arr[j] = arr[(j - i + n) % n];\n    }\n    if (rotated_arr == sorted_arr) {\n        return true;\n    }\n}\nreturn false;\n\n\n}", "session_history": []}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "entry_point": "exchange", "completion": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\nint odd_count_lst1 = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_count_lst1++;\n        }\n    }\n    int even_count_lst2 = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_count_lst2++;\n        }\n    }\n    if (even_count_lst2 >= odd_count_lst1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Identify all odd numbers in `lst1`.\",\n      \"Identify all even numbers in `lst2`.\",\n      \"Compare the count of odd numbers in `lst1` with the count of even numbers in `lst2`.\"\n    ],\n    \"high_level_plan\": [\n      \"Iterate through `lst1` and count the number of odd elements. Let's call this `odd_count_lst1`.\",\n      \"Iterate through `lst2` and count the number of even elements. Let's call this `even_count_lst2`.\",\n      \"If `odd_count_lst1` is less than or equal to `even_count_lst2`, return \\\"YES\\\".\",\n      \"Otherwise, return \\\"NO\\\".\"\n    ]\n  }\n}"}}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "entry_point": "histogram", "completion": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\nmap<char, int> charCounts;\n    if (test.empty()) {\n        return char\n\n// Populate charCounts map\nfor (char c : test) {\n    if (c != ' ') {\n        charCounts[c]++;\n    }\n}\n\nif (charCounts.empty()) {\n    return charCounts;\n}\n\n// Find the maximum count\nint maxCount = 0;\nfor (auto const& pair : charCounts) {\n    if (pair.second > maxCount) {\n        maxCount = pair.second;\n    }\n}\n\n// Create the result map with letters having the maximum count\nmap<char, int> result;\nfor (auto const& pair : charCounts) {\n    if (pair.second == maxCount) {\n        result[pair.first] = pair.second;\n    }\n}\n\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "entry_point": "reverse_delete", "completion": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\nstring res = \"\";\n    for(char sch : s){\n        bool found = false;\n        for(char cch : c){\n            if(sch == cch){\n                found = true;\n                break;\n            }\n        }\n        if(!found){\n            res += sch;\n        }\n    }\n    string rev_res = res;\n    reverse(rev_res.begin(), rev_res.end());\n    string palindrome = (res == rev_res) ? \"True\" : \"False\";\n    return {res, palindrome};\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Subproblem 1: Character Deletion - Given two strings `s` and `c`, create a new string by deleting all characters from `s` that are present in `c`.\",\n      \"Subproblem 2: Palindrome Check - Given a string, determine if it is a palindrome.\",\n      \"Subproblem 3: Result Formatting - Combine the processed string and the palindrome check result into a `std::vector<std::string>`.\"\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Iterate through the input string `s`.\",\n      \"Step 2: For each character in `s`, check if it exists in string `c`.\",\n      \"Step 3: If a character from `s` is NOT found in `c`, append it to a new result string (let's call it `filtered_s`).\",\n      \"Step 4: Once `filtered_s` is created, check if it is a palindrome.\",\n      \"Step 5: Create a `std::vector<std::string>` to store the results.\",\n      \"Step 6: Add `filtered_s` to the vector.\",\n      \"Step 7: Add \\\"True\\\" or \\\"False\\\" (based on the palindrome check) to the vector.\",\n      \"Step 8: Return the vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "entry_point": "odd_count", "completion": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\nvector<string> result;\nfor (const string& s : lst) {\nint odd_count_in_string = 0;\nfor (char c : s) {\nint digit = c - '0';\nif (digit % 2 != 0) {\nodd_count_in_string++;\n}\n}\nstring output_string = \"the number of odd elements In the strIng I of the Input.\";\nstring count_str = to_string(odd_count_in_string);\n\n\n    size_t pos = output_string.find(\"I\");\n    while (pos != string::npos) {\n        output_string.replace(pos, 1, count_str);\n        pos = output_string.find(\"I\", pos + count_str.length());\n    }\n\n    pos = output_string.find(\"i\");\n    while (pos != string::npos) {\n        output_string.replace(pos, 1, count_str);\n        pos = output_string.find(\"i\", pos + count_str.length());\n    }\n    \n    result.push_back(output_string);\n}\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"For each string in the input vector, count the number of odd digits it contains.\",\n      \"For each count obtained, construct the output string based on the specified format: 'the number of odd elements In the strIng I of the Input.' where 'I' is replaced by the count of odd digits.\",\n      \"Collect all constructed output strings into a new vector.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty vector of strings to store the results.\",\n      \"Iterate through each string in the input vector `lst`.\",\n      \"Inside the loop, for each string, iterate through its characters to determine if each character represents an odd digit.\",\n      \"Maintain a counter for odd digits for the current string.\",\n      \"After processing each string, use the odd digit count to format the output string as specified.\",\n      \"Add the formatted string to the results vector.\",\n      \"Return the results vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "entry_point": "minSubArraySum", "completion": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\nlong long min_so_far = nums[0];\n    long long current_min = nums[0];\n    for (int i = 1; i < nums.size(); ++i) {\n        current_min = min(nums[i], current_min + nums[i]);\n        min_so_far = min(min_so_far, current_min);\n    }\n    return min_so_far;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle empty input vector: Define behavior for an empty 'nums' vector.\",\n      \"Initialize minimum sum: Set an initial value for the minimum sub-array sum, considering the range of possible sums.\",\n      \"Iterate through the array: Traverse the input 'nums' vector.\",\n      \"Calculate current sub-array sum: Maintain a running sum for the current sub-array being considered.\",\n      \"Update minimum sum: Compare the current sub-array sum with the overall minimum sum found so far and update if a smaller sum is found.\",\n      \"Reset current sum: If the current sub-array sum becomes positive, reset it to zero to start a new potential minimum sub-array from the next element (as a positive sum will only increase subsequent sums).\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize 'min_so_far' to the maximum possible long long value (or the first element of the array if handled for non-empty).\",\n      \"Initialize 'current_min' to 0.\",\n      \"Loop through each 'num' in the input 'nums' vector:\",\n      \"Add 'num' to 'current_min'.\",\n      \"Update 'min_so_far' = min('min_so_far', 'current_min').\",\n      \"If 'current_min' > 0, set 'current_min' = 0.\",\n      \"Return 'min_so_far'.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "entry_point": "max_fill", "completion": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\nint count = 0;\n    for(int i = 0; i < grid.size(); i++){\n        int water_in_well = 0;\n        for(int j = 0; j < grid[i].size(); j++){\n            if(grid[i][j] == 1){\n                water_in_well++;\n            }\n        }\n        count += (water_in_well + capacity - 1) / capacity;\n    }\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"id\": \"SP1\",\n        \"description\": \"Calculate the total amount of water in all wells.\"\n      },\n      {\n        \"id\": \"SP2\",\n        \"description\": \"Calculate the total capacity of all buckets that can be used in one 'lowering' operation (i.e., one bucket per well).\"\n      },\n      {\n        \"id\": \"SP3\",\n        \"description\": \"Determine the number of times the buckets need to be lowered to empty all wells, considering the total water and the effective bucket capacity per lowering.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Initialize a variable `total_water` to 0.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Iterate through each well (row) in the `grid`.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"For each well, iterate through its contents (units of water).\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"If a unit of water (1) is encountered, increment `total_water`.\"\n      },\n      {\n        \"step\": 5,\n        \"description\": \"Calculate `total_lowerings` by dividing `total_water` by `bucket_capacity`.\"\n      },\n      {\n        \"step\": 6,\n        \"description\": \"If `total_water` is not perfectly divisible by `bucket_capacity`, increment `total_lowerings` by 1 (to account for the remaining water). This can be achieved using integer division and checking for a remainder, or using the ceiling function.\"\n      },\n      {\n        \"step\": 7,\n        \"description\": \"Return `total_lowerings`.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "entry_point": "sort_array", "completion": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\nsort(arr.begin(), arr.end(), [](int a, int b) {\n        if (__builtin_popcount(abs(a)) != __builtin_popcount(abs(b)))\n            return __builtin_popcount(abs(a)) < __builtin_popcount(abs(b));\n        return a < b;\n    });\n    return arr;\n}", "session_history": []}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "entry_point": "select_words", "completion": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\nbool is_vowel(char c) {\n    c = tolower(c);\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nint count_consonants(const string& word) {\n    int count = 0;\n    for (char c : word) {\n        if (isalpha(c) && !is_vowel(c)) {\n            count++;\n        }\n    }\n    return count;\n}  return result;\n}\n\nstring current_word;\nfor (char c : s) {\n    if (c == ' ') {\n        if (!current_word.empty()) {\n            if (count_consonants(current_word) == n) {\n                result.push_back(current_word);\n            }\n            current_word.clear();\n        }\n    } else {\n        current_word += c;\n    }\n}\n\nif (!current_word.empty()) {\n    if (count_consonants(current_word) == n) {\n        result.push_back(current_word);\n    }\n}\n\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "entry_point": "get_closest_vowel", "completion": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\nint n = word.length();\n    if (n < 3)return \"\";\n}\n\n\nauto is_vowel = [](char c) {\n    c = tolower(c);\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n};\n\nfor (int i = n - 2; i >= 1; --i) {\n    if (is_vowel(word[i]) && !is_vowel(word[i - 1]) && !is_vowel(word[i + 1])) {\n        return string(1, word[i]);\n    }\n}\nreturn \"\";\n\n\n}", "session_history": []}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "entry_point": "match_parens", "completion": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\nstring s1 = lst[0];\n    string s2st[1];\n\n\nauto is_balanced = [](const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n};\n\nif (is_balanced(s1 + s2) || is_balanced(s2 + s1)) {\n    return \"Yes\";\n} else {\n    return \"No\";\n}\n\n\n}", "session_history": []}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "entry_point": "maximum", "completion": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\nsort(arr.begin(), arr.end());\nvector<int> result;\nfor (int i = 0; i < k; ++i) {\nresult.push_back(arr[arr.size() - k + i]);\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "entry_point": "solution", "completion": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\nint sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "entry_point": "add_elements", "completion": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\nint sum = 0;\n    for (int i = 0; i < k; ++i) {\n        int num = arr[i];\n        if (num >= -99 && num <= 99) { // Handles numbers with at most two digits (including negative)\n            sum += num;\n        }\n    }\n    return sum;\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"goal\": \"Calculate the sum of elements with at most two digits from the first k elements of a given integer vector.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Iterate through the first 'k' elements of the input vector 'arr'.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"For each element in the first 'k' elements, determine if it has at most two digits.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"If an element has at most two digits, add it to a running sum.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"After iterating through the first 'k' elements, return the final sum.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Initialize a variable, say 'sum', to 0. This variable will store the sum of the qualifying elements.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Iterate through the input vector 'arr' from the first element (index 0) up to, but not including, the element at index 'k'.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"For each element encountered in the iteration:\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Determine the number of digits in the current element.\"\n      },\n      {\n        \"step\": 5,\n        \"description\": \"If the number of digits is less than or equal to 2, add the current element to the 'sum'.\"\n      },\n      {\n        \"step\": 6,\n        \"description\": \"After the loop finishes, return the final value of 'sum'.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "entry_point": "get_odd_collatz", "completion": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\nvector<int> odd_numbers;\nwhile (n != 1) {\nif (n % 2 != 0) {\nodd_numbers.push_back(n);\n}\nif (n % 2 == 0) {\nn /= 2;\n} else {\nn = 3 * n + 1;\n}\n}\nodd_numbers.push_back(1);\nsort(odd_numbers.begin(), odd_numbers.end());\nreturn odd_numbers;\n}", "session_history": []}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "entry_point": "valid_date", "completion": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\nif (date.empty()) {\n        return false;if (date.length() != 10) {\n    return false;\n}\n\nif (date[2] != '-' || date[5] != '-') {\n    return false;\n}\n\nfor (int i = 0; i < 10; ++i) {\n    if (i == 2 || i == 5) {\n        continue;\n    }\n    if (!isdigit(date[i])) {\n        return false;\n    }\n}\n\nint month = stoi(date.substr(0, 2));\nint day = stoi(date.substr(3, 2));\nint year = stoi(date.substr(6, 4));\n\nif (month < 1 || month > 12) {\n    return false;\n}\n\nif (day < 1) {\n    return false;\n}\n\n// Check for leap year\nbool is_leap = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n\nif (month == 2) {\n    if (is_leap) {\n        if (day > 29) {\n            return false;\n        }\n    } else {\n        if (day > 28) {\n            return false;\n        }\n    }\n} else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n        return false;\n    }\n} else { // months 1, 3, 5, 7, 8, 10, 12\n    if (day > 31) {\n        return false;\n    }\n}\n\nreturn true;\n\n\n}", "session_history": []}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "entry_point": "split_words", "completion": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\nvector<string> result;\nbool has_whitespace = false;\nfor (char c : txt) {\nif (isspace(c)) {\nhas_whitespace = true;\nbreak;\n}\n}\n\n\nif (has_whitespace) {\n    string current_word;\n    for (char c : txt) {\n        if (isspace(c)) {\n            if (!current_word.empty()) {\n                result.push_back(current_word);\n                current_word.clear();\n            }\n        } else {\n            current_word += c;\n        }\n    }\n    if (!current_word.empty()) {\n        result.push_back(current_word);\n    }\n} else {\n    bool has_comma = false;\n    for (char c : txt) {\n        if (c == ',') {\n            has_comma = true;\n            break;\n        }\n    }\n\n    if (has_comma) {\n        string current_word;\n        for (char c : txt) {\n            if (c == ',') {\n                if (!current_word.empty()) {\n                    result.push_back(current_word);\n                    current_word.clear();\n                }\n            } else {\n                current_word += c;\n            }\n        }\n        if (!current_word.empty()) {\n            result.push_back(current_word);\n        }\n    } else {\n        int odd_order_count = 0;\n        for (char c : txt) {\n            if (islower(c)) {\n                int order = c - 'a';\n                if (order % 2 != 0) {\n                    odd_order_count++;\n                }\n            }\n        }\n        result.push_back(to_string(odd_order_count));\n    }\n}\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine the primary delimiter (whitespace, comma, or none).\",\n      \"If whitespace exists, split the string by whitespace.\",\n      \"Else if commas exist, split the string by commas.\",\n      \"Else (no whitespace or commas), count lowercase letters with odd alphabetical order.\"\n    ],\n    \"high_level_steps\": [\n      \"Check for the presence of whitespace in the input string.\",\n      \"If whitespace is found, use a string splitting mechanism to divide the string into a vector of words based on whitespace.\",\n      \"Else, check for the presence of commas in the input string.\",\n      \"If commas are found, use a string splitting mechanism to divide the string into a vector of words based on commas.\",\n      \"Else (no whitespace or commas), iterate through the string, identify lowercase letters, calculate their alphabetical order (a=0, b=1, ...), and count those with an odd order.\",\n      \"If the count is performed, convert the integer count to a string and return a vector containing that single string.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "entry_point": "is_sorted", "completion": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\nif (lst.size() <= 1) {\nreturn true;\n}\nvector<int> temp = lst;\nsort(temp.begin(), temp.end());\nif (temp != lst) {\nreturn false;\n}\nfor (size_t i = 0; i < lst.size(); ++i) {\nint count = 0;\nfor (int x : lst) {\nif (x == lst[i]) {\ncount++;\n}\n}\nif (count > 2) {\nreturn false;\n}\n}\nreturn true;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle edge cases for empty or single-element vectors.\",\n      \"Check if the vector is sorted in ascending order.\",\n      \"Check for more than one duplicate of the same number.\",\n      \"Combine the results of the sorting and duplicate checks.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a boolean variable `is_ascending_sorted` to true.\",\n      \"Initialize a boolean variable `has_too_many_duplicates` to false.\",\n      \"Iterate through the vector to check for ascending order and count duplicates.\",\n      \"For ascending order, compare each element with the previous one.\",\n      \"For duplicates, use a frequency map (or similar data structure) to count occurrences of each number. If any number's count exceeds 2, set `has_too_many_duplicates` to true.\",\n      \"Return `is_ascending_sorted` AND NOT `has_too_many_duplicates`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "entry_point": "intersection", "completion": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\nint start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2[1];\n\n\nint intersect_start = max(start1, start2);\nint intersect_end = min(end1, end2);\n\nif (intersect_start > intersect_end) {\n    return \"NO\";\n}\n\nint length = intersect_end - intersect_start + 1;\n\nif (length <= 1) {\n    return \"NO\";\n}\n\nfor (int i = 2; i * i <= length; ++i) {\n    if (length % i == 0) {\n        return \"NO\";\n    }\n}\n\nreturn \"YES\";\n\n\n}", "session_history": []}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "entry_point": "prod_signs", "completion": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\nif (arr.empty()) {\n        return -32768;\n    }\n    int prod_of_signs = 1;\n    long long sum_of_magnitudes = 0;\n    bool has_zero = false;\n    for (int num : arr) {\n        if (num == 0) {\n            has_zero = true;\n            break;\n        } else if (num < 0) {\n            prod_of_signs *= -1;\n        }\n        sum_of_magnitudes += abs(num);\n    }\n    if (has_zero) {\n        return 0;\n    } else {\n        return prod_of_signs * sum_of_magnitudes;\n    }\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle the edge case of an empty input vector.\",\n      \"Calculate the product of the signs of all numbers in the vector.\",\n      \"Calculate the sum of the magnitudes of all numbers in the vector.\",\n      \"Multiply the sum of magnitudes by the product of signs.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize 'product_of_signs' to 1 and 'sum_of_magnitudes' to 0.\",\n      \"Check if the input vector 'arr' is empty. If it is, return -32768.\",\n      \"Iterate through each element 'num' in the 'arr' vector:\",\n      \"  If 'num' is 0, set 'product_of_signs' to 0 and break the loop (as the product of signs will be 0).\",\n      \"  Else if 'num' is negative, multiply 'product_of_signs' by -1.\",\n      \"  Add the absolute value of 'num' to 'sum_of_magnitudes'.\",\n      \"Return 'sum_of_magnitudes' multiplied by 'product_of_signs'.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "entry_point": "minPath", "completion": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\nint n = grid.size();\nvector<int> ans(k);\nfor (int i = 0; i < k; ++i) {\nans[i] = n * n + 1; // Initialize with a value larger than any possible grid value\n}\n\n\n// Directions for moving to neighbor cells (up, down, left, right)\nint dr[] = {-1, 1, 0, 0};\nint dc[] = {0, 0, -1, 1};\n\n// Iterate through all possible starting cells\nfor (int r = 0; r < n; ++r) {\n    for (int c = 0; c < n; ++c) {\n        // Use a deque for BFS, storing paths\n        vector<vector<int>> q;\n        q.push_back({grid[r][c]});\n\n        int head = 0;\n        while(head < q.size()){\n            vector<int> current_path = q[head++];\n\n            // If the current path has length k, compare and update the minimum path\n            if (current_path.size() == k) {\n                if (current_path < ans) {\n                    ans = current_path;\n                }\n                continue;\n            }\n\n            // Get the last cell's coordinates to find neighbors\n            int last_val = current_path.back();\n            int last_r = -1, last_c = -1;\n            for(int i = 0; i < n; ++i){\n                for(int j = 0; j < n; ++j){\n                    if(grid[i][j] == last_val){\n                        last_r = i;\n                        last_c = j;\n                        break;\n                    }\n                }\n                if(last_r != -1) break;\n            }\n\n            // Explore neighbors\n            for (int i = 0; i < 4; ++i) {\n                int new_r = last_r + dr[i];\n                int new_c = last_c + dc[i];\n\n                // Check if the new cell is within grid boundaries\n                if (new_r >= 0 && new_r < n && new_c >= 0 && new_c < n) {\n                    vector<int> new_path = current_path;\n                    new_path.push_back(grid[new_r][new_c]);\n                    q.push_back(new_path);\n                }\n            }\n        }\n    }\n}\nreturn ans;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Representing the grid and its values: Determine an efficient way to store the grid and access cell values.\",\n      \"Defining valid moves: Implement a function to determine valid neighbor cells for a given cell (up, down, left, right, staying in place is not a move, a path of length k means visiting k cells).\",\n      \"Generating all possible paths of length k: Develop a method to explore all valid paths of length k starting from any cell.\",\n      \"Lexicographical comparison of paths: Implement a function to compare two paths based on the lexicographical order of their cell values.\",\n      \"Finding the minimum path: Iterate through all generated paths and use the comparison function to find the lexicographically smallest path.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize `min_path_found` as an empty vector (or a path with maximum possible values) to store the current minimum path.\",\n      \"Iterate through each cell in the grid to consider it as a starting point for a path.\",\n      \"For each starting cell, recursively explore all possible paths of length `k`:\",\n      \"  In each recursive step, add the current cell's value to the `current_path`.\",\n      \"  If the `current_path` length equals `k`:\",\n      \"    Compare `current_path` with `min_path_found` lexicographically.\",\n      \"    If `current_path` is lexicographically smaller, update `min_path_found`.\",\n      \"  If the `current_path` length is less than `k`:\",\n      \"    Recursively call the path exploration function for all valid neighbors of the current cell.\",\n      \"  Backtrack: Remove the current cell's value from `current_path` after exploring all paths from it.\",\n      \"Return `min_path_found`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "entry_point": "tri", "completion": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\nvector<int> result(n + 1);\nif (n < 0) {\nreturn {};\n}\nif (n >= 0) {\nresult[0] = 1;\n}\nif (n >= 1) {\nresult[1] = 3;\n}\nif (n >= 2) {\nresult[2] = 1 + (2 / 2); // tri(2) = 2\n}\n\n\n// Since tri(n) for odd n depends on tri(n+1), we need to calculate even terms first, or use memoization with a different approach.\n// Given the example, tri(3) = tri(2) + tri(1) + tri(4), this suggests a recursive approach with memoization or careful iteration.\n// The definition tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1) for odd n is unusual and problematic for a simple iterative fill-forward approach.\n// Let's re-evaluate the problem based on the example:\n// tri(1) = 3\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3 (This means tri(n) for even n might have a pattern. If n is even, tri(n) = 1 + n/2. For n=4, tri(4) = 1 + 4/2 = 3. This matches)\n// tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8\n// So the rule for even n is `tri(n) = 1 + n / 2`.\n// The issue with `tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)` is the `tri(n+1)` term. This means we can't just compute in increasing order.\n\n// Let's use a dynamic programming approach, but we need to resolve the forward dependency for odd numbers.\n// The given examples are crucial:\n// tri(0) is not given, but based on output for tri(3) = {1, 3, 2, 8}, tri(0) = 1.\n// tri(1) = 3 (given)\n// tri(2) = 1 + (2/2) = 2 (derived from rule)\n// tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + (1 + 4/2) = 2 + 3 + 3 = 8 (derived from rule and example)\n\n// We can pre-calculate all even numbers first.\nfor (int i = 0; i <= n; ++i) {\n    if (i % 2 == 0) { // If n is even\n        result[i] = 1 + (i / 2);\n    }\n}\n\n// Now, calculate odd numbers using the pre-calculated even numbers and already computed odd numbers.\n// We need to be careful with the order due to the tri(n+1) dependency.\n// However, if result[n+1] is needed for result[n], this means we need to extend the array or compute on demand.\n// The prompt asks for `first n + 1 numbers`. This implies indices 0 to n.\n// So if we need tri(n+1) to compute tri(n), we need to compute up to index n+1 for the result.\n// The input `n` determines the maximum index.\n\n// Let's clarify the bounds for the problem `tri(n)` given `n`.\n// Example: `tri(3)` means `result` should have `result[0]` to `result[3]`.\n// When calculating `result[3]`, we need `result[4]`. This means `result` needs to be able to store `result[4]`.\n// So the vector size should be `n+2` to accommodate `n+1` as an index.\n\nvector<int> memo(n + 2); // To store values up to n+1\n\n// Base cases\nif (0 <= n + 1) memo[0] = 1;\nif (1 <= n + 1) memo[1] = 3;\n\n// Fill even numbers up to n+1\nfor (int i = 0; i <= n + 1; ++i) {\n    if (i % 2 == 0) {\n        memo[i] = 1 + (i / 2);\n    }\n}\n\n// Fill odd numbers up to n\nfor (int i = 0; i <= n; ++i) {\n    if (i % 2 != 0) { // If i is odd\n        if (i >= 3) { // tri(1) is base case, tri(3) is the first odd one to use the recurrence\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i + 1];\n        }\n    }\n}\n\nvector<int> final_result(n + 1);\nfor (int i = 0; i <= n; ++i) {\n    final_result[i] = memo[i];\n}\nreturn final_result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle base cases for n=0 and n=1 as per the definition.\",\n      \"Implement the recurrence relation for even 'n': tri(n) = 1 + n / 2.\",\n      \"Implement the recurrence relation for odd 'n': tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1). This will require careful handling of tri(n+1) which depends on a future value, implying a need for a dynamic programming approach or memoization to calculate values in order.\",\n      \"Populate a vector with the first n+1 Tribonacci numbers.\",\n      \"Ensure the example tri(3) = {1, 3, 2, 8} is correctly generated by the logic.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a vector, let's call it `tribonacci_sequence`, of size `n + 1` to store the results.\",\n      \"Set `tribonacci_sequence[0]` to 1 (as per the example output for tri(3) which starts with 1, though the recurrence starts at tri(1)=3. This implies tri(0) = 1).\",\n      \"Set `tribonacci_sequence[1]` to 3 (given tri(1) = 3).\",\n      \"Iterate from `i = 2` up to `n` to calculate `tribonacci_sequence[i]`:\",\n      \"  If `i` is even, `tribonacci_sequence[i] = 1 + (i / 2)`.\",\n      \"  If `i` is odd, `tribonacci_sequence[i] = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1]`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "entry_point": "digits", "completion": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\nint product = 1;\n    bool hasOdd = false;\n    string s = to_string(n);\n    for (char c : s) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    if (hasOdd) {\n        return product;\n    } else {\n        return 0;\n    }\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Extract each digit from the input integer.\",\n      \"Determine if a digit is odd or even.\",\n      \"Calculate the product of only the odd digits.\",\n      \"Handle the case where all digits are even (return 0).\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a product variable to 1.\",\n      \"Loop while the input integer is greater than 0:\",\n      \"  Get the last digit of the integer.\",\n      \"  Check if the digit is odd.\",\n      \"  If it's odd, multiply it with the product variable.\",\n      \"  Remove the last digit from the integer.\",\n      \"After the loop, if the product variable is still 1 and the original number had at least one digit (to differentiate from an empty product due to no odd digits vs. input 0), check if any odd digit was found. If no odd digits were found, return 0. Otherwise, return the product.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n", "entry_point": "is_nested", "completion": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\nint open_brackets = 0;\n    int max_depth = 0;\nfor (char c : str) {\n    if (c == '[') {\n        open_brackets++;\n        max_depth = std::max(max_depth, open_brackets);\n    } else if (c == ']') {\n        open_brackets--;\n        if (open_brackets < 0) { // Unbalanced closing bracket\n            open_brackets = 0; // Reset for potential future valid sequences\n        }\n    }\n}\n\n// A valid subsequence with at least one nested bracket means\n// there was a point where the depth was at least 2.\n// Also, there must be at least one pair of matching brackets.\n// An initial check for string length and if any brackets are present is good.\nif (str.length() < 4) return false; // Minimum for nested: [[]]\n\n// We need to find if there's a valid subsequence.\n// A simple way to check for nested is if we ever reach a depth of 2 or more.\n// The `max_depth` variable directly tracks this.\nreturn max_depth >= 2;\n\n\n}", "session_history": []}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "entry_point": "sum_squares", "completion": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\nint sum = 0;\n    for(float x: lst){\n        sum += pow(ceil(x), 2);\n    }\n    return sum;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Iterate through each element of the input vector.\",\n      \"For each element, apply the ceiling function to round it up to the nearest integer.\",\n      \"Square the rounded integer.\",\n      \"Accumulate the squared values.\",\n      \"Return the total sum of squared values.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable `total_sum` to 0.\",\n      \"Loop through each `number` in the input `lst`.\",\n      \"Inside the loop, calculate `rounded_number = ceil(number)`.\",\n      \"Calculate `squared_value = rounded_number * rounded_number`.\",\n      \"Add `squared_value` to `total_sum`.\",\n      \"After the loop, return `total_sum`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "entry_point": "check_if_last_char_is_a_letter", "completion": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\nif (txt.length() == 0) {\n        return false;\n    }\n    char last_char = txt.back();\n    if (isalpha(last_char)) {\n        if (txt.length() == 1) {\n            return true;\n        }\n        if (txt[txt.length() - 2] == ' ') {\n            return true;\n        }\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Handle empty string input: The function should return false if the input string is empty.\",\n      \"Identify the last character: Determine the last character of the non-empty input string.\",\n      \"Check if the last character is alphabetical: Verify if the identified last character is an English alphabet (a-z or A-Z).\",\n      \"Check if the last character is part of a word: Determine if the last character is immediately preceded by a space. This indicates it's not part of a word based on the definition provided (separated by space).\"\n    ],\n    \"high_level_plan\": [\n      \"Function `check_if_last_char_is_a_letter(string txt)`:\",\n      \"1. If `txt` is empty, return `false`.\",\n      \"2. Get the last character of `txt` (let's call it `lastChar`).\",\n      \"3. Check if `lastChar` is an alphabetical character.\",\n      \"4. If `lastChar` is alphabetical, check if it's not part of a word:\",\n      \"   a. If the string has only one character, and that character is alphabetical, return `true` (it's not part of a word as there's no preceding character).\",\n      \"   b. Otherwise, check if the character immediately preceding `lastChar` is a space. If it is, return `true`.\",\n      \"   c. If the preceding character is not a space (or if the string is longer than one character and the last character is alphabetical but directly follows another non-space character), return `false`.\",\n      \"5. If `lastChar` is not an alphabetical character, return `false`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "entry_point": "can_arrange", "completion": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\nfor (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Iterate through the vector from the second element (index 1) to the last element.\",\n      \"For each element, compare it with the element immediately preceding it.\",\n      \"If the current element is not greater than or equal to the preceding element, record its index.\",\n      \"If multiple such elements exist, identify the largest (last encountered) index.\",\n      \"If no such element is found after iterating through the entire vector, return -1.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable, say `largest_invalid_index`, to -1.\",\n      \"Loop through the input vector `arr` starting from index 1 up to `arr.size() - 1`.\",\n      \"Inside the loop, check if `arr[i] < arr[i-1]`.\",\n      \"If the condition is true, update `largest_invalid_index` to the current index `i`.\",\n      \"After the loop completes, return the value of `largest_invalid_index`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "entry_point": "largest_smallest_integers", "completion": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\nint largest_neg = 0;;\nint smallest_pos = 0;\n\n\nbool found_neg = false;\nbool found_pos = false;\n\nfor (int x : lst) {\n    if (x < 0) {\n        if (!found_neg || x > largest_neg) {\n            largest_neg = x;\n            found_neg = true;\n        }\n    } else if (x > 0) {\n        if (!found_pos || x < smallest_pos) {\n            smallest_pos = x;\n            found_pos = true;\n        }\n    }\n}\n\nreturn {largest_neg, smallest_pos};\n\n\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"user_requirement\": \"Create a C++ function `largest_smallest_integers` that takes a vector of integers as input and returns a vector of two integers. The first element of the returned vector should be the largest negative integer found in the input vector. The second element should be the smallest positive integer found in the input vector. If no negative integers are present, the first element of the returned vector should be 0. If no positive integers are present, the second element should be 0.\",\n    \"subproblems\": [\n      \"Iterate through the input vector.\",\n      \"Identify and store all negative integers.\",\n      \"Identify and store all positive integers.\",\n      \"Find the maximum value among the stored negative integers (if any).\",\n      \"Find the minimum value among the stored positive integers (if any).\",\n      \"Construct the result vector: the first element is the maximum negative integer (or 0 if none), and the second element is the minimum positive integer (or 0 if none).\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize two variables: `largest_negative` to 0 and `smallest_positive` to 0.\",\n      \"Create two temporary containers (e.g., vectors or lists) to store negative and positive numbers encountered in the input vector.\",\n      \"Iterate through the input vector. For each number:\",\n      \"  If the number is negative, add it to the negative numbers container.\",\n      \"  If the number is positive, add it to the positive numbers container.\",\n      \"After iterating through the input vector:\",\n      \"  If the negative numbers container is not empty, find the maximum value within it and assign it to `largest_negative`.\",\n      \"  If the positive numbers container is not empty, find the minimum value within it and assign it to `smallest_positive`.\",\n      \"Create a result vector containing `largest_negative` as the first element and `smallest_positive` as the second element.\",\n      \"Return the result vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "entry_point": "compare_one", "completion": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\ndouble val_a, val_b;\n    string str_a, str_b;\n\n\n// Convert 'a' to double\nif (a.type() == typeid(int)) {\n    val_a = boost::any_cast<int>(a);\n    str_a = to_string(boost::any_cast<int>(a));\n} else if (a.type() == typeid(double)) {\n    val_a = boost::any_cast<double>(a);\n    str_a = to_string(boost::any_cast<double>(a));\n} else if (a.type() == typeid(string)) {\n    str_a = boost::any_cast<string>(a);\n    replace(str_a.begin(), str_a.end(), ',', '.');\n    val_a = stod(str_a);\n} else {\n    return boost::any(); // Should not happen based on problem description\n}\n\n// Convert 'b' to double\nif (b.type() == typeid(int)) {\n    val_b = boost::any_cast<int>(b);\n    str_b = to_string(boost::any_cast<int>(b));\n} else if (b.type() == typeid(double)) {\n    val_b = boost::any_cast<double>(b);\n    str_b = to_string(boost::any_cast<double>(b));\n} else if (b.type() == typeid(string)) {\n    str_b = boost::any_cast<string>(b);\n    replace(str_b.begin(), str_b.end(), ',', '.');\n    val_b = stod(str_b);\n} else {\n    return boost::any(); // Should not happen\n}\n\nif (val_a == val_b) {\n    return string(\"None\");\n} else if (val_a > val_b) {\n    return a;\n} else {\n    return b;\n}\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine the types of the input variables (integer, float, or string).\",\n      \"Handle string inputs: Convert strings representing real numbers to a comparable numeric type (e.g., float), accommodating both '.' and ',' as decimal separators.\",\n      \"Compare the two values based on their determined types.\",\n      \"Return the larger value in its original variable type.\",\n      \"Handle the 'equal values' case by returning 'None'.\"\n    ],\n    \"high_level_plan\": [\n      \"**Input Type Analysis:** Implement logic to check the type of `a` and `b`. Use `boost::any_cast` with `typeid` to identify `int`, `double`, or `std::string`.\",\n      \"**Type Conversion & Normalization:**\",\n      \"If either input is a `std::string`:\",\n      \"Create a helper function to convert string representations of numbers to `double`. This function should handle both '.' and ',' as decimal separators.\",\n      \"Apply this conversion to any string inputs.\",\n      \"**Comparison Logic:**\",\n      \"Convert all comparable values to a common numeric type (e.g., `double`) for comparison.\",\n      \"Perform the comparison: `if (val_a > val_b)`, `if (val_b > val_a)`, `else (val_a == val_b)`.\",\n      \"**Result Formulation:**\",\n      \"If `val_a > val_b`, return `a` in its original `boost::any` type.\",\n      \"If `val_b > val_a`, return `b` in its original `boost::any` type.\",\n      \"If `val_a == val_b`, return an empty `boost::any` or a specific indicator that the C++ developer can interpret as 'None' (e.g., `boost::any()`).\"\n    ]\n  }\n}"}}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "entry_point": "is_equal_to_sum_even", "completion": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\nreturn n >= 8 && n % 2 == 0;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Understand the definition of 'positive even numbers'.\",\n      \"Determine the minimum sum of exactly 4 positive even numbers.\",\n      \"Check if the input 'n' is less than this minimum sum.\",\n      \"Consider the properties of the sum of four even numbers (e.g., parity, divisibility by 2 or 4).\",\n      \"Formulate a condition based on these properties that 'n' must satisfy to be representable as the sum of exactly 4 positive even numbers.\"\n    ],\n    \"high_level_plan\": [\n      \"Input: an integer 'n'.\",\n      \"Step 1: Check if 'n' is a positive number. If not, return false.\",\n      \"Step 2: Determine the minimum possible sum of four positive even numbers. Since the smallest positive even number is 2, the minimum sum is 2 + 2 + 2 + 2 = 8.\",\n      \"Step 3: If 'n' is less than 8, it cannot be the sum of exactly 4 positive even numbers. Return false.\",\n      \"Step 4: Check if 'n' is an even number. If 'n' is odd, it cannot be the sum of four even numbers. Return false.\",\n      \"Step 5: If 'n' is greater than or equal to 8 and is even, then it can always be written as the sum of exactly 4 positive even numbers. For example, if n is 8, 2+2+2+2. If n is 10, 2+2+2+4. This is because any even number greater than or equal to 8 can be expressed as 2k (where k >= 4). We can then always find four positive even numbers that sum to 2k. Return true.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "entry_point": "special_factorial", "completion": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\nlong long result = 1;\n    long long current_factorial = 1;\n    for (int i = 1; i <= n; ++i) {\n        current_factorial *= i;\n        result *= current_factorial;\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Calculate the factorial of a single number (n!).\",\n      \"Iterate from n down to 1.\",\n      \"In each iteration, calculate the factorial of the current number (i!).\",\n      \"Multiply the current number's factorial by the cumulative product of factorials.\",\n      \"Handle the base case for n=1 (1! = 1).\"\n    ],\n    \"high_level_plan\": [\n      \"Define a helper function to calculate the factorial of a given integer.\",\n      \"Initialize a `brazilian_factorial_result` variable to 1.\",\n      \"Loop from `n` down to 1 (inclusive):\",\n      \"    Calculate the factorial of the current loop variable `i` using the helper function.\",\n      \"    Multiply `brazilian_factorial_result` by the calculated factorial of `i`.\",\n      \"Return `brazilian_factorial_result`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "entry_point": "fix_spaces", "completion": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\nstring result = \"\";\n    int consecutive_spaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutive_spaces++;\n        } else {\n            if (consecutive_spaces > 2) {\n                result += '-';\n            } else {\n                for (int i = 0; i < consecutive_spaces; ++i) {\n                    result += '_';\n                }\n            }\n            result += c;\n            consecutive_spaces = 0;\n        }\n    }\n    if (consecutive_spaces > 2) {\n        result += '-';\n    } else {\n        for (int i = 0; i < consecutive_spaces; ++i) {\n            result += '_';\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Iterate through the input string character by character.\",\n      \"Identify single spaces and replace them with underscores.\",\n      \"Identify sequences of two or fewer consecutive spaces and replace them with underscores.\",\n      \"Identify sequences of more than two consecutive spaces.\",\n      \"Replace sequences of more than two consecutive spaces with a hyphen.\",\n      \"Construct the modified string.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty result string.\",\n      \"Initialize a counter for consecutive spaces.\",\n      \"Loop through the input string from beginning to end:\",\n      \"  If the current character is a space:\",\n      \"    Increment the consecutive space counter.\",\n      \"  Else (current character is not a space):\",\n      \"    If the consecutive space counter is greater than 2:\",\n      \"      Append a hyphen to the result string.\",\n      \"    Else if the consecutive space counter is greater than 0 (meaning 1 or 2 spaces):\",\n      \"      Append 'consecutive_space_counter' number of underscores to the result string.\",\n      \"    Append the current character to the result string.\",\n      \"    Reset the consecutive space counter to 0.\",\n      \"After the loop, handle any trailing spaces:\",\n      \"  If the consecutive space counter is greater than 2:\",\n      \"    Append a hyphen to the result string.\",\n      \"  Else if the consecutive space counter is greater than 0:\",\n      \"    Append 'consecutive_space_counter' number of underscores to the result string.\",\n      \"Return the result string.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "entry_point": "file_name_check", "completion": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\nint digit_count = 0;\n    int dot_count = 0;\n    int dot_position;\n\n\nfor (int i = 0; i < file_name.length(); ++i) {\n    if (isdigit(file_name[i])) {\n        digit_count++;\n    }\n    if (file_name[i] == '.') {\n        dot_count++;\n        dot_position = i;\n    }\n}\n\nif (digit_count > 3) {\n    return \"No\";\n}\n\nif (dot_count != 1) {\n    return \"No\";\n}\n\nif (dot_position == -1 || dot_position == 0) {\n    return \"No\";\n}\n\nstring before_dot = file_name.substr(0, dot_position);\nif (before_dot.empty() || !isalpha(before_dot[0])) {\n    return \"No\";\n}\n\nstring after_dot = file_name.substr(dot_position + 1);\nif (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n    return \"No\";\n}\n\nreturn \"Yes\";\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Count the number of digits in the file name and ensure it's not more than three.\",\n      \"Count the number of dots in the file name and ensure it's exactly one.\",\n      \"If a dot exists, split the file name into two substrings: before the dot and after the dot.\",\n      \"Validate the substring before the dot: ensure it's not empty and starts with a latin alphabet letter.\",\n      \"Validate the substring after the dot: ensure it's one of 'txt', 'exe', or 'dll'.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize 'Yes' as the default return value.\",\n      \"Iterate through the file name to count digits and dots.\",\n      \"If digit count > 3 or dot count != 1, return 'No'.\",\n      \"Find the index of the dot.\",\n      \"Extract the substring before the dot (prefix) and after the dot (suffix).\",\n      \"Check if prefix is empty or if its first character is not a letter; if so, return 'No'.\",\n      \"Check if suffix is not 'txt', 'exe', or 'dll'; if so, return 'No'.\",\n      \"If all conditions pass, return 'Yes'.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "entry_point": "sum_squares", "completion": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\nlong long total_sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        total_sum += lst[i];\n    }\n    return total_sum;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Iterate through the input vector `lst` using its indices.\",\n      \"For each element, check if its index is a multiple of 3. If so, square the element.\",\n      \"If the index is not a multiple of 3, then check if it's a multiple of 4. If so, cube the element.\",\n      \"Elements whose indices are not multiples of 3 or 4 should remain unchanged.\",\n      \"Calculate the sum of all entries in the modified vector.\",\n      \"Handle the edge case of an empty input vector.\"\n    ],\n    \"high_level_steps\": [\n      \"Initialize a sum variable to 0.\",\n      \"Loop through the `lst` vector from index 0 to `lst.size() - 1`.\",\n      \"Inside the loop, use conditional statements (if-else if) to check the index divisibility rules.\",\n      \"Apply the squaring or cubing operation in-place to the vector element.\",\n      \"Add the (potentially modified) element's value to the sum.\",\n      \"After the loop, return the calculated sum.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "entry_point": "words_in_sentence", "completion": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\nbool is_prime(int num) {\n    if (num <= 1)\n        return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}_word = \"\";\nfor (char c : sentence) {\n    if (c == ' ') {\n        if (current_word.length() > 0 && is_prime(current_word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += current_word;\n        }\n        current_word = \"\";\n    } else {\n        current_word += c;\n    }\n}\n// Add the last word if it's prime\nif (current_word.length() > 0 && is_prime(current_word.length())) {\n    if (!result.empty()) {\n        result += \" \";\n    }\n    result += current_word;\n}\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n", "entry_point": "simplify", "completion": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\nsize_t x_slash_pos = x.find('/');\n    int x_numerator = stoi(x.substr(0, x_slash_pos));\n    int x_denominator = stoi(x.substr(x_slash_pos + 1));;\n\n\nsize_t n_slash_pos = n.find('/');\nint n_numerator = stoi(n.substr(0, n_slash_pos));\nint n_denominator = stoi(n.substr(n_slash_pos + 1));\n\n// Multiply the fractions: (x_numerator / x_denominator) * (n_numerator / n_denominator)\n// Result numerator = x_numerator * n_numerator\n// Result denominator = x_denominator * n_denominator\n\nlong long result_numerator = (long long)x_numerator * n_numerator;\nlong long result_denominator = (long long)x_denominator * n_denominator;\n\n// A fraction is a whole number if its numerator is perfectly divisible by its denominator.\nreturn (result_numerator % result_denominator == 0);\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Parse the input strings 'x' and 'n' into their respective numerator and denominator components as integers. This will involve finding the '/' character and converting the substrings before and after it to integers.\",\n      \"Multiply the numerators of 'x' and 'n' to get the numerator of the product.\",\n      \"Multiply the denominators of 'x' and 'n' to get the denominator of the product.\",\n      \"Simplify the resulting fraction (product_numerator / product_denominator) by finding the greatest common divisor (GCD) of the numerator and denominator and dividing both by the GCD.\",\n      \"Check if the simplified denominator is 1. If it is, the product is a whole number; otherwise, it is not.\"\n    ],\n    \"high_level_steps\": [\n      \"Define a helper function to parse a fraction string into two integers (numerator, denominator).\",\n      \"Define a helper function to calculate the greatest common divisor (GCD) of two integers.\",\n      \"Inside the `simplify` function:\",\n      \"   Call the parsing helper function for 'x' to get (x_num, x_den).\",\n      \"   Call the parsing helper function for 'n' to get (n_num, n_den).\",\n      \"   Calculate `product_numerator = x_num * n_num`.\",\n      \"   Calculate `product_denominator = x_den * n_den`.\",\n      \"   Calculate `common_divisor = GCD(product_numerator, product_denominator)`.\",\n      \"   Calculate `simplified_denominator = product_denominator / common_divisor`.\",\n      \"   Return `true` if `simplified_denominator == 1`, else return `false`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "entry_point": "order_by_points", "completion": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\nstruct Element {\n        int value;\n        int sum_digits;\n        int original_index;digits = [](int n) {\n    int sum = 0;\n    n = abs(n); // Handle negative numbers\n    string s = to_string(n);\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n};\n\nvector<Element> elements;\nfor (int i = 0; i < nums.size(); ++i) {\n    elements.push_back({nums[i], get_sum_digits(nums[i]), i});\n}\n\nsort(elements.begin(), elements.end(), [](const Element& a, const Element& b) {\n    if (a.sum_digits != b.sum_digits) {\n        return a.sum_digits < b.sum_digits;\n    }\n    return a.original_index < b.original_index;\n});\n\nvector<int> result;\nfor (const auto& elem : elements) {\n    result.push_back(elem.value);\n}\n\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "entry_point": "specialFilter", "completion": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\nint count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string s = to_string(num);\n            if ((s[0] - '0') % 2 != 0 && (s.back() - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "entry_point": "get_max_triples", "completion": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\nlong long count[3] = {0, 0, 0}; // count[0] for values % 3 == 0, etc.\n\n\nfor (int i = 1; i <= n; ++i) {\n    long long val = (long long)i * i - i + 1;\n    count[val % 3]++;\n}\n\nlong long result = 0;\n\n// Case 1: (0, 0, 0)\n// Choose 3 distinct elements from count[0]\nresult += count[0] * (count[0] - 1) * (count[0] - 2) / 6;\n\n// Case 2: (1, 1, 1)\n// Choose 3 distinct elements from count[1]\nresult += count[1] * (count[1] - 1) * (count[1] - 2) / 6;\n\n// Case 3: (2, 2, 2)\n// Choose 3 distinct elements from count[2]\nresult += count[2] * (count[2] - 1) * (count[2] - 2) / 6;\n\n// Case 4: (0, 1, 2)\n// Choose 1 from count[0], 1 from count[1], 1 from count[2]\nresult += count[0] * count[1] * count[2];\n\nreturn result;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Generate the integer vector 'a' of length 'n' where a[i] = i*i - i + 1 for 1 <= i <= n.\",\n      \"Iterate through all possible unique triples (a[i], a[j], a[k]) such that i < j < k.\",\n      \"For each triple, calculate the sum a[i] + a[j] + a[k].\",\n      \"Check if the sum is a multiple of 3.\",\n      \"Count the number of triples that satisfy the condition.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty vector 'a'.\",\n      \"Loop from 1 to n (inclusive) to populate vector 'a' using the formula a[i] = i*i - i + 1.\",\n      \"Initialize a counter for valid triples to 0.\",\n      \"Implement three nested loops to iterate through all combinations of i, j, and k such that 0 <= i < j < k < n (using 0-based indexing for the vector).\",\n      \"Inside the innermost loop, calculate the sum of a[i], a[j], and a[k].\",\n      \"Use the modulo operator (%) to check if the sum is divisible by 3. If (sum % 3 == 0), increment the counter.\",\n      \"Return the final count.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "entry_point": "bf", "completion": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\nvector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n\nint index1 = -1;\nint index2 = -1;\n\nfor (int i = 0; i < planets.size(); ++i) {\n    if (planets[i] == planet1) {\n        index1 = i;\n    }\n    if (planets[i] == planet2) {\n        index2 = i;\n    }\n}\n\nif (index1 == -1 || index2 == -1) {\n    return {};\n}\n\nvector<string> result;\nif (index1 < index2) {\n    for (int i = index1 + 1; i < index2; ++i) {\n        result.push_back(planets[i]);\n    }\n} else {\n    for (int i = index2 + 1; i < index1; ++i) {\n        result.push_back(planets[i]);\n    }\n}\nreturn result;\n\n\n}", "session_history": []}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "entry_point": "sorted_list_sum", "completion": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n// Remove strings with odd lengths\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0;nd());\n\n\n// Sort the remaining strings\nsort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n    if (a.length() != b.length()) {\n        return a.length() < b.length(); // Sort by length in ascending order\n    }\n    return a < b; // If lengths are equal, sort alphabetically\n});\n\nreturn lst;\n\n\n}", "session_history": []}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "entry_point": "x_or_y", "completion": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\nint i,m=0,flag=0;\n    m=n/2;\n    for(i=2;i<=m;i++){\n        if(n%i==0){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n        return x;\n    else\n        return y;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Determine if a given integer 'n' is a prime number.\",\n      \"Based on the primality of 'n', return either 'x' or 'y'.\"\n    ],\n    \"high_level_plan\": [\n      \"Create a function `is_prime(int num)` that returns true if `num` is prime and false otherwise.\",\n      \"In the `x_or_y` function:\",\n      \"Call `is_prime(n)`.\",\n      \"If `is_prime(n)` returns true, return `x`.\",\n      \"Else (if `is_prime(n)` returns false), return `y`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n", "entry_point": "double_the_difference", "completion": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\nlong long total_sum = 0;\n    for (float num : lst) {\n        // Check if the number is a positive odd integer\n        // We can check if it's an integer by comparing num with its integer cast\n        if (num > 0 && fmod(num, 1.0) == 0 && (long long)num % 2 != 0) {\n            total_sum += (long long)num * (long long)num;\n        }\n    }\n    return total_sum;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Handle empty input vector.\",\n      \"Iterate through the input vector.\",\n      \"Filter out non-integer numbers (e.g., numbers with fractional parts).\",\n      \"Filter out negative numbers.\",\n      \"Check if the remaining numbers are odd.\",\n      \"Calculate the square of each odd number.\",\n      \"Sum the squares of the odd numbers.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a sum variable to 0.\",\n      \"Check if the input vector `lst` is empty. If it is, return 0.\",\n      \"Loop through each element `num` in the `lst` vector.\",\n      \"Inside the loop, perform checks: \",\n      \"   a. Check if `num` is an integer (e.g., `num == floor(num)`).\",\n      \"   b. Check if `num` is non-negative (`num >= 0`).\",\n      \"   c. If both conditions are met, check if `num` is odd (`(long long)num % 2 != 0`).\",\n      \"   d. If `num` is an odd non-negative integer, calculate its square (`num * num`) and add it to the sum.\",\n      \"Return the final sum.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "entry_point": "compare", "completion": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\nvector<int> result;\nfor (int i = 0; i < game.size(); ++i) {\nif (game[i] == guess[i]) {\nresult.push_back(0);\n} else {\nresult.push_back(abs(game[i] - guess[i]));\n}\n}\nreturn result;\n}", "session_history": []}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "entry_point": "Strongest_Extension", "completion": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\nint max_strength = -1e9;\n    string strongest_extension_name = \"\";\n    for (string extension : extensions) {\n        int cap = 0;\n        int sm = 0;\n        for (char c : extension) {\n            if (c >= 'A' && c <= 'Z')\n                cap++;\n            else if (c >= 'a' && c <= 'z')\n                sm++;\n        }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension_name = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n}", "session_history": []}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n", "entry_point": "cycpattern_check", "completion": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\nint n = a.length();\n    int m = b.length();\n    if (m == 0) return true;\n    if (n == 0) return false; b_doubled = b + b;\n\nfor (int i = 0; i < m; ++i) {\n    string rotation = b_doubled.substr(i, m);\n    if (a.find(rotation) != string::npos) {\n        return true;\n    }\n}\nreturn false;\n\n\n}", "session_history": []}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "entry_point": "even_odd_count", "completion": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\nvector<int> counts = {0, 0}; // {even_count, odd_count}\nif (num == 0) {\ncounts[0] = 1; // 0 is considered an even digit\nreturn counts;\n}\nnum = abs(num); // Handle negative numbers by taking absolute value\n\n\nwhile (num > 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n        counts[0]++; // Increment even count\n    } else {\n        counts[1]++; // Increment odd count\n    }\n    num /= 10;\n}\nreturn counts;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"goal\": \"Implement a C++ function `even_odd_count` that takes an integer as input and returns a vector containing the count of even and odd digits in the integer.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Handle the sign of the input integer.\",\n        \"details\": \"Determine if the input number is negative. The sign does not affect the parity of the digits, so we should work with the absolute value of the number for digit analysis.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Iterate through the digits of the integer.\",\n        \"details\": \"Extract each digit of the integer. This can be achieved by repeatedly taking the modulo 10 of the number to get the last digit and then dividing the number by 10 to remove the last digit. Continue this process until the number becomes 0.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Determine if a digit is even or odd.\",\n        \"details\": \"For each extracted digit, check if it is divisible by 2. If the remainder of the division by 2 is 0, the digit is even; otherwise, it is odd.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Count the number of even and odd digits.\",\n        \"details\": \"Maintain two counters, one for even digits and one for odd digits. Increment the respective counter based on the parity of each extracted digit.\"\n      },\n      {\n        \"id\": 5,\n        \"description\": \"Return the counts in a vector.\",\n        \"details\": \"Create a `std::vector<int>` of size 2. Store the count of even digits at index 0 and the count of odd digits at index 1. Return this vector.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"1. Define a C++ function `even_odd_count` that accepts an integer `num` as input and returns a `std::vector<int>`.\",\n      \"2. Initialize two integer variables, `even_count` and `odd_count`, to 0.\",\n      \"3. Take the absolute value of the input `num` to handle negative numbers correctly.\",\n      \"4. Use a loop (e.g., `while` loop) that continues as long as the absolute value of `num` is greater than 0.\",\n      \"5. Inside the loop:\",\n      \"   a. Extract the last digit of `num` using the modulo operator (`% 10`).\",\n      \"   b. Check if the extracted digit is even or odd using the modulo operator (`% 2`).\",\n      \"   c. If the digit is even, increment `even_count`.\",\n      \"   d. If the digit is odd, increment `odd_count`.\",\n      \"   e. Remove the last digit from `num` by integer division by 10.\",\n      \"6. After the loop finishes, create a `std::vector<int>`.\",\n      \"7. Add `even_count` as the first element of the vector (index 0).\",\n      \"8. Add `odd_count` as the second element of the vector (index 1).\",\n      \"9. Return the created vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "entry_point": "int_to_mini_roman", "completion": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\nvector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\n        {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Define the mapping for Roman numerals: Create a data structure (e.g., an array of structs or pairs) that maps integer values to their corresponding Roman numeral characters/strings. This should include values like 1 (I), 4 (IV), 5 (V), 9 (IX), 10 (X), 40 (XL), 50 (L), 90 (XC), 100 (C), 400 (CD), 500 (D), 900 (CM), and 1000 (M), ordered in descending order of their integer values.\",\n      \"Implement the conversion logic: Develop an algorithm that iteratively subtracts the largest possible Roman numeral value from the input integer until the integer becomes zero, appending the corresponding Roman numeral character/string to a result string.\",\n      \"Handle lowercase conversion: Ensure the final Roman numeral string is converted to lowercase before returning.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize an empty string `roman_numeral_string` to store the result.\",\n      \"Define a data structure (e.g., `vector<pair<int, string>>`) containing Roman numeral mappings in descending order of integer values.\",\n      \"Iterate through the Roman numeral mappings:\",\n      \"   For each mapping, while the input `number` is greater than or equal to the current mapping's integer value:\",\n      \"      Subtract the mapping's integer value from `number`.\",\n      \"      Append the mapping's Roman numeral string to `roman_numeral_string`.\",\n      \"Convert `roman_numeral_string` to lowercase.\",\n      \"Return `roman_numeral_string`.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "entry_point": "right_angle_triangle", "completion": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\nfloat sides[3] = {a, b, c};\n    // Sort the sides in ascending order\n    for (int i = 0; i < 2; ++i) {\n        for (int j = i + 1; j < 3; ++j) {\n            if (sides[i] > sides[j]) {\n                float temp = sides[i];\n                sides[i] = sides[j];\n                sides[j] = temp;\n            }\n        }\n    }\n    // Check if it's a valid triangle (sum of two sides > third side)\n    if (sides[0] + sides[1] <= sides[2]) {\n        return false;\n    }\n    // Check Pythagorean theorem\n    // Using a small epsilon for floating point comparison to avoid precision issues\n    return fabs(sides[0] * sides[0] + sides[1] * sides[1] - sides[2] * sides[2]) < 0.0001;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Identify the core mathematical property of a right-angled triangle.\",\n      \"Determine how to handle different input orderings of side lengths (i.e., which side is the hypotenuse).\",\n      \"Consider potential edge cases or invalid triangle inputs (e.g., non-positive lengths, lengths that cannot form a triangle).\"\n    ],\n    \"high_level_plan\": [\n      \"Receive three floating-point numbers as input, representing the lengths of the triangle's sides.\",\n      \"Sort the three side lengths in ascending order to easily identify the potential hypotenuse (the longest side).\",\n      \"Apply the Pythagorean theorem ($a^2 + b^2 = c^2$) to the sorted side lengths, where 'c' is the longest side.\",\n      \"Return 'true' if the squared sum of the two shorter sides is approximately equal to the squared longest side (considering floating-point precision issues).\",\n      \"Return 'false' otherwise.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "entry_point": "find_max", "completion": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\nstring max_word = \"\";\n    int max_unique_chars= -1;\n\n\nfor (const string& word : words) {\n    // Count unique characters in the current word\n    vector<bool> seen(256, false); // Assuming ASCII characters\n    int current_unique_chars = 0;\n    for (char c : word) {\n        if (!seen[static_cast<unsigned char>(c)]) {\n            seen[static_cast<unsigned char>(c)] = true;\n            current_unique_chars++;\n        }\n    }\n\n    // Compare with the current maximum\n    if (current_unique_chars > max_unique_chars) {\n        max_unique_chars = current_unique_chars;\n        max_word = word;\n    } else if (current_unique_chars == max_unique_chars) {\n        // If unique character counts are equal, compare lexicographically\n        if (max_word == \"\" || word < max_word) {\n            max_word = word;\n        }\n    }\n}\nreturn max_word;\n\n\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      \"Create a helper function to calculate the number of unique characters in a given string.\",\n      \"Iterate through the vector of strings to find the string with the maximum number of unique characters.\",\n      \"Handle the tie-breaking condition: if multiple strings have the same maximum number of unique characters, prioritize the one that comes first in lexicographical order.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize variables to store the maximum unique character count found so far and the corresponding string.\",\n      \"For each string in the input vector:\",\n      \"  Calculate its unique character count using the helper function.\",\n      \"  Compare this count with the current maximum unique character count:\",\n      \"    If it's greater, update the maximum count and the result string.\",\n      \"    If it's equal, compare the current string with the result string lexicographically and update if the current string comes first.\",\n      \"Return the final result string.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "entry_point": "eat", "completion": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\nvector<int> result;\nif (need <= remaining) {\nresult.push_back(number + need);\nresult.push_back(remaining - need);\n} else {\nresult.push_back(number + remaining);\nresult.push_back(0);\n}\nreturn result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"id\": \"subproblem_1\",\n        \"description\": \"Calculate the total number of carrots eaten after the meal.\",\n        \"details\": \"This involves adding the 'number' of carrots already eaten to the carrots eaten during the current meal. The carrots eaten during the current meal will be either 'need' or 'remaining', whichever is smaller.\"\n      },\n      {\n        \"id\": \"subproblem_2\",\n        \"description\": \"Calculate the number of carrots left after the meal.\",\n        \"details\": \"This involves subtracting the carrots eaten during the current meal from the 'remaining' carrots.\"\n      },\n      {\n        \"id\": \"subproblem_3\",\n        \"description\": \"Handle the case where 'need' is greater than 'remaining'.\",\n        \"details\": \"If the rabbit needs more carrots than are available, it eats all 'remaining' carrots, and the 'number of carrots left' should be 0.\"\n      },\n      {\n        \"id\": \"subproblem_4\",\n        \"description\": \"Return a vector containing the calculated total eaten carrots and remaining carrots.\",\n        \"details\": \"The function should return a `std::vector<int>` with two elements: {total_eaten_carrots, carrots_left}.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Determine the actual number of carrots the rabbit will eat in this meal (let's call this 'eaten_this_meal'). This is the minimum of 'need' and 'remaining'.\",\n      \"Calculate the 'total_eaten_carrots' by adding 'number' and 'eaten_this_meal'.\",\n      \"Calculate the 'carrots_left' by subtracting 'eaten_this_meal' from 'remaining'.\",\n      \"Create a `std::vector<int>` and add 'total_eaten_carrots' and 'carrots_left' to it.\",\n      \"Return the created vector.\"\n    ]\n  }\n}"}}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "entry_point": "do_algebra", "completion": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\nlong long result = operand[0];\n    for (size_t i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\") {\n            result += operand[i+1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i+1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i+1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i+1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i+1]);\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"id\": \"subproblem_1\",\n        \"description\": \"Parse the input operators and operands into a calculable expression, respecting operator precedence.\"\n      },\n      {\n        \"id\": \"subproblem_2\",\n        \"description\": \"Implement the evaluation logic for the algebraic expression, handling the defined operators: Addition, Subtraction, Multiplication, Floor Division, and Exponentiation.\"\n      },\n      {\n        \"id\": \"subproblem_3\",\n        \"description\": \"Handle the order of operations (precedence) correctly (Exponentiation -> Multiplication/Floor Division -> Addition/Subtraction).\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"description\": \"Convert the infix expression (operators and operands) into a form suitable for evaluation, such as postfix (Reverse Polish Notation) or an abstract syntax tree. This simplifies handling operator precedence.\"\n      },\n      {\n        \"step\": 2,\n        \"description\": \"Iterate through the converted expression (e.g., postfix notation). If an operand is encountered, push it onto a stack. If an operator is encountered, pop the required number of operands from the stack, perform the operation, and push the result back onto the stack.\"\n      },\n      {\n        \"step\": 3,\n        \"description\": \"The final result will be the single value remaining on the stack after processing the entire expression.\"\n      },\n      {\n        \"step\": 4,\n        \"description\": \"Consider edge cases and constraints, such as empty input vectors (though the requirement states minimum lengths), and ensure proper handling of integer division.\"\n      }\n    ]\n  }\n}"}}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "entry_point": "solve", "completion": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\nbool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        } i < s.length(); ++i) {\n        if (islower(s[i])) {\n            s[i] = toupper(s[i]);\n        } else if (isupper(s[i])) {\n            s[i] = tolower(s[i]);\n        }\n    }\n} else {\n    reverse(s.begin(), s.end());\n}\nreturn s;\n\n\n}", "session_history": []}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "entry_point": "string_to_md5", "completion": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\nif (text.empty()) {\n        return \"\n\n\nunsigned char digest[MD5_DIGEST_LENGTH];\nMD5((unsigned char*)text.c_str(), text.length(), digest);\n\nchar mdString[33];\nfor (int i = 0; i < 16; i++) {\n    sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n}\nmdString[32] = '0';\n\nreturn string(mdString);\n\n\n}", "session_history": []}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "entry_point": "generate_integers", "completion": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\nvector<int> result;\nint start = min(a, b);\nint end = max(a, b);\n\n\nfor (int i = start; i <= end; ++i) {\n    if (i % 2 == 0) {\n        result.push_back(i);\n    }\n}\nreturn result;\n\n\n}", "session_history": []}
