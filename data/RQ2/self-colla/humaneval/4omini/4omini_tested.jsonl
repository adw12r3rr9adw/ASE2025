{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "entry_point": "has_close_elements", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    sort(numbers.begin(), numbers.end());\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] - numbers[i - 1] < threshold) {\n            return true;\n        }\n    }\n    return false;\n}", "session_history": {"plan": "{\n  \"decomposition\": [\n    \"Parse the input vector of floating-point numbers.\",\n    \"Iterate through each pair of numbers in the vector.\",\n    \"Calculate the absolute difference between each pair.\",\n    \"Compare the difference to the given threshold.\",\n    \"Return true if any pair's difference is less than the threshold; otherwise, return false.\"\n  ],\n  \"high_level_plan\": [\n    \"Receive the vector of numbers and the threshold value as input parameters.\",\n    \"Use nested loops to examine all unique pairs of numbers in the vector.\",\n    \"For each pair, compute the absolute difference.\",\n    \"Check if the difference is less than the threshold.\",\n    \"If such a pair is found, immediately return true.\",\n    \"If no such pair exists after checking all pairs, return false.\"\n  ]\n}"}}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "entry_point": "separate_paren_groups", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string current;\n    int balance = 0;\n\n    for (char c : paren_string) {\n        if (c == ' ') continue;\n        current += c;\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n        }\n        if (balance == 0 && !current.empty()) {\n            result.push_back(current);\n            current.clear();\n        }\n    }\n\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Remove all spaces from the input string to simplify processing.\",\n    \"Parse the cleaned string character by character to identify balanced groups of parentheses.\",\n    \"Track the nesting level using a counter: increment on '(' and decrement on ')'.\",\n    \"Detect when a balanced group is completed (nesting level returns to zero).\",\n    \"Extract each balanced group substring and store it in a result vector.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty vector to store the separated groups.\",\n    \"Remove all spaces from the input string.\",\n    \"Initialize an empty temporary string to build the current group and a counter for nesting level.\",\n    \"Iterate over each character in the cleaned string:\",\n    \"  - Append the character to the temporary string.\",\n    \"  - If the character is '(', increment the nesting counter.\",\n    \"  - If the character is ')', decrement the nesting counter.\",\n    \"  - When the nesting counter reaches zero, it means a balanced group is completed:\",\n    \"    - Add the temporary string to the result vector.\",\n    \"    - Reset the temporary string for the next group.\",\n    \"Return the vector containing all separated balanced groups.\"\n  ]\n}\n```"}}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "entry_point": "truncate_number", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number - floor(number);\n}", "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Receive and validate the input number to ensure it is a positive floating-point value.\",\n    \"Determine the integer part of the number by truncating or flooring the value.\",\n    \"Calculate the decimal part by subtracting the integer part from the original number.\",\n    \"Return or output the decimal part, ensuring the format is correct (e.g., float).\"\n  ],\n  \"high_level_plan\": [\n    \"Start the program and prompt the user for a positive floating-point number.\",\n    \"Read and validate the input to ensure it is a positive float.\",\n    \"Use a mathematical function (e.g., floor) to find the integer part of the number.\",\n    \"Subtract the integer part from the original number to obtain the decimal part.\",\n    \"Return or display the decimal part as the output.\"\n  ]\n}"}}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "entry_point": "below_zero", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Initialize an integer variable to keep track of the current account balance starting at zero.\",\n    \"Iterate through each operation in the input vector (which can be positive for deposits or negative for withdrawals).\",\n    \"Update the balance by adding the current operation value.\",\n    \"Check if the balance falls below zero after each update.\",\n    \"If balance is below zero at any point, return true immediately.\",\n    \"If the iteration completes without the balance falling below zero, return false.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function below_zero that takes a vector of integers representing operations.\",\n    \"Initialize a balance variable to zero.\",\n    \"Loop through each operation in the vector:\",\n    \"  - Add the operation value to balance.\",\n    \"  - Check if balance < 0; if yes, return true.\",\n    \"After the loop ends, return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "entry_point": "mean_absolute_deviation", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0.0;\n    float mean = 0.0;\n    int n = numbers.size();\n    \n    for (float num : numbers)\n        sum += num;\n    \n    mean = sum / n;\n    sum = 0.0;\n    \n    for (float num : numbers)\n        sum += fabs(num - mean);\n    \n    return sum / n;\n}", "session_history": {}}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "entry_point": "intersperse", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Handle the case when the input vector is empty.\",\n    \"Iterate through the input vector elements.\",\n    \"Insert the delimeter between every two consecutive elements.\",\n    \"Construct and return the resulting vector with interspersed delimeters.\"\n  ],\n  \"high_level_plan\": [\n    \"Check if the input vector is empty; if yes, return an empty vector immediately.\",\n    \"Create a new vector to store the result.\",\n    \"Loop through the input vector elements except the last one:\",\n    \"  - Append the current element to the result vector.\",\n    \"  - Append the delimeter to the result vector.\",\n    \"After the loop, append the last element of the input vector to the result vector.\",\n    \"Return the result vector.\"\n  ]\n}\n```"}}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "entry_point": "parse_nested_parens", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    \n    while (ss >> group) {\n        int max_depth = 0, current_depth = 0;\n        \n        for (char ch : group) {\n            if (ch == '(') {\n                current_depth++;\n                max_depth = max(max_depth, current_depth);\n            } else if (ch == ')') {\n                current_depth--;\n            }\n        }\n        \n        result.push_back(max_depth);\n    }\n    \n    return result;\n}", "session_history": {"plan": "{\n  \"decomposition\": [\n    \"Parse the input string to separate multiple groups of parentheses based on spaces.\",\n    \"For each group, analyze the sequence of parentheses to determine the maximum nesting depth.\",\n    \"Implement a method to iterate through each character in the group, tracking current nesting level and updating maximum depth accordingly.\",\n    \"Collect the maximum nesting depth for each group into a result set or vector.\",\n    \"Return the collection of maximum depths corresponding to each input group.\"\n  ],\n  \"high_level_plan\": [\n    \"Receive the input string containing multiple groups of parentheses.\",\n    \"Split the input string into individual groups based on spaces.\",\n    \"For each group:\",\n    \"  Initialize variables to track current nesting level and maximum nesting depth.\",\n    \"  Iterate through each character in the group:\",\n    \"    If the character is '(', increment current nesting level and update maximum if needed.\",\n    \"    If the character is ')', decrement current nesting level.\",\n    \"  Store the maximum nesting depth found for the group.\",\n    \"Collect all maximum depths into a result container.\",\n    \"Return or output the collection of maximum depths.\"\n  ]\n}"}}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "entry_point": "filter_by_substring", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}", "session_history": {}}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "entry_point": "sum_product", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for (int number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    \n    return {sum, product};\n}", "session_history": {"plan": "{\n  \"decomposition\": [\n    \"Handle the case when the input vector is empty: return (0, 1).\",\n    \"Iterate through each integer in the input vector.\",\n    \"Accumulate the sum of all integers.\",\n    \"Accumulate the product of all integers.\",\n    \"Return a pair or tuple containing the total sum and product.\"\n  ],\n  \"high_level_plan\": [\n    \"Start the function by checking if the input vector is empty; if so, return (0, 1).\",\n    \"Initialize variables for sum (e.g., sum = 0) and product (e.g., product = 1).\",\n    \"Loop through each element in the vector:\",\n    \"  - Add the current element to the sum.\",\n    \"  - Multiply the current element with the product.\",\n    \"After completing the loop, return the pair (sum, product).\"\n  ]\n}"}}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "entry_point": "rolling_max", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int current_max = INT_MIN;\n    for (int number : numbers) {\n        current_max = max(current_max, number);\n        result.push_back(current_max);\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Iterate through the input vector of integers sequentially.\",\n    \"Keep track of the maximum element encountered so far at each position.\",\n    \"Generate a new vector where each element is the maximum value found up to that index.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty vector to store the rolling maximum values.\",\n    \"Initialize a variable to keep track of the current maximum, starting with the smallest possible integer or the first element of the input vector.\",\n    \"Loop through each element in the input vector:\",\n    \"  - Update the current maximum if the current element is greater than the current maximum.\",\n    \"  - Append the current maximum to the rolling maximum vector.\",\n    \"Return the rolling maximum vector after processing all elements.\"\n  ]\n}\n```"}}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "entry_point": "make_palindrome", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    int n = str.length();\n    for (int i = n; i >= 0; --i) {\n        if (is_palindrome(str.substr(0, i))) {\n            return str + string(str.rbegin(), str.rbegin() + (n - i));\n        }\n    }\n    return str;  \n}", "session_history": {}}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "entry_point": "string_xor", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Validate that input strings a and b contain only '0' and '1' characters.\",\n    \"Ensure both input strings a and b have the same length.\",\n    \"Perform bitwise XOR operation on each corresponding character of the two strings.\",\n    \"Construct the result string from the XORed bits.\"\n  ],\n  \"high_level_plan\": [\n    \"Check if inputs a and b are valid binary strings and have equal length; if not, handle error or return empty string.\",\n    \"Initialize an empty result string.\",\n    \"Iterate through each index of the input strings:\",\n    \"  - Convert characters at current index to integers (0 or 1).\",\n    \"  - Compute XOR of these two bits.\",\n    \"  - Append the XOR result as a character ('0' or '1') to the result string.\",\n    \"Return the result string after processing all bits.\"\n  ]\n}\n```"}}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "entry_point": "longest", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    if (strings.empty())\n        return \"None\";\n    \n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length()) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the input vector is empty and return None if it is.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the vector of strings to find the longest string.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Handle cases where multiple strings have the same maximum length by returning the first one.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function 'longest' that takes a vector of strings as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Check if the input vector is empty. If it is, return None.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Initialize a variable to keep track of the longest string found so far.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Loop through each string in the vector and compare its length to the current longest string.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"If a longer string is found, update the longest string variable.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"After the loop, return the longest string found.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "entry_point": "greatest_common_divisor", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "session_history": {}}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "entry_point": "all_prefixes", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (int i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Determine the length of the input string.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Generate prefixes of the input string from the first character to the full string.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Store the generated prefixes in a vector.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Return the vector of prefixes.\"\n      }\n    ],\n    \"high_level_plan\": {\n      \"steps\": [\n        \"Step 1: Define the function 'all_prefixes' that takes a string as input.\",\n        \"Step 2: Initialize an empty vector to store the prefixes.\",\n        \"Step 3: Loop through the input string from index 1 to the length of the string.\",\n        \"Step 4: In each iteration, extract the substring from the start to the current index and add it to the vector.\",\n        \"Step 5: After the loop, return the vector containing all prefixes.\"\n      ]\n    }\n  }\n}\n```"}}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "entry_point": "string_sequence", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string result = \"\";\n    for (int i = 0; i <= n; ++i) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine the range of numbers from 0 to n.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Create a loop to iterate through the numbers from 0 to n.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Convert each number to a string format.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Concatenate the string representations of the numbers with a space delimiter.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the final concatenated string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function string_sequence that takes an integer n as input.\",\n    \"2. Initialize an empty string to hold the result.\",\n    \"3. Use a loop to iterate from 0 to n (inclusive).\",\n    \"4. For each number in the loop, convert it to a string and append it to the result string.\",\n    \"5. Ensure that a space is added between numbers, but not after the last number.\",\n    \"6. Return the final result string.\"\n  ]\n}\n```"}}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "entry_point": "count_distinct_characters", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    vector<bool> seen(256, false);\n    int count = 0;\n    \n    for (char c : str) {\n        if (!seen[c]) {\n            seen[c] = true;\n            count++;\n        }\n    }\n    \n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": \"Count distinct characters in a string, ignoring case.\",\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Convert the input string to a consistent case (either lower or upper) to ensure case insensitivity.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Create a data structure to store unique characters (e.g., a set or a vector).\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Iterate through the characters of the string and add each character to the data structure.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Count the number of unique characters stored in the data structure.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'count_distinct_characters' that takes a string as input.\",\n    \"2. Convert the input string to lower case to handle case insensitivity.\",\n    \"3. Initialize an empty set to store distinct characters.\",\n    \"4. Loop through each character in the string:\",\n    \"   a. Add the character to the set.\",\n    \"5. Return the size of the set as the count of distinct characters.\"\n  ]\n}\n```"}}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "entry_point": "parse_music", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    size_t pos = 0;\n    while ((pos = music_string.find(' ')) != string::npos) {\n        string note = music_string.substr(0, pos);\n        if (note == \"o\")\n            beats.push_back(4);\n        else if (note == \"o|\")\n            beats.push_back(2);\n        else if (note == \".|\")\n            beats.push_back(1);\n        music_string.erase(0, pos + 1);\n    }\n    if (music_string == \"o\")\n        beats.push_back(4);\n    else if (music_string == \"o|\")\n        beats.push_back(2);\n    else if (music_string == \".|\")\n        beats.push_back(1);\n    return beats;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Identify and separate individual musical notes from the input string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Map each musical note to its corresponding beat value based on the provided legend.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Store the beat values in a vector and return it as the output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Trim the input string to remove any leading or trailing whitespace.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Split the trimmed string into individual notes using space as a delimiter.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Create a mapping of musical notes to their respective beat values.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Iterate through the list of notes, convert each note to its corresponding beat value using the mapping, and store the results in a vector.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the vector of beat values as the output of the function.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "entry_point": "how_many_times", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    if (substring.empty())\n        return 0;\n\n    int count = 0;\n    size_t pos = 0;\n\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos++; // Move to the next character to allow overlapping\n    }\n\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": {\n    \"description\": \"Count how many times a given substring can be found in the original string, including overlapping cases.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Handle edge cases, such as when the original string or substring is empty.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Implement a method to iterate through the original string and check for occurrences of the substring.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Count overlapping occurrences of the substring within the original string.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Return the total count of occurrences found.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"action\": \"Check if the original string or substring is empty. If so, return 0.\"\n      },\n      {\n        \"step\": 2,\n        \"action\": \"Initialize a counter to keep track of occurrences.\"\n      },\n      {\n        \"step\": 3,\n        \"action\": \"Use a loop to traverse the original string, checking for the substring starting from each character.\"\n      },\n      {\n        \"step\": 4,\n        \"action\": \"If a match is found, increment the counter and continue checking from the next character (to allow for overlapping matches).\"\n      },\n      {\n        \"step\": 5,\n        \"action\": \"Return the final count of occurrences.\"\n      }\n    ]\n  }\n}\n```"}}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "entry_point": "sort_numbers", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string, int> num_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, \n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, \n        {\"eight\", 8}, {\"nine\", 9}\n    };\n    \n    vector<string> num_list;\n    stringstream ss(numbers);\n    string token;\n\n    while (ss >> token) {\n        num_list.push_back(token);\n    }\n    \n    sort(num_list.begin(), num_list.end(), [&](const string &a, const string &b) {\n        return num_map[a] < num_map[b];\n    });\n    \n    return accumulate(num_list.begin(), num_list.end(), string(), [](const string &a, const string &b) {\n        return a.empty() ? b : a + \" \" + b;\n    });\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Parse the input string into individual words.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Map the string representations of numbers ('zero' to 'nine') to their corresponding integer values.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Sort the list of integer values.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Convert the sorted integer values back to their string representations.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Join the sorted string representations into a single output string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Receive the input string of space-delimited number words.\",\n    \"2. Split the input string into an array of words.\",\n    \"3. Create a mapping of number words to their corresponding integer values.\",\n    \"4. Convert the array of words into an array of integers using the mapping.\",\n    \"5. Sort the array of integers in ascending order.\",\n    \"6. Convert the sorted array of integers back to an array of number words using the reverse mapping.\",\n    \"7. Join the sorted number words into a single output string.\",\n    \"8. Return the output string.\"\n  ]\n}\n```"}}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "entry_point": "find_closest_elements", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    float min_diff = FLT_MAX;\n    pair<float, float> closest_pair;\n\n    sort(numbers.begin(), numbers.end());\n\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = make_pair(numbers[i], numbers[i + 1]);\n        }\n    }\n\n    return {closest_pair.first, closest_pair.second};\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Sort the input vector of numbers to facilitate finding the closest elements.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the sorted vector to find the pair of adjacent numbers with the smallest difference.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Handle cases where there are duplicate numbers and ensure they are returned in the correct order.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the closest pair of numbers in the specified format (smaller number first).\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'find_closest_elements' that takes a vector of floats as input.\",\n    \"2. Sort the input vector in ascending order.\",\n    \"3. Initialize variables to track the minimum difference and the closest pair of numbers.\",\n    \"4. Loop through the sorted vector and calculate the difference between each pair of adjacent numbers.\",\n    \"5. If a smaller difference is found, update the minimum difference and the closest pair.\",\n    \"6. After the loop, return the closest pair of numbers in the required format.\"\n  ]\n}\n```"}}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "entry_point": "rescale_to_unit", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    vector<float> result;\n    \n    for (float num : numbers) {\n        result.push_back((num - min_val) / (max_val - min_val));\n    }\n    \n    return result;\n}", "session_history": {}}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "entry_point": "filter_integers", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Create a function that accepts a list of boost::any values.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the list and check the type of each value.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Filter out values that are not integers.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Store the filtered integers in a vector.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the vector of integers.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function 'filter_integers' that takes a list_any as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize an empty vector to store the filtered integers.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Use a loop to iterate through each element in the input list_any.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"For each element, check if it is of type int using boost::any_cast.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"If the element is an integer, add it to the vector.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"After the loop, return the vector containing only the integers.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "entry_point": "strlen", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine the length of the input string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Handle edge cases, such as an empty string.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Return the calculated length as an integer.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function 'strlen' that takes a string as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize a counter to zero to keep track of the length.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Iterate through each character in the string and increment the counter.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Return the counter as the length of the string.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Test the function with various inputs, including edge cases.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "entry_point": "largest_divisor", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": {\n    \"description\": \"Find the largest number that divides n evenly, smaller than n.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Validate the input to ensure n is a positive integer.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Iterate from n-1 down to 1 to find the largest divisor.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Check if the current number divides n evenly.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Return the first number found that divides n evenly.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Start the function 'largest_divisor' with input parameter n.\",\n      \"Check if n is less than or equal to 1; if so, return an appropriate message or value.\",\n      \"Use a loop to iterate from n-1 down to 1.\",\n      \"Within the loop, check if n modulo the current number equals zero.\",\n      \"If a divisor is found, return that number as the result.\",\n      \"End the function.\"\n    ]\n  }\n}\n```"}}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "entry_point": "factorize", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}", "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Check if a number is prime.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Generate a list of all prime numbers up to the input number.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Perform factorization by dividing the input number by prime numbers.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Store and count the prime factors in the correct format (vector).\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"action\": \"Define a function to check if a number is prime.\"\n      },\n      {\n        \"step\": 2,\n        \"action\": \"Create a list of prime numbers up to the square root of the input number.\"\n      },\n      {\n        \"step\": 3,\n        \"action\": \"Iterate over the list of prime numbers to divide the input number and find factors.\"\n      },\n      {\n        \"step\": 4,\n        \"action\": \"For each prime factor found, push it into the result vector and account for its multiplicity.\"\n      },\n      {\n        \"step\": 5,\n        \"action\": \"Return the populated vector of prime factors.\"\n      }\n    ]\n  }\n}\n```"}}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "entry_point": "remove_duplicates", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    vector<bool> seen(10001, false);\n    for (int num : numbers) {\n        if (!seen[num]) {\n            seen[num] = true;\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Count the occurrences of each integer in the input vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Identify the integers that occur only once.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Create a new vector to store the integers that occur only once while maintaining their original order.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Initialize a map or unordered_map to count occurrences of each integer.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Iterate through the input vector and populate the map with counts.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Create an empty vector to store the result.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Iterate through the input vector again and add integers to the result vector if their count is 1.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the result vector.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n", "entry_point": "flip_case", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    for (char &c : str) {\n        if (isupper(c))\n            c = tolower(c);\n        else if (islower(c))\n            c = toupper(c);\n    }\n    return str;\n}", "session_history": {}}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "entry_point": "concatenate", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string result;\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Handle the case of an empty vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the vector of strings.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Concatenate each string into a single result string.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the concatenated string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Check if the input vector is empty and return an empty string if true.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize an empty string to hold the concatenated result.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Loop through each string in the vector and append it to the result string.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Return the final concatenated string.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "entry_point": "filter_by_prefix", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Receive input vector of strings and a prefix.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the vector of strings.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Check if each string starts with the given prefix.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Collect strings that match the prefix into a new vector.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the new vector containing filtered strings.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function filter_by_prefix with parameters for the vector of strings and the prefix.\",\n    \"Initialize an empty vector to store the filtered results.\",\n    \"Loop through each string in the input vector.\",\n    \"For each string, check if it starts with the specified prefix using string comparison.\",\n    \"If it matches, add the string to the results vector.\",\n    \"After the loop, return the results vector.\"\n  ]\n}\n```"}}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "entry_point": "get_positive", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Iterate through the input vector to access each element.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if each element is a positive number.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Store positive numbers in a new vector.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the new vector containing only positive numbers.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function get_positive that takes a vector of floats as input.\",\n    \"Initialize an empty vector to store positive numbers.\",\n    \"Loop through each element in the input vector.\",\n    \"For each element, check if it is greater than zero.\",\n    \"If the element is positive, add it to the vector of positive numbers.\",\n    \"After the loop, return the vector of positive numbers.\"\n  ]\n}\n```"}}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "entry_point": "is_prime", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n <= 1)\n        return false;\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": \"Implement a function to determine if a number is prime.\",\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the number is less than or equal to 1.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if the number is 2, which is the only even prime number.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Check if the number is even (greater than 2) and return false.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Implement a loop to check for factors from 3 up to the square root of the number.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return true if no factors are found, otherwise return false.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_prime with a parameter n.\",\n    \"Check if n is less than or equal to 1; if so, return false.\",\n    \"Check if n is equal to 2; if so, return true.\",\n    \"Check if n is even and greater than 2; if so, return false.\",\n    \"Loop from 3 to the square root of n, checking for divisibility by odd numbers.\",\n    \"If a divisor is found, return false; if no divisors are found, return true.\"\n  ]\n}\n```"}}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "entry_point": "find_zero", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double a = xs[xs.size() - 1];\n    double b = xs[xs.size() - 2];\n    double c = xs[xs.size() - 3];\n    double x0 = 0; // Initial guess\n    double x1 = 0; // Next guess\n    double tolerance = 1e-6; // Tolerance for convergence\n    int max_iterations = 1000; // Maximum iterations\n    int iteration = 0;\n\n    while (iteration < max_iterations) {\n        double fx = poly(xs, x0);\n        double dfx = (poly(xs, x0 + tolerance) - fx) / tolerance; // Numerical derivative\n        \n        if (dfx == 0) {\n            return x0; // Avoid division by zero\n        }\n\n        x1 = x0 - fx / dfx; // Newton's method update\n\n        if (fabs(x1 - x0) < tolerance) {\n            return x1; // Converged\n        }\n\n        x0 = x1; // Update for next iteration\n        iteration++;\n    }\n\n    return x1; // Return the best guess after max iterations\n}", "session_history": {}}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "entry_point": "sort_third", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> result = l;\n    vector<int> third_indices;\n    \n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            third_indices.push_back(l[i]);\n        }\n    }\n    \n    sort(third_indices.begin(), third_indices.end());\n    \n    int j = 0;\n    for (int i = 0; i < result.size(); i++) {\n        if (i % 3 == 0) {\n            result[i] = third_indices[j++];\n        }\n    }\n    \n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Identify the indices in the vector that are divisible by three.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Extract the values from the vector at the identified indices.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Sort the extracted values.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Create a new vector that retains the original values at indices not divisible by three and replaces the values at indices divisible by three with the sorted values.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Initialize a new vector to store the result.\",\n    \"2. Loop through the original vector to identify indices divisible by three.\",\n    \"3. Extract the values at these indices and store them in a separate vector.\",\n    \"4. Sort the extracted vector of values.\",\n    \"5. Loop through the original vector again, and for each index, check if it is divisible by three.\",\n    \"6. If it is divisible by three, insert the next sorted value; otherwise, insert the original value.\",\n    \"7. Return the new vector as the result.\"\n  ]\n}\n```"}}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "entry_point": "unique", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Remove duplicate elements from the vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Sort the elements in the vector.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Return the sorted unique elements as a new vector.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Create a function named 'unique' that takes a vector of integers as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Use a set to automatically handle duplicate removal from the input vector.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Convert the set back to a vector.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Sort the vector of unique elements.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the sorted vector of unique elements.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "entry_point": "max_element", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n    float max_val = l[0];\n    for (float num : l) {\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    return max_val;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Create a function that accepts a vector of floats.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the elements of the vector to find the maximum value.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Handle edge cases, such as an empty vector.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the maximum value found in the vector.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function 'max_element' that takes a vector of floats as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize a variable to store the maximum value, starting with the first element of the vector.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Loop through each element in the vector and compare it with the current maximum value.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"If a larger value is found, update the maximum value variable.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"After the loop, check if the vector is empty and handle it appropriately.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"Return the maximum value.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "entry_point": "fizz_buzz", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find('7') != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": {}}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "entry_point": "sort_even", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> even_indices;\n    for (int i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    \n    vector<float> result = l;\n    for (int i = 0; i < even_indices.size(); i++) {\n        result[i * 2] = even_indices[i];\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Extract the values at even indices from the input vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Sort the extracted values from the even indices.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Create a new vector that retains the values at odd indices from the original vector.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Insert the sorted even-index values back into their respective positions in the new vector.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'sort_even' that takes a vector of floats as input.\",\n    \"2. Initialize a new vector to store the result.\",\n    \"3. Loop through the input vector to extract values at even indices and store them in a separate vector.\",\n    \"4. Sort the vector containing the even-index values.\",\n    \"5. Loop through the input vector again, and for each index, check if it is even or odd.\",\n    \"6. If the index is odd, copy the value from the input vector to the result vector.\",\n    \"7. If the index is even, insert the next sorted value from the sorted even-index vector into the result vector.\",\n    \"8. Return the result vector.\"\n  ]\n}\n```"}}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n", "entry_point": "decode_cyclic", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        string x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[x.length() - 1] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}", "session_history": {}}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "entry_point": "prime_fib", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int count = 0, a = 0, b = 1, fib = 0;\n    while (count < n) {\n        fib = a + b;\n        a = b;\n        b = fib;\n        if (fib > 1) {\n            bool is_prime = true;\n            for (int i = 2; i * i <= fib; ++i) {\n                if (fib % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                count++;\n            }\n        }\n    }\n    return fib;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Generate Fibonacci numbers up to a certain limit.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if a number is prime.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Combine the results of Fibonacci generation and prime checking to find the n-th prime Fibonacci number.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Implement a function to generate Fibonacci numbers.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Implement a function to check if a number is prime.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Iterate through the generated Fibonacci numbers and collect those that are prime.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Return the n-th prime Fibonacci number from the collected list.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "entry_point": "triples_sum_to_zero", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Input Validation\",\n      \"description\": \"Check if the input vector has at least three elements. If not, return false.\"\n    },\n    {\n      \"name\": \"Sorting the Vector\",\n      \"description\": \"Sort the input vector to facilitate the search for triplets.\"\n    },\n    {\n      \"name\": \"Finding Triplets\",\n      \"description\": \"Use a two-pointer technique to find three distinct elements that sum to zero.\"\n    },\n    {\n      \"name\": \"Handling Duplicates\",\n      \"description\": \"Ensure that the selected triplets are distinct elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'triples_sum_to_zero' that takes a vector of integers as input.\",\n    \"2. Check if the size of the vector is less than 3; if so, return false.\",\n    \"3. Sort the vector in ascending order.\",\n    \"4. Iterate through the vector with an index 'i' from 0 to size-3.\",\n    \"5. For each element at index 'i', set two pointers: 'left' to 'i+1' and 'right' to the end of the vector.\",\n    \"6. While 'left' is less than 'right', calculate the sum of the elements at indices 'i', 'left', and 'right'.\",\n    \"7. If the sum is zero, return true. If the sum is less than zero, increment 'left'. If the sum is greater than zero, decrement 'right'.\",\n    \"8. Ensure that the elements at indices 'i', 'left', and 'right' are distinct before considering them as a valid triplet.\",\n    \"9. If no triplet is found after all iterations, return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n", "entry_point": "car_race_collision", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n * n;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Understand the concept of collision between two sets of cars moving in opposite directions.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Determine the number of cars in each direction (left to right and right to left).\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Calculate the total number of collisions based on the number of cars in each direction.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Implement the function to return the calculated number of collisions.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function car_race_collision that takes an integer n as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Assume that each car in one direction will collide with each car in the opposite direction.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Calculate the total number of collisions as n * n (since each car from the left can collide with each car from the right).\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Return the calculated number of collisions.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "entry_point": "incr_list", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int& x : l)\n        x++;\n    return l;\n}", "session_history": {"plan": "{\n  \"decomposition\": [\n    \"Parse the input vector of integers.\",\n    \"Iterate through each element in the vector.\",\n    \"Increment each element by 1.\",\n    \"Return the modified vector.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function that takes a vector of integers as input.\",\n    \"Loop through each element in the input vector.\",\n    \"Add 1 to each element during iteration.\",\n    \"Store the incremented elements in the same vector or a new vector.\",\n    \"Return the resulting vector with all elements incremented by 1.\"\n  ]\n}"}}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "entry_point": "pairs_sum_to_zero", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> s;\n    for (int num : l) {\n        if (s.count(-num))\n            return true;\n        s.insert(num);\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Iterate through each element in the input vector.\",\n    \"For each element, check if there exists another distinct element in the vector such that their sum is zero.\",\n    \"Ensure that the two elements are distinct (different indices).\",\n    \"Return true if any such pair is found; otherwise, return false.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a data structure (e.g., a hash set) to store elements seen so far.\",\n    \"Traverse the vector elements one by one.\",\n    \"For each element, check if the negation of that element exists in the data structure.\",\n    \"If found, return true immediately as a valid pair exists.\",\n    \"If not found, add the current element to the data structure and continue.\",\n    \"If the traversal completes without finding any such pair, return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "entry_point": "change_base", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    if (x == 0)\n        return \"0\";\n    string result = \"\";\n    while (x > 0) {\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Validate input parameters: ensure base is less than 10 and x is non-negative integer.\",\n    \"Convert the decimal number x to the target base representation.\",\n    \"Store the converted digits in correct order as characters in a string.\",\n    \"Return the resulting string representing the number in the new base.\"\n  ],\n  \"high_level_plan\": [\n    \"Check if base is valid (less than 10) and x is non-negative.\",\n    \"If x is zero, return \\\"0\\\" immediately.\",\n    \"Initialize an empty string to accumulate digits.\",\n    \"Repeatedly divide x by base, prepend the remainder digit (converted to char) to the string.\",\n    \"Continue until x becomes zero.\",\n    \"Return the accumulated string as the converted number.\"\n  ]\n}\n```"}}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "entry_point": "triangle_area", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Define a function named triangle_area that takes two float parameters: a (length of the side) and h (height).\",\n    \"Calculate the area of the triangle using the formula: (a * h) / 2.\",\n    \"Return the calculated area as a float.\"\n  ],\n  \"high_level_plan\": [\n    \"Include necessary headers for input/output and math operations.\",\n    \"Implement the triangle_area function according to the formula.\",\n    \"Test the function with sample inputs to ensure correctness.\"\n  ]\n}\n```"}}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "entry_point": "fib4", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int a = 0, b = 0, c = 2, d = 0, result;\n    for (int i = 4; i <= n; ++i) {\n        result = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = result;\n    }\n    return result;\n}", "session_history": {}}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "entry_point": "median", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}", "session_history": {}}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "entry_point": "is_palindrome", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the input string is empty and return true if it is.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Normalize the string by removing non-alphanumeric characters and converting it to a consistent case (e.g., all lowercase).\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Compare characters from the beginning and end of the string, moving towards the center, to check for equality.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return true if all character comparisons are equal, otherwise return false.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_palindrome that takes a string as input.\",\n    \"Check if the string is empty; if so, return true.\",\n    \"Normalize the string by filtering out non-alphanumeric characters and converting to lowercase.\",\n    \"Initialize two pointers: one at the start and one at the end of the string.\",\n    \"Iterate while the start pointer is less than or equal to the end pointer:\",\n    \"  - Compare the characters at the start and end pointers.\",\n    \"  - If they are not equal, return false.\",\n    \"  - Move the start pointer forward and the end pointer backward.\",\n    \"Return true if all characters matched.\"\n  ]\n}\n```"}}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "entry_point": "modp", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    if (p == 1)\n        return 0;\n    long long result = 1;\n    long long base = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\n            result = (result * base) % p;\n        base = (base * base) % p;\n        n /= 2;\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": {\n    \"description\": \"Implement a function to calculate 2^n modulo p.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Handle the case when n is 0.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Handle the case when n is negative.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Implement the modular exponentiation algorithm to efficiently compute 2^n modulo p.\"\n      },\n      {\n        \"id\": 4,\n        \"description\": \"Ensure the function handles large values of n and p to avoid overflow.\"\n      },\n      {\n        \"id\": 5,\n        \"description\": \"Implement test cases to validate the function against provided examples.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"action\": \"Define the function modp(int n, int p) with appropriate input parameters.\"\n      },\n      {\n        \"step\": 2,\n        \"action\": \"Check if n is 0 and return 1, as 2^0 is 1.\"\n      },\n      {\n        \"step\": 3,\n        \"action\": \"Check if n is negative and handle it appropriately (e.g., return 0 or raise an error).\"\n      },\n      {\n        \"step\": 4,\n        \"action\": \"Implement the modular exponentiation algorithm using a loop or recursion to compute 2^n % p.\"\n      },\n      {\n        \"step\": 5,\n        \"action\": \"Test the function with provided examples and additional edge cases.\"\n      },\n      {\n        \"step\": 6,\n        \"action\": \"Optimize the function for performance and ensure it handles large integers correctly.\"\n      }\n    ]\n  }\n}\n```"}}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n", "entry_point": "decode_shift", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}", "session_history": {}}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "entry_point": "remove_vowels", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Identify and define what constitutes a vowel in both lowercase and uppercase.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through each character in the input string.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Check if the current character is a vowel.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Build a new string that excludes the vowels.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the new string without vowels.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named remove_vowels that takes a string as input.\",\n    \"Create a set of characters that represent vowels (both lowercase and uppercase).\",\n    \"Initialize an empty string to store the result.\",\n    \"Loop through each character in the input string.\",\n    \"For each character, check if it is not in the set of vowels.\",\n    \"If the character is not a vowel, append it to the result string.\",\n    \"After the loop, return the result string.\"\n  ]\n}\n```"}}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "entry_point": "below_threshold", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the vector is empty and handle this case.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through each element in the vector.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Compare each element with the threshold value.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return false immediately if any element exceeds the threshold.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return true if all elements are below the threshold after the iteration.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'below_threshold' that takes a vector of integers and an integer threshold.\",\n    \"Check if the vector is empty; if so, return true.\",\n    \"Loop through each element in the vector.\",\n    \"For each element, compare it with the threshold.\",\n    \"If any element is found to be greater than or equal to the threshold, return false.\",\n    \"If the loop completes without finding any element above the threshold, return true.\"\n  ]\n}\n```"}}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "entry_point": "add", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x + y;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Define the function signature for the add function.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Implement the logic to add two integers x and y.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Return the result of the addition.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Write test cases to validate the add function.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function add with parameters x and y.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Implement the addition logic inside the function.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Return the sum of x and y.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Create a main function to test the add function with sample inputs.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Run the program and verify the output against expected results.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "entry_point": "same_chars", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0 == s1;\n}", "session_history": {}}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "entry_point": "fib", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Define the base cases for the Fibonacci sequence.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Implement a recursive function to calculate Fibonacci numbers.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Implement an iterative approach to calculate Fibonacci numbers for efficiency.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Handle input validation to ensure n is a non-negative integer.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Create test cases to verify the correctness of the Fibonacci function.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function signature and include necessary headers.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Implement the base cases for n = 0 and n = 1.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Implement the recursive logic for calculating Fibonacci numbers.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Optionally, implement an iterative version for better performance.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Add input validation to check if n is a non-negative integer.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"Write unit tests to validate the function against various test cases.\"\n    },\n    {\n      \"step\": 7,\n      \"action\": \"Document the function with comments and examples.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "entry_point": "correct_bracketing", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Count the number of opening brackets '<' and closing brackets '>'.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if the number of opening brackets is equal to the number of closing brackets.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Ensure that at no point in the string do closing brackets '>' exceed opening brackets '<'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Initialize a counter to track the balance of brackets.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Iterate through each character in the input string.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"For each '<', increment the counter; for each '>', decrement the counter.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"If the counter goes negative at any point, return false (indicating an unmatched closing bracket).\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"After the loop, check if the counter is zero. If yes, return true; otherwise, return false.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "entry_point": "monotonic", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        } else if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine if the vector is empty or has one element, which should return true.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if all elements in the vector are in a monotonically increasing order.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Check if all elements in the vector are in a monotonically decreasing order.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Combine the results of the increasing and decreasing checks to return the final result.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'monotonic' that takes a vector of floats as input.\",\n    \"2. Check if the vector is empty or has one element; if so, return true.\",\n    \"3. Initialize two boolean flags: 'isIncreasing' and 'isDecreasing' to true.\",\n    \"4. Iterate through the vector from the first to the second last element:\",\n    \"   a. Compare each element with the next one.\",\n    \"   b. If the current element is greater than the next, set 'isIncreasing' to false.\",\n    \"   c. If the current element is less than the next, set 'isDecreasing' to false.\",\n    \"5. After the loop, return true if either 'isIncreasing' or 'isDecreasing' is true; otherwise, return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "entry_point": "common", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Remove duplicates from both input vectors.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Sort both vectors in ascending order.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Find common elements between the two sorted vectors.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the common elements as a sorted unique vector.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Create a function named 'common' that takes two vectors as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Use a set to remove duplicates from both input vectors.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Sort the unique elements of both vectors.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Use an algorithm (e.g., two-pointer technique) to find common elements in the sorted vectors.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Store the common elements in a new vector.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"Return the vector containing the sorted unique common elements.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "entry_point": "largest_prime_factor", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    int largest = -1;\n    while (n % 2 == 0) {\n        largest = 2;\n        n /= 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    if (n > 2)\n        largest = n;\n    return largest;\n}", "session_history": {}}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "entry_point": "sum_to_n", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n * (n + 1) / 2;\n}", "session_history": {}}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "entry_point": "correct_bracketing", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": \"correct_bracketing\",\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the input string is empty.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Initialize a counter to track the balance of brackets.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Iterate through each character in the string.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"For each '(', increment the counter.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"For each ')', decrement the counter and check if it goes negative.\"\n    },\n    {\n      \"id\": 6,\n      \"description\": \"At the end of the iteration, check if the counter is zero.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'correct_bracketing' that takes a string as input.\",\n    \"2. Check if the input string is empty; if so, return false.\",\n    \"3. Initialize a counter to zero.\",\n    \"4. Loop through each character in the string:\",\n    \"   a. If the character is '(', increment the counter.\",\n    \"   b. If the character is ')', decrement the counter and check if it is negative; if negative, return false.\",\n    \"5. After the loop, check if the counter is zero; if so, return true, otherwise return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "entry_point": "derivative", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    int degree = xs.size() - 1;\n    for (int i = 1; i <= degree; i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Extract the coefficients from the input vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Calculate the derivative of the polynomial using the power rule.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Store the calculated derivative coefficients in a new vector.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the new vector containing the derivative coefficients.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define the function 'derivative' that takes a vector of coefficients as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize an empty vector to hold the derivative coefficients.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Iterate through the input vector, applying the power rule to calculate each derivative coefficient.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Add each calculated derivative coefficient to the new vector.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the vector containing the derivative coefficients.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "entry_point": "fibfib", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    \n    int a = 0, b = 0, c = 1;\n    int result = 0;\n\n    for (int i = 3; i <= n; ++i) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n\n    return result;\n}", "session_history": {}}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "entry_point": "vowels_count", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    int count = 0;\n    int length = s.length();\n    for (int i = 0; i < length; i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        } else if (c == 'y' && i == length - 1) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Identify and count the lowercase vowels ('a', 'e', 'i', 'o', 'u') in the input string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Identify and count the uppercase vowels ('A', 'E', 'I', 'O', 'U') in the input string.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Check if the last character of the string is 'y' or 'Y' and count it as a vowel if it is.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Sum the counts from the previous steps to get the total number of vowels.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Initialize a counter to zero for the total number of vowels.\",\n    \"2. Loop through each character in the input string.\",\n    \"3. For each character, check if it is a lowercase or uppercase vowel and increment the counter accordingly.\",\n    \"4. After the loop, check if the last character is 'y' or 'Y' and increment the counter if it is.\",\n    \"5. Return the total count of vowels.\"\n  ]\n}\n```"}}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "entry_point": "circular_shift", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string num = to_string(x);\n    int len = num.length();\n    if (shift > len) {\n        reverse(num.begin(), num.end());\n        return num;\n    }\n    string shifted = num.substr(len - shift) + num.substr(0, len - shift);\n    return shifted;\n}", "session_history": {}}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "entry_point": "digitSum", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Iterate through each character in the input string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if the character is an uppercase letter (A-Z).\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"If the character is uppercase, retrieve its ASCII code.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Accumulate the ASCII codes of all uppercase characters.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the total sum of the ASCII codes.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'digitSum' that takes a string as input.\",\n    \"Initialize a variable to hold the sum of ASCII codes.\",\n    \"Loop through each character in the input string.\",\n    \"For each character, check if it is an uppercase letter.\",\n    \"If it is uppercase, convert it to its ASCII code and add it to the sum.\",\n    \"After the loop, return the accumulated sum.\"\n  ]\n}\n```"}}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "entry_point": "fruit_distribution", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    int apples = 0, oranges = 0;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Extract the number of apples from the input string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Extract the number of oranges from the input string.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Calculate the number of mangoes using the total number of fruits and the extracted numbers of apples and oranges.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Receive the input string and the total number of fruits.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Use string manipulation techniques to find and extract the numbers of apples and oranges from the input string.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Convert the extracted string numbers into integers.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Calculate the number of mangoes by subtracting the sum of apples and oranges from the total number of fruits.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the calculated number of mangoes.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "entry_point": "pluck", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = INT_MAX;\n    int index = -1;\n    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                index = i;\n            }\n        }\n    }\n    \n    if (index != -1) {\n        result.push_back(smallest_even);\n        result.push_back(index);\n    }\n    \n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the input vector is empty.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through the vector to find all even values and their indices.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Determine the smallest even value and its corresponding index.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the result in the specified format or an empty vector if no even values are found.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Check if the input vector is empty. If it is, return an empty vector.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize variables to track the smallest even value and its index.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Loop through the vector to find even numbers, updating the smallest even value and index as necessary.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"After the loop, check if a smallest even value was found. If found, return it along with its index in a vector; otherwise, return an empty vector.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "entry_point": "search", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for (const auto& pair : freq) {\n        if (pair.first <= pair.second) {\n            result = max(result, pair.first);\n        }\n    }\n    \n    return result;\n}", "session_history": {}}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "entry_point": "strange_sort_list", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    if (lst.empty()) return result;\n\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n        } else {\n            result.push_back(lst[left]);\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Sort the input vector of integers in ascending order.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Create a new vector to hold the 'strange sorted' values.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Iterate through the sorted vector, alternating between the smallest and largest remaining elements.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Handle edge cases such as empty vectors and vectors with identical elements.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'strange_sort_list' that takes a vector of integers as input.\",\n    \"2. Sort the input vector in ascending order.\",\n    \"3. Initialize an empty vector to store the result.\",\n    \"4. Use two pointers: one starting at the beginning (min) and one at the end (max) of the sorted vector.\",\n    \"5. While there are elements left in the sorted vector, alternate adding the minimum and maximum elements to the result vector.\",\n    \"6. If the vector is empty, return an empty vector.\",\n    \"7. Return the result vector containing the 'strange sorted' values.\"\n  ]\n}\n```"}}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "entry_point": "triangle_area", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    \n    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return round(area * 100) / 100;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Validate Triangle\",\n      \"description\": \"Check if the three sides form a valid triangle using the triangle inequality theorem.\"\n    },\n    {\n      \"name\": \"Calculate Semi-Perimeter\",\n      \"description\": \"Compute the semi-perimeter of the triangle using the formula: s = (a + b + c) / 2.\"\n    },\n    {\n      \"name\": \"Calculate Area\",\n      \"description\": \"Use Heron's formula to calculate the area of the triangle: Area = sqrt(s * (s - a) * (s - b) * (s - c)).\"\n    },\n    {\n      \"name\": \"Format Output\",\n      \"description\": \"Round the area to 2 decimal points for the final output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'triangle_area' that takes three float parameters (a, b, c).\",\n    \"2. Implement the 'Validate Triangle' subproblem to check if a + b > c, a + c > b, and b + c > a.\",\n    \"3. If the triangle is invalid, return -1.\",\n    \"4. If valid, calculate the semi-perimeter 's'.\",\n    \"5. Calculate the area using Heron's formula.\",\n    \"6. Round the area to 2 decimal points.\",\n    \"7. Return the formatted area.\"\n  ]\n}\n```"}}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "entry_point": "will_it_fly", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum = 0;\n    int n = q.size();\n    for (int i = 0; i < n; i++) {\n        sum += q[i];\n    }\n    bool isBalanced = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (q[i] != q[n - 1 - i]) {\n            isBalanced = false;\n            break;\n        }\n    }\n    return isBalanced && (sum <= w);\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Check if the vector is palindromic\",\n      \"description\": \"Determine if the input vector is the same when read forwards and backwards.\"\n    },\n    {\n      \"name\": \"Calculate the sum of the vector elements\",\n      \"description\": \"Compute the total sum of all elements in the vector.\"\n    },\n    {\n      \"name\": \"Compare sum with maximum weight\",\n      \"description\": \"Check if the calculated sum is less than or equal to the maximum possible weight.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'will_it_fly' that takes a vector 'q' and an integer 'w' as parameters.\",\n    \"2. Implement a helper function to check if 'q' is a palindrome.\",\n    \"3. Calculate the sum of the elements in 'q'.\",\n    \"4. Use the palindrome check and the sum comparison to determine if the object will fly.\",\n    \"5. Return true if both conditions are satisfied; otherwise, return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "entry_point": "smallest_change", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int changes = 0;\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": \"Find the minimum number of elements that need to be changed to make a vector palindromic.\",\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine the length of the vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Identify the pairs of elements that need to be compared to check for palindromic properties.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Count the number of mismatched pairs of elements.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Calculate the minimum number of changes required based on the count of mismatched pairs.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Get the length of the input vector.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Iterate through the first half of the vector and compare each element with its corresponding element from the end.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"For each pair of mismatched elements, increment a counter.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Return the counter as the result, which represents the minimum number of changes needed.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "entry_point": "total_match", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int sum1 = 0, sum2 = 0;\n    for (const string& str : lst1)\n        sum1 += str.size();\n    for (const string& str : lst2)\n        sum2 += str.size();\n    \n    if (sum1 < sum2)\n        return lst1;\n    else\n        return lst2;\n}", "session_history": {}}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "entry_point": "is_multiply_prime", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    if (a < 30)\n        return false;\n\n    for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            int count = 0;\n            for (int j = 2; j <= i; j++) {\n                if (i % j == 0) {\n                    count++;\n                }\n            }\n            if (count == 1) {\n                for (int k = 2; k < a; k++) {\n                    if (a % k == 0 && k != i) {\n                        int count2 = 0;\n                        for (int l = 2; l <= k; l++) {\n                            if (k % l == 0) {\n                                count2++;\n                            }\n                        }\n                        if (count2 == 1) {\n                            for (int m = 2; m < a; m++) {\n                                if (a % m == 0 && m != i && m != k) {\n                                    int count3 = 0;\n                                    for (int n = 2; n <= m; n++) {\n                                        if (m % n == 0) {\n                                            count3++;\n                                        }\n                                    }\n                                    if (count3 == 1 && i * k * m == a) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Generate a list of prime numbers less than 100.\",\n      \"details\": \"Implement a function to identify and store all prime numbers below 100.\"\n    },\n    {\n      \"description\": \"Check if a number can be expressed as a product of three prime numbers.\",\n      \"details\": \"Create a function that takes the list of primes and checks all combinations of three primes to see if their product equals the given number.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure the function correctly handles numbers less than 1 and numbers that are not products of three primes.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Implement a function to generate all prime numbers less than 100.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Create a function to check combinations of three primes from the generated list.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Implement the main function 'is_multiply_prime' that utilizes the above functions to determine if the input number is a product of three primes.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Test the function with various inputs, including edge cases.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "entry_point": "is_simple_power", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    if (n <= 1) {\n        return x == 1;\n    }\n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if n is greater than 1, as powers are only defined for n > 1.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Handle the special case where x is 1, which is a power of any number.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Iteratively calculate n raised to the power of integers starting from 0 until n^k exceeds x.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Compare the calculated power with x to determine if they are equal.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function is_simple_power(int x, int n).\",\n    \"2. Check if n is less than or equal to 1; if so, return false.\",\n    \"3. If x is 1, return true.\",\n    \"4. Initialize a variable k to 0 and calculate n^k in a loop.\",\n    \"5. In each iteration, check if n^k equals x; if so, return true.\",\n    \"6. If n^k exceeds x, break the loop and return false.\",\n    \"7. End the function.\"\n  ]\n}\n```"}}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "entry_point": "iscube", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    int cubeRoot = round(cbrt(a));\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine the cube root of the given integer.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if the cube of the calculated cube root equals the original integer.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Handle negative integers by calculating the cube root of their absolute value.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return true if the integer is a perfect cube, otherwise return false.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function iscuber that takes an integer a as input.\",\n    \"Calculate the cube root of the absolute value of a.\",\n    \"Round the cube root to the nearest integer.\",\n    \"Calculate the cube of the rounded integer.\",\n    \"Compare the calculated cube with the original integer a.\",\n    \"Return true if they are equal, otherwise return false.\"\n  ]\n}\n```"}}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "entry_point": "hex_key", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Identify and define the hexadecimal digits that are considered prime.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Create a function to convert hexadecimal characters to their decimal equivalents.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Iterate through the input string and count the number of prime hexadecimal digits.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Handle edge cases such as empty strings.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define a set of prime hexadecimal digits: {2, 3, 5, 7, B, D}.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Create a function 'hex_key' that takes a string input 'num'.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Initialize a counter to zero to keep track of prime digits.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Loop through each character in the input string 'num'.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"For each character, check if it is in the set of prime hexadecimal digits.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"If it is a prime digit, increment the counter.\"\n    },\n    {\n      \"step\": 7,\n      \"action\": \"Return the counter as the output of the function.\"\n    },\n    {\n      \"step\": 8,\n      \"action\": \"Ensure the function handles empty strings by returning 0.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "entry_point": "decimal_to_binary", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string binary = \"\";\n    while (decimal > 0) {\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}", "session_history": {}}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "entry_point": "is_happy", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length() < 3)\n        return false;\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Check string length\",\n      \"description\": \"Verify if the length of the string is at least 3.\"\n    },\n    {\n      \"name\": \"Iterate through string\",\n      \"description\": \"Loop through the string to examine every set of 3 consecutive characters.\"\n    },\n    {\n      \"name\": \"Check distinct characters\",\n      \"description\": \"For each set of 3 consecutive characters, check if all characters are distinct.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function is_happy that takes a string s as input.\",\n    \"2. Check if the length of s is less than 3. If true, return false.\",\n    \"3. Loop through the string from index 0 to length of s - 3.\",\n    \"4. For each index, extract the substring of the next 3 characters.\",\n    \"5. Check if the characters in the substring are distinct.\",\n    \"6. If any substring has non-distinct characters, return false.\",\n    \"7. If all substrings are valid, return true.\"\n  ]\n}\n```"}}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "entry_point": "numerical_letter_grade", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if (gpa > 3.7)\n            letter_grades.push_back(\"A\");\n        else if (gpa > 3.3)\n            letter_grades.push_back(\"A-\");\n        else if (gpa > 3.0)\n            letter_grades.push_back(\"B+\");\n        else if (gpa > 2.7)\n            letter_grades.push_back(\"B\");\n        else if (gpa > 2.3)\n            letter_grades.push_back(\"B-\");\n        else if (gpa > 2.0)\n            letter_grades.push_back(\"C+\");\n        else if (gpa > 1.7)\n            letter_grades.push_back(\"C\");\n        else if (gpa > 1.3)\n            letter_grades.push_back(\"C-\");\n        else if (gpa > 1.0)\n            letter_grades.push_back(\"D+\");\n        else if (gpa > 0.7)\n            letter_grades.push_back(\"D\");\n        else if (gpa > 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}", "session_history": []}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "entry_point": "prime_length", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int length = str.length();\n    if (length < 2)\n        return false;\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0)\n            return false;\n    }\n    return true;\n}", "session_history": []}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n", "entry_point": "starts_one_ends", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n == 1)\n        return 2;\n    \n    int start_with_one = 9 * pow(10, n - 2);\n    int end_with_one = 9 * pow(10, n - 2);\n    int both_start_and_end_with_one = pow(10, n - 2);\n    \n    return start_with_one + end_with_one - both_start_and_end_with_one;\n}", "session_history": []}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "entry_point": "solve", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    string result = \"\";\n    while (sum > 0) {\n        result = to_string(sum % 2) + result;\n        sum /= 2;\n    }\n    return result.empty() ? \"0\" : result;\n}", "session_history": []}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "entry_point": "add", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "entry_point": "anti_shuffle", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    int start = 0;\n    for (int i = 0; i <= s.size(); i++) {\n        if (i == s.size() || s[i] == ' ') {\n            string word = s.substr(start, i - start);\n            sort(word.begin(), word.end());\n            s.replace(start, i - start, word);\n            start = i + 1;\n        }\n    }\n    return s;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Split the input string into words and preserve spaces.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Sort the characters of each word in ascending order based on ASCII value.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Reconstruct the string by combining the sorted words and preserving the original spaces.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Initialize an empty result string to store the final output.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Iterate through the input string to identify words and spaces.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"For each identified word, sort its characters and store the sorted word.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Append the sorted words and spaces to the result string in the original order.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the final result string.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "entry_point": "get_row", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] != b[0]) {\n            return a[0] < b[0];\n        }\n        return a[1] > b[1];\n    });\n    return result;\n}", "session_history": []}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "entry_point": "sort_array", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.empty())\n        return {};\n    \n    int sum = array.front() + array.back();\n    vector<int> sorted_array = array;\n    \n    if (sum % 2 == 0) {\n        sort(sorted_array.rbegin(), sorted_array.rend());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n    \n    return sorted_array;\n}", "session_history": []}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "entry_point": "encrypt", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (base + (c - base + 4) % 26);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n", "entry_point": "next_smallest", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2)\n        return None;\n\n    sort(lst.begin(), lst.end());\n    int first = lst[0];\n    \n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > first) {\n            return lst[i];\n        }\n    }\n    \n    return None;\n}", "session_history": []}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "entry_point": "is_bored", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    int count = 0;\n    bool sentenceStarted = false;\n    \n    for (char c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            sentenceStarted = false;\n        } else if (!sentenceStarted && (c == 'I' || c == 'i')) {\n            count++;\n            sentenceStarted = true;\n        } else if (c == ' ') {\n            continue;\n        } else {\n            sentenceStarted = true;\n        }\n    }\n    \n    return count;\n}", "session_history": []}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "entry_point": "any_int", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (floor(a) != a || floor(b) != b || floor(c) != c)\n        return false;\n    return (a == b + c) || (b == a + c) || (c == a + b);\n}", "session_history": []}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "entry_point": "encode", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    for (char &c : message) {\n        if (isalpha(c)) {\n            if (islower(c))\n                c = toupper(c);\n            else\n                c = tolower(c);\n            if (c == 'A' || c == 'a') \n                c = 'C';\n            else if (c == 'E' || c == 'e') \n                c = 'G';\n            else if (c == 'I' || c == 'i') \n                c = 'K';\n            else if (c == 'O' || c == 'o') \n                c = 'Q';\n            else if (c == 'U' || c == 'u') \n                c = 'W';\n        }\n    }\n    return message;\n}", "session_history": []}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "entry_point": "skjkasdkd", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest_prime = -1;\n\n    for (int num : lst) {\n        if (num < 2) continue;\n        bool is_prime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            largest_prime = max(largest_prime, num);\n        }\n    }\n\n    if (largest_prime == -1) return 0;\n\n    int sum_of_digits = 0;\n    while (largest_prime > 0) {\n        sum_of_digits += largest_prime % 10;\n        largest_prime /= 10;\n    }\n\n    return sum_of_digits;\n}", "session_history": []}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "entry_point": "check_dict_case", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty())\n        return false;\n\n    bool allLower = true;\n    bool allUpper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n        if (!key.empty()) {\n            if (!islower(key[0])) {\n                allLower = false;\n            }\n            if (!isupper(key[0])) {\n                allUpper = false;\n            }\n        }\n    }\n\n    return allLower || allUpper;\n}", "session_history": []}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "entry_point": "count_up_to", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}", "session_history": []}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "entry_point": "multiply", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}", "session_history": []}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "entry_point": "count_upper", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (isupper(s[i]) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": {"plan": "```json\n{\n  \"requirement\": {\n    \"description\": \"Count the number of uppercase vowels in even indices of a given string.\",\n    \"subproblems\": [\n      {\n        \"id\": 1,\n        \"description\": \"Identify the characters at even indices of the string.\"\n      },\n      {\n        \"id\": 2,\n        \"description\": \"Check if each character at the even indices is an uppercase vowel.\"\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Count the number of uppercase vowels found in the previous step.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": 1,\n        \"action\": \"Initialize a counter to zero.\"\n      },\n      {\n        \"step\": 2,\n        \"action\": \"Iterate through the string, focusing only on even indices.\"\n      },\n      {\n        \"step\": 3,\n        \"action\": \"For each character at an even index, check if it is an uppercase vowel (A, E, I, O, U).\"\n      },\n      {\n        \"step\": 4,\n        \"action\": \"If it is an uppercase vowel, increment the counter.\"\n      },\n      {\n        \"step\": 5,\n        \"action\": \"Return the counter as the result.\"\n      }\n    ]\n  }\n}\n```"}}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "entry_point": "closest_integer", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double num = stod(value);\n    return (num > 0) ? floor(num + 0.5) : ceil(num - 0.5);\n}", "session_history": []}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "entry_point": "make_a_pile", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> stones;\n    int current_stones = n;\n    for (int i = 0; i < n; ++i) {\n        stones.push_back(current_stones);\n        current_stones += (current_stones % 2 == 0) ? 2 : 2;\n    }\n    return stones;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine the number of stones for the first level based on the input n.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Calculate the number of stones for each subsequent level based on whether n is odd or even.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Store the calculated number of stones for each level in a vector.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the vector containing the number of stones for each level.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Initialize an empty vector to store the number of stones.\",\n    \"2. Use a loop to iterate from 0 to n-1 (for n levels).\",\n    \"3. For each level, calculate the number of stones based on the level index and whether n is odd or even.\",\n    \"4. Append the calculated number of stones to the vector.\",\n    \"5. Return the vector after the loop completes.\"\n  ]\n}\n```"}}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "entry_point": "words_string", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    vector<string> result;\n    string word;\n    for (char c : s) {\n        if (c == ',' || c == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "entry_point": "choose_num", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (x > y)\n        return -1;\n    \n    if (y % 2 != 0)\n        y--;\n    \n    if (y >= x)\n        return y;\n    \n    return -1;\n}", "session_history": []}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "entry_point": "rounded_avg", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n > m)\n        return \"-1\";\n    \n    int sum = 0;\n    int count = m - n + 1;\n    \n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    int average = floor(sum / count);\n    string binary = \"\";\n    \n    while (average > 0) {\n        binary = char((average % 2) + '0') + binary;\n        average /= 2;\n    }\n    \n    return binary.empty() ? \"0\" : binary;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if n is greater than m and return '-1' if true.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Calculate the sum of integers from n to m (inclusive).\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Calculate the count of integers from n to m (inclusive).\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Compute the average by dividing the sum by the count.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Round the average down to the nearest integer.\"\n    },\n    {\n      \"id\": 6,\n      \"description\": \"Convert the rounded average to binary format.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function rounded_avg with parameters n and m.\",\n    \"2. Check if n > m; if true, return '-1'.\",\n    \"3. Initialize a variable to hold the sum of integers from n to m.\",\n    \"4. Use a loop to iterate from n to m, adding each integer to the sum.\",\n    \"5. Calculate the count of integers from n to m.\",\n    \"6. Compute the average by dividing the sum by the count.\",\n    \"7. Round the average down to the nearest integer using floor function.\",\n    \"8. Convert the rounded integer to binary using bit manipulation or built-in functions.\",\n    \"9. Return the binary string representation of the rounded average.\"\n  ]\n}\n```"}}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "entry_point": "unique_digits", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool hasEvenDigit = false;\n        int temp = num;\n        while (temp > 0) {\n            if ((temp % 10) % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!hasEvenDigit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "session_history": []}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "entry_point": "by_length", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n    reverse(filtered.begin(), filtered.end());\n    \n    vector<string> result;\n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, \n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, \n        {9, \"Nine\"}\n    };\n    \n    for (int num : filtered) {\n        result.push_back(numToString[num]);\n    }\n    \n    return result;\n}", "session_history": []}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "entry_point": "f", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "entry_point": "even_odd_palindrome", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    vector<int> result(2, 0);\n    for (int i = 1; i <= n; i++) {\n        string str = to_string(i);\n        string rev = string(str.rbegin(), str.rend());\n        if (str == rev) {\n            if (i % 2 == 0) {\n                result[0]++;\n            } else {\n                result[1]++;\n            }\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "entry_point": "count_nums", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int abs_num = abs(num);\n        while (abs_num > 0) {\n            sum += abs_num % 10;\n            abs_num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "entry_point": "move_one_ball", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    if (arr.empty())\n        return true;\n\n    int count = 0;\n    int n = arr.size();\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n\n    return count <= 1;\n}", "session_history": []}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "entry_point": "exchange", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int oddCount = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n    if (oddCount == 0) {\n        return \"YES\";\n    }\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Determine the count of odd and even numbers in lst1.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Determine the count of odd and even numbers in lst2.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Check if the number of odd elements in lst1 can be replaced by even elements from lst2.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return 'YES' if lst1 can be made entirely even, otherwise return 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Initialize counters for odd and even numbers in both lst1 and lst2.\",\n    \"2. Iterate through lst1 to count the number of odd and even elements.\",\n    \"3. Iterate through lst2 to count the number of odd and even elements.\",\n    \"4. Compare the count of odd elements in lst1 with the count of even elements in lst2.\",\n    \"5. If the count of odd elements in lst1 is less than or equal to the count of even elements in lst2, return 'YES'.\",\n    \"6. Otherwise, return 'NO'.\"\n  ]\n}\n```"}}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "entry_point": "histogram", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char, int> countMap;\n    map<char, int> result;\n    int maxCount = 0;\n\n    for (char c : test) {\n        if (c != ' ') {\n            countMap[c]++;\n            if (countMap[c] > maxCount) {\n                maxCount = countMap[c];\n            }\n        }\n    }\n\n    for (const auto& pair : countMap) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}", "session_history": []}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "entry_point": "reverse_delete", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string result = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    \n    string reversed_result = result;\n    reverse(reversed_result.begin(), reversed_result.end());\n    \n    return {result, result == reversed_result ? \"True\" : \"False\"};\n}", "session_history": []}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "entry_point": "odd_count", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (const string& str : lst) {\n        int odd_count = 0;\n        for (char ch : str) {\n            if ((ch - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + to_string(odd_count) + \"n the str\" + to_string(odd_count) + \"ng \" + to_string(odd_count) + \" of the \" + to_string(odd_count) + \"nput.\");\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Count the number of odd digits in a given string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Format the output string based on the count of odd digits and the index of the string.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Iterate through the input vector of strings and apply the above two subproblems to each string.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define a function to count odd digits in a string.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Define a function to format the output string using the count and the index.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Initialize an output vector to store results.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Loop through each string in the input vector.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"For each string, call the function to count odd digits and the function to format the output.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"Store the formatted output in the output vector.\"\n    },\n    {\n      \"step\": 7,\n      \"action\": \"Return the output vector.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "entry_point": "minSubArraySum", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long minSum = nums[0];\n    long long currentSum = 0;\n\n    for (long long num : nums) {\n        currentSum += num;\n        if (currentSum < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    \n    return minSum;\n}", "session_history": []}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "entry_point": "max_fill", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int total_units = 0;\n    for (const auto& row : grid) {\n        for (int water : row) {\n            total_units += water;\n        }\n    }\n    return (total_units + capacity - 1) / capacity;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Count the total number of water units in the grid.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Calculate the number of bucket trips required to empty the wells based on the total water units and the bucket capacity.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Handle edge cases, such as when the grid is empty or when there are no water units.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Initialize a variable to keep track of the total water units.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Iterate through each row of the grid and count the number of 1s (water units) to update the total water units.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"If the total water units is zero, return 0 as no bucket trips are needed.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Calculate the number of bucket trips by dividing the total water units by the bucket capacity and rounding up.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Return the total number of bucket trips as the output.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "entry_point": "sort_array", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB)\n            return a < b;\n        return countA < countB;\n    });\n    return arr;\n}", "session_history": []}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "entry_point": "select_words", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    istringstream iss(s);\n    string word;\n\n    while (iss >> word) {\n        int consonant_count = 0;\n        for (char c : word) {\n            if (isalpha(c) && !strchr(\"aeiouAEIOU\", c)) {\n                consonant_count++;\n            }\n        }\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "entry_point": "get_closest_vowel", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    int n = word.length();\n    for (int i = n - 2; i > 0; --i) {\n        if (isalpha(word[i]) && isupper(word[i]) && \n            (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && \n             word[i - 1] != 'o' && word[i - 1] != 'u' && \n             word[i - 1] != 'A' && word[i - 1] != 'E' && \n             word[i - 1] != 'I' && word[i - 1] != 'O' && \n             word[i - 1] != 'U') && \n            (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && \n             word[i + 1] != 'o' && word[i + 1] != 'u' && \n             word[i + 1] != 'A' && word[i + 1] != 'E' && \n             word[i + 1] != 'I' && word[i + 1] != 'O' && \n             word[i + 1] != 'U')) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}", "session_history": []}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "entry_point": "match_parens", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    int open1 = 0, close1 = 0, open2 = 0, close2 = 0;\n    for (char c : lst[0]) {\n        if (c == '(') open1++;\n        else close1++;\n    }\n    for (char c : lst[1]) {\n        if (c == '(') open2++;\n        else close2++;\n    }\n\n    if (open1 + open2 == close1 + close2) {\n        if (open1 >= close2 || open2 >= close1) {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}", "session_history": []}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "entry_point": "maximum", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result(arr.begin(), arr.begin() + k);\n    sort(result.begin(), result.end());\n    return result;\n}", "session_history": []}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "entry_point": "solution", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "entry_point": "add_elements", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "entry_point": "get_odd_collatz", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> odd_numbers;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            odd_numbers.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    odd_numbers.push_back(1);\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}", "session_history": []}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "entry_point": "valid_date", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    if (date.empty() || date.size() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n\n    if (month < 1 || month > 12)\n        return false;\n\n    if (day < 1)\n        return false;\n\n    if (month == 2) {\n        if (day > 29)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n            return false;\n    } else {\n        if (day > 31)\n            return false;\n    }\n\n    return true;\n}", "session_history": []}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "entry_point": "split_words", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    vector<string> result;\n    if (txt.find(' ') != string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(' ')) != string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else if (txt.find(',') != string::npos) {\n        size_t pos = 0;\n        while ((pos = txt.find(',')) != string::npos) {\n            result.push_back(txt.substr(0, pos));\n            txt.erase(0, pos + 1);\n        }\n        result.push_back(txt);\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        result.push_back(to_string(count));\n    }\n    return result;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the input string contains any whitespace characters.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"If whitespace exists, split the string into words based on whitespace.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"If no whitespace exists, check if the string contains any commas.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"If commas exist, split the string into words based on commas.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"If neither whitespace nor commas exist, count the number of lowercase letters in odd positions in the alphabet.\"\n    },\n    {\n      \"id\": 6,\n      \"description\": \"Return the results in the appropriate format based on the checks above.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Define the function 'split_words' that takes a string as input.\",\n    \"2. Check for whitespace characters in the input string.\",\n    \"3. If whitespace is found, split the string using whitespace and return the resulting vector.\",\n    \"4. If no whitespace is found, check for commas in the string.\",\n    \"5. If commas are found, split the string using commas and return the resulting vector.\",\n    \"6. If neither whitespace nor commas are found, iterate through the string to count lowercase letters in odd positions (a=0, b=1, ..., z=25).\",\n    \"7. Return a vector containing the count of lowercase letters as a string.\",\n    \"8. Ensure to handle edge cases such as empty strings appropriately.\"\n  ]\n}\n```"}}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "entry_point": "is_sorted", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    if (lst.size() < 2)\n        return true;\n    \n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] <= lst[i - 1])\n            return false;\n    }\n    \n    return true;\n}", "session_history": []}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "entry_point": "intersection", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    \n    if (start > end) {\n        return \"NO\";\n    }\n    \n    int length = end - start + 1;\n    \n    if (length < 2) {\n        return \"NO\";\n    }\n    \n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            return \"NO\";\n        }\n    }\n    \n    return \"YES\";\n}", "session_history": []}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "entry_point": "prod_signs", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.empty())\n        return -32768;\n\n    int product_of_signs = 1;\n    int sum_of_magnitudes = 0;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_of_magnitudes += num;\n        } else if (num < 0) {\n            sum_of_magnitudes += -num;\n            product_of_signs *= -1;\n        } else {\n            return 0;\n        }\n    }\n\n    return sum_of_magnitudes * product_of_signs;\n}", "session_history": []}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "entry_point": "minPath", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int N = grid.size();\n    vector<int> result;\n    vector<vector<bool>> visited(N, vector<bool>(N, false));\n    \n    function<void(int, int, int)> dfs = [&](int x, int y, int step, vector<int>& path) {\n        if (step == k) {\n            if (result.empty() || path < result) {\n                result = path;\n            }\n            return;\n        }\n        \n        visited[x][y] = true;\n        path.push_back(grid[x][y]);\n        \n        for (int dx = -1; dx <= 1; dx++) {\n            for (int dy = -1; dy <= 1; dy++) {\n                if (abs(dx) + abs(dy) == 1) {\n                    int nx = x + dx, ny = y + dy;\n                    if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited[nx][ny]) {\n                        dfs(nx, ny, step + 1, path);\n                    }\n                }\n            }\n        }\n        \n        path.pop_back();\n        visited[x][y] = false;\n    };\n    \n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            vector<int> path;\n            dfs(i, j, 0, path);\n        }\n    }\n    \n    return result;\n}", "session_history": []}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "entry_point": "tri", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> result(n + 1);\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            result[i] = 3;\n        } else if (i % 2 == 0) {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    result[0] = 1; // base case\n    return result;\n}", "session_history": []}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "entry_point": "digits", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int product = 1;\n    bool hasOdd = false;\n\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n\n    return hasOdd ? product : 0;\n}", "session_history": []}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n", "entry_point": "is_nested", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int balance = 0;\n    bool nested = false;\n\n    for (char c : str) {\n        if (c == '[') {\n            balance++;\n            if (balance > 1) {\n                nested = true;\n            }\n        } else if (c == ']') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    \n    return nested && balance == 0;\n}", "session_history": []}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "entry_point": "sum_squares", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        sum += ceil(num) * ceil(num);\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "entry_point": "check_if_last_char_is_a_letter", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty())\n        return false;\n\n    char lastChar = txt[txt.length() - 1];\n    if (!isalpha(lastChar))\n        return false;\n\n    size_t lastSpace = txt.find_last_of(' ');\n    if (lastSpace == string::npos)\n        return true;\n\n    return lastSpace == txt.length() - 2;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Trim any trailing whitespace from the input string.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Check if the string is empty after trimming.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Identify the last character of the string.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Determine if the last character is an alphabetical character.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Check if the last character is part of a word (i.e., not preceded by a space).\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Trim the input string to remove any trailing whitespace.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Check if the trimmed string is empty; if so, return false.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Get the last character of the trimmed string.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Check if the last character is an alphabetical character.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Check if the last character is preceded by a space; if not, return true, otherwise return false.\"\n    }\n  ]\n}\n```"}}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "entry_point": "can_arrange", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    int largestIndex = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n}", "session_history": []}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "entry_point": "largest_smallest_integers", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    bool found_negative = false;\n    bool found_positive = false;\n\n    for (int num : lst) {\n        if (num < 0) {\n            if (!found_negative || num > largest_negative) {\n                largest_negative = num;\n                found_negative = true;\n            }\n        } else if (num > 0) {\n            if (!found_positive || num < smallest_positive) {\n                smallest_positive = num;\n                found_positive = true;\n            }\n        }\n    }\n\n    if (!found_negative) {\n        largest_negative = 0;\n    }\n    if (!found_positive) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Identify and extract all negative integers from the input vector.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Identify and extract all positive integers from the input vector.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Determine the largest negative integer from the extracted negative integers.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Determine the smallest positive integer from the extracted positive integers.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Handle cases where there are no negative or positive integers and return 0 accordingly.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Initialize two variables to store the largest negative integer and the smallest positive integer.\",\n    \"2. Iterate through the input vector to separate negative and positive integers.\",\n    \"3. For each negative integer found, compare it with the current largest negative integer and update if necessary.\",\n    \"4. For each positive integer found, compare it with the current smallest positive integer and update if necessary.\",\n    \"5. After processing the vector, check if the largest negative integer was updated; if not, set it to 0.\",\n    \"6. Check if the smallest positive integer was updated; if not, set it to 0.\",\n    \"7. Return a vector containing the largest negative integer and the smallest positive integer.\"\n  ]\n}\n```"}}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "entry_point": "compare_one", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            int intA = boost::any_cast<int>(a);\n            int intB = boost::any_cast<int>(b);\n            if (intA == intB) return \"None\";\n            return intA > intB ? a : b;\n        } else if (a.type() == typeid(double)) {\n            double doubleA = boost::any_cast<double>(a);\n            double doubleB = boost::any_cast<double>(b);\n            if (doubleA == doubleB) return \"None\";\n            return doubleA > doubleB ? a : b;\n        } else if (a.type() == typeid(string)) {\n            string strA = boost::any_cast<string>(a);\n            string strB = boost::any_cast<string>(b);\n            if (strA == strB) return \"None\";\n            return strA > strB ? a : b;\n        }\n    } else {\n        double numA, numB;\n        try {\n            numA = boost::any_cast<int>(a);\n        } catch (...) {\n            try {\n                numA = stod(boost::any_cast<string>(a).replace(boost::any_cast<string>(a).find(','), 1, \".\"));\n            } catch (...) {\n                numA = boost::any_cast<double>(a);\n            }\n        }\n        try {\n            numB = boost::any_cast<int>(b);\n        } catch (...) {\n            try {\n                numB = stod(boost::any_cast<string>(b).replace(boost::any_cast<string>(b).find(','), 1, \".\"));\n            } catch (...) {\n                numB = boost::any_cast<double>(b);\n            }\n        }\n        if (numA == numB) return \"None\";\n        return numA > numB ? a : b;\n    }\n}", "session_history": []}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "entry_point": "is_equal_to_sum_even", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    return n >= 8 && n % 2 == 0;\n}", "session_history": []}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "entry_point": "special_factorial", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; ++i) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; ++j) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "entry_point": "fix_spaces", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string result;\n    bool lastWasSpace = false;\n    int spaceCount = 0;\n\n    for (char c : text) {\n        if (c == ' ') {\n            spaceCount++;\n            if (spaceCount > 2) {\n                if (!lastWasSpace) {\n                    result += '-';\n                    lastWasSpace = true;\n                }\n            } else {\n                result += '_';\n                lastWasSpace = true;\n            }\n        } else {\n            result += c;\n            lastWasSpace = false;\n            spaceCount = 0;\n        }\n    }\n\n    return result;\n}", "session_history": []}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "entry_point": "file_name_check", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int digit_count = 0;\n    size_t dot_position = file_name.find('.');\n    \n    if (dot_position == string::npos || dot_position == 0 || dot_position == file_name.length() - 1)\n        return \"No\";\n    \n    for (size_t i = 0; i < file_name.length(); i++) {\n        if (isdigit(file_name[i])) {\n            digit_count++;\n        }\n    }\n    \n    if (digit_count > 3)\n        return \"No\";\n    \n    string extension = file_name.substr(dot_position + 1);\n    if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n        return isalpha(file_name[0]) ? \"Yes\" : \"No\";\n    }\n    \n    return \"No\";\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Check if the file name contains exactly one dot ('.').\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Validate that the substring before the dot is not empty and starts with a letter (a-z, A-Z).\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Count the number of digits (0-9) in the file name and ensure it does not exceed three.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Check if the substring after the dot is one of the allowed extensions: {'txt', 'exe', 'dll'}.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"1. Initialize a counter for digits and identify the position of the dot in the file name.\",\n    \"2. Split the file name into two parts: the substring before the dot and the substring after the dot.\",\n    \"3. Implement the checks for each subproblem in sequence:\",\n    \"   a. Verify that there is exactly one dot in the file name.\",\n    \"   b. Check that the substring before the dot is not empty and starts with a letter.\",\n    \"   c. Count the digits in the entire file name and ensure it does not exceed three.\",\n    \"   d. Validate that the substring after the dot matches one of the allowed extensions.\",\n    \"4. Return 'Yes' if all conditions are met; otherwise, return 'No'.\"\n  ]\n}\n```"}}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "entry_point": "sum_squares", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "entry_point": "words_in_sentence", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    string result;\n    string word;\n    int n = sentence.size();\n    \n    auto is_prime = [](int num) {\n        if (num < 2) return false;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };\n\n    for (int i = 0; i <= n; ++i) {\n        if (i == n || sentence[i] == ' ') {\n            if (is_prime(word.size())) {\n                if (!result.empty()) result += ' ';\n                result += word;\n            }\n            word.clear();\n        } else {\n            word += sentence[i];\n        }\n    }\n    \n    return result;\n}", "session_history": []}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n", "entry_point": "simplify", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int numX, denX, numN, denN;\n    sscanf(x.c_str(), \"%d/%d\", &numX, &denX);\n    sscanf(n.c_str(), \"%d/%d\", &numN, &denN);\n    \n    // Calculate the product of the fractions\n    long long numeratorProduct = numX * numN;\n    long long denominatorProduct = denX * denN;\n    \n    // Check if the result is a whole number\n    return denominatorProduct == 0 ? false : numeratorProduct % denominatorProduct == 0;\n}", "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"ParseFraction\",\n      \"description\": \"Extract the numerator and denominator from the string representation of the fraction.\"\n    },\n    {\n      \"name\": \"MultiplyFractions\",\n      \"description\": \"Multiply the two fractions represented by x and n.\"\n    },\n    {\n      \"name\": \"CheckWholeNumber\",\n      \"description\": \"Determine if the result of the multiplication is a whole number.\"\n    }\n  ],\n  \"highLevelPlan\": [\n    \"1. Implement the ParseFraction function to convert the string fractions into integer numerators and denominators.\",\n    \"2. Implement the MultiplyFractions function to compute the product of the two fractions using the formula: (numerator1 * numerator2) / (denominator1 * denominator2).\",\n    \"3. Implement the CheckWholeNumber function to check if the result of the multiplication is a whole number by verifying if the numerator is divisible by the denominator.\",\n    \"4. Combine the above functions in the simplify function to return true if the product is a whole number, and false otherwise.\"\n  ]\n}\n```"}}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "entry_point": "order_by_points", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    auto digit_sum = [](int n) {\n        n = abs(n);\n        int sum = 0;\n        while (n) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    };\n\n    stable_sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sum_a = digit_sum(a);\n        int sum_b = digit_sum(b);\n        return sum_a < sum_b;\n    });\n\n    return nums;\n}", "session_history": []}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "entry_point": "specialFilter", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string strNum = to_string(num);\n            if ((strNum.front() - '0') % 2 != 0 && (strNum.back() - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "entry_point": "get_max_triples", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n    \n    int count = 0;\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}", "session_history": []}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "entry_point": "bf", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = find(planets.begin(), planets.end(), planet1);\n    auto it2 = find(planets.begin(), planets.end(), planet2);\n    \n    if (it1 == planets.end() || it2 == planets.end())\n        return {};\n    \n    int index1 = distance(planets.begin(), it1);\n    int index2 = distance(planets.begin(), it2);\n    \n    if (index1 > index2)\n        swap(index1, index2);\n    \n    vector<string> result(planets.begin() + index1 + 1, planets.begin() + index2);\n    return result;\n}", "session_history": []}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "entry_point": "sorted_list_sum", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0;\n    }), lst.end());\n    \n    sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length())\n            return a < b;\n        return a.length() < b.length();\n    });\n    \n    return lst;", "session_history": []}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "entry_point": "x_or_y", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    if (n <= 1)\n        return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return y;\n    }\n    return x;\n}", "session_history": []}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n", "entry_point": "double_the_difference", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && static_cast<int>(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<int>(num) * static_cast<int>(num);\n        }\n    }\n    return sum;\n}", "session_history": []}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "entry_point": "compare", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "entry_point": "Strongest_Extension", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest_extension;\n    int max_strength = -1;\n\n    for (const string& extension : extensions) {\n        int cap = 0, sm = 0;\n        for (char ch : extension) {\n            if (isupper(ch)) {\n                cap++;\n            } else if (islower(ch)) {\n                sm++;\n            }\n        }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}", "session_history": []}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n", "entry_point": "cycpattern_check", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    if (a.length() < b.length())\n        return false;\n    string b_rotated = b + b;\n    return b_rotated.find(a) != string::npos;\n}", "session_history": []}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "entry_point": "even_odd_count", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    vector<int> count(2, 0);\n    num = abs(num);\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0)\n            count[0]++;\n        else\n            count[1]++;\n        num /= 10;\n    }\n    return count;\n}", "session_history": []}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "entry_point": "int_to_mini_roman", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    string result;\n    for (const auto& [value, symbol] : roman_numerals) {\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "entry_point": "right_angle_triangle", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    float max_side = fmax(fmax(a, b), c);\n    float sum_of_squares = a * a + b * b + c * c - max_side * max_side;\n    return fabs(max_side * max_side - sum_of_squares) < 1e-6;\n}", "session_history": []}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "entry_point": "find_max", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string result;\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        int unique_count = 0;\n        vector<bool> char_seen(256, false);\n        \n        for (char c : word) {\n            if (!char_seen[c]) {\n                char_seen[c] = true;\n                unique_count++;\n            }\n        }\n\n        if (unique_count > max_unique_count || \n           (unique_count == max_unique_count && (result.empty() || word < result))) {\n            max_unique_count = unique_count;\n            result = word;\n        }\n    }\n\n    return result;\n}", "session_history": []}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "entry_point": "eat", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    int totalEaten = number + min(need, remaining);\n    int carrotsLeft = remaining - min(need, remaining);\n    return {totalEaten, carrotsLeft};\n}", "session_history": []}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "entry_point": "do_algebra", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (int i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\")\n            result += operand[i + 1];\n        else if (operato[i] == \"-\")\n            result -= operand[i + 1];\n        else if (operato[i] == \"*\")\n            result *= operand[i + 1];\n        else if (operato[i] == \"//\")\n            result /= operand[i + 1];\n        else if (operato[i] == \"**\")\n            result = pow(result, operand[i + 1]);\n    }\n    return result;\n}", "session_history": []}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "entry_point": "solve", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n\n    if (hasLetter) {\n        for (char &c : s) {\n            if (isalpha(c)) {\n                c = islower(c) ? toupper(c) : tolower(c);\n            }\n        }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n\n    return s;\n}", "session_history": []}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "entry_point": "string_to_md5", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    if (text.empty())\n        return \"None\";\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    \n    char md5String[33];\n    for (int i = 0; i < 16; i++)\n        sprintf(&md5String[i * 2], \"%02x\", (unsigned int)digest[i]);\n    \n    return string(md5String);\n}", "session_history": []}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "entry_point": "generate_integers", "completion": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if (a > b) {\n        swap(a, b);\n    }\n    for (int i = a; i <= b; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}", "session_history": []}
