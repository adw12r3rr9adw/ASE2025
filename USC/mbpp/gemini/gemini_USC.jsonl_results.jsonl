{"task_id": "MBCPP/1", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n * > minCost(vector<vector<int>>{{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}, 2, 2)\n * 8\n * > minCost(vector<vector<int>>{{2, 3, 4}, {5, 9, 3}, {2, 6, 4}}, 2, 2)\n * 12\n * > minCost(vector<vector<int>>{{3, 4, 5}, {6, 10, 4}, {3, 7, 5}}, 2, 2)\n * 16\n */\nint minCost(vector<vector<int>> cost, int m, int n) {\nint R = cost.size();\n    int C = cost[0].size();\n\n\nvector<vector<int>> dp(R, vector<int>(C));\n\ndp[0][0] = cost[0][0];\n\n// Initialize first column of dp array\nfor (int i = 1; i <= m; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n}\n\n// Initialize first row of dp array\nfor (int j = 1; j <= n; j++) {\n    dp[0][j] = dp[0][j - 1] + cost[0][j];\n}\n\n// Construct rest of the dp array\nfor (int i = 1; i <= m; i++) {\n    for (int j = 1; j <= n; j++) {\n        dp[i][j] = cost[i][j] + min({dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]});\n    }\n}\n\nreturn dp[m][n];", "entry_point": "minCost", "result": "passed", "passed": true}
{"task_id": "MBCPP/2", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the similar elements from the given two tuple lists.\n * > similarElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {4, 5}\n * > similarElements(vector<int>{1, 2, 3, 4}, vector<int>{5, 4, 3, 7})\n * {3, 4}\n * > similarElements(vector<int>{11, 12, 14, 13}, vector<int>{17, 15, 14, 13})\n * {13, 14}\n */\nvector<int> similarElements(vector<int> testTup1, vector<int> testTup2) {\nvector<int> result;\nsort(testTup1.begin(), testTup1.end());\nsort(testTup2.begin(), testTup2.end());\nset_intersection(testTup1.begin(), testTup1.end(),\ntestTup2.begin(), testTup2.end(),\nback_inserter(result));\nreturn result;", "entry_point": "similarElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/3", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to identify non-prime numbers.\n * > isNotPrime(2)\n * false\n * > isNotPrime(10)\n * true\n * > isNotPrime(35)\n * true\n */\nbool isNotPrime(int n) {\nif (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "isNotPrime", "result": "passed", "passed": true}
{"task_id": "MBCPP/4", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3)\n * {85, 75, 65}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2)\n * {85, 75}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {85, 75, 65, 58, 35}\n */\nvector<int> heapQueueLargest(vector<int> nums, int n) {\npriority_queue<int,t, vector<int>, greater<int>> min_heap;\n\n\nfor (int num : nums) {\n    min_heap.push(num);\n    if (min_heap.size() > n) {\n        min_heap.pop();\n    }\n}\n\nvector<int> result;\nwhile (!min_heap.empty()) {\n    result.push_back(min_heap.top());\n    min_heap.pop();\n}\nsort(result.rbegin(), result.rend()); // Sort in descending order\n\nreturn result;", "entry_point": "heapQueueLargest", "result": "Compilation failed: /tmp/tmpooolue5b/temp.cpp: In function \u2018std::vector<int> heapQueueLargest(std::vector<int>, int)\u2019:\n/tmp/tmpooolue5b/temp.cpp:16:20: error: \u2018t\u2019 was not declared in this scope\n   16 | priority_queue<int,t, vector<int>, greater<int>> min_heap;\n      |                    ^\n/tmp/tmpooolue5b/temp.cpp:16:47: error: wrong number of template arguments (4, should be at least 1)\n   16 | priority_queue<int,t, vector<int>, greater<int>> min_heap;\n      |                                               ^~\nIn file included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n                 from /tmp/tmpooolue5b/temp.cpp:1:\n/usr/include/c++/9/bits/stl_queue.h:443:11: note: provided for \u2018template<class _Tp, class _Sequence, class _Compare> class std::priority_queue\u2019\n  443 |     class priority_queue\n      |           ^~~~~~~~~~~~~~\n/tmp/tmpooolue5b/temp.cpp:20:14: error: request for member \u2018push\u2019 in \u2018min_heap\u2019, which is of non-class type \u2018int\u2019\n   20 |     min_heap.push(num);\n      |              ^~~~\n/tmp/tmpooolue5b/temp.cpp:21:18: error: request for member \u2018size\u2019 in \u2018min_heap\u2019, which is of non-class type \u2018int\u2019\n   21 |     if (min_heap.size() > n) {\n      |                  ^~~~\n/tmp/tmpooolue5b/temp.cpp:22:18: error: request for member \u2018pop\u2019 in \u2018min_heap\u2019, which is of non-class type \u2018int\u2019\n   22 |         min_heap.pop();\n      |                  ^~~\n/tmp/tmpooolue5b/temp.cpp:27:18: error: request for member \u2018empty\u2019 in \u2018min_heap\u2019, which is of non-class type \u2018int\u2019\n   27 | while (!min_heap.empty()) {\n      |                  ^~~~~\n/tmp/tmpooolue5b/temp.cpp:28:31: error: request for member \u2018top\u2019 in \u2018min_heap\u2019, which is of non-class type \u2018int\u2019\n   28 |     result.push_back(min_heap.top());\n      |                               ^~~\n/tmp/tmpooolue5b/temp.cpp:29:14: error: request for member \u2018pop\u2019 in \u2018min_heap\u2019, which is of non-class type \u2018int\u2019\n   29 |     min_heap.pop();\n      |              ^~~\n", "passed": false}
{"task_id": "MBCPP/5", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n * > countWays(2)\n * 3\n * > countWays(8)\n * 153\n * > countWays(12)\n * 2131\n */\nint countWays(int n) {\nif (n % 2 != 0) {\n        return 0;\n    }\n    int A[n + 1], B[n + 1];\n    A[0] = 1;\n    A[1] = 0;\n    B[0] = 0;\n    B[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        A[i] = A[i - 2] + 2 * B[i - 1];\n        B[i] = A[i - 1] + B[i - 2];\n    }\n    return A[n];", "entry_point": "countWays", "result": "passed", "passed": true}
{"task_id": "MBCPP/6", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two numbers differ at one bit position only or not.\n * > differAtOneBitPos(13, 9)\n * true\n * > differAtOneBitPos(15, 8)\n * false\n * > differAtOneBitPos(2, 4)\n * false\n */\nbool differAtOneBitPos(int a, int b) {\nint xorResult = a ^ b;\n    return (xorResult != 0) && ((xorResult & (xorResult - 1)) == 0);", "entry_point": "differAtOneBitPos", "result": "passed", "passed": true}
{"task_id": "MBCPP/7", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\n * > findCharLong(string(\"Please move back to stream\"))\n * {string(\"Please\"), string(\"move\"), string(\"back\"), string(\"stream\")}\n * > findCharLong(string(\"Jing Eco and Tech\"))\n * {string(\"Jing\"), string(\"Tech\")}\n * > findCharLong(string(\"Jhingai wulu road Zone 3\"))\n * {string(\"Jhingai\"), string(\"wulu\"), string(\"road\"), string(\"Zone\")}\n */\nvector<string> findCharLong(string text) {\nvector<string> result;\n// The regex pattern bw{4,}b matches words that are at least 4 characters long.\n// b is a word boundary.\n// w matches any word character (alphanumeric and underscore).\n// {4,} means 4 or more occurrences of the preceding character class.\nregex word_regex(\"bw{4,}b\");\n\n\n// Use sregex_iterator to find all matches in the string.\nauto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\nauto words_end = sregex_iterator();\n\nfor (sregex_iterator i = words_begin; i != words_end; ++i) {\n    smatch match = *i;\n    result.push_back(match.str());\n}\n\nreturn result;", "entry_point": "findCharLong", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/8", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find squares of individual elements in a list using lambda function.\n * > squareNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n * > squareNums(vector<int>{10, 20, 30})\n * {100, 400, 900}\n * > squareNums(vector<int>{12, 15})\n * {144, 225}\n */\nvector<int> squareNums(vector<int> nums) {\nvector<int> squared_nums;\nsquared_nums.reserve(nums.size());\n\n\nstd::transform(nums.begin(), nums.end(), std::back_inserter(squared_nums), \n               [](int n) { return n * n; });\n\nreturn squared_nums;", "entry_point": "squareNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/9", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of rotations required to get the same string.\n * > findRotations(string(\"aaaa\"))\n * 1\n * > findRotations(string(\"ab\"))\n * 2\n * > findRotations(string(\"abc\"))\n * 3\n */\nint findRotations(string str) {\nstring temp = str + str;\n    int n = str.length();\n    for (int i = 1; i <= n; i++) {\n        string substring = temp.substr(i, n);\n        if (str == substring) {\n            return i;\n        }\n    }\n    return n;", "entry_point": "findRotations", "result": "passed", "passed": true}
{"task_id": "MBCPP/10", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n smallest items from a dataset.\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {10, 20}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {10, 20, 20, 40, 50}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {10, 20, 20}\n */\nvector<int> smallNnum(vector<int> list1, int n) {\nsort(list1.begin(), list1.end());\nvector<int> result;\nfor (int i = 0; i < n; ++i) {\nresult.push_back(list1[i]);\n}\nreturn result;", "entry_point": "smallNnum", "result": "passed", "passed": true}
{"task_id": "MBCPP/11", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n * > removeOcc(string(\"hello\"), string(\"l\"))\n * string(\"heo\")\n * > removeOcc(string(\"abcda\"), string(\"a\"))\n * string(\"bcd\")\n * > removeOcc(string(\"PHP\"), string(\"P\"))\n * string(\"H\")\n */\nstring removeOcc(string s, string ch) {\nsize_t first = s.find(ch);\n    if (first != string::npos) {\n        s.erase(first, ch.length());\n    }\n    size_t last = s.rfind(ch);\nif (last != string::npos && last != first) { // Ensure it's not the same character erased twice\n    s.erase(last, ch.length());\n}\nreturn s;", "entry_point": "removeOcc", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/12", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}})\n * {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}})\n * {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}\n * > sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}})\n * {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\nsort(m.begin(), m.end(), [](const vector<int>& a, const vector<int>& b) {\nlong long sum_a = 0;\nfor (int x : a) {\nsum_a += x;\n}\nlong long sum_b = 0;\nfor (int x : b) {\nsum_b += x;\n}\nreturn sum_a < sum_b;\n});\nreturn m;", "entry_point": "sortMatrix", "result": "passed", "passed": true}
{"task_id": "MBCPP/14", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n * > findVolume(10, 8, 6)\n * 240\n * > findVolume(3, 2, 2)\n * 6\n * > findVolume(1, 2, 1)\n * 1\n */\nint findVolume(int l, int b, int h) {\nreturn (l * b * h) / 2;", "entry_point": "findVolume", "result": "passed", "passed": true}
{"task_id": "MBCPP/15", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n * > splitLowerstring(string(\"AbCd\"))\n * {string(\"bC\"), string(\"d\")}\n * > splitLowerstring(string(\"Python\"))\n * {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > splitLowerstring(string(\"Programming\"))\n * {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}\n */\nvector<string> splitLowerstring(string text) {\nvector<string> result;\nstring current_segment;\nfor (char c : text) {\nif (islower(c)) {\nif (!current_segment.empty()) {\nresult.push_back(current_segment);\n}\ncurrent_segment = c;\n} else {\ncurrent_segment += c;\n}\n}\nif (!current_segment.empty()) {\nresult.push_back(current_segment);\n}\nreturn result;", "entry_point": "splitLowerstring", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/16", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n * > textLowercaseUnderscore(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textLowercaseUnderscore(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textLowercaseUnderscore(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textLowercaseUnderscore(string text) {\nstd::regex pattern(\"^[a-z]+_[a-z]+$\");\n    if (std::regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textLowercaseUnderscore", "result": "Compilation failed: /tmp/tmpt7njkdh5/temp.cpp: In function \u2018std::string textLowercaseUnderscore(std::string)\u2019:\n/tmp/tmpt7njkdh5/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpt7njkdh5/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpt7njkdh5/temp.cpp:15:45: note: to match this \u2018{\u2019\n   15 | string textLowercaseUnderscore(string text) {\n      |                                             ^\n", "passed": false}
{"task_id": "MBCPP/17", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n * > squarePerimeter(10)\n * 40\n * > squarePerimeter(5)\n * 20\n * > squarePerimeter(4)\n * 16\n */\nint squarePerimeter(int a) {\nreturn 4 * a;", "entry_point": "squarePerimeter", "result": "passed", "passed": true}
{"task_id": "MBCPP/18", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n * > removeDirtyChars(string(\"probasscurve\"), string(\"pros\"))\n * string(\"bacuve\")\n * > removeDirtyChars(string(\"digitalindia\"), string(\"talent\"))\n * string(\"digiidi\")\n * > removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"))\n * string(\"emles\")\n */\nstring removeDirtyChars(string str, string secondString) {\nstring result = \"\";\n    unorderedt<char> dirtyChars;\n\n\nfor (char c : secondString) {\n    dirtyChars.insert(c);\n}\n\nfor (char c : str) {\n    if (dirtyChars.find(c) == dirtyChars.end()) {\n        result += c;\n    }\n}\nreturn result;", "entry_point": "removeDirtyChars", "result": "Compilation failed: /tmp/tmpbly_o848/temp.cpp: In function \u2018std::string removeDirtyChars(std::string, std::string)\u2019:\n/tmp/tmpbly_o848/temp.cpp:17:5: error: \u2018unorderedt\u2019 was not declared in this scope\n   17 |     unorderedt<char> dirtyChars;\n      |     ^~~~~~~~~~\n/tmp/tmpbly_o848/temp.cpp:17:16: error: expected primary-expression before \u2018char\u2019\n   17 |     unorderedt<char> dirtyChars;\n      |                ^~~~\n/tmp/tmpbly_o848/temp.cpp:21:5: error: \u2018dirtyChars\u2019 was not declared in this scope\n   21 |     dirtyChars.insert(c);\n      |     ^~~~~~~~~~\n/tmp/tmpbly_o848/temp.cpp:25:9: error: \u2018dirtyChars\u2019 was not declared in this scope\n   25 |     if (dirtyChars.find(c) == dirtyChars.end()) {\n      |         ^~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/19", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n * > testDuplicate(vector<int>{1, 2, 3, 4, 5})\n * false\n * > testDuplicate(vector<int>{1, 2, 3, 4, 4})\n * true\n * > testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5})\n * true\n */\nbool testDuplicate(vector<int> arraynums) {\nunordered_set<int> seen;\nfor (int num : arraynums) {\nif (seen.count(num)) {\nreturn true;\n}\nseen.insert(num);\n}\nreturn false;", "entry_point": "testDuplicate", "result": "passed", "passed": true}
{"task_id": "MBCPP/20", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n * > isWoodall(383)\n * true\n * > isWoodall(254)\n * false\n * > isWoodall(200)\n * false\n */\nbool isWoodall(int x) {\nif (x <= 1) {\n        return false;\n    }\n    for (int k = 1; ; ++k) {\n        int term = k * (1 << k) - 1;\n        if (term == x) {\n            return true;\n        }\n        if (term > x) {\n            return false;\n        }\n    }", "entry_point": "isWoodall", "result": "Compilation failed: /tmp/tmpf9v0p9xj/temp.cpp: In function \u2018bool isWoodall(int)\u2019:\n/tmp/tmpf9v0p9xj/temp.cpp:29:1: error: a template declaration cannot appear at block scope\n   29 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpf9v0p9xj/temp.cpp:50:1: error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmpf9v0p9xj/temp.cpp:15:23: note: to match this \u2018{\u2019\n   15 | bool isWoodall(int x) {\n      |                       ^\n", "passed": false}
{"task_id": "MBCPP/21", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n * > multiplesOfNum(4, 3)\n * {3, 6, 9, 12}\n * > multiplesOfNum(2, 5)\n * {5, 10}\n * > multiplesOfNum(9, 2)\n * {2, 4, 6, 8, 10, 12, 14, 16, 18}\n */\nvector<int> multiplesOfNum(int m, int n) {\nvector<int> result;\nfor (int i = 1; i <= m; ++i) {\nresult.push_back(n * i);\n}\nreturn result;", "entry_point": "multiplesOfNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/22", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5})\n * 4\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4})\n * -1\n * > findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2})\n * 1\n */\nint findFirstDuplicate(vector<int> nums) {\nunordered_set<int> seen;\nfor (int num : nums) {\nif (seen.count(num)) {\nreturn num;\n}\nseen.insert(num);\n}\nreturn -1;", "entry_point": "findFirstDuplicate", "result": "passed", "passed": true}
{"task_id": "MBCPP/23", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n * > maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * 33\n * > maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}})\n * 6\n * > maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}})\n * 19\n */\nint maximumSum(vector<vector<int>> list1) {\nint maxSum = INT_MIN;\n    for (const auto& innerList : list1) {\n        int currentSum = 0;\n        for (int element : innerList) {\n            currentSum += element;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    return maxSum;", "entry_point": "maximumSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/24", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * > binaryToDecimal(100)\n * 4\n * > binaryToDecimal(1011)\n * 11\n * > binaryToDecimal(1101101)\n * 109\n */\nint binaryToDecimal(int binary) {\nint decimal = 0;\n    int power = 1; // Represents 2^0, 2^1, 2^2, andon.\n\n\nwhile (binary > 0) {\n    int lastDigit = binary % 10; // Get the last digit (which should be 0 or 1)\n    binary /= 10; // Remove the last digit from the binary number\n    decimal += lastDigit * power; // Add the product of the digit and its corresponding power of 2\n    power *= 2; // Move to the next power of 2\n}\nreturn decimal;", "entry_point": "binaryToDecimal", "result": "passed", "passed": true}
{"task_id": "MBCPP/25", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n * > findProduct(vector<int>{1, 1, 2, 3}, 4)\n * 6\n * > findProduct(vector<int>{1, 2, 3, 1, 1}, 5)\n * 6\n * > findProduct(vector<int>{1, 1, 4, 5, 6}, 5)\n * 120\n */\nint findProduct(vector<int> arr, int n) {\nint product = 1;\n    unordered_set<int seen_elements;\n\n\nfor (int i = 0; i < n; ++i) {\n    if (seen_elements.find(arr[i]) == seen_elements.end()) {\n        product *= arr[i];\n        seen_elements.insert(arr[i]);\n    }\n}\nreturn product;", "entry_point": "findProduct", "result": "Compilation failed: /tmp/tmpuaa60ybe/temp.cpp: In function \u2018int findProduct(std::vector<int>, int)\u2019:\n/tmp/tmpuaa60ybe/temp.cpp:17:23: error: template argument 1 is invalid\n   17 |     unordered_set<int seen_elements;\n      |                       ^~~~~~~~~~~~~\n/tmp/tmpuaa60ybe/temp.cpp:17:23: error: template argument 2 is invalid\n/tmp/tmpuaa60ybe/temp.cpp:17:23: error: template argument 3 is invalid\n/tmp/tmpuaa60ybe/temp.cpp:17:23: error: template argument 4 is invalid\n/tmp/tmpuaa60ybe/temp.cpp:21:9: error: \u2018seen_elements\u2019 was not declared in this scope\n   21 |     if (seen_elements.find(arr[i]) == seen_elements.end()) {\n      |         ^~~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/26", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n * > checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4)\n * true\n * > checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7)\n * true\n * > checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7)\n * false\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\nfor (const auto& tuple : testList) {\n        for (int element : tuple) {\n            if (element != k) {\n                return false;\n            }\n        }\n    }\n    return true;", "entry_point": "checkKElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/27", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n * > remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")})\n * {string(\"words\"), string(\"letters\"), string(\"digits\")}\n * > remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")})\n * {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}\n * > remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")})\n * {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}\n */\nvector<string> remove(vector<string> list) {\nvector<string> result;\nfor (const string& s : list) {\nstring temp = \"\";\nfor (char c : s) {\nif (!isdigit(c)) {\ntemp += c;\n}\n}\nresult.push_back(temp);\n}\nreturn result;", "entry_point": "remove", "result": "passed", "passed": true}
{"task_id": "MBCPP/28", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n * > binomialCoeff(5, 2)\n * 10\n * > binomialCoeff(4, 3)\n * 4\n * > binomialCoeff(3, 2)\n * 3\n */\nint binomialCoeff(int n, int k) {\nif (k < 0 || k > n) {\n        return 0;\n    }\n    if (k == 0 || k == n) {\n        return 1;\n    }\n    if (k > n / 2) {\n        k = n - k;\n    }\n    long long res = 1;\n    for (int i = 1; i <= k; ++i) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;", "entry_point": "binomialCoeff", "result": "passed", "passed": true}
{"task_id": "MBCPP/29", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n * > getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7)\n * 1\n * > getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\nint res = 0;\n    for (int i = 0; i < arrSize; i++) {\n        res = res ^ arr[i];\n    }\n    return res;", "entry_point": "getOddOccurrence", "result": "passed", "passed": true}
{"task_id": "MBCPP/30", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n * > countSubstringWithEqualEnds(string(\"abcda\"))\n * 6\n * > countSubstringWithEqualEnds(string(\"ab\"))\n * 2\n */\nint countSubstringWithEqualEnds(string s) {\nint n = s.length();\n    int count = 0;\n// A frequency array to store counts of characters\n// 'a' to 'z'\nint freq[26] = {0};\n\n// Iterate through the string and update frequency of each character\nfor (int i = 0; i < n; i++)\n    freq[s[i] - 'a']++;\n\n// Calculate the number of substrings\n// For each character, if its frequency is 'k', then\n// the number of substrings starting and ending with\n// this character is k*(k+1)/2\nfor (int i = 0; i < 26; i++)\n    count += freq[i] * (freq[i] + 1) / 2;\n\nreturn count;", "entry_point": "countSubstringWithEqualEnds", "result": "passed", "passed": true}
{"task_id": "MBCPP/31", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3)\n * {5, 7, 1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1)\n * {1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 5)\n * {6, 5, 7, 8, 1}\n */\nvector<int> func(vector<vector<int>> nums, int k) {\nmap<int, int> freqMap;\n    for (const auto& list : nums) {\n        for (int num : list) {\n            freqMap[num]++;\n        }\n    }\n// Min-heap to store pairs of (frequency, number).\n// We use a min-heap because we want to keep track of the k most frequent elements.\n// If the heap size exceeds k, we remove the element with the smallest frequency (at the top of the min-heap).\npriority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;\n\nfor (auto const& [num, freq] : freqMap) {\n    minHeap.push({freq, num});\n    if (minHeap.size() > k) {\n        minHeap.pop();\n    }\n}\n\nvector<int> result;\nwhile (!minHeap.empty()) {\n    result.push_back(minHeap.top().second);\n    minHeap.pop();\n}\n\n// The elements are added to the result vector in increasing order of frequency.\n// Since we want the top k most frequent, we need to reverse the result.\nreverse(result.begin(), result.end());\n\nreturn result;", "entry_point": "func", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/32", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n * > maxPrimeFactors(15)\n * 5\n * > maxPrimeFactors(6)\n * 3\n * > maxPrimeFactors(2)\n * 2\n */\nint maxPrimeFactors(int n) {\nint maxPrime = -1;\n\n\n// Handle the case of factor 2\nwhile (n % 2 == 0) {\n    maxPrime = 2;\n    n /= 2;\n}\n\n// Handle odd factors\nfor (int i = 3; i <= sqrt(n); i += 2) {\n    while (n % i == 0) {\n        maxPrime = i;\n        n /= i;\n    }\n}\n\n// If n is still greater than 2, it means n itself is a prime factor\nif (n > 2) {\n    maxPrime = n;\n}\n\nreturn maxPrime;", "entry_point": "maxPrimeFactors", "result": "passed", "passed": true}
{"task_id": "MBCPP/33", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n * > decimalToBinary(10)\n * 1010\n * > decimalToBinary(1)\n * 1\n * > decimalToBinary(20)\n * 10100\n */\nint decimalToBinary(int n) {\nif (n == 0) return 0;\n    long long binaryNumber = 0;\n    int remainder, i = 1;\n    while (n != 0) {\n        remainder = n % 2;\n        n /= 2;\n        binaryNumber += remainder * i;\n        i *= 10;\n    }\n    return binaryNumber;", "entry_point": "decimalToBinary", "result": "passed", "passed": true}
{"task_id": "MBCPP/34", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n * > findMissing(vector<int>{1, 2, 3, 5}, 4)\n * 4\n * > findMissing(vector<int>{1, 3, 4, 5}, 4)\n * 2\n * > findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5)\n * 4\n */\nint findMissing(vector<int> ar, int n) {\nint expected_sum = (n * (n + 1)) / 2;\n    int actual_sum = 0;\n    for (int x : ar) {\n        actual_sum += x;\n    }\n    return expected_sum - actual_sum;", "entry_point": "findMissing", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/35", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n * > findRectNum(4)\n * 20\n * > findRectNum(5)\n * 30\n * > findRectNum(6)\n * 42\n */\nint findRectNum(int n) {\nreturn n * (n + 1);", "entry_point": "findRectNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/36", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n * > findNthDigit(1, 2, 1)\n * 5\n * > findNthDigit(3, 5, 1)\n * 6\n * > findNthDigit(5, 6, 5)\n * 3\n */\nint findNthDigit(int p, int q, int n) {\nint res = 0;\n    while (n > 0) {\n        n--;\n        p *= 10;\n        res = p / q;\n        p %= q;\n    }\n    return res;", "entry_point": "findNthDigit", "result": "passed", "passed": true}
{"task_id": "MBCPP/38", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n * > divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > divEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint divEvenOdd(vector<int> list1) {\nint firstEven = -1;\n    int firstOdd =\n\n\nfor (int num : list1) {\n    if (num % 2 == 0) { // Check for even\n        if (firstEven == -1) {\n            firstEven = num;\n        }\n    } else { // Number is odd\n        if (firstOdd == -1) {\n            firstOdd = num;\n        }\n    }\n    // If both are found, we can break early\n    if (firstEven != -1 && firstOdd != -1) {\n        break;\n    }\n}\n\nif (firstEven != -1 && firstOdd != -1) {\n    return firstEven / firstOdd;\n} else {\n    // Handle cases where an even or an odd number might not be found.\n    // The problem description implies they will always be found,\n    // but it's good practice to consider.\n    // For this problem, based on examples, we can assume valid input.\n    return 0; // Or throw an exception, depending on requirements.\n}", "entry_point": "divEvenOdd", "result": "Compilation failed: /tmp/tmpyldoj_7x/temp.cpp: In function \u2018int divEvenOdd(std::vector<int>)\u2019:\n/tmp/tmpyldoj_7x/temp.cpp:20:1: error: expected primary-expression before \u2018for\u2019\n   20 | for (int num : list1) {\n      | ^~~\n/tmp/tmpyldoj_7x/temp.cpp:38:3: error: \u2018else\u2019 without a previous \u2018if\u2019\n   38 | } else {\n      |   ^~~~\n/tmp/tmpyldoj_7x/temp.cpp:46:1: error: a template declaration cannot appear at block scope\n   46 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpyldoj_7x/temp.cpp:67:1: error: expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmpyldoj_7x/temp.cpp:15:35: note: to match this \u2018{\u2019\n   15 | int divEvenOdd(vector<int> list1) {\n      |                                   ^\n", "passed": false}
{"task_id": "MBCPP/39", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n * > rearangeString(string(\"aab\"))\n * string(\"aba\")\n * > rearangeString(string(\"aabb\"))\n * string(\"abab\")\n * > rearangeString(string(\"abccdd\"))\n * string(\"cdabcd\")\n */\nstring rearangeString(string s) {\n// Count character frequencies\n    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    } max-heap to store characters based on their frequencies\n// The pair stores {frequency, character}\npriority_queue<pair<int, char>> pq;\nfor (auto const& [key, val] : freq) {\n    pq.push({val, key});\n}\n\nstring result = \"\";\n// previous character and its frequency that was just placed in the result\npair<int, char> prev = {-1, '#'}; \n\nwhile (!pq.empty()) {\n    pair<int, char> current = pq.top();\n    pq.pop();\n\n    result += current.second;\n    current.first--;\n\n    // If the previously used character still has a positive frequency,\n    // add it back to the priority queue.\n    if (prev.first > 0) {\n        pq.push(prev);\n    }\n    prev = current;\n}\n\n// If the length of the result string is not equal to the original string,\n// it means a valid rearrangement is not possible.\nif (result.length() != s.length()) {\n    return \"\";\n}\n\nreturn result;", "entry_point": "rearangeString", "result": "Compilation failed: /tmp/tmpnm6jfafm/temp.cpp: In function \u2018std::string rearangeString(std::string)\u2019:\n/tmp/tmpnm6jfafm/temp.cpp:20:11: error: \u2018heap\u2019 was not declared in this scope\n   20 |     } max-heap to store characters based on their frequencies\n      |           ^~~~\n/tmp/tmpnm6jfafm/temp.cpp:23:18: warning: structured bindings only available with \u2018-std=c++17\u2019 or \u2018-std=gnu++17\u2019\n   23 | for (auto const& [key, val] : freq) {\n      |                  ^\n/tmp/tmpnm6jfafm/temp.cpp:24:5: error: \u2018pq\u2019 was not declared in this scope\n   24 |     pq.push({val, key});\n      |     ^~\n/tmp/tmpnm6jfafm/temp.cpp:31:9: error: \u2018pq\u2019 was not declared in this scope\n   31 | while (!pq.empty()) {\n      |         ^~\n", "passed": false}
{"task_id": "MBCPP/40", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n * > freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}})\n * {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}\n * > freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90}})\n * {{30, 3}, {80, 2}, {90, 2}, {15, 1}, {20, 1}, {40, 1}, {100, 1}, {110, 1}}\n */\nunordered_map<int, int> freqElement(vector<vector<int>> nums) {\nunordered_map<int, int> frequencies;\n    for (const auto& inner_list : nums) {\n        for (int element : inner_list) {\n            frequencies[element]++;\n        }\n    }\n    return frequencies;", "entry_point": "freqElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/41", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n * > filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 4, 6, 8, 10}\n * > filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {10, 20, 84}\n * > filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {8, 6, 4}\n */\nvector<int> filterEvennumbers(vector<int> nums) {\nvector<int> evenNumbers;\nfor (int num : nums) {\nif (num % 2 == 0) {\nevenNumbers.push_back(num);\n}\n}\nreturn evenNumbers;", "entry_point": "filterEvennumbers", "result": "passed", "passed": true}
{"task_id": "MBCPP/42", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of repeated elements in a given array.\n * > findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8)\n * 3\n * > findSum(vector<int>{1, 2, 3, 1, 1}, 5)\n * 3\n * > findSum(vector<int>{1, 1, 2}, 3)\n * 2\n */\nint findSum(vector<int> arr, int n) {\nunordered_map<int, int> freq;\n    for (int x : arr) {\n        freq[x]++;\n    }\nint sum = 0;\nfor (auto const& [val, count] : freq) {\n    if (count > 1) {\n        sum += val;\n    }\n}\nreturn sum;", "entry_point": "findSum", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/43", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n * > textMatch(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textMatch(string text) {\nregex pattern(\"^[a-z]+_[a-z]+$\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatch", "result": "Compilation failed: /tmp/tmplhr7inlh/temp.cpp: In function \u2018std::string textMatch(std::string)\u2019:\n/tmp/tmplhr7inlh/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmplhr7inlh/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmplhr7inlh/temp.cpp:15:31: note: to match this \u2018{\u2019\n   15 | string textMatch(string text) {\n      |                               ^\n", "passed": false}
{"task_id": "MBCPP/44", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the beginning of a string.\n * > textMatchString(string(\" python\"))\n * string(\"Not matched!\")\n * > textMatchString(string(\"python\"))\n * string(\"Found a match!\")\n * > textMatchString(string(\"  lang\"))\n * string(\"Not matched!\")\n */\nstring textMatchString(string text) {\nregex r(\"^python\");\n    if (regex_search(text, r)) {\n        return string(\"Found a match!\");\n    } else {\n        return string(\"Not matched!\");\n    }", "entry_point": "textMatchString", "result": "Compilation failed: /tmp/tmp5h9comri/temp.cpp: In function \u2018std::string textMatchString(std::string)\u2019:\n/tmp/tmp5h9comri/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp5h9comri/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmp5h9comri/temp.cpp:15:37: note: to match this \u2018{\u2019\n   15 | string textMatchString(string text) {\n      |                                     ^\n", "passed": false}
{"task_id": "MBCPP/45", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the gcd of the given array elements.\n * > getGcd(vector<int>{2, 4, 6, 8, 16})\n * 2\n * > getGcd(vector<int>{1, 2, 3})\n * 1\n * > getGcd(vector<int>{2, 4, 6, 8})\n * 2\n */\nint getGcd(vector<int> l) {\nint gcd(int a, int b) {\n    while (b) {\n        a %= b;\n        swap(a, b);\n    }\n    return a;\n}\n\nif (l.empty()) {\n    return 0; // Or handle error, depending on requirements\n}\n\nint result = l[0];\nfor (size_t i = 1; i < l.size(); ++i) {\n    result = gcd(result, l[i]);\n}\nreturn result;", "entry_point": "getGcd", "result": "Compilation failed: /tmp/tmpy95vy0ub/temp.cpp: In function \u2018int getGcd(std::vector<int>)\u2019:\n/tmp/tmpy95vy0ub/temp.cpp:16:23: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | int gcd(int a, int b) {\n      |                       ^\n/tmp/tmpy95vy0ub/temp.cpp:30:14: error: \u2018gcd\u2019 was not declared in this scope\n   30 |     result = gcd(result, l[i]);\n      |              ^~~\n", "passed": false}
{"task_id": "MBCPP/46", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to determine whether all the numbers are different from each other are not.\n * > testDistinct(vector<int>{1, 5, 7, 9})\n * true\n * > testDistinct(vector<int>{2, 4, 5, 5, 7, 9})\n * false\n * > testDistinct(vector<int>{1, 2, 3})\n * true\n */\nbool testDistinct(vector<int> data) {\nstd::sort(data.begin(), data.end());\n    for (size_t i = 0; i < data.size() - 1; ++i) {\n        if (data[i] == data[i+1]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "testDistinct", "result": "passed", "passed": true}
{"task_id": "MBCPP/47", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit when factorial of a divides factorial of b.\n * > computeLastDigit(2, 4)\n * 2\n * > computeLastDigit(6, 8)\n * 6\n * > computeLastDigit(1, 2)\n * 2\n */\nint computeLastDigit(int a, int b) {\nif (a == b)\n        return 1;\n    else if ((b - a) >= 5)\n        return 0;\n    else {\n        int variable = 1;\n        for (int i = a + 1; i <= b; i++)\n            variable = (variable * (i % 10)) % 10;\n        return variable;\n    }", "entry_point": "computeLastDigit", "result": "Compilation failed: /tmp/tmp9hi_wolz/temp.cpp: In function \u2018int computeLastDigit(int, int)\u2019:\n/tmp/tmp9hi_wolz/temp.cpp:27:1: error: a template declaration cannot appear at block scope\n   27 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp9hi_wolz/temp.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp9hi_wolz/temp.cpp:15:36: note: to match this \u2018{\u2019\n   15 | int computeLastDigit(int a, int b) {\n      |                                    ^\n", "passed": false}
{"task_id": "MBCPP/48", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all odd bits of a given number.\n * > oddBitSetNumber(10)\n * 15\n * > oddBitSetNumber(20)\n * 21\n * > oddBitSetNumber(30)\n * 31\n */\nint oddBitSetNumber(int n) {\nint result = n;\n    for (int i = 1; i < 32; i += 2) { // Iterate through bit positions, starting from the 1st bit (0-indexed)\n        result |= (1 << i); // Set the i-th bit\n    }\n    return result;", "entry_point": "oddBitSetNumber", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/49", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every first or specified element from a given two-dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1)\n * {2, 5, 1}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\nvector<int> result;\nfor (const auto& row : nums) {\nif (n >= 0 && n < row.size()) {\nresult.push_back(row[n]);\n}\n}\nreturn result;", "entry_point": "specifiedElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/51", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is equilateral or not.\n * > checkEquilateral(6, 8, 12)\n * false\n * > checkEquilateral(6, 6, 12)\n * false\n * > checkEquilateral(6, 6, 6)\n * true\n */\nbool checkEquilateral(int x, int y, int z) {\nif (x == y && y == z)\n        return true;\n    else\n        return false;", "entry_point": "checkEquilateral", "result": "passed", "passed": true}
{"task_id": "MBCPP/52", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate area of a parallelogram.\n * > parallelogramArea(10, 20)\n * 200\n * > parallelogramArea(15, 20)\n * 300\n * > parallelogramArea(8, 9)\n * 72\n */\nint parallelogramArea(int b, int h) {\nreturn b * h;", "entry_point": "parallelogramArea", "result": "passed", "passed": true}
{"task_id": "MBCPP/53", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the first and last characters of a given string are equal or not.\n * > checkEquality(string(\"abcda\"))\n * string(\"Equal\")\n * > checkEquality(string(\"ab\"))\n * string(\"Not Equal\")\n * > checkEquality(string(\"mad\"))\n * string(\"Not Equal\")\n */\nstring checkEquality(string str) {\nif (str.length() == 0) {\n        return string(\"Not Equal\");\n    }\n    if (str[0] == str[str.length() - 1]) {\n        return string(\"Equal\");\n    } else {\n        return string(\"Not Equal\");\n    }", "entry_point": "checkEquality", "result": "Compilation failed: /tmp/tmphpizi23j/temp.cpp: In function \u2018std::string checkEquality(std::string)\u2019:\n/tmp/tmphpizi23j/temp.cpp:25:1: error: a template declaration cannot appear at block scope\n   25 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmphpizi23j/temp.cpp:46:1: error: expected \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmphpizi23j/temp.cpp:15:34: note: to match this \u2018{\u2019\n   15 | string checkEquality(string str) {\n      |                                  ^\n", "passed": false}
{"task_id": "MBCPP/54", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using counting sort.\n * > countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8})\n * {1, 4, 5, 6, 7, 8, 23}\n * > countingSort(vector<int>{12, 9, 28, 33, 69, 45})\n * {9, 12, 28, 33, 45, 69}\n * > countingSort(vector<int>{8, 4, 14, 3, 2, 1})\n * {1, 2, 3, 4, 8, 14}\n */\nvector<int> countingSort(vector<int> myList) {\nif (myList.empty()) {\n        return {};\n    }\n    int maxVal = myList[0];\n    for (int x : myList) {\n        if (x > maxVal) {\n            maxVal = x;\n        }\n    }\n\n    vector<int> count(maxVal + 1, 0);\n    for (int x : myList) {\n        count[x]++;\n    }\n\n    for (int i = 1; i <= maxVal; ++i) {\n        count[i] += count[i - 1];\n    }\n\n    vector<int> output(myList.size());\n    for (int i = myList.size() - 1; i >= 0; --i) {\n        output[count[myList[i]] - 1] = myList[i];\n        count[myList[i]]--;\n    }\n\n    return output;", "entry_point": "countingSort", "result": "passed", "passed": true}
{"task_id": "MBCPP/55", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of geometric series.\n * > tnGp(1, 5, 2)\n * 16\n * > tnGp(1, 5, 4)\n * 256\n * > tnGp(2, 6, 3)\n * 486\n */\nint tnGp(int a, int n, int r) {\nreturn a * pow(r, n - 1);", "entry_point": "tnGp", "result": "passed", "passed": true}
{"task_id": "MBCPP/56", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if a given number is one less than twice its reverse.\n * > check(70)\n * false\n * > check(23)\n * false\n * > check(73)\n * true\n */\nbool check(int n) {\nint reversed_n = 0;\n    int temp_n = n;\n    while (temp_n > 0) {\n        reversed_n = reversed_n * 10 + temp_n % 10;\n        temp_n /= 10;\n    }\n    return n == (2 * reversed_n - 1);", "entry_point": "check", "result": "passed", "passed": true}
{"task_id": "MBCPP/57", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest number that can be formed with the given digits.\n * > findMaxNum(vector<int>{1, 2, 3}, 3)\n * 321\n * > findMaxNum(vector<int>{4, 5, 6, 1}, 4)\n * 6541\n * > findMaxNum(vector<int>{1, 2, 3, 9}, 4)\n * 9321\n */\nint findMaxNum(vector<int> arr, int n) {\nsort(arr.begin(), arr.end(), greater<int>());\nint num = 0;\nfor (int i = 0; i < n; i++) {\nnum = num * 10 + arr[i];\n}\nreturn num;", "entry_point": "findMaxNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/58", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two integers have opposite sign or not.\n * > oppositeSigns(1, -2)\n * true\n * > oppositeSigns(3, 2)\n * false\n * > oppositeSigns(-10, -10)\n * false\n */\nbool oppositeSigns(int x, int y) {\nreturn ((x ^ y) < 0);", "entry_point": "oppositeSigns", "result": "passed", "passed": true}
{"task_id": "MBCPP/59", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth octagonal number.\n * > isOctagonal(5)\n * 65\n * > isOctagonal(10)\n * 280\n * > isOctagonal(15)\n * 645\n */\nint isOctagonal(int n) {\nreturn n * (3 * n - 2);", "entry_point": "isOctagonal", "result": "passed", "passed": true}
{"task_id": "MBCPP/60", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n * > maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8)\n * 5\n * > maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7)\n * 4\n * > maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5)\n * 1\n */\nint maxLenSub(vector<int> arr, int n) {\nif (n == 0) {\nreturn 0;\n}\nvector<int> dp(n, 1);\nint maxLength = 1;\nfor (int i = 1; i < n; ++i) {\nfor (int j = 0; j < i; ++j) {\nif (abs(arr[i] - arr[j]) <= 1) {\ndp[i] = max(dp[i], dp[j] + 1);\n}\n}\nmaxLength = max(maxLength, dp[i]);\n}\nreturn maxLength;", "entry_point": "maxLenSub", "result": "passed", "passed": true}
{"task_id": "MBCPP/61", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of substrings with the sum of digits equal to their length.\n * > countSubstrings(string(\"112112\"), 6)\n * 6\n * > countSubstrings(string(\"111\"), 3)\n * 6\n * > countSubstrings(string(\"1101112\"), 7)\n * 12\n */\nint countSubstrings(string s, int n) {\nint count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;", "entry_point": "countSubstrings", "result": "passed", "passed": true}
{"task_id": "MBCPP/62", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest number in a list.\n * > smallestNum(vector<int>{10, 20, 1, 45, 99})\n * 1\n * > smallestNum(vector<int>{1, 2, 3})\n * 1\n * > smallestNum(vector<int>{45, 46, 50, 60})\n * 45\n */\nint smallestNum(vector<int> xs) {\nint smallest = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n        if (xs[i] < smallest) {\n            smallest = xs[i];\n        }\n    }\n    return smallest;", "entry_point": "smallestNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/63", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between available pairs in the given tuple list.\n * > maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}})\n * 7\n * > maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}})\n * 15\n * > maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}})\n * 23\n */\nint maxDifference(vector<vector<int>> testList) {\nint maxDiff = 0;\n    for (const auto& p : testList) {\n        maxDiff = max(maxDiff, abs(p[0] - p[1]));\n    }\n    return maxDiff;", "entry_point": "maxDifference", "result": "passed", "passed": true}
{"task_id": "MBCPP/66", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count positive numbers in a list.\n * > posCount(vector<int>{1, -2, 3, -4})\n * 2\n * > posCount(vector<int>{3, 4, 5, -1})\n * 3\n * > posCount(vector<int>{1, 2, 3, 4})\n * 4\n */\nint posCount(vector<int> list) {\nint count = 0;\n    for (int num : list) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "posCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/68", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given array is monotonic or not.\n * > isMonotonic(vector<int>{6, 5, 4, 4})\n * true\n * > isMonotonic(vector<int>{1, 2, 2, 3})\n * true\n * > isMonotonic(vector<int>{1, 3, 2})\n * false\n */\nbool isMonotonic(vector<int> a) {\nif (a.size() <= 1) {{\nreturn true;\n}\n\n\nbool increasing = true;\nbool decreasing = true;\n\nfor (int i = 0; i < a.size() - 1; ++i) {\n    if (a[i] > a[i+1]) {\n        increasing = false;\n    }\n    if (a[i] < a[i+1]) {\n        decreasing = false;\n    }\n}\n\nreturn increasing || decreasing;", "entry_point": "isMonotonic", "result": "Compilation failed: /tmp/tmpv4e2ynbj/temp.cpp: In function \u2018bool isMonotonic(std::vector<int>)\u2019:\n/tmp/tmpv4e2ynbj/temp.cpp:36:1: error: a template declaration cannot appear at block scope\n   36 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpv4e2ynbj/temp.cpp:57:1: error: expected \u2018}\u2019 at end of input\n   57 | }\n      | ^\n/tmp/tmpv4e2ynbj/temp.cpp:15:33: note: to match this \u2018{\u2019\n   15 | bool isMonotonic(vector<int> a) {\n      |                                 ^\n/tmp/tmpv4e2ynbj/temp.cpp:57:1: warning: control reaches end of non-void function [-Wreturn-type]\n   57 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/69", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a list contains the given sublist or not.\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7})\n * false\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3})\n * true\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6})\n * false\n */\nbool isSublist(vector<int> l, vector<int> s) {\nint n = l.size();\n    int m = s.size();\n    if (m == 0)\n        return true;\n    if (n == 0 || m > n)\n        return false;\n    for (int i = 0; i <= n - m; ++i) {\n        bool match = true;\n        for (int j = 0; j < m; ++j) {\n            if (l[i + j] != s[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match)\n            return true;\n    }\n    return false;", "entry_point": "isSublist", "result": "passed", "passed": true}
{"task_id": "MBCPP/70", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether all the given tuples have equal length or not.\n * > getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3)\n * string(\"All tuples have same length\")\n * > getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3)\n * string(\"All tuples do not have same length\")\n * > getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2)\n * string(\"All tuples have same length\")\n */\nstring getEqual(vector<vector<int>> input, int k) {\nfor (long unsigned int i = 0; i < input.size(); i++) {\n        if (input[i].size() != (long unsigned int)k) {\n            return \"All tuples do not have same length\";\n        }\n    }\n    return \"All tuples have same length\";", "entry_point": "getEqual", "result": "passed", "passed": true}
{"task_id": "MBCPP/71", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using comb sort.\n * > combSort(vector<int>{5, 15, 37, 25, 79})\n * {5, 15, 25, 37, 79}\n * > combSort(vector<int>{41, 32, 15, 19, 22})\n * {15, 19, 22, 32, 41}\n * > combSort(vector<int>{99, 15, 13, 47})\n * {13, 15, 47, 99}\n */\nvector<int> combSort(vector<int> nums) {\nint n = nums.size();\n    int gap = n;\n    bool swapped = true;\n    float shrink_factor = 1.3e (gap != 1 || swapped == true) {\n    // Shrink gap by Shrink factor\n    gap = (int)(gap / shrink_factor);\n    if (gap < 1)\n        gap = 1;\n\n    swapped = false;\n    for (int i = 0; i < n - gap; i++) {\n        if (nums[i] > nums[i + gap]) {\n            swap(nums[i], nums[i + gap]);\n            swapped = true;\n        }\n    }\n}\nreturn nums;", "entry_point": "combSort", "result": "Compilation failed: /tmp/tmp0utv07rr/temp.cpp:19:27: error: exponent has no digits\n   19 |     float shrink_factor = 1.3e (gap != 1 || swapped == true) {\n      |                           ^~~~\n/tmp/tmp0utv07rr/temp.cpp: In function \u2018std::vector<int> combSort(std::vector<int>)\u2019:\n/tmp/tmp0utv07rr/temp.cpp:34:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   34 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/72", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as difference of two squares or not.\n * > difSquare(5)\n * true\n * > difSquare(10)\n * false\n * > difSquare(15)\n * true\n */\nbool difSquare(int n) {\nfor (int a = 1; a * a <= n; ++a) {\n        // We are looking for n = b*b - a*a, which means b*b = n + a*a.\n        // So, n + a*a must be a perfect square.\n        int val = n + a * a;\n        int b = round(sqrt(val));\n        if (b * b == val) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "difSquare", "result": "passed", "passed": true}
{"task_id": "MBCPP/73", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string with multiple delimiters by using regex.\n * > multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"))\n * {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}\n * > multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"))\n * {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}\n * > multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"))\n * {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}\n */\nvector<string> multipleSplit(string text) {\nstd::vector<std::string> result;\nstd::regex re(\"[n*]+\"); // Delimiters are newline and asterisk, matched one or more times\nstd::sregex_token_iterator\nfirst(text.begin(), text.end(), re, -1),\nlast;\nfor (auto it = first; it != last; ++it) {\nif (!it->str().empty()) { // Avoid adding empty strings from consecutive delimiters\nresult.push_back(it->str());\n}\n}\nreturn result;", "entry_point": "multipleSplit", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/74", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether it follows the sequence given in the patterns array.\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * true\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * false\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")})\n * false\n */\nbool isSamepatterns(vector<string> colors, vector<string> patterns) {\nif (colors.size() != patterns.size()) {\n        return false;\n    }\n    map<string, string> color_to_pattern;\n    map<string, string> pattern_to_color;\n    for (int i = 0; i < colors.size(); i++) {\n        string color = colors[i];\n        string pattern = patterns[i];\n        if (color_to_pattern.count(color) && color_to_pattern[color] != pattern) {\n            return false;\n        }\n        if (pattern_to_color.count(pattern) && pattern_to_color[pattern] != color) {\n            return false;\n        }\n        color_to_pattern[color] = pattern;\n        pattern_to_color[pattern] = color;\n    }\n    return true;", "entry_point": "isSamepatterns", "result": "passed", "passed": true}
{"task_id": "MBCPP/75", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n * > findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6)\n * string(\"[(6, 24, 12)]\")\n * > findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5)\n * string(\"[(5, 25, 30)]\")\n * > findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4)\n * string(\"[(8, 16, 4)]\")\n */\nstring findTuples(vector<vector<int>> testList, int k) {\nstring result = \"[\";\n    for (const auto& tuple : testList) {\n        bool allDivisible = true;\n        for (int element : tuple) {\n            if (element % k != 0) {\n                allDivisible = false;\n                break;\n            }\n        }\n        if (allDivisible) {\n            if (result.length() > 1) {\n                result += \", \";\n            }\n            result += \"(\";\n            for (size_t i = 0; i < tuple.size(); ++i) {\n                result += to_string(tuple[i]);\n                if (i < tuple.size() - 1) {\n                    result += \", \";\n                }\n            }\n            result += \")\";\n        }\n    }\n    result += \"]\";\n    return result;", "entry_point": "findTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/76", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(2, 2)\n * 5\n * > countSquares(1, 1)\n * 1\n */\nint countSquares(int m, int n) {\nlong long sum = 0;\n    for (int i = 1; i <= min(m, n); i++) {\n        sum += (m - i + 1) * (n - i + 1);\n    }\n    return sum;", "entry_point": "countSquares", "result": "passed", "passed": true}
{"task_id": "MBCPP/77", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of even and odd digits.\n * > isDiff(1212112)\n * true\n * > isDiff(1212)\n * false\n */\nbool isDiff(int n) {\nint evenSum = 0;\n    int oddSum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 0) {\n            evenSum += digit;\n        } else {\n            oddSum += digit;\n        }\n        n /= 10;\n    }\n    return abs(evenSum - oddSum) == 1;", "entry_point": "isDiff", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/78", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of integers with odd number of set bits.\n * > countWithOddSetbits(5)\n * 3\n * > countWithOddSetbits(10)\n * 5\n * > countWithOddSetbits(15)\n * 8\n */\nint countWithOddSetbits(int n) {\nint count = 0;\n    for (int i = 1; i <= n; i++) {\n        int setBits = 0;\n        int num = i;\n        while (num > 0) {\n            num &= (num - 1);\n            setBits++;\n        }\n        if (setBits % 2 != 0) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countWithOddSetbits", "result": "passed", "passed": true}
{"task_id": "MBCPP/79", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is odd or not.\n * > wordLen(string(\"Hadoop\"))\n * false\n * > wordLen(string(\"great\"))\n * true\n * > wordLen(string(\"structure\"))\n * true\n */\nbool wordLen(string s) {\nreturn s.length() % 2 != 0;", "entry_point": "wordLen", "result": "passed", "passed": true}
{"task_id": "MBCPP/80", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth tetrahedral number.\n * > tetrahedralNumber(5)\n * 35.0\n * > tetrahedralNumber(6)\n * 56.0\n * > tetrahedralNumber(7)\n * 84.0\n */\ndouble tetrahedralNumber(int n) {\nreturn (double)n * (n + 1) * (n + 2) / 6;", "entry_point": "tetrahedralNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/81", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to zip the two given tuples.\n * > zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6})\n * {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}\n * > zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7})\n * {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}\n * > zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8})\n * {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}\n */\nvector<vector<int>> zipTuples(vector<int> testTup1, vector<int> testTup2) {\nvector<vector<int>> result;\nint n1 = testTup1.size();\nint n2 = testTup2.size();\nfor (int i = 0; i < n1; ++i) {\nresult.push_back({testTup1[i], testTup2[i % n2]});\n}\nreturn result;", "entry_point": "zipTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/82", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a sphere.\n * > volumeSphere(10)\n * 4188.790204786391\n * > volumeSphere(25)\n * 65449.84694978735\n * > volumeSphere(20)\n * 33510.32163829113\n */\ndouble volumeSphere(int r) {\nreturn (4.0/3.0) * M_PI * r * r * r;", "entry_point": "volumeSphere", "result": "passed", "passed": true}
{"task_id": "MBCPP/83", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the character made by adding all the characters of the given string.\n * > getChar(string(\"abc\"))\n * string(\"f\")\n * > getChar(string(\"gfg\"))\n * string(\"t\")\n * > getChar(string(\"ab\"))\n * string(\"c\")\n */\nstring getChar(string strr) {\nint sum = 0;\n    for (char c : strr) {\n        sum += (c - 'a' + 1);\n    }\n    sum = (sum - 1) % 26 + 1;\n    return string(1, (char)('a' + sum - 1));", "entry_point": "getChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/84", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th number in newman conway sequence.\n * > sequence(10)\n * 6\n * > sequence(2)\n * 1\n * > sequence(3)\n * 2\n */\nint sequence(int n) {\nif (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 1;\n    }[1] = 1;\ndp[2] = 1;\nfor (int i = 3; i <= n; ++i) {\ndp[i] = dp[dp[i - 1]] + dp[dp[i - 2]];\n}\nreturn dp[n];", "entry_point": "sequence", "result": "Compilation failed: /tmp/tmprzcwze16/temp.cpp: In function \u2018int sequence(int)\u2019:\n/tmp/tmprzcwze16/temp.cpp:21:7: error: expected identifier before numeric constant\n   21 |     }[1] = 1;\n      |       ^\n/tmp/tmprzcwze16/temp.cpp: In lambda function:\n/tmp/tmprzcwze16/temp.cpp:21:10: error: expected \u2018{\u2019 before \u2018=\u2019 token\n   21 |     }[1] = 1;\n      |          ^\n/tmp/tmprzcwze16/temp.cpp: In function \u2018int sequence(int)\u2019:\n/tmp/tmprzcwze16/temp.cpp:21:12: error: no match for \u2018operator=\u2019 (operand types are \u2018sequence(int)::<lambda()>\u2019 and \u2018int\u2019)\n   21 |     }[1] = 1;\n      |            ^\n/tmp/tmprzcwze16/temp.cpp:21:8: note: candidate: \u2018sequence(int)::<lambda()>& sequence(int)::<lambda()>::operator=(const sequence(int)::<lambda()>&)\u2019 <deleted>\n   21 |     }[1] = 1;\n      |        ^\n/tmp/tmprzcwze16/temp.cpp:21:8: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const sequence(int)::<lambda()>&\u2019\n/tmp/tmprzcwze16/temp.cpp:22:1: error: \u2018dp\u2019 was not declared in this scope\n   22 | dp[2] = 1;\n      | ^~\n", "passed": false}
{"task_id": "MBCPP/85", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a sphere.\n * > surfaceareaSphere(10)\n * 1256.6370614359173\n * > surfaceareaSphere(15)\n * 2827.4333882308138\n * > surfaceareaSphere(20)\n * 5026.548245743669\n */\ndouble surfaceareaSphere(int r) {\nreturn 4 * M_PI * r * r;", "entry_point": "surfaceareaSphere", "result": "passed", "passed": true}
{"task_id": "MBCPP/86", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth centered hexagonal number.\n * > centeredHexagonalNumber(10)\n * 271\n * > centeredHexagonalNumber(2)\n * 7\n * > centeredHexagonalNumber(9)\n * 217\n */\nint centeredHexagonalNumber(int n) {\nreturn 3 * n * (n - 1) + 1;", "entry_point": "centeredHexagonalNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/87", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge three dictionaries into a single expression.\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}}\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}})\n * {{string(\"W\"), string(\"White\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}}\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"L\"), string(\"lavender\")}, {string(\"B\"), string(\"Blue\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}, {string(\"R\"), string(\"Red\")}, {string(\"G\"), string(\"Green\")}, {string(\"L\"), string(\"lavender\")}, {string(\"W\"), string(\"White\")}}\n */\nunordered_map<string, string> mergeDictionariesThree(unordered_map<string, string> dict1, unordered_map<string, string> dict2, unordered_map<string, string> dict3) {\nunordered_map<string, string> mergedDict = dict1;\n    for (auto const& [key, val] : dict2) {\n        mergedDict[key] = val;\n    }\n    for (auto const& [key, val] : dict3) {\n        mergedDict[key] = val;\n    }\n    return mergedDict;", "entry_point": "mergeDictionariesThree", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/88", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the frequency of the elements in a list.\n * > freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30})\n * {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}\n * > freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4})\n * {{1, 3}, {2, 2}, {3, 3}, {4, 3}}\n * > freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5})\n * {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}\n */\nunordered_map<int, int> freqCount(vector<int> list1) {\nunordered_map<int, int> freq;\n    for (int i = 0; i < list1.size(); i++) {\n        freq[list1[i]]++;\n    }\n    return freq;", "entry_point": "freqCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/89", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the closest smaller number than n.\n * > closestNum(11)\n * 10\n * > closestNum(7)\n * 6\n * > closestNum(12)\n * 11\n */\nint closestNum(int n) {\nreturn n - 1;", "entry_point": "closestNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/90", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the longest word.\n * > lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")})\n * 7\n * > lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")})\n * 3\n * > lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")})\n * 5\n */\nint lenLog(vector<string> list1) {\nint maxLength = 0;\n    for (const string& word : list1) {\n        if (word.length() > maxLength) {\n            maxLength = word.length();\n        }\n    }\n    return maxLength;", "entry_point": "lenLog", "result": "passed", "passed": true}
{"task_id": "MBCPP/91", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a substring is present in a given list of string values.\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"))\n * true\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"))\n * false\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"))\n * true\n */\nbool findSubstring(vector<string> str1, string subStr) {\nfor (const string& s : str1) {\n        if (s.find(subStr) != string::npos) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "findSubstring", "result": "passed", "passed": true}
{"task_id": "MBCPP/92", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is undulating or not.\n * > isUndulating(string(\"1212121\"))\n * true\n * > isUndulating(string(\"1991\"))\n * false\n * > isUndulating(string(\"121\"))\n * true\n */\nbool isUndulating(string n) {\nif (n.length() < 3) {\n        return false; \n    }\n    for (int i = 2; i < n.length(); i++) {\n        if (!(n[i] == n[i - 2])) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "isUndulating", "result": "passed", "passed": true}
{"task_id": "MBCPP/93", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the value of 'a' to the power 'b'.\n * > power(3, 4)\n * 81\n * > power(2, 3)\n * 8\n * > power(5, 5)\n * 3125\n */\nint power(int a, int b) {\nint res = 1;\n    while (b > 0) {\n        if (b & 1)\n            res = res * a;\n        a = a * a;\n        b >>= 1;\n    }\n    return res;", "entry_point": "power", "result": "passed", "passed": true}
{"task_id": "MBCPP/95", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum length of sublist.\n * > findMinLength(vector<vector<int>>{{1}, {1, 2}})\n * 1\n * > findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}})\n * 2\n * > findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}})\n * 3\n */\nint findMinLength(vector<vector<int>> lst) {\nif (lst.empty()) {\n        return 0; \n    }\n    int minLength = INT_MAX; \n    for (const auto& sublist : lst) {\n        if (sublist.size() < minLength) {\n            minLength = sublist.size();\n        }\n    }\n    return minLength;", "entry_point": "findMinLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/96", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the number of divisors of a given integer.\n * > divisor(15)\n * 4\n * > divisor(12)\n * 6\n * > divisor(9)\n * 3\n */\nint divisor(int n) {\nint count = 0;\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0) {\n            if (i * i == n)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return count;", "entry_point": "divisor", "result": "passed", "passed": true}
{"task_id": "MBCPP/97", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency count of list of lists.\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}})\n * {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > frequencyLists(vector<vector<int>>{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}})\n * {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}\n */\nunordered_map<int, int> frequencyLists(vector<vector<int>> list1) {\nunordered_map<int, int> freqMap;\n    for (const auto& innerList : list1) {\n        for (int num : innerList) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;", "entry_point": "frequencyLists", "result": "passed", "passed": true}
{"task_id": "MBCPP/98", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply all the numbers in a list and divide with the length of the list.\n * > multiplyNum(vector<int>{8, 2, 3, -1, 7})\n * -67.2\n * > multiplyNum(vector<int>{-10, -20, -30})\n * -2000.0\n * > multiplyNum(vector<int>{19, 15, 18})\n * 1710.0\n */\ndouble multiplyNum(vector<int> numbers) {\ndouble product = 1.0;\n    for (int num : numbers) {\n        product *= num;\n    }\n    if (numbers.empty()) {\n        return 0.0; // Or handle as an error, depending on requirements\n    }\n    return product / numbers.size();", "entry_point": "multiplyNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/99", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given decimal number to its binary equivalent.\n * > decimalToBinary(8)\n * string(\"1000\")\n * > decimalToBinary(18)\n * string(\"10010\")\n * > decimalToBinary(7)\n * string(\"111\")\n */\nstring decimalToBinary(int n) {\nif (n == 0) {\n        return \"0\";\n    }\n    string binaryString = \"\";\n    while (n > 0) {\n        binaryString = (n % 2 == 0 ? \"0\" : \"1\") + binaryString;\n        n /= 2;\n    }\n    return binaryString;", "entry_point": "decimalToBinary", "result": "passed", "passed": true}
{"task_id": "MBCPP/100", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the next smallest palindrome of a specified number.\n * > nextSmallestPalindrome(99)\n * 101\n * > nextSmallestPalindrome(1221)\n * 1331\n * > nextSmallestPalindrome(120)\n * 121\n */\nint nextSmallestPalindrome(int num) {\nnum++; // Start checking from the next number\n    while (true) {\n        string s = to_string(num);\n        string reversed_s = s;\n        reverse(reversed_s.begin(), reversed_s.end());\n        if (s == reversed_s) {\n            return num;\n        }\n        num++;", "entry_point": "nextSmallestPalindrome", "result": "Compilation failed: /tmp/tmp9tf738ar/temp.cpp: In function \u2018int nextSmallestPalindrome(int)\u2019:\n/tmp/tmp9tf738ar/temp.cpp:27:1: error: a template declaration cannot appear at block scope\n   27 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp9tf738ar/temp.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp9tf738ar/temp.cpp:15:37: note: to match this \u2018{\u2019\n   15 | int nextSmallestPalindrome(int num) {\n      |                                     ^\n", "passed": false}
{"task_id": "MBCPP/101", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the kth element in the given array.\n * > kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2)\n * 3\n * > kthElement(vector<int>{17, 24, 8, 23}, 4, 3)\n * 8\n * > kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4)\n * 36\n */\nint kthElement(vector<int> arr, int n, int k) {\nsort(arr.begin(), arr.end());\n    return arr[k-1];", "entry_point": "kthElement", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/102", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert snake case string to camel case string.\n * > snakeToCamel(string(\"python_program\"))\n * string(\"PythonProgram\")\n * > snakeToCamel(string(\"python_language\"))\n * string(\"PythonLanguage\")\n * > snakeToCamel(string(\"programming_language\"))\n * string(\"ProgrammingLanguage\")\n */\nstring snakeToCamel(string word) {\nstring camelCaseWord = \"\";\n    bool capitalizeNext = true;\n    for (char c : word) {\n        if (c == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                camelCaseWord += toupper(c);\n                capitalizeNext = false;\n            } else {\n                camelCaseWord += tolower(c);\n            }\n        }\n    }\n    return camelCaseWord;", "entry_point": "snakeToCamel", "result": "passed", "passed": true}
{"task_id": "MBCPP/103", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find eulerian number a(n, m).\n * > eulerianNum(3, 1)\n * 4\n * > eulerianNum(4, 1)\n * 11\n * > eulerianNum(5, 3)\n * 26\n */\nint eulerianNum(int n, int m) {\nif (m >= n || n == 0)\n        return 0;\n    if (m == 0)\n        return 1;\n    return ((n - m) * eulerianNum(n - 1, m - 1)) + ((m + 1) * eulerianNum(n - 1, m));", "entry_point": "eulerianNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/104", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}})\n * {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}\n * > sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}})\n * {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> inputList) {\nfor (auto &sublist : inputList) {\n        sort(sublist.begin(), sublist.end(), [](const string &a, const string &b) {\n            return a < b;\n        });\n    }\n    return inputList;", "entry_point": "sortSublists", "result": "passed", "passed": true}
{"task_id": "MBCPP/105", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count true booleans in the given list.\n * > count(vector<bool>{true, false, true})\n * 2\n * > count(vector<bool>{false, false})\n * 0\n * > count(vector<bool>{true, true, true})\n * 3\n */\nint count(vector<bool> lst) {\nint num_true = 0;\n    for (bool b : lst) {\n        if (b) {\n            num_true++;\n        }\n    }\n    return num_true;", "entry_point": "count", "result": "passed", "passed": true}
{"task_id": "MBCPP/106", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given list to the given tuples.\n * > addLists(vector<int>{5, 6, 7}, vector<int>{9, 10})\n * {9, 10, 5, 6, 7}\n * > addLists(vector<int>{6, 7, 8}, vector<int>{10, 11})\n * {10, 11, 6, 7, 8}\n * > addLists(vector<int>{7, 8, 9}, vector<int>{11, 12})\n * {11, 12, 7, 8, 9}\n */\nvector<int> addLists(vector<int> testList, vector<int> testTup) {\nvector<int> result = testTup;\nresult.insert(result.end(), testList.begin(), testList.end());\nreturn result;", "entry_point": "addLists", "result": "passed", "passed": true}
{"task_id": "MBCPP/107", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count hexadecimal numbers for a given range.\n * > countHexadecimal(10, 15)\n * 6\n * > countHexadecimal(2, 4)\n * 0\n * > countHexadecimal(15, 16)\n * 1\n */\nint countHexadecimal(int l, int r) {\nint count = 0;\n    for (int i = l; i <= r; i++) {\n        string hex = \"\";\n        int n = i;\n        while (n > 0) {\n            int rem = n % 16;\n            if (rem < 10) {\n                hex = to_string(rem) + hex;\n            } else {\n                hex = (char)(rem - 10 + 'A') + hex;\n            }\n            n /= 16;\n        }\n        if (hex.empty()) { // Special case for 0\n            hex = \"0\";\n        }\n        bool isHexadecimal = true;\n        for (char c : hex) {\n            if (!((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F'))) {\n                isHexadecimal = false;\n                break;\n            }\n        }\n        if (isHexadecimal) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countHexadecimal", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/108", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n * > mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48})\n * {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}\n * > mergeSortedList(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}, vector<int>{1, 4, 7, 8, 12})\n * {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}\n * > mergeSortedList(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, vector<int>{12, 74, 9, 50, 61, 41})\n * {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}\n */\nvector<int> mergeSortedList(vector<int> num1, vector<int> num2, vector<int> num3) {\npriority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\nvector<int> result;\n\n\n// Sort the input vectors first\nsort(num1.begin(), num1.end());\nsort(num2.begin(), num2.end());\nsort(num3.begin(), num3.end());\n\n// Push the first element of each array along with its array index into the min-priority queue\nif (!num1.empty()) {\n    pq.push({num1[0], 0}); // {value, array_index}\n}\nif (!num2.empty()) {\n    pq.push({num2[0], 1});\n}\nif (!num3.empty()) {\n    pq.push({num3[0], 2});\n}\n\nvector<int> ptr = {0, 0, 0}; // Pointers for each array\n\nwhile (!pq.empty()) {\n    pair<int, int> current = pq.top();\n    pq.pop();\n\n    int val = current.first;\n    int arr_idx = current.second;\n\n    result.push_back(val);\n\n    // Move the pointer for the array from which the element was taken\n    ptr[arr_idx]++;\n\n    // If there are more elements in that array, push the next one to the priority queue\n    if (arr_idx == 0 && ptr[0] < num1.size()) {\n        pq.push({num1[ptr[0]], 0});\n    } else if (arr_idx == 1 && ptr[1] < num2.size()) {\n        pq.push({num2[ptr[1]], 1});\n    } else if (arr_idx == 2 && ptr[2] < num3.size()) {\n        pq.push({num3[ptr[2]], 2});\n    }\n}\n\nreturn result;", "entry_point": "mergeSortedList", "result": "passed", "passed": true}
{"task_id": "MBCPP/109", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the count of rotations of a binary string with odd value.\n * > oddEquivalent(string(\"011001\"), 6)\n * 3\n * > oddEquivalent(string(\"11011\"), 5)\n * 4\n * > oddEquivalent(string(\"1010\"), 4)\n * 2\n */\nint oddEquivalent(string s, int n) {\nint count = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '1')\n            count++;\n    }\n    return count;", "entry_point": "oddEquivalent", "result": "passed", "passed": true}
{"task_id": "MBCPP/110", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n * > extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100)\n * {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60)\n * {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52)\n * {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}\n */\nvector<vector<int>> extractMissing(vector<vector<int>> testList, int strtVal, int stopVal) {\nvector<vector<int>> result;\n\nif (testList.empty()) {\n    if (strtVal < stopVal) {\n        result.push_back({strtVal, stopVal});\n    }\n    return result;\n}\n\n// Handle the initial range from strtVal to the first element of the first interval\n// This is based on Example 2: {{5, 7}} where testList[0][0] is 7.\nif (strtVal < testList[0][0]) {\n    result.push_back({strtVal, testList[0][0]});\n}\n\nfor (size_t i = 0; i < testList.size(); ++i) {\n    int current_val1 = testList[i][0];\n    int current_val2 = testList[i][1];\n\n    // Add range from current_val2 to stopVal\n    if (current_val2 < stopVal) {\n        result.push_back({current_val2, stopVal});\n    }\n\n    // Add range from current_val2 to next_val1\n    if (i + 1 < testList.size()) {\n        int next_val1 = testList[i+1][0];\n        if (current_val2 < next_val1) {\n            result.push_back({current_val2, next_val1});\n        }\n    }\n}\n\nreturn result;", "entry_point": "extractMissing", "result": "passed", "passed": true}
{"task_id": "MBCPP/111", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n * > commonInNestedLists(vector<vector<int>>{{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}})\n * {18, 12}\n * > commonInNestedLists(vector<vector<int>>{{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}})\n * {5, 23}\n * > commonInNestedLists(vector<vector<int>>{{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}})\n * {4}\n */\nvector<int> commonInNestedLists(vector<vector<int>> nestedlist) {\nif (nestedlist.empty()) {\n        return {};// Convert the first list to a set for efficient lookups\nunordered_set<int> common_elements_set(nestedlist[0].begin(), nestedlist[0].end());\n\n// Iterate through the rest of the lists\nfor (size_t i = 1; i < nestedlist.size(); ++i) {\n    unordered_set<int> current_list_set(nestedlist[i].begin(), nestedlist[i].end());\n    unordered_set<int> next_common_elements;\n\n    // Find the intersection between the current common elements and the current list\n    for (int element : common_elements_set) {\n        if (current_list_set.count(element)) {\n            next_common_elements.insert(element);\n        }\n    }\n    common_elements_set = next_common_elements; // Update common elements for the next iteration\n\n    // If at any point the common_elements_set becomes empty, no common elements exist in all lists\n    if (common_elements_set.empty()) {\n        return {};\n    }\n}\n\n// Convert the set of common elements back to a vector\nvector<int> result(common_elements_set.begin(), common_elements_set.end());\n// Sort the result to match the example output order, although not strictly required by problem statement\nsort(result.begin(), result.end()); \nreturn result;", "entry_point": "commonInNestedLists", "result": "Compilation failed: /tmp/tmppd6siffc/temp.cpp: In function \u2018std::vector<int> commonInNestedLists(std::vector<std::vector<int> >)\u2019:\n/tmp/tmppd6siffc/temp.cpp:46:1: error: a template declaration cannot appear at block scope\n   46 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmppd6siffc/temp.cpp:67:1: error: expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmppd6siffc/temp.cpp:15:65: note: to match this \u2018{\u2019\n   15 | vector<int> commonInNestedLists(vector<vector<int>> nestedlist) {\n      |                                                                 ^\n/tmp/tmppd6siffc/temp.cpp:67:1: warning: control reaches end of non-void function [-Wreturn-type]\n   67 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/112", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the perimeter of a cylinder.\n * > perimeter(2, 4)\n * 12\n * > perimeter(1, 2)\n * 6\n * > perimeter(3, 1)\n * 8\n */\nint perimeter(int diameter, int height) {\nreturn 2 * (diameter + height);", "entry_point": "perimeter", "result": "passed", "passed": true}
{"task_id": "MBCPP/113", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a string represents an integer or not.\n * > checkInteger(string(\"python\"))\n * false\n * > checkInteger(string(\"1\"))\n * true\n * > checkInteger(string(\"12345\"))\n * true\n */\nbool checkInteger(string text) {\nif (text.empty()) {\n        return false;\n    }\n    for (char c : text) {\n        if (!isdigit(c)) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkInteger", "result": "passed", "passed": true}
{"task_id": "MBCPP/114", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to assign frequency to each tuple in the given tuple list.\n * > assignFreq(vector<vector<int>>{{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}})\n * string(\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\")\n * > assignFreq(vector<vector<int>>{{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}})\n * string(\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\")\n * > assignFreq(vector<vector<int>>{{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}})\n * string(\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\")\n */\nstring assignFreq(vector<vector<int>> testList) {\nmap<vector<int>, int> freqMap;\nfor (const auto& tuple : testList) {\nfreqMap[tuple]++;\n}\n\n\nstring result = \"[\";\nbool first = true;\nfor (const auto& pair : freqMap) {\n    if (!first) {\n        result += \", \";\n    }\n    result += \"(\";\n    for (size_t i = 0; i < pair.first.size(); ++i) {\n        result += to_string(pair.first[i]);\n        if (i < pair.first.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \", \" + to_string(pair.second) + \")\";\n    first = false;\n}\nresult += \"]\";\nreturn result;", "entry_point": "assignFreq", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/116", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given tuple of positive integers into an integer.\n * > tupleToInt(vector<int>{1, 2, 3})\n * 123\n * > tupleToInt(vector<int>{4, 5, 6})\n * 456\n * > tupleToInt(vector<int>{5, 6, 7})\n * 567\n */\nint tupleToInt(vector<int> nums) {\nint result = 0;\n    for (int num : nums) {\n        result = result * 10 + num;\n    }\n    return result;", "entry_point": "tupleToInt", "result": "passed", "passed": true}
{"task_id": "MBCPP/117", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert all possible convertible elements in the list to float.\n * > listToFloat(vector<vector<string>>{{string(\"3\"), string(\"4\")}, {string(\"1\"), string(\"26.45\")}, {string(\"7.32\"), string(\"8\")}, {string(\"4\"), string(\"8\")}})\n * string(\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\")\n * > listToFloat(vector<vector<string>>{{string(\"4\"), string(\"4\")}, {string(\"2\"), string(\"27\")}, {string(\"4.12\"), string(\"9\")}, {string(\"7\"), string(\"11\")}})\n * string(\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\")\n * > listToFloat(vector<vector<string>>{{string(\"6\"), string(\"78\")}, {string(\"5\"), string(\"26.45\")}, {string(\"1.33\"), string(\"4\")}, {string(\"82\"), string(\"13\")}})\n * string(\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\")\n */\nstring listToFloat(vector<vector<string>> testList) {\nstring result = \"[\";\n    for (int i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (int j = 0; j < testList[i].size(); ++j) {\n            try {\n                result += to_string(stof(testList[i][j]));\n            } catch (const invalid_argument& ia) {\n                result += testList[i][j];\n            }\n            if (j < testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i < testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;", "entry_point": "listToFloat", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/118", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n * > stringToList(string(\"python programming\"))\n * {string(\"python\"), string(\"programming\")}\n * > stringToList(string(\"lists tuples strings\"))\n * {string(\"lists\"), string(\"tuples\"), string(\"strings\")}\n * > stringToList(string(\"write a program\"))\n * {string(\"write\"), string(\"a\"), string(\"program\")}\n */\nvector<string> stringToList(string str) {\nvector<string> result;\nstringstream ss(str);\nstring word;\nwhile (ss >> word) {\nresult.push_back(word);\n}\nreturn result;", "entry_point": "stringToList", "result": "passed", "passed": true}
{"task_id": "MBCPP/119", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element that appears only once in a sorted array.\n * > search(vector<int>{1, 1, 2, 2, 3}, 5)\n * 3\n * > search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11)\n * 8\n * > search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7)\n * 1\n */\nint search(vector<int> arr, int n) {\nint low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if ((mid == 0 || arr[mid] != arr[mid - 1]) && (mid == n - 1 || arr[mid] != arr[mid + 1])) {\n            return arr[mid];\n        } else if (mid % 2 == 0) {\n            if (mid + 1 < n && arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid - 1 >= 0 && arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        }\n    }\n    return -1;", "entry_point": "search", "result": "passed", "passed": true}
{"task_id": "MBCPP/120", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product from the pairs of tuples within a given list.\n * > maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 36\n * > maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 200\n * > maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 484\n */\nint maxProductTuple(vector<vector<int>> list1) {\nint max_product = 0;\n    for (const auto& p : list1) {\n        int product = p[0] * p[1];\n        if (product > max_product) {\n            max_product = product;\n        }\n    }\n    return max_product;", "entry_point": "maxProductTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/121", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the triplet with sum of the given array\n * > checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0)\n * true\n * > checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0)\n * false\n * > checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0)\n * true\n */\nbool checkTriplet(vector<int> a, int n, int sum, int count) {\nsort(a.begin(), a.end());\n    for (int i = 0; i < n - 2; i++) {\n        int left = i + 1;\n        int right = n - 1;\n        while (left < right) {\n            int current_sum = a[i] + a[left] + a[right];\n            if (current_sum == sum) {\n                return true;\n            } else if (current_sum < sum) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;", "entry_point": "checkTriplet", "result": "passed", "passed": true}
{"task_id": "MBCPP/122", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n\u2019th smart number.\n * > smartnumber(1)\n * 30\n * > smartnumber(50)\n * 273\n * > smartnumber(1000)\n * 2664\n */\nint smartnumber(int n) {\nconst int MAX = 3000; // An upper limit, adjust as needed based on expected nth value\nvector<int> primeFactorsCount(MAX + 1, 0);\n\n\nfor (int i = 2; i <= MAX; ++i) {\n    if (primeFactorsCount[i] == 0) { // i is a prime number\n        for (int j = i; j <= MAX; j += i) {\n            primeFactorsCount[j]++;\n        }\n    }\n}\n\nint count = 0;\nfor (int i = 1; i <= MAX; ++i) {\n    if (primeFactorsCount[i] >= 3) {\n        count++;\n        if (count == n) {\n            return i;\n        }\n    }\n}\nreturn -1; // Should not reach here for valid n within MAX rang", "entry_point": "smartnumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/123", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum all amicable numbers from 1 to a specified number.\n * > amicableNumbersSum(999)\n * 504\n * > amicableNumbersSum(9999)\n * 31626\n * > amicableNumbersSum(99)\n * 0\n */\nint amicableNumbersSum(int limit) {\nint sum = 0;\nvector<int> d(limit + 1, 1); // d[i] will store the sum of proper divisors of i\n\n\n// Precompute sum of proper divisors for all numbers up to limit using a sieve-like approach\nfor (int i = 2; i <= limit; ++i) {\n    for (int j = 2 * i; j <= limit; j += i) {\n        d[j] += i;\n    }\n}\n\nfor (int a = 1; a <= limit; ++a) {\n    int b = d[a];\n    if (b > a && b <= limit && d[b] == a) {\n        sum += a + b;\n    }\n}\nreturn sum;", "entry_point": "amicableNumbersSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/125", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n * > findLength(string(\"11000010001\"), 11)\n * 6\n * > findLength(string(\"10111\"), 5)\n * 1\n * > findLength(string(\"11011101100101\"), 14)\n * 2\n */\nint findLength(string str, int n) {\nint current_max = 0;\n    int overall_max = -1; // Initialize with -1 in case all are 1s\n\n\nfor (int i = 0; i < n; i++) {\n    // If current character is '0', treat it as +1\n    // If current character is '1', treat it as -1\n    int val = (str[i] == '0' ? 1 : -1);\n\n    current_max += val;\n\n    // Kadane's algorithm:\n    // If current_max becomes negative, reset it to 0 (start a new subarray)\n    if (current_max < 0) {\n        current_max = 0;\n    }\n\n    // Update overall_max if current_max is greater\n    if (current_max > overall_max) {\n        overall_max = current_max;\n    }\n}\n\n// Edge case: if the string contains all '1's, the overall_max will be 0 (or -1 if initialized as such and not updated).\n// The problem statement says to return -1 in this case.\nbool all_ones = true;\nfor(int i = 0; i < n; ++i) {\n    if (str[i] == '0') {\n        all_ones = false;\n        break;\n    }\n}\nif (all_ones) {\n    return -1;\n}\n\n// If overall_max is still 0 after processing, it means no substring had more 0s than 1s.\n// However, if there was at least one '0', overall_max would be at least 1.\n// The initial -1 takes care of the all '1's case.\n// For cases like \"101\", \"110\", etc., the max difference will be positive.\n// If str was \"000\", overall_max would be 3.\n// If str was \"1100\", overall_max would be 2.\nreturn overall_max;", "entry_point": "findLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/126", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of common divisors of two given numbers.\n * > sum(10, 15)\n * 6\n * > sum(100, 150)\n * 93\n * > sum(4, 6)\n * 3\n */\nint sum(int a, int b) {\nint s = 0;\n    for (int i = 1; i <= min(a, b); ++i) {\n        if (a % i == 0 && b % i == 0) {\n            s += i;\n        }\n    }\n    return s;", "entry_point": "sum", "result": "passed", "passed": true}
{"task_id": "MBCPP/127", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two integers without using the * operator in c++.\n * > multiplyInt(10, 20)\n * 200\n * > multiplyInt(5, 10)\n * 50\n * > multiplyInt(4, 8)\n * 32\n */\nint multiplyInt(int x, int y) {\nint product = 0;\n    // Handle negative numbers: if one is negative, the result is negative.\n    // If both are negative, the result is positive.\n    bool negative_result = false;\n    if ((x < 0 && y > 0) || (x > 0 && y < 0)) {\n        negative_result = true;\n    }olute values\nx = abs(x);\ny = abs(y);\n\nfor (int i = 0; i < y; ++i) {\n    product += x;\n}\n\nif (negative_result) {\n    return -product;\n} else {\n    return product;\n}", "entry_point": "multiplyInt", "result": "Compilation failed: /tmp/tmpeng7zm9m/temp.cpp: In function \u2018int multiplyInt(int, int)\u2019:\n/tmp/tmpeng7zm9m/temp.cpp:22:6: error: \u2018olute\u2019 was not declared in this scope\n   22 |     }olute values\n      |      ^~~~~\n/tmp/tmpeng7zm9m/temp.cpp:36:1: error: a template declaration cannot appear at block scope\n   36 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpeng7zm9m/temp.cpp:57:1: error: expected \u2018}\u2019 at end of input\n   57 | }\n      | ^\n/tmp/tmpeng7zm9m/temp.cpp:15:31: note: to match this \u2018{\u2019\n   15 | int multiplyInt(int x, int y) {\n      |                               ^\n", "passed": false}
{"task_id": "MBCPP/128", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to shortlist words that are longer than n from a given list of words.\n * > longWords(3, string(\"python is a programming language\"))\n * {string(\"python\"), string(\"programming\"), string(\"language\")}\n * > longWords(2, string(\"writing a program\"))\n * {string(\"writing\"), string(\"program\")}\n * > longWords(5, string(\"sorting list\"))\n * {string(\"sorting\")}\n */\nvector<string> longWords(int n, string str) {\nvector<string> result;\nstringstream ss(str);\nstring word;\nwhile (ss >> word) {\nif (word.length() > n) {\nresult.push_back(word);\n}\n}\nreturn result;", "entry_point": "longWords", "result": "passed", "passed": true}
{"task_id": "MBCPP/129", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate magic square.\n * > magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}})\n * false\n */\nbool magicSquareTest(vector<vector<int>> myMatrix) {\nint n = myMatrix.size();\n    int sum = 0;\n    for (int j = 0; j < n; j++) {\n        sum += myMatrix[0][j];\n    }\n    for (int i = 0; i < n; i++) {\n        int rowSum = 0;\n        for (int j = 0; j < n; j++) {\n            rowSum += myMatrix[i][j];\n        }\n        if (rowSum != sum) {\n            return false;\n        }\n    }\n    for (int j = 0; j < n; j++) {\n        int colSum = 0;\n        for (int i = 0; i < n; i++) {\n            colSum += myMatrix[i][j];\n        }\n        if (colSum != sum) {\n            return false;\n        }\n    }\n    int diag1Sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag1Sum += myMatrix[i][i];\n    }\n    if (diag1Sum != sum) {\n        return false;\n    }\n    int diag2Sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag2Sum += myMatrix[i][n - 1 - i];\n    }\n    if (diag2Sum != sum) {\n        return false;\n    }\n    return true;", "entry_point": "magicSquareTest", "result": "passed", "passed": true}
{"task_id": "MBCPP/130", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum frequency in a given list.\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2})\n * {2, 5}\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18})\n * {8, 2}\n * > maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10})\n * {20, 3}\n */\nvector<int> maxOccurrences(vector<int> nums) {\nif (nums.empty()) {\n        return {};unordered_map<int, int> freqMap;\nfor (int num : nums) {\n    freqMap[num]++;\n}\n\nint maxFreq = 0;\nint maxFreqItem = nums[0]; \n\nfor (auto const& [item, freq] : freqMap) {\n    if (freq > maxFreq) {\n        maxFreq = freq;\n        maxFreqItem = item;\n    } else if (freq == maxFreq) {\n        // If frequencies are the same, choose the smaller item.\n        // The problem examples imply choosing the smaller item when frequencies are tied.\n        // \"maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2})\" -> {2, 5} (2 appears 5 times, 6 appears 3 times, etc. 2 is smaller than other numbers with max frequency.)\n        // If the problem meant the numerically larger item in case of tie, this condition would be `item > maxFreqItem`.\n        // Based on example output, smaller item is preferred.\n        if (item < maxFreqItem) {\n            maxFreqItem = item;\n        }\n    }\n}\n\nreturn {maxFreqItem, maxFreq};", "entry_point": "maxOccurrences", "result": "Compilation failed: /tmp/tmptrduhr_y/temp.cpp: In function \u2018std::vector<int> maxOccurrences(std::vector<int>)\u2019:\n/tmp/tmptrduhr_y/temp.cpp:25:18: warning: structured bindings only available with \u2018-std=c++17\u2019 or \u2018-std=gnu++17\u2019\n   25 | for (auto const& [item, freq] : freqMap) {\n      |                  ^\n/tmp/tmptrduhr_y/temp.cpp:44:1: error: a template declaration cannot appear at block scope\n   44 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmptrduhr_y/temp.cpp:65:1: error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmptrduhr_y/temp.cpp:15:46: note: to match this \u2018{\u2019\n   15 | vector<int> maxOccurrences(vector<int> nums) {\n      |                                              ^\n/tmp/tmptrduhr_y/temp.cpp:65:1: warning: control reaches end of non-void function [-Wreturn-type]\n   65 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/131", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse only the vowels of a given string.\n * > reverseVowels(string(\"Python\"))\n * string(\"Python\")\n * > reverseVowels(string(\"USA\"))\n * string(\"ASU\")\n * > reverseVowels(string(\"ab\"))\n * string(\"ab\")\n */\nstring reverseVowels(string str1) {\nbool isVowel(char c) {\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'Ueft = 0;\nint right = str1.length() - 1;\n\nwhile (left < right) {\n    while (left < right && !isVowel(str1[left])) {\n        left++;\n    }\n    while (left < right && !isVowel(str1[right])) {\n        right--;\n    }\n    if (left < right) {\n        swap(str1[left], str1[right]);\n        left++;\n        right--;\n    }\n}\nreturn str1;", "entry_point": "reverseVowels", "result": "Compilation failed: /tmp/tmpqmjjmgtt/temp.cpp:18:66: warning: missing terminating ' character\n   18 |             c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'Ueft = 0;\n      |                                                                  ^\n/tmp/tmpqmjjmgtt/temp.cpp:18:66: error: missing terminating ' character\n   18 |             c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'Ueft = 0;\n      |                                                                  ^~~~~~~~~~\n/tmp/tmpqmjjmgtt/temp.cpp: In function \u2018std::string reverseVowels(std::string)\u2019:\n/tmp/tmpqmjjmgtt/temp.cpp:16:22: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | bool isVowel(char c) {\n      |                      ^\n/tmp/tmpqmjjmgtt/temp.cpp:37:1: error: a template declaration cannot appear at block scope\n   37 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpqmjjmgtt/temp.cpp:58:1: error: expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpqmjjmgtt/temp.cpp:15:35: note: to match this \u2018{\u2019\n   15 | string reverseVowels(string str1) {\n      |                                   ^\n/tmp/tmpqmjjmgtt/temp.cpp:58:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   58 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/132", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple to a string.\n * > tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")})\n * string(\"exercises\")\n * > tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")})\n * string(\"python\")\n * > tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")})\n * string(\"program\")\n */\nstring tupString(vector<string> tup1) {\nstring result = \"\";\n    for (const string& s : tup1) {\n        result += s;\n    }\n    return result;", "entry_point": "tupString", "result": "passed", "passed": true}
{"task_id": "MBCPP/133", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n * > sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * -32\n * > sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20})\n * -52\n * > sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n * -894\n */\nint sumNegativenum(vector<int> nums) {\nint sum = 0;\n    for_each(nums.begin(), nums.end(), [&](int n) {\n        if (n < 0) {\n            sum += n;\n        }\n    });\n    return sum;", "entry_point": "sumNegativenum", "result": "passed", "passed": true}
{"task_id": "MBCPP/134", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.\n * > checkLast(vector<int>{5, 7, 10}, 3, 1)\n * string(\"ODD\")\n * > checkLast(vector<int>{2, 3}, 2, 3)\n * string(\"EVEN\")\n * > checkLast(vector<int>{1, 2, 3}, 3, 1)\n * string(\"ODD\")\n */\nstring checkLast(vector<int> arr, int n, int p) {\n    int final_val_parity = (arr[n-1] + p) % 2;\n\n    if (final_val_parity == 0) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }", "entry_point": "checkLast", "result": "Compilation failed: /tmp/tmp4yjm8wjg/temp.cpp: In function \u2018std::string checkLast(std::vector<int>, int, int)\u2019:\n/tmp/tmp4yjm8wjg/temp.cpp:24:1: error: a template declaration cannot appear at block scope\n   24 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp4yjm8wjg/temp.cpp:45:1: error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmp4yjm8wjg/temp.cpp:15:49: note: to match this \u2018{\u2019\n   15 | string checkLast(vector<int> arr, int n, int p) {\n      |                                                 ^\n", "passed": false}
{"task_id": "MBCPP/135", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth hexagonal number.\n * > hexagonalNum(10)\n * 190\n * > hexagonalNum(5)\n * 45\n * > hexagonalNum(7)\n * 91\n */\nint hexagonalNum(int n) {\nreturn n * (2 * n - 1);", "entry_point": "hexagonalNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/136", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate electricity bill.\n * > calElectbill(75)\n * 246.25\n * > calElectbill(265)\n * 1442.75\n * > calElectbill(100)\n * 327.5\n */\ndouble calElectbill(int units) {\ndouble bill = 0;\n    if (units <= 50) {\n        bill = units * 0.50;\n    } else if (units <= 150) {\n        bill = (50 * 0.50) + ((units - 50) * 0.75);\n    } else if (units <= 250) {\n        bill = (50 * 0.50) + (100 * 0.75) + ((units - 150) * 1.20);\n    } else {\n        bill = (50 * 0.50) + (100 * 0.75) + (100 * 1.20) + ((units - 250) * 1.50);\n    }\n    return bill + (bill * 0.20);", "entry_point": "calElectbill", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/137", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of zeroes in an array of integers.\n * > zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.15\n * > zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.0\n * > zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.0\n */\ndouble zeroCount(vector<int> nums) {\ndouble zero_count = 0;\n    for (int num : nums) {\n        if (num == 0) {\n            zero_count++;\n        }\n    }\n    return zero_count / nums.size();", "entry_point": "zeroCount", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/138", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * > isSumOfPowersOfTwo(10)\n * true\n * > isSumOfPowersOfTwo(7)\n * false\n * > isSumOfPowersOfTwo(14)\n * true\n */\nbool isSumOfPowersOfTwo(int n) {\nif (n <= 0) {\n        return false;\n    }\n    // A number can be represented as a sum of non-zero powers of 2 if and only if\n    // its binary representation contains at least one '1' bit, and it is not odd.\n    // If it's odd, it means the 2^0 bit is set, which is a zero power of 2.\n    // So, we simply check if the number is even.\n    return (n % 2 == 0);", "entry_point": "isSumOfPowersOfTwo", "result": "passed", "passed": true}
{"task_id": "MBCPP/139", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the circumference of a circle.\n * > circleCircumference(10)\n * 62.830000000000005\n * > circleCircumference(5)\n * 31.415000000000003\n * > circleCircumference(4)\n * 25.132\n */\ndouble circleCircumference(int r) {\nreturn 2 * M_PI * r;", "entry_point": "circleCircumference", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/140", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract elements that occur singly in the given tuple list.\n * > extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}})\n * {3, 4, 5, 7, 1}\n * > extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}})\n * {1, 2, 3, 4, 7, 8}\n * > extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}})\n * {7, 8, 9, 10, 11, 12}\n */\nvector<int> extractSingly(vector<vector<int>> testList) {\nstd::map<int, int> counts;\n    for (const auto& tuple : testList) {\n        for (int element : tuple) {\n            counts[element]++;\n        }\n    }\n    std::vector<int> singlyOccurringElements;\nfor (const auto& pair : counts) {\nif (pair.second == 1) {\nsinglyOccurringElements.push_back(pair.first);\n}\n}\nreturn singlyOccurringElements;", "entry_point": "extractSingly", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/141", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using pancake sort.\n * > pancakeSort(vector<int>{15, 79, 25, 38, 69})\n * {15, 25, 38, 69, 79}\n * > pancakeSort(vector<int>{98, 12, 54, 36, 85})\n * {12, 36, 54, 85, 98}\n * > pancakeSort(vector<int>{41, 42, 32, 12, 23})\n * {12, 23, 32, 41, 42}\n */\nvector<int> pancakeSort(vector<int> nums) {\nvoid flip(vector<int>& arr, int i) {\nint start = 0;\nwhile (start < i) {\nswap(arr[start], arr[i]);\nstart++;\ni--;\n}\n}\n\nint findMax(const vector<int>& arr, int n) {\nint mi = 0;\nfor (int i = 0; i < n; ++i) {\nif (arr[i] > arr[mi]) {\nmi = i;\n}\n}\nreturn mi;\n}\n\n\nint n = nums.size();\nfor (int curr_size = n; curr_size > 1; --curr_size) {\n    int mi = findMax(nums, curr_size);\n    if (mi != curr_size - 1) {\n        flip(nums, mi);\n        flip(nums, curr_size - 1);\n    }\n}\nreturn nums;", "entry_point": "pancakeSort", "result": "Compilation failed: /tmp/tmp3naixf3h/temp.cpp: In function \u2018std::vector<int> pancakeSort(std::vector<int>)\u2019:\n/tmp/tmp3naixf3h/temp.cpp:16:36: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | void flip(vector<int>& arr, int i) {\n      |                                    ^\n/tmp/tmp3naixf3h/temp.cpp:25:44: error: a function-definition is not allowed here before \u2018{\u2019 token\n   25 | int findMax(const vector<int>& arr, int n) {\n      |                                            ^\n/tmp/tmp3naixf3h/temp.cpp:38:14: error: \u2018findMax\u2019 was not declared in this scope\n   38 |     int mi = findMax(nums, curr_size);\n      |              ^~~~~~~\n/tmp/tmp3naixf3h/temp.cpp:40:9: error: \u2018flip\u2019 was not declared in this scope\n   40 |         flip(nums, mi);\n      |         ^~~~\n", "passed": false}
{"task_id": "MBCPP/142", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in three given lists.\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9})\n * 3\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 4\n * > countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 5\n */\nint countSamepair(vector<int> list1, vector<int> list2, vector<int> list3) {\nint count = 0;\n    int n = min({list1.size(), list2.size(), list3.size()});\n    for (int i = 0; i < n; ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countSamepair", "result": "passed", "passed": true}
{"task_id": "MBCPP/144", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of absolute differences in all pairs of the given array.\n * > sumPairs(vector<int>{1, 8, 9, 15, 16}, 5)\n * 74\n * > sumPairs(vector<int>{1, 2, 3, 4}, 4)\n * 10\n * > sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9)\n * 188\n */\nint sumPairs(vector<int> arr, int n) {\nlong long totalSum = 0;\n    sort(arr.begin(), arr.end());\n    for (int i = 0; i < n; i++) {\n        totalSum += ((long long)arr[i] * i) - ((long long)arr[i] * (n - 1 - i));\n    }\n    return totalSum;", "entry_point": "sumPairs", "result": "passed", "passed": true}
{"task_id": "MBCPP/145", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum difference between any two elements in a given array.\n * > maxAbsDiff(vector<int>{2, 1, 5, 3}, 4)\n * 4\n * > maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5)\n * 8\n * > maxAbsDiff(vector<int>{3, 2, 1}, 3)\n * 2\n */\nint maxAbsDiff(vector<int> arr, int n) {\nif (n <= 1) {\n        return 0; // If there's 0 or 1 element, the difference is 0.\n    }\n    int min_val = arr[0];\n    int max_val = arr[0];\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n        }\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n    return max_val - min_val;", "entry_point": "maxAbsDiff", "result": "passed", "passed": true}
{"task_id": "MBCPP/146", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of total characters in a string.\n * > asciiValueString(string(\"python\"))\n * 112\n * > asciiValueString(string(\"Program\"))\n * 80\n * > asciiValueString(string(\"Language\"))\n * 76\n */\nint asciiValueString(string str1) {\nreturn (int)str1[0];", "entry_point": "asciiValueString", "result": "passed", "passed": true}
{"task_id": "MBCPP/147", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum total path sum in the given triangle.\n * > maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2)\n * 14\n * > maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2)\n * 24\n * > maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2)\n * 53\n */\nint maxPathSum(vector<vector<int>> tri, int m, int n) {\nfor (int i = m - 1; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            if (tri[i+1][j] > tri[i+1][j+1])\n                tri[i][j] += tri[i+1][j];\n            else\n                tri[i][j] += tri[i+1][j+1];\n        }\n    }\n    return tri[0][0];", "entry_point": "maxPathSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/148", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide a number into two parts such that the sum of digits is maximum.\n * > sumDigitsTwoparts(35)\n * 17\n * > sumDigitsTwoparts(7)\n * 7\n * > sumDigitsTwoparts(100)\n * 19\n */\nint sumDigitsTwoparts(int n) {\nint sumDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nint sumDigitsTwoparts(int n) {\n    int maxSum = 0;\n    for (int i = 0; i <= n; ++i) {\n        int part1 = i;\n        int part2 = n - i;\n        int currentSum = sumDigits(part1) + sumDigits(part2);\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    return maxSum;", "entry_point": "sumDigitsTwoparts", "result": "Compilation failed: /tmp/tmphc4638kw/temp.cpp: In function \u2018int sumDigitsTwoparts(int)\u2019:\n/tmp/tmphc4638kw/temp.cpp:16:24: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | int sumDigits(int num) {\n      |                        ^\n/tmp/tmphc4638kw/temp.cpp:25:30: error: a function-definition is not allowed here before \u2018{\u2019 token\n   25 | int sumDigitsTwoparts(int n) {\n      |                              ^\n/tmp/tmphc4638kw/temp.cpp:38:1: error: a template declaration cannot appear at block scope\n   38 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmphc4638kw/temp.cpp:59:1: error: expected \u2018}\u2019 at end of input\n   59 | }\n      | ^\n/tmp/tmphc4638kw/temp.cpp:15:30: note: to match this \u2018{\u2019\n   15 | int sumDigitsTwoparts(int n) {\n      |                              ^\n/tmp/tmphc4638kw/temp.cpp:59:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   59 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/149", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7)\n * 6\n * > longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7)\n * 3\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8)\n * 7\n */\nint longestSubseqWithDiffOne(vector<int> arr, int n) {\n// Create a map to store the length of the longest subsequence ending with a particular number.\n    // The key will be the number, and the value will be the length of the subsequence.\n    unordered_map<int, int> dp;\n    int max_len = 0;\n// Iterate through each element in the array\nfor (int x : arr) {\n    // The current element 'x' can extend a subsequence ending with 'x - 1' or 'x + 1'.\n    // Get the length of the longest subsequence ending with 'x - 1' or 'x + 1'.\n    int len1 = dp.count(x - 1) ? dp[x - 1] : 0;\n    int len2 = dp.count(x + 1) ? dp[x + 1] : 0;\n\n    // The length of the longest subsequence ending with 'x' will be\n    // 1 (for 'x' itself) + the maximum length of a subsequence ending with 'x-1' or 'x+1'.\n    // Note: The problem asks for difference between *adjacents* in the subsequence.\n    // So, if we pick 'x', the previous element must be 'x-1' or 'x+1'.\n    // We take the maximum of these two possibilities and add 1 for the current element.\n    dp[x] = 1 + max(len1, len2);\n\n    // Update the overall maximum length found so far\n    max_len = max(max_len, dp[x]);\n}\n\nreturn max_len;", "entry_point": "longestSubseqWithDiffOne", "result": "passed", "passed": true}
{"task_id": "MBCPP/150", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find whether the given number is present in the infinite sequence or not.\n * > doesContainB(1, 7, 3)\n * true\n * > doesContainB(1, -3, 5)\n * false\n * > doesContainB(3, 2, 5)\n * false\n */\nbool doesContainB(int a, int b, int c) {\nif (c < a && b > 0) return false;\n    if (c > a && b < 0) return false;\n    if (b == 0) return a == c;\n    return (c - a) % b == 0;", "entry_point": "doesContainB", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/151", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is co-prime or not.\n * > isCoprime(17, 13)\n * true\n * > isCoprime(15, 21)\n * false\n * > isCoprime(25, 45)\n * false\n */\nbool isCoprime(int x, int y) {\nreturn std::gcd(x, y) == 1;", "entry_point": "isCoprime", "result": "Compilation failed: /tmp/tmph4nd1bym/temp.cpp: In function \u2018bool isCoprime(int, int)\u2019:\n/tmp/tmph4nd1bym/temp.cpp:16:13: error: \u2018gcd\u2019 is not a member of \u2018std\u2019\n   16 | return std::gcd(x, y) == 1;\n      |             ^~~\n", "passed": false}
{"task_id": "MBCPP/152", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using merge sort.\n * > mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9})\n * {1, 2, 3, 4, 5, 6, 7, 9}\n * > mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19})\n * {7, 11, 19, 25, 33, 45, 78}\n * > mergeSort(vector<int>{3, 1, 4, 9, 8})\n * {1, 3, 4, 8, 9}\n */\nvector<int> mergeSort(vector<int> x) {\nif (x.size() <= 1) {{\nreturn x;\n}\n\n\nint mid = x.size() / 2;\nvector<int> left(x.begin(), x.begin() + mid);\nvector<int> right(x.begin() + mid, x.end());\n\nleft = mergeSort(left);\nright = mergeSort(right);\n\nvector<int> result;\nint i = 0, j = 0;\n\nwhile (i < left.size() && j < right.size()) {\n    if (left[i] < right[j]) {\n        result.push_back(left[i]);\n        i++;\n    } else {\n        result.push_back(right[j]);\n        j++;\n    }\n}\n\nwhile (i < left.size()) {\n    result.push_back(left[i]);\n    i++;\n}\n\nwhile (j < right.size()) {\n    result.push_back(right[j]);\n    j++;\n}\n\nreturn result;", "entry_point": "mergeSort", "result": "Compilation failed: /tmp/tmpa6z0h2ur/temp.cpp: In function \u2018std::vector<int> mergeSort(std::vector<int>)\u2019:\n/tmp/tmpa6z0h2ur/temp.cpp:54:1: error: a template declaration cannot appear at block scope\n   54 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpa6z0h2ur/temp.cpp:75:1: error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpa6z0h2ur/temp.cpp:15:38: note: to match this \u2018{\u2019\n   15 | vector<int> mergeSort(vector<int> x) {\n      |                                      ^\n/tmp/tmpa6z0h2ur/temp.cpp:75:1: warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/153", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the vertex of a parabola.\n * > parabolaVertex(5, 3, 2)\n * {-0.3, 1.55}\n * > parabolaVertex(9, 8, 4)\n * {-0.4444444444444444, 2.2222222222222223}\n * > parabolaVertex(2, 4, 6)\n * {-1.0, 4.0}\n */\nvector<double> parabolaVertex(int a, int b, int c) {\nvector<double> vertex;\ndouble x = -static_cast<double>(b) / (2 * a);\ndouble y = static_cast<double>(a) * x * x + static_cast<double>(b) * x + static_cast<double>(c);\nvertex.push_back(x);\nvertex.push_back(y);\nreturn vertex;", "entry_point": "parabolaVertex", "result": "passed", "passed": true}
{"task_id": "MBCPP/154", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every specified element from a given two dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3)\n * {2, 2, 5}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\nvector<int> result;\nfor (int i = 0; i < nums.size(); i++) {\nresult.push_back(nums[i][n]);\n}\nreturn result;", "entry_point": "specifiedElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/155", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all even bits of a given number.\n * > evenBitToggleNumber(10)\n * 0\n * > evenBitToggleNumber(20)\n * 30\n * > evenBitToggleNumber(30)\n * 20\n */\nint evenBitToggleNumber(int n) {\nint toggle = 0;\n    for (int i = 0; i < 31; i += 2) {\n        toggle |= (1 << i);\n    }\n    return n ^ toggle;", "entry_point": "evenBitToggleNumber", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/156", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n * > tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}})\n * {{333, 33}, {1416, 55}}\n * > tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}})\n * {{999, 99}, {1000, 500}}\n * > tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}})\n * {{666, 66}, {1500, 555}}\n */\nvector<vector<int>> tupleIntStr(vector<vector<string>> tupleStr) {\nvector<vector<int>> tupleInt;\nfor (auto& row : tupleStr) {\nvector<int> intRow;\nfor (auto& s : row) {\nintRow.push_back(stoi(s));\n}\ntupleInt.push_back(intRow);\n}\nreturn tupleInt;", "entry_point": "tupleIntStr", "result": "passed", "passed": true}
{"task_id": "MBCPP/158", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find k number of operations required to make all elements equal.\n * > minOps(vector<int>{2, 2, 2, 2}, 4, 3)\n * 0\n * > minOps(vector<int>{4, 2, 6, 8}, 4, 3)\n * -1\n * > minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6)\n * 24\n */\nint minOps(vector<int> arr, int n, int k) {\nint maxVal = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > maxVal) {\n            maxVal = arr[i];\nint operations = 0;\nfor (int i = 0; i < n; i++) {\n    if ((maxVal - arr[i]) % k != 0) {\n        return -1;\n    }\n    operations += (maxVal - arr[i]) / k;\n}\nreturn operations;", "entry_point": "minOps", "result": "Compilation failed: /tmp/tmpk4ims6fb/temp.cpp: In function \u2018int minOps(std::vector<int>, int, int)\u2019:\n/tmp/tmpk4ims6fb/temp.cpp:30:1: error: a template declaration cannot appear at block scope\n   30 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpk4ims6fb/temp.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpk4ims6fb/temp.cpp:17:33: note: to match this \u2018{\u2019\n   17 |     for (int i = 1; i < n; i++) {\n      |                                 ^\n/tmp/tmpk4ims6fb/temp.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpk4ims6fb/temp.cpp:15:43: note: to match this \u2018{\u2019\n   15 | int minOps(vector<int> arr, int n, int k) {\n      |                                           ^\n/tmp/tmpk4ims6fb/temp.cpp:51:1: warning: control reaches end of non-void function [-Wreturn-type]\n   51 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/159", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the season for the given month and day.\n * > monthSeason(string(\"January\"), 4)\n * string(\"winter\")\n * > monthSeason(string(\"October\"), 28)\n * string(\"autumn\")\n * > monthSeason(string(\"June\"), 6)\n * string(\"spring\")\n */\nstring monthSeason(string month, int days) {\nif (month == \"December\" || month == \"January\" || month == \"February\") {\n        return \"winter\";\n    } else if (month == \"March\" || month == \"April\" || month == \"May\") {\n        return \"spring\";\n    } else if (month == \"June\" || month == \"July\" || month == \"August\") {\n        return \"summer\";\n    } else {\n        return \"autumn\";\n    }", "entry_point": "monthSeason", "result": "Compilation failed: /tmp/tmp4gnizh3t/temp.cpp: In function \u2018std::string monthSeason(std::string, int)\u2019:\n/tmp/tmp4gnizh3t/temp.cpp:26:1: error: a template declaration cannot appear at block scope\n   26 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp4gnizh3t/temp.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmp4gnizh3t/temp.cpp:15:44: note: to match this \u2018{\u2019\n   15 | string monthSeason(string month, int days) {\n      |                                            ^\n", "passed": false}
{"task_id": "MBCPP/161", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all elements from a given list present in another list.\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8})\n * {1, 3, 5, 7, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7})\n * {2, 4, 6, 8, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7})\n * {1, 2, 3, 4, 6, 8, 9, 10}\n */\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\nunordered_set<int> elementsToRemove(list2.begin(), list2.end());\nvector<int> result;\nfor (int x : list1) {\nif (elementsToRemove.find(x) == elementsToRemove.end()) {\nresult.push_back(x);\n}\n}\nreturn result;", "entry_point": "removeElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/162", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n * > sumSeries(6)\n * 12\n * > sumSeries(10)\n * 30\n * > sumSeries(9)\n * 25\n */\nint sumSeries(int n) {\nif (n <= 0) {\n        return 0;\n    } else {\n        return n + sumSeries(n - 2);\n    }", "entry_point": "sumSeries", "result": "Compilation failed: /tmp/tmp3wwtjydv/temp.cpp: In function \u2018int sumSeries(int)\u2019:\n/tmp/tmp3wwtjydv/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp3wwtjydv/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp3wwtjydv/temp.cpp:15:22: note: to match this \u2018{\u2019\n   15 | int sumSeries(int n) {\n      |                      ^\n", "passed": false}
{"task_id": "MBCPP/163", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the area of a regular polygon.\n * > areaPolygon(4, 20)\n * 400.00000000000006\n * > areaPolygon(10, 15)\n * 1731.1969896610804\n * > areaPolygon(9, 7)\n * 302.90938549487214\n */\ndouble areaPolygon(int s, int l) {\n#define _USE_MATH_DEFINES\n#include <cmath>\n\n\nreturn (s * l * l) / (4 * tan(M_PI / s));", "entry_point": "areaPolygon", "result": "passed", "passed": true}
{"task_id": "MBCPP/164", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the sum of divisors are same or not.\n * > areequivalent(36, 57)\n * false\n * > areequivalent(2, 4)\n * false\n * > areequivalent(23, 47)\n * true\n */\nbool areequivalent(int num1, int num2) {\nauto sum_divisors = [](int n) {\n        int sum = 1;\n        for (int i = 2; i * i <= n; ++i) {\n            if (n % i == 0) {\n                sum += i;\n                if (i * i != n) {\n                    sum += n / i;\n                }\n            }\n        }\n        return sum;\n    };\n    return sum_divisors(num1) == sum_divisors(num2);", "entry_point": "areequivalent", "result": "passed", "passed": true}
{"task_id": "MBCPP/165", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n * > countCharPosition(string(\"xbcefg\"))\n * 2\n * > countCharPosition(string(\"ABcED\"))\n * 3\n * > countCharPosition(string(\"AbgdeF\"))\n * 5\n */\nint countCharPosition(string str1) {\nint count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == 'a' + i || str1[i] == 'A' + i) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countCharPosition", "result": "passed", "passed": true}
{"task_id": "MBCPP/166", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an even number.\n * > findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 4\n * > findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 9\n * > findEvenPair(vector<int>{1, 2, 3}, 3)\n * 1\n */\nint findEvenPair(vector<int> a, int n) {\nint even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    // A pair (x, y) has an even XOR if:\n    // 1. Both x and y are even (even ^ even = even)\n    // 2. Both x and y are odd (odd ^ odd = even)\n    return (even_count * (even_count - 1) / 2) + (odd_count * (odd_count - 1) / 2);", "entry_point": "findEvenPair", "result": "passed", "passed": true}
{"task_id": "MBCPP/167", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest power of 2 greater than or equal to n.\n * > nextPowerOf2(0)\n * 1\n * > nextPowerOf2(5)\n * 8\n * > nextPowerOf2(17)\n * 32\n */\nint nextPowerOf2(int n) {\nif (n == 0) return 1;\n    unsigned int p = 1;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;", "entry_point": "nextPowerOf2", "result": "passed", "passed": true}
{"task_id": "MBCPP/168", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of a number in a given array.\n * > frequency(vector<int>{1, 2, 3}, 4)\n * 0\n * > frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3)\n * 3\n * > frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1)\n * 2\n */\nint frequency(vector<int> a, int x) {\nint count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "frequency", "result": "passed", "passed": true}
{"task_id": "MBCPP/169", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the nth pell number.\n * > getPell(4)\n * 12\n * > getPell(7)\n * 169\n * > getPell(8)\n * 408\n */\nint getPell(int n) {\nif (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; ++i) {\n            c = 2 * b + a;\n            a = b;\n            b = c;\n        }\n        return b;\n    }", "entry_point": "getPell", "result": "Compilation failed: /tmp/tmpk90o83d7/temp.cpp: In function \u2018int getPell(int)\u2019:\n/tmp/tmpk90o83d7/temp.cpp:32:1: error: a template declaration cannot appear at block scope\n   32 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpk90o83d7/temp.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpk90o83d7/temp.cpp:15:20: note: to match this \u2018{\u2019\n   15 | int getPell(int n) {\n      |                    ^\n", "passed": false}
{"task_id": "MBCPP/170", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sum of the numbers in a list between the indices of a specified range.\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10)\n * 29\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7)\n * 16\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10)\n * 38\n */\nint sumRangeList(vector<int> list1, int m, int n) {\nint sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;", "entry_point": "sumRangeList", "result": "passed", "passed": true}
{"task_id": "MBCPP/171", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a pentagon.\n * > perimeterPentagon(5)\n * 25\n * > perimeterPentagon(10)\n * 50\n * > perimeterPentagon(15)\n * 75\n */\nint perimeterPentagon(int a) {\nreturn 5 * a;", "entry_point": "perimeterPentagon", "result": "passed", "passed": true}
{"task_id": "MBCPP/172", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n * > countOccurance(string(\"letstdlenstdporstd\"))\n * 3\n * > countOccurance(string(\"truststdsolensporsd\"))\n * 1\n * > countOccurance(string(\"makestdsostdworthit\"))\n * 2\n */\nint countOccurance(string s) {\nint count = 0;\n    string sub = \"std\";\n    size_t pos = s.find(sub, 0);\n    while (pos != string::npos) {\n        count++;\n        pos = s.find(sub, pos + sub.length());\n    }\n    return count;", "entry_point": "countOccurance", "result": "passed", "passed": true}
{"task_id": "MBCPP/173", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from a string.\n * > removeSplchar(string(\"python  @#&^%$*program123\"))\n * string(\"pythonprogram123\")\n * > removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"))\n * string(\"pythonprogramming24language\")\n * > removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"))\n * string(\"python67program\")\n */\nstring removeSplchar(string text) {\nstring result = \"\";\n    for (char c : text) {\n        if (isalnum(c)) {\n            result += c;\n        }\n    }\n    return result;", "entry_point": "removeSplchar", "result": "passed", "passed": true}
{"task_id": "MBCPP/175", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to verify validity of a string of parentheses.\n * > isValidParenthese(string(\"(){}[]\"))\n * true\n * > isValidParenthese(string(\"()[{)}\"))\n * false\n * > isValidParenthese(string(\"()\"))\n * true\n */\nbool isValidParenthese(string str1) {\nstack<char> s;\nfor (char c : str1) {\nif (c == '(' || c == '{' || c == '[') {\ns.push(c);\n} else {\nif (s.empty()) {\nreturn false;\n}\nchar topChar = s.top();\ns.pop();\nif ((c == ')' && topChar != '(') ||\n(c == '}' && topChar != '{') ||\n(c == ']' && topChar != '[')) {\nreturn false;\n}\n}\n}\nreturn s.empty();", "entry_point": "isValidParenthese", "result": "passed", "passed": true}
{"task_id": "MBCPP/176", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a triangle.\n * > perimeterTriangle(10, 20, 30)\n * 60\n * > perimeterTriangle(3, 4, 5)\n * 12\n * > perimeterTriangle(25, 35, 45)\n * 105\n */\nint perimeterTriangle(int a, int b, int c) {\nreturn a + b + c;", "entry_point": "perimeterTriangle", "result": "passed", "passed": true}
{"task_id": "MBCPP/177", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find two distinct numbers such that their lcm lies within the given range.\n * > answer(3, 8)\n * {3, 6}\n * > answer(2, 6)\n * {2, 4}\n * > answer(1, 3)\n * {1, 2}\n */\nvector<int> answer(int l, int r) {\nif (2 * l <= r) {\n        return {l, 2 * l};\n    } else {\n        return {-1, -1}; // No such distinct numbers found.\n    }", "entry_point": "answer", "result": "Compilation failed: /tmp/tmp5j_1u0s_/temp.cpp: In function \u2018std::vector<int> answer(int, int)\u2019:\n/tmp/tmp5j_1u0s_/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp5j_1u0s_/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp5j_1u0s_/temp.cpp:15:34: note: to match this \u2018{\u2019\n   15 | vector<int> answer(int l, int r) {\n      |                                  ^\n", "passed": false}
{"task_id": "MBCPP/178", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string.\n * > stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"))\n * string(\"Matched!\")\n * > stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"))\n * string(\"Not Matched!\")\n * > stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"))\n * string(\"Not Matched!\")\n */\nstring stringLiterals(vector<string> patterns, string text) {\nfor (const string& pattern : patterns) {\n        if (text.find(pattern) != string::npos) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";", "entry_point": "stringLiterals", "result": "passed", "passed": true}
{"task_id": "MBCPP/179", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is a keith number or not.\n * > isNumKeith(14)\n * true\n * > isNumKeith(12)\n * false\n * > isNumKeith(197)\n * true\n */\nbool isNumKeith(int x) {\nif (x < 10) {\n        return false;\n    }\n\n    vector<int> series;\n    int temp = x;\n    string s = to_string(x);\n    for (char c : s) {\n        series.push_back(c - '0');\n    }\n\n    int n = series.size();\n    int next_term = 0;\n\n    while (next_term < x) {\n        next_term = 0;\n        for (int i = 0; i < n; ++i) {\n            next_term += series[series.size() - n + i];\n        }\n\n        if (next_term == x) {\n            return true;\n        }\n\n        series.push_back(next_term);\n    }\n\n    return false;", "entry_point": "isNumKeith", "result": "passed", "passed": true}
{"task_id": "MBCPP/181", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common prefix in the given set of strings.\n * > commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4)\n * string(\"ta\")\n * > commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3)\n * string(\"ap\")\n * > commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3)\n * string(\"teen\")\n */\nstring commonPrefix(vector<string> arr, int n) {\nif (n == 0) {\n        return \"\";\n    }\n    if (n == 1) {\n        return arr[0];\n    }\n    sort(arr.begin(), arr.end());\n    int end = min(arr[0].length(), arr[n - 1].length());\n    int i = 0;\n    while (i < end && arr[0][i] == arr[n - 1][i]) {\n        i++;\n    }\n    string pre = arr[0].substr(0, i);\n    return pre;", "entry_point": "commonPrefix", "result": "passed", "passed": true}
{"task_id": "MBCPP/183", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count all the distinct pairs having a difference of k in any array.\n * > countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3)\n * 2\n * > countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4)\n * 5\n * > countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2)\n * 3\n */\nint countPairs(vector<int> arr, int n, int k) {\nint count = 0;\n    sort(arr.begin(), arr.end());\n    int i = 0, j = 1;\n    while (j < n) {\n        if (arr[j] - arr[i] == k) {\n            count++;\n            i++;\n            j++;\n            while (j < n && arr[j] == arr[j - 1]) { // Skip duplicates for j\n                j++;\n            }\n            while (i < n && arr[i] == arr[i - 1] && i < j) { // Skip duplicates for i, ensuring i stays before j\n                i++;\n            }\n        } else if (arr[j] - arr[i] < k) {\n            j++;\n        } else {\n            i++;\n            if (i == j) { // Ensure j is always ahead of i\n                j++;\n            }\n        }\n    }\n    return count;", "entry_point": "countPairs", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 2 did not pass.\n", "passed": false}
{"task_id": "MBCPP/184", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all the values in a list that are greater than a specified number.\n * > greaterSpecificnum(vector<int>{220, 330, 500}, 200)\n * true\n * > greaterSpecificnum(vector<int>{12, 17, 21}, 20)\n * false\n * > greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10)\n * false\n */\nbool greaterSpecificnum(vector<int> list, int num) {\nfor (int x : list) {\n        if (x <= num) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "greaterSpecificnum", "result": "passed", "passed": true}
{"task_id": "MBCPP/185", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the focus of a parabola.\n * > parabolaFocus(5, 3, 2)\n * {-0.3, 1.6}\n * > parabolaFocus(9, 8, 4)\n * {-0.4444444444444444, 2.25}\n * > parabolaFocus(2, 4, 6)\n * {-1.0, 4.125}\n */\nvector<double> parabolaFocus(int a, int b, int c) {\ndouble x = -b / (2.0 * a);\n    double y = (1.0 - b * b + 4.0 * a * c) / (4.0 * a);\n    return {x, y};", "entry_point": "parabolaFocus", "result": "passed", "passed": true}
{"task_id": "MBCPP/186", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string by using regex.\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")})\n * string(\"Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")})\n * string(\"Not Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")})\n * string(\"Matched!\")\n */\nstring checkLiterals(string text, vector<string> patterns) {\nfor (const string& pattern : patterns) {\n        regex r(pattern);\n        if (regex_search(text, r)) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";", "entry_point": "checkLiterals", "result": "passed", "passed": true}
{"task_id": "MBCPP/187", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given two sequences.\n * > longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7)\n * 4\n * > longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6)\n * 3\n * > longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4)\n * 2\n */\nint longestCommonSubsequence(string x, string y, int m, int n) {\nint dp[m + 1][n + 1];\n\n\nfor (int i = 0; i <= m; i++) {\n    for (int j = 0; j <= n; j++) {\n        if (i == 0 || j == 0)\n            dp[i][j] = 0;\n        else if (x[i - 1] == y[j - 1])\n            dp[i][j] = 1 + dp[i - 1][j - 1];\n        else\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n    }\n}\nreturn dp[m][n];", "entry_point": "longestCommonSubsequence", "result": "passed", "passed": true}
{"task_id": "MBCPP/188", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by product of two squares or not.\n * > prodSquare(25)\n * false\n * > prodSquare(30)\n * false\n * > prodSquare(16)\n * true\n */\nbool prodSquare(int n) {\nif (n < 0) {\n        return false;\n    }\n    for (long long i = 1; i * i <= n; ++i) {\n        if (n % (i * i) == 0) {\n            long long remaining_n = n / (i * i);\n            long long j = sqrt(remaining_n);\n            if (j * j == remaining_n) {\n                return true;\n            }\n        }\n    }\n    return false;", "entry_point": "prodSquare", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/189", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first missing positive number.\n * > firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5)\n * 4\n * > firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6)\n * 2\n * > firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5)\n * 3\n */\nint firstMissingPositive(vector<int> arr, int n) {\nfor (int i = 0; i < n; ++i) {\n        // While the current number is positive, within the array bounds,\n        // and not in its correct position (i.e., nums[i] should be i+1),\n        // and the number at its target position is not already the same as nums[i],\n        // swap it to its correct position.\n        while (arr[i] > 0 && arr[i] <= n && arr[i] != arr[arr[i] - 1]) {\n            swap(arr[i], arr[arr[i] - 1]);\n        }\n    }\nfor (int i = 0; i < n; ++i) {\n    if (arr[i] != i + 1) {\n        return i + 1;\n    }\n}\n\nreturn n + 1;", "entry_point": "firstMissingPositive", "result": "passed", "passed": true}
{"task_id": "MBCPP/190", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of integral co-ordinates that lie inside a square.\n * > countIntgralPoints(1, 1, 4, 4)\n * 4\n * > countIntgralPoints(1, 2, 1, 2)\n * 1\n * > countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nint countIntgralPoints(int x1, int y1, int x2, int y2) {\n    return std::max(0, x2 - x1 - 1) * std::max(0, y2 - y1 - 1);", "entry_point": "countIntgralPoints", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/191", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n * > checkMonthnumber(string(\"February\"))\n * false\n * > checkMonthnumber(string(\"June\"))\n * true\n * > checkMonthnumber(string(\"April\"))\n * true\n */\nbool checkMonthnumber(string monthname3) {\nif (monthname3 == \"September\" || monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"November\") {\n        return true;\n    } else if (monthname3 == \"February\") {\n        return false;\n    } else {\n        return false; // All other months have 31 days\n    }", "entry_point": "checkMonthnumber", "result": "Compilation failed: /tmp/tmpg8pm3a13/temp.cpp: In function \u2018bool checkMonthnumber(std::string)\u2019:\n/tmp/tmpg8pm3a13/temp.cpp:24:1: error: a template declaration cannot appear at block scope\n   24 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpg8pm3a13/temp.cpp:45:1: error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmpg8pm3a13/temp.cpp:15:42: note: to match this \u2018{\u2019\n   15 | bool checkMonthnumber(string monthname3) {\n      |                                          ^\n", "passed": false}
{"task_id": "MBCPP/192", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a string has atleast one letter and one number.\n * > checkString(string(\"thishasboth29\"))\n * true\n * > checkString(string(\"python\"))\n * false\n */\nbool checkString(string str) {\nbool hasLetter = false;\n    bool hasNumber = false;\n    for (char c : str) {\n        if (isalpha(c)) {\n            hasLetter = true;\n        } else if (isdigit(c)) {\n            hasNumber = true;\n        }\n        if (hasLetter && hasNumber) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "checkString", "result": "passed", "passed": true}
{"task_id": "MBCPP/193", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the duplicates from the given tuple.\n * > removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3})\n * {1, 2, 3, 5}\n * > removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8})\n * {2, 3, 4, 5, 6, 7, 8}\n * > removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13})\n * {11, 12, 13, 14}\n */\nvector<int> removeTuple(vector<int> testTup) {\nsort(testTup.begin(), testTup.end());\n    testTup.erase(unique(testTup.begin(), testTup.end()), testTup.end());\n    return testTup;", "entry_point": "removeTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/194", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert octal number to decimal number.\n * > octalToDecimal(25)\n * 21\n * > octalToDecimal(30)\n * 24\n * > octalToDecimal(40)\n * 32\n */\nint octalToDecimal(int n) {\nint dec_value = 0;\n    int base = 1;\n    int temp = n;\n    while (temp > 0) {\n        int last_digit = temp % 10;\n        temp = temp / 10;\n        dec_value += last_digit * base;\n        base = base * 8;\n    }\n    return dec_value;", "entry_point": "octalToDecimal", "result": "passed", "passed": true}
{"task_id": "MBCPP/195", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first position of an element in a sorted array.\n * > first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6)\n * 5\n * > first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9)\n * 1\n * > first(vector<int>{1, 2, 3}, 1, 3)\n * 0\n */\nint first(vector<int> arr, int x, int n) {\nint low = 0;\n    int high = n - 1;\n    int result = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            high = mid - 1; // Look for an earlier occurrence in the left half\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;", "entry_point": "first", "result": "passed", "passed": true}
{"task_id": "MBCPP/196", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the tuples with length k.\n * > removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1)\n * {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2)\n * {{1, 2, 3}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3)\n * {{4, 3}, {1}}\n */\nvector<vector<int>> removeTuples(vector<vector<int>> testList, int k) {\nvector<vector<int>> result;\nfor (const auto& tuple : testList) {\nif (tuple.size() != k) {\nresult.push_back(tuple);\n}\n}\nreturn result;", "entry_point": "removeTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/197", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the exponentiation of the given two tuples.\n * > findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5})\n * {100000, 4096, 78125, 7776}\n * > findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6})\n * {1771561, 78125, 1679616, 117649}\n * > findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7})\n * {35831808, 1679616, 40353607, 2097152}\n */\nvector<int> findExponentio(vector<int> testTup1, vector<int> testTup2) {\nvector<int> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nresult.push_back(pow(testTup1[i], testTup2[i]));\n}\nreturn result;", "entry_point": "findExponentio", "result": "passed", "passed": true}
{"task_id": "MBCPP/198", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest triangle that can be inscribed in an ellipse.\n * > largestTriangle(4, 2)\n * 10.392304845413264\n * > largestTriangle(5, 7)\n * 4.639421805988064\n * > largestTriangle(9, 1)\n * 105.2220865598093\n */\ndouble largestTriangle(int a, int b) {\nreturn (3 * sqrt(3) * a * b) / 4.0;", "entry_point": "largestTriangle", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/199", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find highest power of 2 less than or equal to given number.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\nint power = 1;\n    while (power * 2 <= n) {\n        power *= 2;\n    }\n    return power;", "entry_point": "highestPowerOf2", "result": "passed", "passed": true}
{"task_id": "MBCPP/200", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the maximum values in a given list.\n * > positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {7}\n * > positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {7, 8, 9, 10}\n * > positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {11}\n */\nvector<int> positionMax(vector<int> list1) {\nvector<int> result;\nif (list1.empty()) {\nreturn result;\n}\n\n\nint max_val = list1[0];\nfor (size_t i = 1; i < list1.size(); ++i) {\n    if (list1[i] > max_val) {\n        max_val = list1[i];\n    }\n}\n\nfor (size_t i = 0; i < list1.size(); ++i) {\n    if (list1[i] == max_val) {\n        result.push_back(i);\n    }\n}\n\nreturn result;", "entry_point": "positionMax", "result": "passed", "passed": true}
{"task_id": "MBCPP/201", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the elements in a list are same or not.\n * > chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")})\n * true\n * > chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")})\n * false\n * > chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")})\n * false\n */\nbool chklist(vector<string> lst) {\nif (lst.empty()) {\n        return true; \n    }\n    string first_element = lst[0];\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] != first_element) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "chklist", "result": "passed", "passed": true}
{"task_id": "MBCPP/202", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove even characters in a string.\n * > removeEven(string(\"python\"))\n * string(\"pto\")\n * > removeEven(string(\"program\"))\n * string(\"porm\")\n * > removeEven(string(\"language\"))\n * string(\"lnug\")\n */\nstring removeEven(string str1) {\nstring ans = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 == 0) {\n            ans += str1[i];\n        }\n    }\n    return ans;", "entry_point": "removeEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/203", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the hamming distance between given two integers.\n * > hammingDistance(4, 8)\n * 2\n * > hammingDistance(2, 4)\n * 2\n * > hammingDistance(1, 2)\n * 2\n */\nint hammingDistance(int n1, int n2) {\nint x = n1 ^ n2;\n    int setBits = 0;\n    while (x > 0) {\n        x &= (x - 1);\n        setBits++;\n    }\n    return setBits;", "entry_point": "hammingDistance", "result": "passed", "passed": true}
{"task_id": "MBCPP/204", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occurrence of a given character in a string.\n * > count(string(\"abcc\"), string(\"c\"))\n * 2\n * > count(string(\"ababca\"), string(\"a\"))\n * 3\n * > count(string(\"mnmm0pm\"), string(\"m\"))\n * 4\n */\nint count(string s, string c) {\nint res = 0;\n    for (char x : s) {\n        if (x == c[0]) {\n            res++;\n        }\n    }\n    return res;", "entry_point": "count", "result": "passed", "passed": true}
{"task_id": "MBCPP/205", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the inversions of tuple elements in the given tuple list.\n * > inversionElements(vector<int>{7, 8, 9, 1, 10, 7})\n * {-8, -9, -10, -2, -11, -8}\n * > inversionElements(vector<int>{2, 4, 5, 6, 1, 7})\n * {-3, -5, -6, -7, -2, -8}\n * > inversionElements(vector<int>{8, 9, 11, 14, 12, 13})\n * {-9, -10, -12, -15, -13, -14}\n */\nvector<int> inversionElements(vector<int> testTup) {\nvector<int> result;\nfor (int x : testTup) {\nresult.push_back(-(x + 1));\n}\nreturn result;", "entry_point": "inversionElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/206", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the adjacent element concatenation in the given tuples.\n * > concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")})\n * {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}\n * > concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")})\n * {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}\n * > concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"SKD\")})\n * {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}\n */\nvector<string> concatenateElements(vector<string> testTup) {\nvector<string> result;\nfor (size_t i = 0; i < testTup.size() - 1; ++i) {\nresult.push_back(testTup[i] + testTup[i+1]);\n}\nreturn result;", "entry_point": "concatenateElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/207", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n * > findLongestRepeatingSubseq(string(\"AABEBCDD\"))\n * 3\n * > findLongestRepeatingSubseq(string(\"aabb\"))\n * 2\n * > findLongestRepeatingSubseq(string(\"aab\"))\n * 1\n */\nint findLongestRepeatingSubseq(string str) {\nint n = str.length();\n    vector<vectornt>> dp(n + 1, vector<int>(n + 1, 0));\n\n\nfor (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= n; j++) {\n        if (str[i - 1] == str[j - 1] && i != j) {\n            dp[i][j] = 1 + dp[i - 1][j - 1];\n        } else {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n}\nreturn dp[n][n];", "entry_point": "findLongestRepeatingSubseq", "result": "Compilation failed: /tmp/tmplbd7r8du/temp.cpp: In function \u2018int findLongestRepeatingSubseq(std::string)\u2019:\n/tmp/tmplbd7r8du/temp.cpp:17:12: error: \u2018vectornt\u2019 was not declared in this scope\n   17 |     vector<vectornt>> dp(n + 1, vector<int>(n + 1, 0));\n      |            ^~~~~~~~\n/tmp/tmplbd7r8du/temp.cpp:17:12: error: template argument 1 is invalid\n/tmp/tmplbd7r8du/temp.cpp:17:12: error: template argument 2 is invalid\n/tmp/tmplbd7r8du/temp.cpp:17:20: error: expected unqualified-id before \u2018>\u2019 token\n   17 |     vector<vectornt>> dp(n + 1, vector<int>(n + 1, 0));\n      |                    ^~\n/tmp/tmplbd7r8du/temp.cpp:23:13: error: \u2018dp\u2019 was not declared in this scope\n   23 |             dp[i][j] = 1 + dp[i - 1][j - 1];\n      |             ^~\n/tmp/tmplbd7r8du/temp.cpp:25:13: error: \u2018dp\u2019 was not declared in this scope\n   25 |             dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n      |             ^~\n/tmp/tmplbd7r8du/temp.cpp:29:8: error: \u2018dp\u2019 was not declared in this scope\n   29 | return dp[n][n];\n      |        ^~\n", "passed": false}
{"task_id": "MBCPP/208", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check the given decimal with a precision of 2 by using regex.\n * > isDecimal(string(\"123.11\"))\n * true\n * > isDecimal(string(\"0.21\"))\n * true\n * > isDecimal(string(\"123.1214\"))\n * false\n */\nbool isDecimal(string num) {\nregex pattern(\"^[0-9]+.[0-9]{2}$\");\n    return regex_match(num, pattern);", "entry_point": "isDecimal", "result": "passed", "passed": true}
{"task_id": "MBCPP/209", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to delete the smallest element from the given heap and then insert a new item.\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 21)\n * {21, 25, 23, 44, 39, 68, 89}\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 110)\n * {23, 25, 68, 44, 39, 110, 89}\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 500)\n * {23, 25, 68, 44, 39, 500, 89}\n */\nvector<int> heapReplace(vector<int> heap, int a) {\n// heap is a min-heap, so the smallest element is at index 0.\n    // To \"delete\" the smallest element, we replace it with the last element\n    // and then reduce the heap size. Then, we down-heapify from the root.\n    // After that, we insert the new itemify.\n\n\nif (heap.empty()) {\n    heap.push_back(a);\n    return heap;\n}\n\n// 1. Delete the smallest element (root)\nheap[0] = heap.back();\nheap.pop_back();\n\n// If the heap becomes empty after deletion, simply insert the new item\nif (heap.empty()) {\n    heap.push_back(a);\n    return heap;\n}\n\n// Down-heapify from the root to restore min-heap property\nint n = heap.size();\nint i = 0;\nwhile (true) {\n    int leftChild = 2 * i + 1;\n    int rightChild = 2 * i + 2;\n    int smallest = i;\n\n    if (leftChild < n && heap[leftChild] < heap[smallest]) {\n        smallest = leftChild;\n    }\n    if (rightChild < n && heap[rightChild] < heap[smallest]) {\n        smallest = rightChild;\n    }\n\n    if (smallest != i) {\n        swap(heap[i], heap[smallest]);\n        i = smallest;\n    } else {\n        break;\n    }\n}\n\n// 2. Insert the new item\nheap.push_back(a);\n\n// Up-heapify to restore min-heap property after insertion\nint currentIndex = heap.size() - 1;\nwhile (currentIndex > 0) {\n    int parentIndex = (currentIndex - 1) / 2;\n    if (heap[currentIndex] < heap[parentIndex]) {\n        swap(heap[currentIndex], heap[parentIndex]);\n        currentIndex = parentIndex;\n    } else {\n        break;\n    }\n}\n\nreturn heap;", "entry_point": "heapReplace", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/210", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n * > isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"))\n * true\n * > isAllowedSpecificChar(string(\"*&%@#!}{\"))\n * false\n * > isAllowedSpecificChar(string(\"HELLOhowareyou98765\"))\n * true\n */\nbool isAllowedSpecificChar(string str) {\nconst regex pattern(\"^[a-zA-Z0-9]+$\");\n    return regex_match(str, pattern);", "entry_point": "isAllowedSpecificChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/211", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numbers whose oth and nth bits are set.\n * > countNum(2)\n * 1\n * > countNum(3)\n * 2\n * > countNum(1)\n * 1\n */\nint countNum(int n) {\nint count = 0;\n    for (int i = 0; i <= n; i++) {\n        if ((i & (1 << 0)) && (i & (1 << n))) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countNum", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/212", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of n natural numbers.\n * > fourthPowerSum(2)\n * 17\n * > fourthPowerSum(4)\n * 354\n * > fourthPowerSum(6)\n * 2275\n */\nint fourthPowerSum(int n) {\nint sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;", "entry_point": "fourthPowerSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/213", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the concatenation of two string tuples.\n * > concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")})\n * {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}\n * > concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")})\n * {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}\n * > concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")})\n * {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}\n */\nvector<string> concatenateStrings(vector<string> testTup1, vector<string> testTup2) {\nvector<string> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nresult.push_back(testTup1[i] + testTup2[i]);\n}\nreturn result;", "entry_point": "concatenateStrings", "result": "passed", "passed": true}
{"task_id": "MBCPP/214", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert radians to degrees.\n * > degreeRadian(90)\n * 5156.620156177409\n * > degreeRadian(60)\n * 3437.746770784939\n * > degreeRadian(120)\n * 6875.493541569878\n */\ndouble degreeRadian(int radian) {\nreturn radian * (180.0 / M_PI);", "entry_point": "degreeRadian", "result": "passed", "passed": true}
{"task_id": "MBCPP/217", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated character in a given string.\n * > firstRepeatedChar(string(\"Google\"))\n * string(\"o\")\n * > firstRepeatedChar(string(\"data\"))\n * string(\"a\")\n * > firstRepeatedChar(string(\"python\"))\n * string(\"\\x00\")\n */\nstring firstRepeatedChar(string str) {\nunordered_set<char> seen_chars;\nfor (char c : str) {\nif (seen_chars.count(c)) {\nreturn string(1, c);\n}\nseen_chars.insert(c);\n}\nreturn string(1, '0');", "entry_point": "firstRepeatedChar", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 2 did not pass.\n", "passed": false}
{"task_id": "MBCPP/218", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum operations required to make two numbers equal.\n * > minOperations(2, 4)\n * 1\n * > minOperations(4, 10)\n * 4\n * > minOperations(1, 4)\n * 3\n */\nint minOperations(int a, int b) {\nint minOperations(int a, int b) {\n    if (a == b) {\n        return 0;\n    }\n    if (a > b) {\n        swap(a, b);\n    }\n    // Now a <= b\n    // The operation described in the examples (2, 4) -> 1, (4, 10) -> 4 suggests\n    // a specific type of operation:\n    // For (2, 4), one operation makes them equal. If the operation is \"add a to a\"\n    // (making a=4), then 1 operation.\n    // For (4, 10), it takes 4 operations.\n    // Operation 1: A = A + 4 = 8. B = 10.\n    // Operation 2: A = A + 4 = 12. B = 10.\n    // Operation 3: A = A + 4 = 16. B = 10.\n    // Operation 4: A = A + 4 = 20. B = B/ This specific problem statement seems to refer to a GeeksforGeeks problem\n// \"Minimum operations required to make two numbers equal\" where the operations are:\n// 1. Increment A only (A = A + initial_A)\n// 2. Increment B only (B = B + initial_B)\n// 3. Increment both A and B (A = A + initial_A, B = B + initial_B)\n// And the solution is based on reducing B by GCD(A, B) and then B - 1.\n\n// Let's analyze the given examples based on this interpretation:\n// minOperations(2, 4)\n// a = 2, b = 4\n// __gcd(2, 4) = 2\n// b = 4 / 2 = 2\n// return b - 1 = 2 - 1 = 1. This matches the example.\n\n// minOperations(4, 10)\n// a = 4, b = 10\n// __gcd(4, 10) = 2\n// b = 10 / 2 = 5\n// return b - 1 = 5 - 1 = 4. This matches the example.\n\n// minOperations(1, 4)\n// a = 1, b = 4\n// __gcd(1, 4) = 1\n// b = 4 / 1 = 4\n// return b - 1 = 4 - 1 = 3. This matches the example.\n\n// So the solution is to:\n// 1. Ensure 'a' is less than or equal to 'b'.\n// 2. Divide 'b' by the greatest common divisor of 'a' and 'b'.\n// 3. Return 'b - 1'.\n\nlong long int common_divisor = std::gcd(a, b);\nb = b / common_divisor;\nreturn b - 1;", "entry_point": "minOperations", "result": "Compilation failed: /tmp/tmpzgnk845u/temp.cpp: In function \u2018int minOperations(int, int)\u2019:\n/tmp/tmpzgnk845u/temp.cpp:16:33: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | int minOperations(int a, int b) {\n      |                                 ^\n/tmp/tmpzgnk845u/temp.cpp:68:1: error: a template declaration cannot appear at block scope\n   68 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpzgnk845u/temp.cpp:89:1: error: expected \u2018}\u2019 at end of input\n   89 | }\n      | ^\n/tmp/tmpzgnk845u/temp.cpp:15:33: note: to match this \u2018{\u2019\n   15 | int minOperations(int a, int b) {\n      |                                 ^\n/tmp/tmpzgnk845u/temp.cpp:89:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   89 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/219", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract maximum and minimum k elements in the given tuple.\n * > extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2)\n * {3, 5, 8, 20}\n * > extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3)\n * {1, 2, 4, 5, 6, 7}\n * > extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4)\n * {2, 3, 4, 7, 8, 9, 11}\n */\nvector<int> extractMinMax(vector<int> testTup, int k) {\nvector<int> result;\nsort(testTup.begin(), testTup.end());\nfor (int i = 0; i < k; i++) {\nresult.push_back(testTup[i]);\n}\nfor (int i = testTup.size() - k; i < testTup.size(); i++) {\nresult.push_back(testTup[i]);\n}\nsort(result.begin(), result.end());\nresult.erase(unique(result.begin(), result.end()), result.end());\nreturn result;", "entry_point": "extractMinMax", "result": "passed", "passed": true}
{"task_id": "MBCPP/220", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n * > replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2)\n * string(\"Python:language: Programming language.\")\n * > replaceMaxSpecialchar(string(\"a b c,d e f\"), 3)\n * string(\"a:b:c:d e f\")\n * > replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1)\n * string(\"ram:reshma,ram rahim\")\n */\nstring replaceMaxSpecialchar(string text, int n) {\nint count = 0;\n    for (char &c : text) {\n        if (count >= n) {\n            break;\n        }\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n            count++;\n        }\n    }\n    return text;", "entry_point": "replaceMaxSpecialchar", "result": "passed", "passed": true}
{"task_id": "MBCPP/221", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first even number in a given list of numbers.\n * > firstEven(vector<int>{2, 3, 4})\n * 2\n * > firstEven(vector<int>{5, 6, 7})\n * 6\n */\nint firstEven(vector<int> nums) {\nfor (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1; // Or throw an exception if no even number is found", "entry_point": "firstEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/222", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all the elements in tuple have same data type or not.\n * > checkType(vector<int>{5, 6, 7, 3, 5, 6})\n * true\n * > checkType(vector<int>{3, 2, 1, 4, 5})\n * true\n */\nbool checkType(vector<int> testTuple) {\nif (testTuple.empty()) {\n        return true; \n    }\n    return true;", "entry_point": "checkType", "result": "passed", "passed": true}
{"task_id": "MBCPP/223", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for majority element in the given sorted array.\n * > isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3)\n * true\n * > isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4)\n * false\n * > isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1)\n * true\n */\nbool isMajority(vector<int> arr, int n, int x) {\n// Find the first occurrence of x\n    auto it = lower_bound(arr.begin(), arr.end(), x);\n// If x is not present in the array or it's out of bounds\nif (it == arr.end() || *it != x) {\n    return false;\n}\n\n// Get the index of the first occurrence\nint i = distance(arr.begin(), it);\n\n// Check if x appears more than n/2 times\n// This means the element at index i + n/2 must also be x\nreturn (i + n / 2 < n && arr[i + n / 2] == x);", "entry_point": "isMajority", "result": "passed", "passed": true}
{"task_id": "MBCPP/224", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count set bits of a given number.\n * > countSetBits(2)\n * 1\n * > countSetBits(4)\n * 1\n * > countSetBits(6)\n * 2\n */\nint countSetBits(int n) {\nint count = 0;\n    while (n > 0) {\n        n &= (n - 1);\n        count++;\n    }\n    return count;", "entry_point": "countSetBits", "result": "passed", "passed": true}
{"task_id": "MBCPP/225", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum element in a sorted and rotated array.\n * > findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4)\n * 1\n * > findMin(vector<int>{4, 6, 8}, 0, 2)\n * 4\n * > findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4)\n * 2\n */\nint findMin(vector<int> arr, int low, int high) {\nwhile (low < high) {\n        if (arr[low] <= arr[high]) {\n            return arr[low];\n        }\n        int mid = low + (high - low) / 2;\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[low];", "entry_point": "findMin", "result": "passed", "passed": true}
{"task_id": "MBCPP/226", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the characters which have odd index values of a given string.\n * > oddValuesString(string(\"abcdef\"))\n * string(\"ace\")\n * > oddValuesString(string(\"python\"))\n * string(\"pto\")\n * > oddValuesString(string(\"data\"))\n * string(\"dt\")\n */\nstring oddValuesString(string str) {\nstring newString = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            newString += str[i];\n        }\n    }\n    return newString;", "entry_point": "oddValuesString", "result": "passed", "passed": true}
{"task_id": "MBCPP/227", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of three numbers.\n * > minOfThree(10, 20, 0)\n * 0\n * > minOfThree(19, 15, 18)\n * 15\n * > minOfThree(-10, -20, -30)\n * -30\n */\nint minOfThree(int a, int b, int c) {\nreturn min({a, b, c});", "entry_point": "minOfThree", "result": "passed", "passed": true}
{"task_id": "MBCPP/228", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are unset in the given range or not.\n * > allBitsSetInTheGivenRange(4, 1, 2)\n * true\n * > allBitsSetInTheGivenRange(17, 2, 4)\n * true\n * > allBitsSetInTheGivenRange(39, 4, 6)\n * false\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n// Create a mask with bits set from l to r.\n    // (1 << r) - 1 creates a mask with r least significant bits set.\n    // (1 << (l - 1)) - 1 creates a mask with l-1 least significant bits set.\n    // XORing these two masks gives a mask with bits set only in the range [l, r].\n    int mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);\n\n    // Perform a bitwise AND operation between n and the mask.\n    // If all bits in the range [l, r] are unset in n, then the result of this\n    // operation will be 0.\n    return (n & mask) == 0;", "entry_point": "allBitsSetInTheGivenRange", "result": "passed", "passed": true}
{"task_id": "MBCPP/229", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n * > reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9)\n * {-1, -3, -7, 4, 5, 6, 2, 8, 9}\n * > reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5)\n * {-14, -26, 12, 13, 15}\n * > reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7)\n * {-42, -39, -78, 10, 24, 36, 85}\n */\nvector<int> reArrangeArray(vector<int> arr, int n) {\nint j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            if (i != j) {\n                swap(arr[i], arr[j]);\n            }\n            j++;\n        }\n    }\n    return arr;", "entry_point": "reArrangeArray", "result": "passed", "passed": true}
{"task_id": "MBCPP/230", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace blank spaces with any character in a string.\n * > replaceBlank(string(\"hello people\"), string(\"@\"))\n * string(\"hello@people\")\n * > replaceBlank(string(\"python program language\"), string(\"$\"))\n * string(\"python$program$language\")\n * > replaceBlank(string(\"blank space\"), string(\"-\"))\n * string(\"blank-space\")\n */\nstring replaceBlank(string str1, string chr) {\nfor (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1.replace(i, 1, chr);\n        }\n    }\n    return str1;", "entry_point": "replaceBlank", "result": "passed", "passed": true}
{"task_id": "MBCPP/231", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n * > maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3)\n * 6\n * > maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3)\n * 15\n * > maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3)\n * 28\n */\nint maxSum(vector<vector<int>> tri, int n) {\nfor (int i = n - 2; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n        }\n    }\n    return tri[0][0];", "entry_point": "maxSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/232", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n largest items from a dataset.\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {100, 90}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {100, 90, 80, 70, 60}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {100, 90, 80}\n */\nvector<int> largNnum(vector<int> list1, int n) {\nsort(list1.rbegin(), list1.rend());\nvector<int> result;\nfor (int i = 0; i < n && i < list1.size(); ++i) {\nresult.push_back(list1[i]);\n}\nreturn result;", "entry_point": "largNnum", "result": "passed", "passed": true}
{"task_id": "MBCPP/233", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cylinder.\n * > lateralsufaceCylinder(10, 5)\n * 314.15000000000003\n * > lateralsufaceCylinder(4, 5)\n * 125.66000000000001\n * > lateralsufaceCylinder(4, 10)\n * 251.32000000000002\n */\ndouble lateralsufaceCylinder(int r, int h) {\nreturn 2 * M_PI * r * h;", "entry_point": "lateralsufaceCylinder", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/234", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cube.\n * > volumeCube(3)\n * 27\n * > volumeCube(2)\n * 8\n * > volumeCube(5)\n * 125\n */\nint volumeCube(int l) {\nreturn l * l * l;", "entry_point": "volumeCube", "result": "passed", "passed": true}
{"task_id": "MBCPP/235", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all even bits of a given number.\n * > evenBitSetNumber(10)\n * 10\n * > evenBitSetNumber(20)\n * 30\n * > evenBitSetNumber(30)\n * 30\n */\nint evenBitSetNumber(int n) {\nfor (int i = 0; i < 32; i += 2) {\n        n |= (1 << i);\n    }\n    return n;", "entry_point": "evenBitSetNumber", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/236", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n * > noOfTriangle(4, 2)\n * 7\n * > noOfTriangle(4, 3)\n * 3\n * > noOfTriangle(1, 3)\n * -1\n */\nint noOfTriangle(int n, int k) {\nif (n < k) {\n        return -1;\n    } else {\n        int Tri_up = 0; // Number of triangles with an upward peak\n        Tri_up = ((n - k + 1) * (n - k + 2)) / 2;\n\n        int Tri_down = 0; // Number of inverted triangles (downward peak)\n        if (n >= 2 * k) {\n            Tri_down = ((n - 2 * k + 1) * (n - 2 * k + 2)) / 2;\n        }\n\n        return Tri_up + Tri_down;\n    }", "entry_point": "noOfTriangle", "result": "Compilation failed: /tmp/tmphv93tf19/temp.cpp: In function \u2018int noOfTriangle(int, int)\u2019:\n/tmp/tmphv93tf19/temp.cpp:30:1: error: a template declaration cannot appear at block scope\n   30 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmphv93tf19/temp.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmphv93tf19/temp.cpp:15:32: note: to match this \u2018{\u2019\n   15 | int noOfTriangle(int n, int k) {\n      |                                ^\n", "passed": false}
{"task_id": "MBCPP/238", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of non-empty substrings of a given string.\n * > numberOfSubstrings(string(\"abc\"))\n * 6\n * > numberOfSubstrings(string(\"abcd\"))\n * 10\n * > numberOfSubstrings(string(\"abcde\"))\n * 15\n */\nint numberOfSubstrings(string str) {\nint n = str.length();\n    return n * (n + 1) / 2;", "entry_point": "numberOfSubstrings", "result": "passed", "passed": true}
{"task_id": "MBCPP/239", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n * > getTotalNumberOfSequences(10, 4)\n * 4\n * > getTotalNumberOfSequences(5, 2)\n * 6\n * > getTotalNumberOfSequences(16, 3)\n * 84\n */\nint getTotalNumberOfSequences(int m, int n) {\n// dp[i][j] will store the number of sequences of length `i`\n    // where the last element is `j`.\n    // The problem statement can be interpreted as having sequence length `n`\n    // and elements up to `m`.\n    // Let's use `dp[len][last_val]`\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n\n\n// Base case: sequences of length 1\n// Any number from 1 to m can be a sequence of length 1.\nfor (int j = 1; j <= m; ++j) {\n    dp[1][j] = 1;\n}\n\n// Fill the DP table for lengths from 2 to n\nfor (int len = 2; len <= n; ++len) {\n    for (int last_val = 1; last_val <= m; ++last_val) {\n        // To form a sequence of length `len` ending with `last_val`,\n        // the previous element `prev_val` must satisfy:\n        // 1. `prev_val` <= `last_val` / 2\n        // 2. `prev_val` >= 1\n        // So, `prev_val` can range from 1 to `last_val` / 2.\n        // We sum up the counts for all valid `prev_val` from the previous length.\n        for (int prev_val = 1; prev_val * 2 <= last_val; ++prev_val) {\n            dp[len][last_val] += dp[len - 1][prev_val];\n        }\n    }\n}\n\n// The total number of sequences is the sum of all sequences of length `n`\n// ending with any valid value from 1 to m.\nint totalSequences = 0;\nfor (int j = 1; j <= m; ++j) {\n    totalSequences += dp[n][j];\n}\n\nreturn totalSequences;", "entry_point": "getTotalNumberOfSequences", "result": "passed", "passed": true}
{"task_id": "MBCPP/241", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a 3d array having each element as '*'.\n * > array3d(6, 4, 3)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(5, 3, 4)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(1, 2, 3)\n * {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}\n */\nvector<vector<vector<string>>> array3d(int m, int n, int o) {\nvector<vector<vectoror<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\nreturn result;", "entry_point": "array3d", "result": "Compilation failed: /tmp/tmpytwp_d70/temp.cpp: In function \u2018std::vector<std::vector<std::vector<std::__cxx11::basic_string<char> > > > array3d(int, int, int)\u2019:\n/tmp/tmpytwp_d70/temp.cpp:16:15: error: \u2018vectoror\u2019 was not declared in this scope\n   16 | vector<vector<vectoror<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n      |               ^~~~~~~~\n/tmp/tmpytwp_d70/temp.cpp:16:24: error: template argument 1 is invalid\n   16 | vector<vector<vectoror<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n      |                        ^~~~~~\n/tmp/tmpytwp_d70/temp.cpp:16:24: error: template argument 2 is invalid\n/tmp/tmpytwp_d70/temp.cpp:16:30: error: template argument 1 is invalid\n   16 | vector<vector<vectoror<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n      |                              ^~\n/tmp/tmpytwp_d70/temp.cpp:16:30: error: template argument 2 is invalid\n/tmp/tmpytwp_d70/temp.cpp:16:32: error: expected unqualified-id before \u2018>\u2019 token\n   16 | vector<vector<vectoror<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n      |                                ^\n/tmp/tmpytwp_d70/temp.cpp:17:8: error: \u2018result\u2019 was not declared in this scope\n   17 | return result;\n      |        ^~~~~~\n", "passed": false}
{"task_id": "MBCPP/242", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count total characters in a string.\n * > countCharac(string(\"python programming\"))\n * 18\n * > countCharac(string(\"language\"))\n * 8\n * > countCharac(string(\"words\"))\n * 5\n */\nint countCharac(string str1) {\nint count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        count++;\n    }\n    return count;", "entry_point": "countCharac", "result": "passed", "passed": true}
{"task_id": "MBCPP/244", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the next perfect square greater than a given number.\n * > nextPerfectSquare(35)\n * 36\n * > nextPerfectSquare(6)\n * 9\n * > nextPerfectSquare(9)\n * 16\n */\nint nextPerfectSquare(int n) {\nint root = sqrt(n);\n    return (root + 1) * (root + 1);", "entry_point": "nextPerfectSquare", "result": "passed", "passed": true}
{"task_id": "MBCPP/245", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * > maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9)\n * 194\n * > maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6)\n * 210\n * > maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8)\n * 138\n */\nint maxSum(vector<int> arr, int n) {\nif (n == 0)\n        return 0;\n\n    vector<int> msis(n); // Maximum Sum Increasing Subsequence ending at index i\n    vector<int> msds(n); // Maximum Sum Decreasing Subsequence starting at index i\n\n    // Initialize MSIBS values\n    for (int i = 0; i < n; i++)\n        msis[i] = arr[i];\n\n    // Compute MSIBS values from left to right\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) {\n                msis[i] = msis[j] + arr[i];\n            }\n        }\n    }\n\n    // Initialize MSDBS values\n    for (int i = 0; i < n; i++)\n        msds[i] = arr[i];\n\n    // Compute MSDBS values from right to left\n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && msds[i] < msds[j] + arr[i]) {\n                msds[i] = msds[j] + arr[i];\n            }\n        }\n    }\n\n    int max_sum = 0;\n    if (n > 0) { // Ensure there's at least one element\n        max_sum = msis[0]; // Initialize with a valid sum\n    }\n    \n    // Find the maximum sum of Bi-tonic subsequence\n    // For each element, a bitonic subsequence can be formed by combining\n    // an increasing subsequence ending at it and a decreasing subsequence starting at it.\n    // The element itself is counted twice, so subtract it once.\n    for (int i = 0; i < n; i++) {\n        max_sum = max(max_sum, msis[i] + msds[i] - arr[i]);\n    }\n\n    return max_sum;", "entry_point": "maxSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/246", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for computing square roots using the babylonian method.\n * > babylonianSquareroot(10)\n * 3.162277660168379\n * > babylonianSquareroot(2)\n * 1.414213562373095\n * > babylonianSquareroot(9)\n * 3.0\n */\ndouble babylonianSquareroot(int number) {\ndouble guess = number / 2.0; // Initial guess\n    double epsilon = 0.000000000000001; // Desired precision\n\n    while (abs(guess * guess - number) > epsilon) {\n        guess = (guess + number / guess) / 2.0;\n    }\n    return guess;", "entry_point": "babylonianSquareroot", "result": "timed out", "passed": false}
{"task_id": "MBCPP/247", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest palindromic subsequence in the given string.\n * > lps(string(\"TENS FOR TENS\"))\n * 5\n * > lps(string(\"CARDIO FOR CARDS\"))\n * 7\n * > lps(string(\"PART OF THE JOURNEY IS PART\"))\n * 9\n */\nint lps(string str) {\nint n = str.length();\n    vector<vectornt>> dp(n, vector<int>(n, 0));\n\n\n// Every single character is a palindrome of length 1\nfor (int i = 0; i < n; i++) {\n    dp[i][i] = 1;\n}\n\n// Fill the dp table for lengths from 2 to n\nfor (int len = 2; len <= n; len++) {\n    for (int i = 0; i < n - len + 1; i++) {\n        int j = i + len - 1;\n        if (str[i] == str[j]) {\n            dp[i][j] = 2 + dp[i + 1][j - 1];\n        } else {\n            dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n        }\n    }\n}\n\nreturn dp[0][n - 1];", "entry_point": "lps", "result": "Compilation failed: /tmp/tmpl1k8558p/temp.cpp: In function \u2018int lps(std::string)\u2019:\n/tmp/tmpl1k8558p/temp.cpp:17:12: error: \u2018vectornt\u2019 was not declared in this scope\n   17 |     vector<vectornt>> dp(n, vector<int>(n, 0));\n      |            ^~~~~~~~\n/tmp/tmpl1k8558p/temp.cpp:17:12: error: template argument 1 is invalid\n/tmp/tmpl1k8558p/temp.cpp:17:12: error: template argument 2 is invalid\n/tmp/tmpl1k8558p/temp.cpp:17:20: error: expected unqualified-id before \u2018>\u2019 token\n   17 |     vector<vectornt>> dp(n, vector<int>(n, 0));\n      |                    ^~\n/tmp/tmpl1k8558p/temp.cpp:22:5: error: \u2018dp\u2019 was not declared in this scope\n   22 |     dp[i][i] = 1;\n      |     ^~\n/tmp/tmpl1k8558p/temp.cpp:30:13: error: \u2018dp\u2019 was not declared in this scope\n   30 |             dp[i][j] = 2 + dp[i + 1][j - 1];\n      |             ^~\n/tmp/tmpl1k8558p/temp.cpp:32:13: error: \u2018dp\u2019 was not declared in this scope\n   32 |             dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n      |             ^~\n/tmp/tmpl1k8558p/temp.cpp:37:8: error: \u2018dp\u2019 was not declared in this scope\n   37 | return dp[0][n - 1];\n      |        ^~\n", "passed": false}
{"task_id": "MBCPP/248", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the harmonic sum of n-1.\n * > harmonicSum(7)\n * 2.5928571428571425\n * > harmonicSum(4)\n * 2.083333333333333\n * > harmonicSum(19)\n * 3.547739657143682\n */\ndouble harmonicSum(int n) {\ndouble sum = 0.0;\n    for (int i = 1; i <= n; ++i) {\n        sum += 1.0 / i;\n    }\n    return sum;", "entry_point": "harmonicSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/249", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the intersection of two arrays using lambda function.\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9})\n * {1, 2, 8, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9})\n * {3, 5, 7, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40})\n * {10}\n */\nvector<int> intersectionArray(vector<int> arrayNums1, vector<int> arrayNums2) {\nvector<int> result;\n// Sort both arrays to use std::set_intersection efficiently\nsort(arrayNums1.begin(), arrayNums1.end());\nsort(arrayNums2.begin(), arrayNums2.end());\n\n\n// Use std::set_intersection with a lambda for comparison (though default works for ints)\n// and a back_inserter to add elements to the result vector.\n// The lambda in set_intersection is typically for custom comparison, but here\n// we are just demonstrating its presence as requested.\nset_intersection(arrayNums1.begin(), arrayNums1.end(),\n                 arrayNums2.begin(), arrayNums2.end(),\n                 back_inserter(result),\n                 [](int a, int b) { return a < b; }); // Simple less-than comparison for sorted elements\n\nreturn result;", "entry_point": "intersectionArray", "result": "passed", "passed": true}
{"task_id": "MBCPP/250", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occcurences of an element in a tuple.\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4)\n * 0\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10)\n * 3\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8)\n * 4\n */\nint countX(vector<int> tup, int x) {\nint count = 0;\n    for (int i = 0; i < tup.size(); ++i) {\n        if (tup[i] == x) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countX", "result": "passed", "passed": true}
{"task_id": "MBCPP/251", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to insert an element before each element of a list.\n * > insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"))\n * {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}\n * > insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"))\n * {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}\n * > insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"))\n * {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}\n */\nvector<string> insertElement(vector<string> list, string element) {\nvector<string> result;\nfor (const string& s : list) {\nresult.push_back(element);\nresult.push_back(s);\n}\nreturn result;", "entry_point": "insertElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/252", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert complex numbers to polar coordinates.\n * > convert(1)\n * {1.0, 0.0}\n * > convert(4)\n * {4.0, 0.0}\n * > convert(5)\n * {5.0, 0.0}\n */\nvector<double> convert(int numbers) {\nreturn {static_cast<double>(numbers), 0.0};", "entry_point": "convert", "result": "passed", "passed": true}
{"task_id": "MBCPP/253", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count integers from a given list.\n * > countInteger(vector<int>{1, 2, 3})\n * 3\n */\nint countInteger(vector<int> list1) {\nreturn list1.size();", "entry_point": "countInteger", "result": "passed", "passed": true}
{"task_id": "MBCPP/254", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words starting with 'a' or 'e' in a given string.\n * > wordsAe(string(\"python programe\"))\n * {string(\"ame\")}\n * > wordsAe(string(\"python programe language\"))\n * {string(\"ame\"), string(\"anguage\")}\n * > wordsAe(string(\"assert statement\"))\n * {string(\"assert\"), string(\"atement\")}\n */\nvector<string> wordsAe(string text) {\nvector<string> result;\nstringstream ss(text);\nstring word;\n\n\nwhile (ss >> word) {\n    if (!word.empty()) {\n        char firstChar = tolower(word[0]);\n        if (firstChar == 'a' || firstChar == 'e') {\n            result.push_back(word);\n        }\n    }\n}\nreturn result;", "entry_point": "wordsAe", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/255", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 1)\n * {{string(\"Red\")}, {string(\"Green\")}, {string(\"Blue\")}}\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 2)\n * {{string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\")}}\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 3)\n * {{string(\"Red\"), string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Red\"), string(\"Blue\")}, {string(\"Red\"), string(\"Green\"), string(\"Green\")}, {string(\"Red\"), string(\"Green\"), string(\"Blue\")}, {string(\"Red\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Green\"), string(\"Blue\")}, {string(\"Green\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\"), string(\"Blue\")}}\n */\nvector<vector<string>> combinationsColors(vector<string> l, int n) {\nvector<vector<string>> result;\nvector<string> currentCombination;\n\n\nfunction<void(int, int)> generateCombinations = \n    [&](int start_index, int count) {\n    if (count == n) {\n        result.push_back(currentCombination);\n        return;\n    }\n\n    for (int i = start_index; i < l.size(); ++i) {\n        currentCombination.push_back(l[i]);\n        generateCombinations(i, count + 1); // Allow repetitions by starting from current index (i)\n        currentCombination.pop_back();\n    }\n};\n\ngenerateCombinations(0, 0);\nreturn result;", "entry_point": "combinationsColors", "result": "passed", "passed": true}
{"task_id": "MBCPP/256", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of prime numbers less than a given non-negative number.\n * > countPrimesNums(5)\n * 2\n * > countPrimesNums(10)\n * 4\n * > countPrimesNums(100)\n * 25\n */\nint countPrimesNums(int n) {\nif (n <= 2) {\n        return 0;\n    }\n\n    std::vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false;\n\n    for (int p = 2; p * p < n; ++p) {\n        if (is_prime[p]) {\n            for (int multiple = p * p; multiple < n; multiple += p)\n                is_prime[multiple] = false;\n        }\n    }\n\n    int count = 0;\n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countPrimesNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/257", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to swap two numbers.\n * > swapNumbers(10, 20)\n * {20, 10}\n * > swapNumbers(15, 17)\n * {17, 15}\n * > swapNumbers(100, 200)\n * {200, 100}\n */\nvector<int> swapNumbers(int a, int b) {\nvector<int> result;\nresult.push_back(b);\nresult.push_back(a);\nreturn result;", "entry_point": "swapNumbers", "result": "passed", "passed": true}
{"task_id": "MBCPP/258", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of odd elements in the given list using lambda function.\n * > countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10})\n * 4\n * > countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * 2\n * > countOdd(vector<int>{1, 2, 4, 8, 9})\n * 2\n */\nint countOdd(vector<int> arrayNums) {\nint count = 0;\n    for_each(arrayNums.begin(), arrayNums.end(), [&](int num){\n        if (num % 2 != 0) {\n            count++;\n        }\n    });\n    return count;", "entry_point": "countOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/259", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to maximize the given two tuples.\n * > maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 7}, {4, 9}, {2, 9}, {7, 10}}\n * > maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{7, 8}, {5, 10}, {3, 10}, {8, 11}}\n * > maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{8, 9}, {6, 11}, {4, 11}, {9, 12}}\n */\nvector<vector<int>> maximizeElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\nvector<vector<intnt>> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nvector<int> maximizedPair;\nmaximizedPair.push_back(max(testTup1[i][0], testTup2[i][0]));\nmaximizedPair.push_back(max(testTup1[i][1], testTup2[i][1]));\nresult.push_back(maximizedPair);\n}\nreturn result;", "entry_point": "maximizeElements", "result": "Compilation failed: /tmp/tmp7hobwupf/temp.cpp: In function \u2018std::vector<std::vector<int> > maximizeElements(std::vector<std::vector<int> >, std::vector<std::vector<int> >)\u2019:\n/tmp/tmp7hobwupf/temp.cpp:16:15: error: \u2018intnt\u2019 was not declared in this scope; did you mean \u2018wint_t\u2019?\n   16 | vector<vector<intnt>> result;\n      |               ^~~~~\n      |               wint_t\n/tmp/tmp7hobwupf/temp.cpp:16:15: error: template argument 1 is invalid\n/tmp/tmp7hobwupf/temp.cpp:16:15: error: template argument 2 is invalid\n/tmp/tmp7hobwupf/temp.cpp:16:20: error: template argument 1 is invalid\n   16 | vector<vector<intnt>> result;\n      |                    ^~\n/tmp/tmp7hobwupf/temp.cpp:16:20: error: template argument 2 is invalid\n/tmp/tmp7hobwupf/temp.cpp:21:8: error: request for member \u2018push_back\u2019 in \u2018result\u2019, which is of non-class type \u2018int\u2019\n   21 | result.push_back(maximizedPair);\n      |        ^~~~~~~~~\n/tmp/tmp7hobwupf/temp.cpp:23:8: error: could not convert \u2018result\u2019 from \u2018int\u2019 to \u2018std::vector<std::vector<int> >\u2019\n   23 | return result;\n      |        ^~~~~~\n      |        |\n      |        int\n", "passed": false}
{"task_id": "MBCPP/260", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n * > newmanPrime(3)\n * 7\n * > newmanPrime(4)\n * 17\n * > newmanPrime(5)\n * 41\n */\nint newmanPrime(int n) {\nint a = 1, b = 1;\n    if (n == 0 || n == 1)\n        return 1;\n    for (int i = 2; i <= n; ++i) {\n        int c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;", "entry_point": "newmanPrime", "result": "passed", "passed": true}
{"task_id": "MBCPP/261", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform mathematical division operation across the given tuples.\n * > divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {2, 2, 2, 3}\n * > divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4})\n * {2, 2, 2, 4}\n * > divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9})\n * {4, 2, 6, 2}\n */\nvector<int> divisionElements(vector<int> testTup1, vector<int> testTup2) {\nvector<int> resultTup;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nresultTup.push_back(testTup1[i] / testTup2[i]);\n}\nreturn resultTup;", "entry_point": "divisionElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/263", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries.\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}})\n * {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}})\n * {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}})\n * {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}\n */\nunordered_map<string, int> mergeDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\nd1.insert(d2.begin(), d2.end());\n    return d1;", "entry_point": "mergeDict", "result": "passed", "passed": true}
{"task_id": "MBCPP/264", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a dog's age in dog's years.\n * > dogAge(12)\n * 61\n * > dogAge(15)\n * 73\n * > dogAge(24)\n * 109\n */\nint dogAge(int hAge) {\nint dAge = 0;\n    if (hAge <= 2) {\n        dAge = hAge * 10;\n    } else {\n        dAge = 20 + (hAge - 2) * 4;\n    }\n    return dAge;", "entry_point": "dogAge", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/266", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cube.\n * > lateralsurfaceCube(5)\n * 100\n * > lateralsurfaceCube(9)\n * 324\n * > lateralsurfaceCube(10)\n * 400\n */\nint lateralsurfaceCube(int l) {\nreturn 4 * l * l;", "entry_point": "lateralsurfaceCube", "result": "passed", "passed": true}
{"task_id": "MBCPP/267", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n odd natural numbers.\n * > squareSum(2)\n * 10\n * > squareSum(3)\n * 35\n * > squareSum(4)\n * 84\n */\nint squareSum(int n) {\nint sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += (2 * i - 1) * (2 * i - 1);\n    }\n    return sum;", "entry_point": "squareSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/268", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th star number.\n * > findStarNum(3)\n * 37\n * > findStarNum(4)\n * 73\n * > findStarNum(5)\n * 121\n */\nint findStarNum(int n) {\nreturn (6 * n * (n - 1) + 1);", "entry_point": "findStarNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/269", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of a character.\n * > asciiValue(string(\"A\"))\n * 65\n * > asciiValue(string(\"R\"))\n * 82\n * > asciiValue(string(\"S\"))\n * 83\n */\nint asciiValue(string k) {\nreturn (int)k[0];", "entry_point": "asciiValue", "result": "passed", "passed": true}
{"task_id": "MBCPP/270", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even numbers at even positions.\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6)\n * 30\n * > sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10)\n * 26\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4)\n * 12\n */\nint sumEvenAndEvenIndex(vector<int> arr, int n) {\nint sum = 0;\n    for (int i = 0; i < n; i += 2) { // Iterate through even positions\n        if (arr[i] % 2 == 0) { // Check if the number at the even position is even\n            sum += arr[i];\n        }\n    }\n    return sum;", "entry_point": "sumEvenAndEvenIndex", "result": "passed", "passed": true}
{"task_id": "MBCPP/271", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n even natural numbers.\n * > evenPowerSum(2)\n * 1056\n * > evenPowerSum(3)\n * 8832\n * > evenPowerSum(1)\n * 32\n */\nint evenPowerSum(int n) {\nlong long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(2 * i, 5);\n    }\n    return sum;", "entry_point": "evenPowerSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/273", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n * > substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18})\n * {8, -1, -13}\n * > substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16})\n * {-13, -43, -13}\n * > substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12})\n * {-3, 7, -3}\n */\nvector<int> substractElements(vector<int> testTup1, vector<int> testTup2) {\nvector<int> resultTup;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nresultTup.push_back(testTup1[i] - testTup2[i]);\n}\nreturn resultTup;", "entry_point": "substractElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/274", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of even index binomial coefficients.\n * > evenBinomialCoeffSum(4)\n * 8\n * > evenBinomialCoeffSum(6)\n * 32\n * > evenBinomialCoeffSum(2)\n * 2\n */\nint evenBinomialCoeffSum(int n) {\nreturn 1 << (n - 1);", "entry_point": "evenBinomialCoeffSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/275", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the position of the last removed element from the given array.\n * > getPosition(vector<int>{2, 5, 4}, 3, 2)\n * 2\n * > getPosition(vector<int>{4, 3}, 2, 2)\n * 2\n * > getPosition(vector<int>{1, 2, 3, 4}, 4, 1)\n * 4\n */\nint getPosition(vector<int> a, int n, int m) {\nint max_val = 0;\n    int ans_idx = -1;\n\n    // The element that gets removed last is the one that can be\n    // subtracted by 'm' the maximum number of times. This is equivalent\n    // to finding the element with the maximum ceil(a[i] / m).\n    // If multiple elements have the same maximum ceil value, the one\n    // with the largest original index (last in the array) is removed last.\n    for (int i = n - 1; i >= 0; --i) {\n        // Calculate ceil(a[i] / m)\n        int current_ceil = (a[i] + m - 1) / m; \n        \n        if (current_ceil > max_val) {\n            max_val = current_ceil;\n            ans_idx = i;\n        }\n    }\n    return ans_idx + 1; // Return 1-based inde", "entry_point": "getPosition", "result": "passed", "passed": true}
{"task_id": "MBCPP/276", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cylinder.\n * > volumeCylinder(10, 5)\n * 1570.7500000000002\n * > volumeCylinder(4, 5)\n * 251.32000000000002\n * > volumeCylinder(4, 10)\n * 502.64000000000004\n */\ndouble volumeCylinder(int r, int h) {\nconst double PI = std::acos(-1.0);\n    return PI * r * r * h;", "entry_point": "volumeCylinder", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/277", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter a dictionary based on values.\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170)\n * {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180)\n * {{string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 190)\n * {{string(\"Pierre Cox\"), 190}}\n */\nunordered_map<string, int> dictFilter(unordered_map<string, int> dict, int n) {\nunordered_map<string, int> result;\n    for (auto const& [key, val] : dict) {\n        if (val >= n) {\n            result[key] = val;\n        }\n    }\n    return result;", "entry_point": "dictFilter", "result": "passed", "passed": true}
{"task_id": "MBCPP/279", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth decagonal number.\n * > isNumDecagonal(3)\n * 27\n * > isNumDecagonal(7)\n * 175\n * > isNumDecagonal(10)\n * 370\n */\nint isNumDecagonal(int n) {\nreturn (4 * n * n - 3 * n);", "entry_point": "isNumDecagonal", "result": "passed", "passed": true}
{"task_id": "MBCPP/281", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the elements of a given list are unique or not.\n * > allUnique(vector<int>{1, 2, 3})\n * true\n * > allUnique(vector<int>{1, 2, 1, 2})\n * false\n * > allUnique(vector<int>{1, 2, 3, 4, 5})\n * true\n */\nbool allUnique(vector<int> testList) {\nsort(testList.begin(), testList.end());\n    for (int i = 0; i < testList.size() - 1; i++) {\n        if (testList[i] == testList[i+1]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "allUnique", "result": "passed", "passed": true}
{"task_id": "MBCPP/282", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substaract two lists using map and lambda function.\n * > subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {-3, -3, -3}\n * > subList(vector<int>{1, 2}, vector<int>{3, 4})\n * {-2, -2}\n * > subList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> subList(vector<int> nums1, vector<int> nums2) {\nvector<int> result;\nresult.reserve(nums1.size()); // Pre-allocate memory for efficiency\n\n\ntransform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result),\n          [](int a, int b) { return a - b; });\n\nreturn result;", "entry_point": "subList", "result": "passed", "passed": true}
{"task_id": "MBCPP/283", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.\n * > validate(1234)\n * true\n * > validate(51241)\n * false\n * > validate(321)\n * true\n */\nbool validate(int n) {\nstring s = to_string(n);\n    vectornt> freq(10, 0);\nfor (char c : s) {\nfreq[c - '0']++;\n}\nfor (int i = 0; i < 10; i++) {\nif (freq[i] > 0 && freq[i] > i) {\nreturn false;\n}\n}\nreturn true;", "entry_point": "validate", "result": "Compilation failed: /tmp/tmpqufa5vsr/temp.cpp: In function \u2018bool validate(int)\u2019:\n/tmp/tmpqufa5vsr/temp.cpp:17:5: error: \u2018vectornt\u2019 was not declared in this scope\n   17 |     vectornt> freq(10, 0);\n      |     ^~~~~~~~\n/tmp/tmpqufa5vsr/temp.cpp:17:15: error: \u2018freq\u2019 was not declared in this scope; did you mean \u2018free\u2019?\n   17 |     vectornt> freq(10, 0);\n      |               ^~~~\n      |               free\n", "passed": false}
{"task_id": "MBCPP/285", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by two to three 'b'.\n * > textMatchTwoThree(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchTwoThree(string text) {\nregex r(\"ab{2,3}\");\n    if (regex_search(text, r)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatchTwoThree", "result": "Compilation failed: /tmp/tmpv34pe0s5/temp.cpp: In function \u2018std::string textMatchTwoThree(std::string)\u2019:\n/tmp/tmpv34pe0s5/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpv34pe0s5/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpv34pe0s5/temp.cpp:15:39: note: to match this \u2018{\u2019\n   15 | string textMatchTwoThree(string text) {\n      |                                       ^\n", "passed": false}
{"task_id": "MBCPP/286", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n * > maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3)\n * 30\n * > maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2)\n * 59\n * > maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3)\n * -1\n */\nint maxSubArraySumRepeated(vector<int> a, int n, int k) {\nlong long kadane(vector<int>& arr) {\nlong long max_so_far = LLONG_MIN;\nlong long current_max = 0;\nbool all_negative = true;\nint max_val = INT_MIN;\n\n\nfor (int x : arr) {\n    current_max += x;\n    if (current_max > max_so_far) {\n        max_so_far = current_max;\n    }\n    if (current_max < 0) {\n        current_max = 0;\n    }\n    if (x >= 0) {\n        all_negative = false;\n    }\n    max_val = max(max_val, x);\n}\n\n// Handle case where all elements are negative\nif (all_negative) {\n    return max_val;\n}\nreturn max_so_far;\n\n\n}\n\nlong long sum_array(vector<int>& arr) {\nlong long total_sum = 0;\nfor (int x : arr) {\ntotal_sum += x;\n}\nreturn total_sum;\n}\n\n\nif (k == 1) {\n    return kadane(a);\n}\n\nlong long max_single_array_sum = kadane(a);\nlong long total_array_sum = sum_array(a);\n\n// Consider the case where the max subarray spans across the full array multiple times\n// This happens if the total_array_sum is positive\nif (total_array_sum > 0) {\n    // The max sum can be formed by the maximum subarray in one full repetition of the array\n    // plus (k-1) times the total sum of the array.\n    // Or, more accurately, max subarray can span through the middle full copies,\n    // so it could be max_suffix_sum + (k-2)*total_sum + max_prefix_sum.\n    // However, a simpler approach is to find the Kadane's sum for a doubled array.\n    // If the sum is positive, the best sum will be max of what Kadane gives for a doubled array\n    // and (k-2) * total_array_sum + max_prefix_sum + max_suffix_sum.\n    // But the simplest is to apply Kadane on a twice-repeated array and add the remaining (k-2) sums.\n    \n    vector<int> doubled_a;\n    doubled_a.insert(doubled_a.end(), a.begin(), a.end());\n    doubled_a.insert(doubled_a.end(), a.begin(), a.end());\n    \n    long long max_two_array_sum = kadane(doubled_a);\n\n    return max(max_single_array_sum, max_two_array_sum + (k - 2) * total_array_sum);\n\n} else {\n    // If the total_array_sum is non-positive, including full repetitions\n    // of the array will only decrease or not change the sum.\n    // So, the maximum subarray must be within the first two concatenations.\n    // Effectively, it's just the Kadane's sum on a doubled array.\n    vector<int> doubled_a;\n    doubled_a.insert(doubled_a.end(), a.begin(), a.end());\n    doubled_a.insert(doubled_a.end(), a.begin(), a.end());\n    return kadane(doubled_a);\n}", "entry_point": "maxSubArraySumRepeated", "result": "Compilation failed: /tmp/tmpggnim6uk/temp.cpp: In function \u2018int maxSubArraySumRepeated(std::vector<int>, int, int)\u2019:\n/tmp/tmpggnim6uk/temp.cpp:16:36: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long kadane(vector<int>& arr) {\n      |                                    ^\n/tmp/tmpggnim6uk/temp.cpp:46:39: error: a function-definition is not allowed here before \u2018{\u2019 token\n   46 | long long sum_array(vector<int>& arr) {\n      |                                       ^\n/tmp/tmpggnim6uk/temp.cpp:56:12: error: \u2018kadane\u2019 was not declared in this scope\n   56 |     return kadane(a);\n      |            ^~~~~~\n/tmp/tmpggnim6uk/temp.cpp:59:34: error: \u2018kadane\u2019 was not declared in this scope\n   59 | long long max_single_array_sum = kadane(a);\n      |                                  ^~~~~~\n/tmp/tmpggnim6uk/temp.cpp:60:29: error: \u2018sum_array\u2019 was not declared in this scope\n   60 | long long total_array_sum = sum_array(a);\n      |                             ^~~~~~~~~\n/tmp/tmpggnim6uk/temp.cpp:93:1: error: a template declaration cannot appear at block scope\n   93 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpggnim6uk/temp.cpp:114:1: error: expected \u2018}\u2019 at end of input\n  114 | }\n      | ^\n/tmp/tmpggnim6uk/temp.cpp:15:57: note: to match this \u2018{\u2019\n   15 | int maxSubArraySumRepeated(vector<int> a, int n, int k) {\n      |                                                         ^\n", "passed": false}
{"task_id": "MBCPP/287", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n even natural numbers.\n * > squareSum(2)\n * 20\n * > squareSum(3)\n * 56\n * > squareSum(4)\n * 120\n */\nint squareSum(int n) {\nreturn 2 * n * (n + 1) * (2 * n + 1) / 3;", "entry_point": "squareSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/288", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n * > modularInverse(vector<int>{1, 6, 4, 5}, 4, 7)\n * 2\n * > modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13)\n * 3\n * > modularInverse(vector<int>{2, 3, 4, 5}, 4, 6)\n * 1\n */\nint modularInverse(vector<int> arr, int n, int p) {\nint count = 0;\n    for (int i = 0; i < n; i++) {\n        if ((1LL * arr[i] * arr[i]) % p == 1) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "modularInverse", "result": "passed", "passed": true}
{"task_id": "MBCPP/289", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the number of odd days in a given year.\n * > oddDays(100)\n * 5\n * > oddDays(50)\n * 6\n * > oddDays(75)\n * 2\n */\nint oddDays(int n) {\nint num_leap_years = n / 4 - n / 100 + n / 400;\n    int num_ordinary_years = n - num_leap_years;\n    return (num_ordinary_years * 1 + num_leap_years * 2) % 7;", "entry_point": "oddDays", "result": "passed", "passed": true}
{"task_id": "MBCPP/291", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n * > countNoOfWays(2, 4)\n * 16\n * > countNoOfWays(3, 2)\n * 6\n * > countNoOfWays(4, 4)\n * 228\n */\nint countNoOfWays(int n, int k) {\nif (n == 0) return 0;\n    if (n == 1) return k;\n\n    long long same = k; // Ways to paint the current post the same color as the previous.\n    long long diff = k * (k - 1); // Ways to paint the current post a different color than the previous.\n\n    for (int i = 3; i <= n; ++i) {\n        long long prev_same = same;\n        same = diff; // If current and previous are same, then previous two must be different.\n        diff = (prev_same + diff) * (k - 1); // If current and previous are different, the previous can be either same or different from its predecessor.\n    }\n\n    return same + diff;", "entry_point": "countNoOfWays", "result": "passed", "passed": true}
{"task_id": "MBCPP/292", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find quotient of two numbers.\n * > find(10, 3)\n * 3\n * > find(4, 2)\n * 2\n * > find(20, 5)\n * 4\n */\nint find(int n, int m) {\nreturn n / m;", "entry_point": "find", "result": "passed", "passed": true}
{"task_id": "MBCPP/295", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return the sum of all divisors of a number.\n * > sumDiv(8)\n * 7\n * > sumDiv(12)\n * 16\n * > sumDiv(7)\n * 1\n */\nint sumDiv(int number) {\nint sum = 0;\n    for (int i = 1; i < number; i++) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;", "entry_point": "sumDiv", "result": "passed", "passed": true}
{"task_id": "MBCPP/296", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count inversions in an array.\n * > getInvCount(vector<int>{1, 20, 6, 4, 5}, 5)\n * 5\n * > getInvCount(vector<int>{1, 2, 1}, 3)\n * 1\n * > getInvCount(vector<int>{1, 2, 5, 6, 1}, 5)\n * 3\n */\nint getInvCount(vector<int> arr, int n) {\nint inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;", "entry_point": "getInvCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/297", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten a given nested list structure.\n * > flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}})\n * {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}\n * > flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}\n */\nvector<int> flattenList(vector<vector<int>> list1) {\nvector<int> flattenedList;\nfor (const auto& innerList : list1) {\nfor (int element : innerList) {\nflattenedList.push_back(element);\n}\n}\nreturn flattenedList;", "entry_point": "flattenList", "result": "passed", "passed": true}
{"task_id": "MBCPP/300", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n * > countBinarySeq(1)\n * 2.0\n * > countBinarySeq(2)\n * 6.0\n * > countBinarySeq(3)\n * 20.0\n */\ndouble countBinarySeq(int n) {\ndouble ans = 0;\n    double nCk = 1; // Represents C(n, k)\n    for (int k = 0; k <= n; ++k) {\n        // C(n, k) * C(n, k)\n        ans += nCk * nCk;\n\n        // Calculate C(n, k+1) from C(n, k)\n        // C(n, k+1) = C(n, k) * (n - k) / (k + 1)\n        if (k < n) {\n            nCk = nCk * (n - k) / (k + 1);\n        }\n    }\n    return ans;", "entry_point": "countBinarySeq", "result": "passed", "passed": true}
{"task_id": "MBCPP/302", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the most significant bit number which is also a set bit.\n * > setBitNumber(6)\n * 4\n * > setBitNumber(10)\n * 8\n * > setBitNumber(18)\n * 16\n */\nint setBitNumber(int n) {\nif (n == 0)\n        return 0;\n    int k = (int)log2(n);\n    return 1 << k;", "entry_point": "setBitNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/303", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of inversion of two types are same or not.\n * > solve(vector<int>{1, 0, 2}, 3)\n * true\n * > solve(vector<int>{1, 2, 0}, 3)\n * false\n * > solve(vector<int>{1, 2, 1}, 3)\n * true\n */\nbool solve(vector<int> a, int n) {\nint type1_inversions = 0;\n    int type2_inversions = 0;\n\n    // Calculate Type 1 inversions: (i, j) such that i < j and a[i] > a[j]\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            if (a[i] > a[j]) {\n                type1_inversions++;\n            }\n        }\n    }\n\n    // Calculate Type 2 inversions: (i, j) such that j = i + 1 and a[i] > a[j]\n    // This implies checking adjacent elements\n    for (int i = 0; i < n - 1; ++i) {\n        if (a[i] > a[i+1]) {\n            type2_inversions++;\n        }\n    }\n    \n    return type1_inversions == type2_inversions;", "entry_point": "solve", "result": "passed", "passed": true}
{"task_id": "MBCPP/304", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find element at a given index after number of rotations.\n * > findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1)\n * 1\n */\nint findElement(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {\nint n = arr.size();\n    for (int i = rotations - 1; i >= 0; i--) {\n        int left = ranges[i][0];\n        int right = ranges[i][1];\n\n        if (index >= left && index <= right) {\n            if (index == left) {\n                index = right;\n            } else {\n                index--;\n            }\n        }\n    }\n    return arr[index];", "entry_point": "findElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/305", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to match two words from a list of words starting with letter 'p'.\n * > startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")})\n * {string(\"Python\"), string(\"PHP\")}\n * > startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")})\n * {string(\"Python\"), string(\"Programming\")}\n * > startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")})\n * {string(\"Pqrst\"), string(\"Pqr\")}\n */\nvector<string> startWithp(vector<string> words) {\nvector<string> result;\nfor (string wordPair : words) {\nstringstream ss(wordPair);\nstring word;\nwhile (ss >> word) {\nif (!word.empty() && (word[0] == 'p' || word[0] == 'P')) {\nresult.push_back(word);\n}\n}\n}\nreturn result;", "entry_point": "startWithp", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/306", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n * > maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6)\n * 11\n * > maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5)\n * 7\n * > maxSumIncreasingSubseq(vector<int>{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4)\n * 71\n */\nint maxSumIncreasingSubseq(vector<int> a, int n, int index, int k) {\nint dp[n];\n    for (int i = 0; i < n; i++) {\n        dp[i] = a[i];\n    }\n\n    // Calculate maximum sum increasing subsequence ending at each index\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (a[i] > a[j]) {\n                dp[i] = max(dp[i], dp[j] + a[i]);\n            }\n        }\n    }\n\n    // Now, we need to consider the given index 'index' and 'k'\n    // The subsequence must be increasing, include a[k], and have elements from a[0] to a[index] before a[k].\n    // So, we need to find the maximum sum increasing subsequence ending at some j <= index,\n    // where a[j] < a[k], and then add a[k] to it.\n\n    int maxSum = a[k]; // Initialize with a[k] as it must be included\n\n    for (int i = 0; i <= index; i++) {\n        if (a[i] < a[k]) {\n            maxSum = max(maxSum, dp[i] + a[k]);\n        }\n    }\n\n    return maxSum;", "entry_point": "maxSumIncreasingSubseq", "result": "passed", "passed": true}
{"task_id": "MBCPP/308", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the specified number of largest products from two given lists.\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3)\n * {60, 54, 50}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4)\n * {60, 54, 50, 48}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5)\n * {60, 54, 50, 48, 45}\n */\nvector<int> largeProduct(vector<int> nums1, vector<int> nums2, int n) {\nvector<int> products;\nfor (int num1 : nums1) {\nfor (int num2 : nums2) {\nproducts.push_back(num1 * num2);\n}\n}\nsort(products.rbegin(), products.rend());\nvector<int> result;\nfor (int i = 0; i < n && i < products.size(); ++i) {\nresult.push_back(products[i]);\n}\nreturn result;", "entry_point": "largeProduct", "result": "passed", "passed": true}
{"task_id": "MBCPP/309", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum of two numbers.\n * > maximum(5, 10)\n * 10\n * > maximum(-1, -2)\n * -1\n * > maximum(9, 7)\n * 9\n */\nint maximum(int a, int b) {\nreturn (a > b) ? a : b;", "entry_point": "maximum", "result": "passed", "passed": true}
{"task_id": "MBCPP/310", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given string to a tuple.\n * > stringToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringToTuple(string(\"item1\"))\n * {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}\n * > stringToTuple(string(\"15.10\"))\n * {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}\n */\nvector<string> stringToTuple(string str1) {\nvector<string> result;\nfor (char c : str1) {\nresult.push_back(string(1, c));\n}\nreturn result;", "entry_point": "stringToTuple", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/311", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the left most unset bit.\n * > setLeftMostUnsetBit(10)\n * 14\n * > setLeftMostUnsetBit(12)\n * 14\n * > setLeftMostUnsetBit(15)\n * 15\n */\nint setLeftMostUnsetBit(int n) {\nif ((n & (n + 1)) == 0) { // All bits are set\n        return n;\n    }\n    return n | (n + 1);", "entry_point": "setLeftMostUnsetBit", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/312", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cone.\n * > volumeCone(5, 12)\n * 314.15926535897927\n * > volumeCone(10, 15)\n * 1570.7963267948965\n * > volumeCone(19, 17)\n * 6426.651371693521\n */\ndouble volumeCone(int r, int h) {\nreturn (1.0/3.0) * M_PI * r * r * h;", "entry_point": "volumeCone", "result": "passed", "passed": true}
{"task_id": "MBCPP/314", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3)\n * 7\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5)\n * 24\n * > maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5)\n * 81\n */\nint maxSumRectangularGrid(vector<vector<int>> grid, int n) {\nif (n == 0) {\n        return 0;\n    }\n\n    int incl = max(grid[0][0], grid[1][0]);\n    int excl = 0;\n\n    for (int i = 1; i < n; ++i) {\n        int excl_new = max(incl, excl);\n        incl = excl + max(grid[0][i], grid[1][i]);\n        excl = excl_new;\n    }\n\n    return max(incl, excl);", "entry_point": "maxSumRectangularGrid", "result": "passed", "passed": true}
{"task_id": "MBCPP/315", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first maximum length of even word.\n * > findMaxLenEven(string(\"python language\"))\n * string(\"language\")\n * > findMaxLenEven(string(\"maximum even length\"))\n * string(\"length\")\n * > findMaxLenEven(string(\"eve\"))\n * string(\"-1\")\n */\nstring findMaxLenEven(string str) {\nstring maxLenEvenWord = \"-1\";\n    stringstream ss(str);\n    string word;\n\n    while (ss >> word) {\n        if (word.length() % 2 == 0) {\n            if (maxLenEvenWord == \"-1\" || word.length() > maxLenEvenWord.length()) {\n                maxLenEvenWord = word;\n            }\n        }\n    }\n    return maxLenEvenWord;", "entry_point": "findMaxLenEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/316", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the last occurrence of a given number in a sorted array.\n * > findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 3\n * > findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9)\n * 9\n * > findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6)\n * 6\n */\nint findLastOccurrence(vector<int> a, int x) {\nint n = a.size();\n    int low = 0, high = n - 1;\n    int result = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            low = mid + 1; // Look in the right half for further occurrences\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;", "entry_point": "findLastOccurrence", "result": "passed", "passed": true}
{"task_id": "MBCPP/318", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum volume of a cuboid with given sum of sides.\n * > maxVolume(8)\n * 18\n * > maxVolume(4)\n * 2\n * > maxVolume(1)\n * 0\n */\nint maxVolume(int s) {\nint length = s / 3;\n    int breadth = (s - length) / 2;\n    int height = s - length - breadth;\n    return length * breadth * height;", "entry_point": "maxVolume", "result": "passed", "passed": true}
{"task_id": "MBCPP/319", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n * > findLongWord(string(\"Please move back to strem\"))\n * {string(\"strem\")}\n * > findLongWord(string(\"4K Ultra HD streaming player\"))\n * {string(\"Ultra\")}\n * > findLongWord(string(\"Streaming Media Player\"))\n * {string(\"Media\")}\n */\nvector<string> findLongWord(string text) {\nvector<string> result;\n// Regex to find words that are exactly 5 characters long.\n// b matches a word boundary.\n// w{5} matches any word character (alphanumeric + underscore) exactly 5 times.\nregex five_char_word_regex(\"bw{5}b\");\n\n\n// Create an iterator to go through all matches\nsregex_iterator currentMatch(text.begin(), text.end(), five_char_word_regex);\nsregex_iterator lastMatch; // Default constructor is the end-of-sequence iterator\n\nwhile (currentMatch != lastMatch) {\n    smatch match = *currentMatch;\n    result.push_back(match.str());\n    currentMatch++;\n}\nreturn result;", "entry_point": "findLongWord", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/320", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n * > sumDifference(12)\n * 5434\n * > sumDifference(20)\n * 41230\n * > sumDifference(54)\n * 2151270\n */\nint sumDifference(int n) {\nlong long sum_of_n = (long long)n * (n + 1) / 2;\n    long long squared_sum = sum_of_n * sum_of_n;\n\n    long long sum_of_squares = (long long)n * (n + 1) * (2 * n + 1) / 6;\n\n    return squared_sum - sum_of_squares;", "entry_point": "sumDifference", "result": "passed", "passed": true}
{"task_id": "MBCPP/321", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the demlo number for the given number.\n * > findDemlo(string(\"111111\"))\n * string(\"12345654321\")\n * > findDemlo(string(\"1111\"))\n * string(\"1234321\")\n * > findDemlo(string(\"13333122222\"))\n * string(\"123456789101110987654321\")\n */\nstring findDemlo(string s) {\nint n = s.length();\n    string res = \"\";\n    for (int i = 1; i <= n; ++i) {\n        res += to_string(i);\n    }\n    for (int i = n - 1; i >= 1; --i) {\n        res += to_string(i);\n    }\n    return res;", "entry_point": "findDemlo", "result": "passed", "passed": true}
{"task_id": "MBCPP/322", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the minimum values in a given list.\n * > positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {3, 11}\n * > positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {0}\n * > positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {1}\n */\nvector<int> positionMin(vector<int> list1) {\nvector<int> result;\nif (list1.empty()) {\nreturn result;\n}\n\n\nint min_val = list1[0];\nfor (size_t i = 1; i < list1.size(); ++i) {\n    if (list1[i] < min_val) {\n        min_val = list1[i];\n    }\n}\n\nfor (size_t i = 0; i < list1.size(); ++i) {\n    if (list1[i] == min_val) {\n        result.push_back(i);\n    }\n}\n\nreturn result;", "entry_point": "positionMin", "result": "passed", "passed": true}
{"task_id": "MBCPP/323", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given array in alternating positive and negative items.\n * > reArrange(vector<int>{-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}, 10)\n * {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}\n * > reArrange(vector<int>{1, 2, 3, -4, -1, 4}, 6)\n * {-4, 1, -1, 2, 3, 4}\n * > reArrange(vector<int>{4, 7, 9, 77, -4, 5, -3, -9}, 8)\n * {-4, 4, -3, 7, -9, 9, 77, 5}\n */\nvector<int> reArrange(vector<int> arr, int n) {\nvector<int> pos, neg;\nfor (int x : arr) {\nif (x >= 0) {\npos.push_back(x);\n} else {\nneg.push_back(x);\n}\n}\n\n\nint i = 0, j = 0, k = 0;\nwhile (i < pos.size() && j < neg.size()) {\n    arr[k++] = neg[j++];\n    arr[k++] = pos[i++];\n}\n\nwhile (i < pos.size()) {\n    arr[k++] = pos[i++];\n}\n\nwhile (j < neg.size()) {\n    arr[k++] = neg[j++];\n}\nreturn arr;", "entry_point": "reArrange", "result": "passed", "passed": true}
{"task_id": "MBCPP/324", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the sum of alternate chains of tuples.\n * > sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34})\n * {46, 18}\n * > sumOfAlternates(vector<int>{1, 2, 3, 4, 5})\n * {6, 9}\n * > sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5})\n * {21, 18}\n */\nvector<int> sumOfAlternates(vector<int> testTuple) {\nint sum1 = 0;\n    int sum2 = 0;\n    for (int i = 0; i < testTuple.size(); ++i) {\n        if (i % 2 == 0) {\n            sum1 += testTuple[i];\n        } else {\n            sum2 += testTuple[i];\n        }\n    }\n    return {sum1, sum2};", "entry_point": "sumOfAlternates", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/325", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of squares whose sum is equal to a given number.\n * > getMinSquares(6)\n * 3\n * > getMinSquares(2)\n * 2\n * > getMinSquares(4)\n * 1\n */\nint getMinSquares(int n) {\n// Create a DP table to store the minimum number of squares for each number up to n\n    vectort> dp(n + 1);\n\n\n// Base cases\ndp[0] = 0; // 0 needs 0 squares\ndp[1] = 1; // 1 needs 1 square (1*1)\n\n// Fill the DP table\nfor (int i = 2; i <= n; ++i) {\n    // In the worst case, i can be represented as sum of i ones (1*1 + 1*1 + ... i times)\n    dp[i] = i; \n\n    // Try subtracting all perfect squares less than or equal to i\n    for (int j = 1; j * j <= i; ++j) {\n        // Update dp[i] with the minimum of its current value\n        // and 1 (for the current square j*j) + dp[i - j*j]\n        dp[i] = min(dp[i], 1 + dp[i - j * j]);\n    }\n}\n\nreturn dp[n];", "entry_point": "getMinSquares", "result": "Compilation failed: /tmp/tmpxzokq72r/temp.cpp: In function \u2018int getMinSquares(int)\u2019:\n/tmp/tmpxzokq72r/temp.cpp:17:5: error: \u2018vectort\u2019 was not declared in this scope\n   17 |     vectort> dp(n + 1);\n      |     ^~~~~~~\n/tmp/tmpxzokq72r/temp.cpp:17:14: error: \u2018dp\u2019 was not declared in this scope\n   17 |     vectort> dp(n + 1);\n      |              ^~\n", "passed": false}
{"task_id": "MBCPP/326", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the word with most number of occurrences in the given strings list.\n * > mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")})\n * string(\"UTS\")\n * > mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")})\n * string(\"year\")\n * > mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")})\n * string(\"can\")\n */\nstring mostOccurrences(vector<string> testList) {\nmap<string, int> wordCounts;\n    for (const string& sentence : testList) {\n        stringstream ss(sentence);\n        string word;\n        while (ss >> word) {\n            // Convert word to lowercase to handle case-insensitivity\n            transform(word.begin(), word.end(), word.begin(), ::tolower);\n            wordCounts[word]++;\n        }\n    }\n\n    string mostFrequentWord = \"\";\n    int maxCount = 0;\n\n    for (const auto& pair : wordCounts) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            mostFrequentWord = pair.first;\n        }\n    }\n\n    return mostFrequentWord;", "entry_point": "mostOccurrences", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/327", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is isosceles or not.\n * > checkIsosceles(6, 8, 12)\n * false\n * > checkIsosceles(6, 6, 12)\n * true\n * > checkIsosceles(6, 16, 20)\n * false\n */\nbool checkIsosceles(int x, int y, int z) {\nif (x == y || y == z || x == z)\n        return true;\n    else\n        return false;", "entry_point": "checkIsosceles", "result": "passed", "passed": true}
{"task_id": "MBCPP/328", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the left direction.\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4)\n * {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2)\n * {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2)\n * {6, 7, 8, 9, 10, 1, 2}\n */\nvector<int> rotateLeft(vector<int> list1, int m, int n) {\nvector<int> result;\nint size = list1.size();\n\n\n// Calculate the actual number of rotations needed, handling cases where m is larger than the list size\nint rotations_m = m % size;\n\n// Calculate the actual starting index for the output, considering both m and n\n// The rotation is to the left, so we effectively remove 'rotations_m' elements from the beginning\n// and then take 'n' elements from the modified list.\n// The starting point for the slice is 'rotations_m'.\n// The number of elements to take is 'n'.\n// We need to handle wrapping around for the elements.\n\nfor (int i = 0; i < n; ++i) {\n    result.push_back(list1[(rotations_m + i) % size]);\n}\n\nreturn result;", "entry_point": "rotateLeft", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/329", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count negative numbers in a list.\n * > negCount(vector<int>{-1, -2, 3, -4, -5})\n * 4\n * > negCount(vector<int>{1, 2, 3})\n * 0\n * > negCount(vector<int>{1, 2, -3, -10, 20})\n * 2\n */\nint negCount(vector<int> list) {\nint count = 0;\n    for (int num : list) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "negCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/330", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all three, four, five characters long words in the given string by using regex.\n * > findChar(string(\"For the four consumer complaints contact manager AKR reddy\"))\n * {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}\n * > findChar(string(\"Certain service are subject to change MSR\"))\n * {string(\"are\"), string(\"MSR\")}\n * > findChar(string(\"Third party legal desclaimers\"))\n * {string(\"Third\"), string(\"party\"), string(\"legal\")}\n */\nvector<string> findChar(string text) {\nvector<string> result;\n// Regex to find words that are 3, 4, or 5 characters long.\n// b represents a word boundary.\n// w{3,5} matches any word character (alphanumeric + underscore) 3 to 5 times.\nregex pattern(\"bw{3,5}b\");\n\n\nsregex_iterator currentMatch(text.begin(), text.end(), pattern);\nsregex_iterator lastMatch;\n\nwhile (currentMatch != lastMatch) {\n    smatch match = *currentMatch;\n    result.push_back(match.str());\n    currentMatch++;\n}\nreturn result;", "entry_point": "findChar", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/331", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unset bits of a given number.\n * > countUnsetBits(2)\n * 1\n * > countUnsetBits(4)\n * 2\n * > countUnsetBits(6)\n * 1\n */\nint countUnsetBits(int n) {\nint count = 0;\n    while (n > 0) {\n        if ((n & 1) == 0) {\n            count++;\n        }\n        n >>= 1;\n    }\n    return count;", "entry_point": "countUnsetBits", "result": "passed", "passed": true}
{"task_id": "MBCPP/332", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count character frequency of a given string.\n * > charFrequency(string(\"python\"))\n * {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}\n * > charFrequency(string(\"program\"))\n * {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}\n * > charFrequency(string(\"language\"))\n * {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}\n */\nunordered_map<string, int> charFrequency(string str1) {\nunordered_map<string, int> freqMap;\n    for (char c : str1) {\n        string s(1, c); // Convert char to string\n        freqMap[s]++;\n    }\n    return freqMap;", "entry_point": "charFrequency", "result": "passed", "passed": true}
{"task_id": "MBCPP/334", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if sides are given.\n * > checkValidity(1, 2, 3)\n * false\n * > checkValidity(2, 3, 5)\n * false\n * > checkValidity(7, 10, 5)\n * true\n */\nbool checkValidity(int a, int b, int c) {\nif (a + b <= c || a + c <= b || b + c <= a)\n        return false;\n    else\n        return true;", "entry_point": "checkValidity", "result": "passed", "passed": true}
{"task_id": "MBCPP/335", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of arithmetic progression.\n * > apSum(1, 5, 2)\n * 25\n * > apSum(2, 6, 4)\n * 72\n * > apSum(1, 4, 5)\n * 34\n */\nint apSum(int a, int n, int d) {\nreturn n * (2 * a + (n - 1) * d) / 2;", "entry_point": "apSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/336", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n * > checkMonthnum(string(\"February\"))\n * true\n * > checkMonthnum(string(\"January\"))\n * false\n * > checkMonthnum(string(\"March\"))\n * false\n */\nbool checkMonthnum(string monthname1) {\nif (monthname1 == \"February\") {\n        return true;\n    } else {\n        return false;\n    }", "entry_point": "checkMonthnum", "result": "Compilation failed: /tmp/tmpy6bpzqhz/temp.cpp: In function \u2018bool checkMonthnum(std::string)\u2019:\n/tmp/tmpy6bpzqhz/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpy6bpzqhz/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmpy6bpzqhz/temp.cpp:15:39: note: to match this \u2018{\u2019\n   15 | bool checkMonthnum(string monthname1) {\n      |                                       ^\n", "passed": false}
{"task_id": "MBCPP/337", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWord(string text) {\nregex re(\".*(python|lang)[.?!]?$\");\n    if (regex_match(text, re)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatchWord", "result": "Compilation failed: /tmp/tmpjac75ecw/temp.cpp: In function \u2018std::string textMatchWord(std::string)\u2019:\n/tmp/tmpjac75ecw/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpjac75ecw/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpjac75ecw/temp.cpp:15:35: note: to match this \u2018{\u2019\n   15 | string textMatchWord(string text) {\n      |                                   ^\n", "passed": false}
{"task_id": "MBCPP/338", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of substrings with same first and last characters.\n * > countSubstringWithEqualEnds(string(\"aba\"))\n * 4\n * > countSubstringWithEqualEnds(string(\"abcab\"))\n * 7\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n */\nint countSubstringWithEqualEnds(string s) {\nint count = 0;\n    int n = s.length();\n\n    // Create an array to store frequency of characters\n    // Assuming lowercase English letters\n    vector<int> freq(26, 0);\n\n    // Update frequency of each character\n    for (int i = 0; i < n; i++) {\n        freq[s[i] - 'a']++;\n    }\n\n    // For each character, calculate the number of substrings\n    // that start and end with that character.\n    // The formula for n occurrences of a character is n * (n + 1) / 2\n    for (int i = 0; i < 26; i++) {\n        count += (freq[i] * (freq[i] + 1)) / 2;\n    }\n\n    return count;", "entry_point": "countSubstringWithEqualEnds", "result": "passed", "passed": true}
{"task_id": "MBCPP/339", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occuring divisor in an interval.\n * > findDivisor(2, 2)\n * 2\n * > findDivisor(2, 5)\n * 2\n * > findDivisor(5, 10)\n * 2\n */\nint findDivisor(int x, int y) {\nif (x == y) {\n        return x;\n    }\n    return 2;", "entry_point": "findDivisor", "result": "passed", "passed": true}
{"task_id": "MBCPP/340", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.\n * > sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7})\n * 37\n * > sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5})\n * 6\n * > sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5})\n * 6\n */\nint sumThreeSmallestNums(vector<int> lst) {\n// Filter for positive numbers and sort them\nvector<int> positiveNums;\nfor (int num : lst) {\nif (num > 0) {\npositiveNums.push_back(num);\n}\n}\nsort(positiveNums.begin(), positiveNums.end());\n\n\n// Sum the three smallest positive numbers\nint sum = 0;\nfor (int i = 0; i < 3 && i < positiveNums.size(); ++i) {\n    sum += positiveNums[i];\n}\nreturn sum;", "entry_point": "sumThreeSmallestNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/341", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given set into tuples.\n * > setToTuple(unordered_set<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n * > setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11})\n * {6, 7, 8, 9, 10, 11}\n * > setToTuple(unordered_set<int>{12, 13, 14, 15, 16})\n * {12, 13, 14, 15, 16}\n */\nvector<int> setToTuple(unordered_set<int> s) {\nvector<int> result(s.begin(), s.end());\nsort(result.begin(), result.end());\nreturn result;", "entry_point": "setToTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/342", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n * > findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}})\n * {4, 6}\n * > findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}})\n * {4, 7}\n * > findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}})\n * {5, 7}\n */\nvector<int> findMinimumRange(vector<vector<int>> list) {\nstruct Element {\n        int value;\n        int array_idx;\n        int element_idx;\n\n        // Custom comparator for min-priority queue\n        bool operator>(const Element& other) const {\n            return value > other.value;\n        }\n    };\n\n    priority_queue<Element, vector<Element>, greater<Element>> pq;\n\n    int max_val = INT_MIN;\n    int min_range = INT_MAX;\n    vector<int> result(2);\n\n    // Initialize the priority queue with the first element from each array\n    for (int i = 0; i < list.size(); ++i) {\n        if (!list[i].empty()) {\n            pq.push({list[i][0], i, 0});\n            max_val = max(max_val, list[i][0]);\n        }\n    }\n\n    // If any list is empty, it's impossible to include an element from each,\n    // though the problem constraints typically imply non-empty lists.\n    // For this problem's examples, it seems lists are guaranteed to have elements.\n\n    while (true) {\n        Element current = pq.top();\n        pq.pop();\n\n        int min_val = current.value;\n\n        // Update the minimum range if the current range is smaller\n        if (max_val - min_val < min_range) {\n            min_range = max_val - min_val;\n            result[0] = min_val;\n            result[1] = max_val;\n        }\n\n        // Move to the next element in the array from which the min_val was taken\n        int next_array_idx = current.array_idx;\n        int next_element_idx = current.element_idx + 1;\n\n        // If the current array is exhausted, we can't form a range including all arrays anymore\n        if (next_element_idx == list[next_array_idx].size()) {\n            break;\n        }\n\n        // Push the next element from that array into the priority queue\n        int new_val = list[next_array_idx][next_element_idx];\n        pq.push({new_val, next_array_idx, next_element_idx});\n\n        // Update the maximum value in the current window\n        max_val = max(max_val, new_val);\n    }\n\n    return result;", "entry_point": "findMinimumRange", "result": "passed", "passed": true}
{"task_id": "MBCPP/343", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n * > digLet(string(\"python\"))\n * {6, 0}\n * > digLet(string(\"program\"))\n * {7, 0}\n * > digLet(string(\"python3.0\"))\n * {6, 2}\n */\nvector<int> digLet(string s) {\nint digits = 0;\n    int letters = 0;\n    for (char c : s) {\n        if (isdigit(c)) {\n            digits++;\n        } else if (isalpha(c)) {\n            letters++;\n        }\n    }\n    return {letters, digits};", "entry_point": "digLet", "result": "passed", "passed": true}
{"task_id": "MBCPP/344", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of elements with odd factors in a given range.\n * > countOddSquares(5, 100)\n * 8\n * > countOddSquares(8, 65)\n * 6\n * > countOddSquares(2, 5)\n * 1\n */\nint countOddSquares(int n, int m) {\nreturn (int)sqrt(m) - (int)sqrt(n - 1);", "entry_point": "countOddSquares", "result": "passed", "passed": true}
{"task_id": "MBCPP/345", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference between two consecutive numbers in a given list.\n * > diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {0, 2, 1, 0, 1, 1, 1}\n * > diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10})\n * {1, 3, 1, -3, 4}\n * > diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7})\n * {1, 1, 1, 1, 0, 0, 0, 1, 2}\n */\nvector<int> diffConsecutivenums(vector<int> nums) {\nvector<int> result;\nif (nums.empty()) {\nreturn result;\n}\nfor (size_t i = 0; i < nums.size() - 1; ++i) {\nresult.push_back(nums[i+1] - nums[i]);\n}\nreturn result;", "entry_point": "diffConsecutivenums", "result": "passed", "passed": true}
{"task_id": "MBCPP/346", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find entringer number e(n, k).\n * > zigzag(4, 3)\n * 5\n * > zigzag(4, 2)\n * 4\n * > zigzag(3, 1)\n * 1\n */\nint zigzag(int n, int k) {\nif (n == 0 && k == 0)\n        return 1;\n    if (k == 0)\n        return 0;\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k);", "entry_point": "zigzag", "result": "passed", "passed": true}
{"task_id": "MBCPP/347", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(1, 2)\n * 2\n * > countSquares(2, 2)\n * 5\n */\nint countSquares(int m, int n) {\nlong long sum = 0;\n    for (int i = 1; i <= min(m, n); i++) {\n        sum += (long long)(m - i + 1) * (n - i + 1);\n    }\n    return sum;", "entry_point": "countSquares", "result": "passed", "passed": true}
{"task_id": "MBCPP/348", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n * > findWays(4)\n * 2\n * > findWays(6)\n * 5\n * > findWays(8)\n * 14\n */\nint findWays(int m) {\nif (m % 2 != 0) {\n        return 0;\n    }\n    int n = m / 2;\n    unsigned long long catalan[n + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        catalan[i] = 0;\n        for (int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n    return catalan[n];", "entry_point": "findWays", "result": "passed", "passed": true}
{"task_id": "MBCPP/349", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is a binary string or not.\n * > check(string(\"01010101010\"))\n * string(\"Yes\")\n * > check(string(\"name0\"))\n * string(\"No\")\n * > check(string(\"101\"))\n * string(\"Yes\")\n */\nstring check(string str) {\nfor (char ch : str) {\n        if (ch != '0' && ch != '1') {\n            return \"No\";\n        }\n    }\n    return \"Yes\";", "entry_point": "check", "result": "passed", "passed": true}
{"task_id": "MBCPP/350", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to minimize the length of the string by removing occurrence of only one character.\n * > minimumLength(string(\"mnm\"))\n * 1\n * > minimumLength(string(\"abcda\"))\n * 3\n * > minimumLength(string(\"abcb\"))\n * 2\n */\nint minimumLength(string s) {\nint n = s.length();\n    int maxOcc = 0;\n    int arr[26] = {0}; // Initialize with 0s\n\n    // Count the frequency of each alphabet\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n\n    // Find the alphabet with maximum frequency\n    for (int i = 0; i < 26; i++) {\n        if (arr[i] > maxOcc) {\n            maxOcc = arr[i];\n        }\n    }\n\n    // Subtract the frequency of that character from the total length\n    return (n - maxOcc);", "entry_point": "minimumLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/351", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first element occurring k times in a given array.\n * > firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1)\n * 0\n * > firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2)\n * 1\n * > firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2)\n * 2\n */\nint firstElement(vector<int> arr, int n, int k) {\nunordered_map<int, int> counts;\n    for (int x : arr) {\n        counts[x]++;\n    }\n\n    for (int x : arr) {\n        if (counts[x] == k) {\n            return x;\n        }\n    }\n    return -1;", "entry_point": "firstElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/352", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters in a given string are unique.\n * > uniqueCharacters(string(\"aba\"))\n * false\n * > uniqueCharacters(string(\"abc\"))\n * true\n * > uniqueCharacters(string(\"abab\"))\n * false\n */\nbool uniqueCharacters(string str) {\nstd::set<char> charSet;\nfor (char c : str) {\nif (charSet.count(c)) {\nreturn false;\n}\ncharSet.insert(c);\n}\nreturn true;", "entry_point": "uniqueCharacters", "result": "passed", "passed": true}
{"task_id": "MBCPP/353", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove a specified column from a given nested list.\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {{2, 3}, {4, 5}, {1, 1}}\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {{1, 2}, {-2, 4}, {1, -1}}\n * > removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {{3}, {7}, {3}, {15, 17}, {7}, {11}}\n */\nvector<vector<int>> removeColumn(vector<vector<int>> list1, int n) {\nfor (auto& row : list1) {\n        if (n >= 0 && n < row.size()) {\n            row.erase(row.begin() + n);\n        }\n    }\n    return list1;", "entry_point": "removeColumn", "result": "passed", "passed": true}
{"task_id": "MBCPP/354", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of arithemetic progression.\n * > tnAp(1, 5, 2)\n * 9\n * > tnAp(2, 6, 4)\n * 22\n * > tnAp(1, 4, 5)\n * 16\n */\nint tnAp(int a, int n, int d) {\nreturn a + (n - 1) * d;", "entry_point": "tnAp", "result": "passed", "passed": true}
{"task_id": "MBCPP/355", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rectangles in a circle of radius r.\n * > countRectangles(2)\n * 8\n * > countRectangles(1)\n * 1\n * > countRectangles(0)\n * 0\n */\nint countRectangles(int radius) {\nint rectangles = 0;\n    int diameter = 2 * radius;\n    int diameterSquare = diameter * diameter;\n\n    for (int a = 1; a < diameter; a++) {\n        for (int b = 1; b < diameter; b++) {\n            if ((a * a + b * b) <= diameterSquare) {\n                rectangles++;\n            }\n        }\n    }\n    return rectangles;", "entry_point": "countRectangles", "result": "passed", "passed": true}
{"task_id": "MBCPP/356", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the third angle of a triangle using two angles.\n * > findAngle(47, 89)\n * 44\n * > findAngle(45, 95)\n * 40\n * > findAngle(50, 40)\n * 90\n */\nint findAngle(int a, int b) {\nreturn 180 - (a + b);", "entry_point": "findAngle", "result": "passed", "passed": true}
{"task_id": "MBCPP/357", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum element of all the given tuple records.\n * > findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}})\n * 10\n * > findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}})\n * 11\n * > findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}})\n * 12\n */\nint findMax(vector<vector<int>> testList) {\nint max_val = INT_MIN; // Initialize with the smallest possible integer value\n    for (const auto& inner_vec : testList) {\n        for (int val : inner_vec) {\n            if (val > max_val) {\n                max_val = val;\n            }\n        }\n    }\n    return max_val;", "entry_point": "findMax", "result": "passed", "passed": true}
{"task_id": "MBCPP/358", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find modulo division of two lists using map and lambda function.\n * > moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3})\n * {0, 1, 0}\n * > moddivList(vector<int>{3, 2}, vector<int>{1, 4})\n * {0, 2}\n * > moddivList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> moddivList(vector<int> nums1, vector<int> nums2) {\nvector<int> result;\ntransform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result),\n[](int a, int b) { return a % b; });\nreturn result;", "entry_point": "moddivList", "result": "passed", "passed": true}
{"task_id": "MBCPP/359", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.\n * > checkSolution(1, 3, 2)\n * string(\"Yes\")\n * > checkSolution(1, 2, 3)\n * string(\"No\")\n * > checkSolution(1, -5, 6)\n * string(\"No\")\n */\nstring checkSolution(int a, int b, int c) {\n// Calculate the discriminant\n    double delta = b * b - 4 * a * c;\n\n    // If the discriminant is negative, there are no real roots.\n    if (delta < 0) {\n        return \"No\";\n    }\n\n    // Calculate the roots\n    double root1 = (-b + sqrt(delta)) / (2 * a);\n    double root2 = (-b - sqrt(delta)) / (2 * a);\n\n    // Check if one root is twice the other\n    if (abs(root1 - 2 * root2) < 1e-9 || abs(root2 - 2 * root1) < 1e-9) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }", "entry_point": "checkSolution", "result": "Compilation failed: /tmp/tmpm9wfbgl8/temp.cpp: In function \u2018std::string checkSolution(int, int, int)\u2019:\n/tmp/tmpm9wfbgl8/temp.cpp:35:1: error: a template declaration cannot appear at block scope\n   35 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpm9wfbgl8/temp.cpp:56:1: error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpm9wfbgl8/temp.cpp:15:43: note: to match this \u2018{\u2019\n   15 | string checkSolution(int a, int b, int c) {\n      |                                           ^\n", "passed": false}
{"task_id": "MBCPP/360", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n\u2019th carol number.\n * > getCarol(2)\n * 7\n * > getCarol(4)\n * 223\n * > getCarol(5)\n * 959\n */\nint getCarol(int n) {\nlong long val = pow(2, n) - 1;\n    return val * val - 2;", "entry_point": "getCarol", "result": "passed", "passed": true}
{"task_id": "MBCPP/363", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the k elements to each element in the tuple.\n * > addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4)\n * {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}\n * > addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8)\n * {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}\n * > addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9)\n * {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}\n */\nvector<vector<int>> addKElement(vector<vector<int>> testList, int k) {\nfor (long long int i = 0; i < testList.size(); i++) {\n        for (long long int j = 0; j < testList[i].size(); j++) {\n            testList[i][j] += k;\n        }\n    }\n    return testList;", "entry_point": "addKElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/364", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n * > minFlipToMakeStringAlternate(string(\"0001010111\"))\n * 2\n * > minFlipToMakeStringAlternate(string(\"001\"))\n * 1\n * > minFlipToMakeStringAlternate(string(\"010111011\"))\n * 2\n */\nint minFlipToMakeStringAlternate(string str) {\nint n = str.length();\n    int flip1 = 0; // count flips for \"0101...\" pattern\n    int flip2 = 0; // count flips for \"1010...\" pattern\n\n    for (int i = 0; i < n; i++) {\n        // For \"0101...\" pattern\n        if (i % 2 == 0) { // Even index should be '0'\n            if (str[i] == '1') {\n                flip1++;\n            }\n        } else { // Odd index should be '1'\n            if (str[i] == '0') {\n                flip1++;\n            }\n        }\n\n        // For \"1010...\" pattern\n        if (i % 2 == 0) { // Even index should be '1'\n            if (str[i] == '0') {\n                flip2++;\n            }\n        } else { // Odd index should be '0'\n            if (str[i] == '1') {\n                flip2++;\n            }\n        }\n    }\n\n    return min(flip1, flip2);", "entry_point": "minFlipToMakeStringAlternate", "result": "passed", "passed": true}
{"task_id": "MBCPP/365", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits of a given number.\n * > countDigit(12345)\n * 5\n * > countDigit(11223305)\n * 8\n * > countDigit(4123459)\n * 7\n */\nint countDigit(int n) {\nif (n == 0)\n        return 1;\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        ++count;\n    }\n    return count;", "entry_point": "countDigit", "result": "passed", "passed": true}
{"task_id": "MBCPP/366", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6})\n * 30\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5})\n * 20\n * > adjacentNumProduct(vector<int>{2, 3})\n * 6\n */\nint adjacentNumProduct(vector<int> listNums) {\nif (listNums.size() < 2) {\n        // Handle error: not enough elements to form an adjacent pair\n        return 0; // Or throw an exception, depending on desired behavior\n    }\n\n    int maxProduct = listNums[0] * listNums[1];\n\n    for (int i = 1; i < listNums.size() - 1; ++i) {\n        int currentProduct = listNums[i] * listNums[i + 1];\n        if (currentProduct > maxProduct) {\n            maxProduct = currentProduct;\n        }\n    }\n\n    return maxProduct;", "entry_point": "adjacentNumProduct", "result": "passed", "passed": true}
{"task_id": "MBCPP/368", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to repeat the given tuple n times.\n * > repeatTuples(vector<int>{1, 3}, 4)\n * {{1, 3}, {1, 3}, {1, 3}, {1, 3}}\n * > repeatTuples(vector<int>{1, 2}, 3)\n * {{1, 2}, {1, 2}, {1, 2}}\n * > repeatTuples(vector<int>{3, 4}, 5)\n * {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}\n */\nvector<vector<int>> repeatTuples(vector<int> testTup, int n) {\nvector<vector<int>> result;\nfor (int i = 0; i < n; ++i) {\nresult.push_back(testTup);\n}\nreturn result;", "entry_point": "repeatTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/369", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of cuboid\n * > lateralsurfaceCuboid(8, 5, 6)\n * 156\n * > lateralsurfaceCuboid(7, 9, 10)\n * 320\n * > lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nint lateralsurfaceCuboid(int l, int w, int h) {\nreturn 2 * h * (l + w);", "entry_point": "lateralsurfaceCuboid", "result": "passed", "passed": true}
{"task_id": "MBCPP/370", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a tuple by its float element.\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}})\n * {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}})\n * {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}})\n * {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}\n */\nvector<vector<string>> floatSort(vector<vector<string>> price) {\nsort(price.begin(), price.end(), [](const vector<string>& a, const vector<string>& b) {\nreturn stof(a[1]) > stof(b[1]);\n});\nreturn price;", "entry_point": "floatSort", "result": "passed", "passed": true}
{"task_id": "MBCPP/371", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n * > smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6)\n * 7\n * > smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6)\n * 3\n * > smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7)\n * 0\n */\nint smallestMissing(vector<int> a, int leftElement, int rightElement) {\nint low = leftElement;\n    int high = rightElement;\n\n    // Handle the case where the first element is not 0\n    if (a[low] != 0) {\n        return 0;\n    }\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        // If the element at mid is equal to its index, the missing element is in the right half\n        if (a[mid] == mid) {\n            low = mid + 1;\n        }\n        // If the element at mid is not equal to its index, the missing element is in the left half or is mid itself\n        else {\n            high = mid - 1;\n        }\n    }\n    // After the loop, 'low' will point to the index of the first missing element\n    // which is also the value of the smallest missing element.\n    return low;", "entry_point": "smallestMissing", "result": "passed", "passed": true}
{"task_id": "MBCPP/372", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n * > heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1})\n * {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}\n * > heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 22, 25, 25, 35, 58, 65, 75, 85}\n * > heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n */\nvector<int> heapAssending(vector<int> nums) {\npriority_queue<int,t, vector<int>, greater<int>> minHeap;\n\n\nfor (int num : nums) {\n    minHeap.push(num);\n}\n\nvector<int> sortedNums;\nwhile (!minHeap.empty()) {\n    sortedNums.push_back(minHeap.top());\n    minHeap.pop();\n}\n\nreturn sortedNums;", "entry_point": "heapAssending", "result": "Compilation failed: /tmp/tmp9tubz1mo/temp.cpp: In function \u2018std::vector<int> heapAssending(std::vector<int>)\u2019:\n/tmp/tmp9tubz1mo/temp.cpp:16:20: error: \u2018t\u2019 was not declared in this scope; did you mean \u2018tm\u2019?\n   16 | priority_queue<int,t, vector<int>, greater<int>> minHeap;\n      |                    ^\n      |                    tm\n/tmp/tmp9tubz1mo/temp.cpp:16:47: error: wrong number of template arguments (4, should be at least 1)\n   16 | priority_queue<int,t, vector<int>, greater<int>> minHeap;\n      |                                               ^~\nIn file included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n                 from /tmp/tmp9tubz1mo/temp.cpp:1:\n/usr/include/c++/9/bits/stl_queue.h:443:11: note: provided for \u2018template<class _Tp, class _Sequence, class _Compare> class std::priority_queue\u2019\n  443 |     class priority_queue\n      |           ^~~~~~~~~~~~~~\n/tmp/tmp9tubz1mo/temp.cpp:20:13: error: request for member \u2018push\u2019 in \u2018minHeap\u2019, which is of non-class type \u2018int\u2019\n   20 |     minHeap.push(num);\n      |             ^~~~\n/tmp/tmp9tubz1mo/temp.cpp:24:17: error: request for member \u2018empty\u2019 in \u2018minHeap\u2019, which is of non-class type \u2018int\u2019\n   24 | while (!minHeap.empty()) {\n      |                 ^~~~~\n/tmp/tmp9tubz1mo/temp.cpp:25:34: error: request for member \u2018top\u2019 in \u2018minHeap\u2019, which is of non-class type \u2018int\u2019\n   25 |     sortedNums.push_back(minHeap.top());\n      |                                  ^~~\n/tmp/tmp9tubz1mo/temp.cpp:26:13: error: request for member \u2018pop\u2019 in \u2018minHeap\u2019, which is of non-class type \u2018int\u2019\n   26 |     minHeap.pop();\n      |             ^~~\n", "passed": false}
{"task_id": "MBCPP/373", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cuboid.\n * > volumeCuboid(1, 2, 3)\n * 6\n * > volumeCuboid(5, 7, 9)\n * 315\n * > volumeCuboid(10, 15, 21)\n * 3150\n */\nint volumeCuboid(int l, int w, int h) {\nreturn l * w * h;", "entry_point": "volumeCuboid", "result": "passed", "passed": true}
{"task_id": "MBCPP/374", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print all permutations of a given string including duplicates.\n * > permuteString(string(\"ab\"))\n * {string(\"ab\"), string(\"ba\")}\n * > permuteString(string(\"abc\"))\n * {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}\n * > permuteString(string(\"abcd\"))\n * {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}\n */\nvector<string> permuteString(string str) {\nvector<string> result;\nsort(str.begin(), str.end()); // Sort the string to get the first permutation in lexicographical order\ndo {\nresult.push_back(str);\n} while (next_permutation(str.begin(), str.end())); // Generate next permutations\nreturn result;", "entry_point": "permuteString", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/375", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round the given number to the nearest multiple of a specific number.\n * > roundNum(4722, 10)\n * 4720\n * > roundNum(1111, 5)\n * 1110\n * > roundNum(219, 2)\n * 218\n */\nint roundNum(int n, int m) {\nint remainder = n % m;\n    if (remainder == 0) {\n        return n;\n    } else {\n        int lower_multiple = n - remainder;\n        int upper_multiple = lower_multiple + m;\n        if (abs(n - lower_multiple) <= abs(n - upper_multiple)) {\n            return lower_multiple;\n        } else {\n            return upper_multiple;\n        }\n    }", "entry_point": "roundNum", "result": "Compilation failed: /tmp/tmplnkgqj6m/temp.cpp: In function \u2018int roundNum(int, int)\u2019:\n/tmp/tmplnkgqj6m/temp.cpp:29:1: error: a template declaration cannot appear at block scope\n   29 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmplnkgqj6m/temp.cpp:50:1: error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmplnkgqj6m/temp.cpp:15:28: note: to match this \u2018{\u2019\n   15 | int roundNum(int n, int m) {\n      |                            ^\n", "passed": false}
{"task_id": "MBCPP/377", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all occurrences of a character in a given string.\n * > removeChar(string(\"aba\"), string(\"a\"))\n * string(\"b\")\n * > removeChar(string(\"toggle\"), string(\"g\"))\n * string(\"tole\")\n * > removeChar(string(\"aabbc\"), string(\"b\"))\n * string(\"aac\")\n */\nstring removeChar(string s, string c) {\nstring res = \"\";\n    for (char x : s) {\n        if (x != c[0]) {\n            res += x;\n        }\n    }\n    return res;", "entry_point": "removeChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/378", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift last element to first position in the given list.\n * > moveFirst(vector<int>{1, 2, 3, 4})\n * {4, 1, 2, 3}\n * > moveFirst(vector<int>{0, 1, 2, 3})\n * {3, 0, 1, 2}\n * > moveFirst(vector<int>{9, 8, 7, 1})\n * {1, 9, 8, 7}\n */\nvector<int> moveFirst(vector<int> testList) {\nif (testList.empty()) {\n        return testList;\n    }\n    int lastElement = testList.back();\n    testList.pop_back();\n    testList.insert(testList.begin(), lastElement);\n    return testList;", "entry_point": "moveFirst", "result": "passed", "passed": true}
{"task_id": "MBCPP/379", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cuboid.\n * > surfaceareaCuboid(1, 2, 3)\n * 22\n * > surfaceareaCuboid(5, 7, 9)\n * 286\n * > surfaceareaCuboid(10, 15, 21)\n * 1350\n */\nint surfaceareaCuboid(int l, int w, int h) {\nreturn 2 * (l * w + w * h + l * h);", "entry_point": "surfaceareaCuboid", "result": "passed", "passed": true}
{"task_id": "MBCPP/380", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a two-dimensional array.\n * > multiList(3, 4)\n * {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}\n * > multiList(5, 7)\n * {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}\n * > multiList(10, 15)\n * {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}\n */\nvector<vector<int>> multiList(int rownum, int colnum) {\nvector<vector<int>> result(rownum, vector<int>(colnum));\nfor (int i = 0; i < rownum; ++i) {\nfor (int j = 0; j < colnum; ++j) {\nresult[i][j] = i * j;\n}\n}\nreturn result;", "entry_point": "multiList", "result": "passed", "passed": true}
{"task_id": "MBCPP/382", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of rotations in a circularly sorted array.\n * > findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n * 3\n * > findRotationCount(vector<int>{8, 9, 10, 2, 5, 6})\n * 3\n * > findRotationCount(vector<int>{2, 5, 6, 8, 9, 10})\n * 0\n */\nint findRotationCount(vector<int> a) {\nint n = a.size();\n    if (n == 0) {\n        return 0;\n    }\n\n    int low = 0;\n    int high = n - 1;\n\n    // If the array is not rotated at all (already sorted)\n    if (a[low] <= a[high]) {\n        return 0;\n    }\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        // Check if mid is the minimum element\n        // If a[mid] > a[mid+1], then mid+1 is the minimum element (the rotation point)\n        if (mid < high && a[mid] > a[mid + 1]) {\n            return mid + 1;\n        }\n        // If a[mid-1] > a[mid], then mid is the minimum element\n        if (mid > low && a[mid - 1] > a[mid]) {\n            return mid;\n        }\n\n        // Decide whether to go to the left or right half\n        if (a[low] <= a[mid]) { // Left half is sorted\n            low = mid + 1; // Minimum element must be in the right (unsorted) half\n        } else { // Right half is sorted\n            high = mid - 1; // Minimum element must be in the left (unsorted) half\n        }\n    }\n    return 0; // Should not reach here for a valid circularly sorted array, unless empty", "entry_point": "findRotationCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/383", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all odd bits of a given number.\n * > evenBitToggleNumber(10)\n * 15\n * > evenBitToggleNumber(20)\n * 1\n * > evenBitToggleNumber(30)\n * 11\n */\nint evenBitToggleNumber(int n) {\nint toggle = 1;\n    for (int i = 0; i < sizeof(int) * 8; i += 2) {\n        n = n ^ toggle;\n        toggle = toggle << 2;\n    }\n    return n;", "entry_point": "evenBitToggleNumber", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/384", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the smallest value in a given array.\n * > frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9})\n * 3\n */\nint frequencyOfSmallest(int n, vector<int> arr) {\nif (n == 0) {\n        return 0;\n    }\n\n    int smallest_val = arr[0];\n    int frequency = 1;\n\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] < smallest_val) {\n            smallest_val = arr[i];\n            frequency = 1;\n        } else if (arr[i] == smallest_val) {\n            frequency++;\n        }\n    }\n    return frequency;", "entry_point": "frequencyOfSmallest", "result": "passed", "passed": true}
{"task_id": "MBCPP/385", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th perrin number using recursion.\n * > getPerrin(9)\n * 12\n * > getPerrin(4)\n * 2\n * > getPerrin(6)\n * 5\n */\nint getPerrin(int n) {\nif (n == 0)\n    return 3;\nif (n == 1)\n    return 0;\nif (n == 2)\n    return 2;\nreturn getPerrin(n - 2) + getPerrin(n - 3);", "entry_point": "getPerrin", "result": "passed", "passed": true}
{"task_id": "MBCPP/386", "code": "int swapCount(string s) {\n    int open = 0; // Tracks the count of currently unmatched open brackets\n    int swaps = 0;    // Accumulates the total number of swaps\n\n    for (char c : s) {\n        if (c == '[') {\n            open++;\n        } else { // c == ']'\n            if (open > 0) {\n                open--; // Found a matching '[' for a ']'\n            } else {\n                // This ']' is an \"excess\" closing bracket.\n                // It needs to be swapped with an opening bracket that appears later.\n                swaps++;\n            }\n        }\n    }\n    // The number of remaining `open ` brackets (if any)\n    // also need to be balanced. Each pair of them requires one swap.\n    return swaps + (open + 1) / 2;\n}", "entry_point": "swapCount", "result": "Compilation failed: /tmp/tmpxy1qlofd/temp.cpp:2:15: error: \u2018string\u2019 was not declared in this scope; did you mean \u2018std::string\u2019?\n    2 | int swapCount(string s) {\n      |               ^~~~~~\n      |               std::string\nIn file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpxy1qlofd/temp.cpp:1:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>    string;\n      |                                 ^~~~~~\n/tmp/tmpxy1qlofd/temp.cpp: In function \u2018int main(int, char**)\u2019:\n/tmp/tmpxy1qlofd/temp.cpp:29:24: error: \u2018string\u2019 was not declared in this scope; did you mean \u2018std::string\u2019?\n   29 |     int x0 = swapCount(string(\"[]][][\"));\n      |                        ^~~~~~\n      |                        std::string\nIn file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpxy1qlofd/temp.cpp:1:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>    string;\n      |                                 ^~~~~~\n/tmp/tmpxy1qlofd/temp.cpp:29:40: error: \u2018swapCount\u2019 cannot be used as a function\n   29 |     int x0 = swapCount(string(\"[]][][\"));\n      |                                        ^\n/tmp/tmpxy1qlofd/temp.cpp:31:15: error: \u2018runtime_error\u2019 was not declared in this scope; did you mean \u2018std::runtime_error\u2019?\n   31 |         throw runtime_error(\"Exception -- test case 0 did not pass.\");\n      |               ^~~~~~~~~~~~~\n      |               std::runtime_error\nIn file included from /usr/include/c++/9/system_error:41,\n                 from /usr/include/c++/9/bits/ios_base.h:46,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpxy1qlofd/temp.cpp:1:\n/usr/include/c++/9/stdexcept:219:9: note: \u2018std::runtime_error\u2019 declared here\n  219 |   class runtime_error : public exception\n      |         ^~~~~~~~~~~~~\n/tmp/tmpxy1qlofd/temp.cpp:34:40: error: \u2018swapCount\u2019 cannot be used as a function\n   34 |     int x1 = swapCount(string(\"[[][]]\"));\n      |                                        ^\n/tmp/tmpxy1qlofd/temp.cpp:36:15: error: \u2018runtime_error\u2019 was not declared in this scope; did you mean \u2018std::runtime_error\u2019?\n   36 |         throw runtime_error(\"Exception -- test case 1 did not pass.\");\n      |               ^~~~~~~~~~~~~\n      |               std::runtime_error\nIn file included from /usr/include/c++/9/system_error:41,\n                 from /usr/include/c++/9/bits/ios_base.h:46,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpxy1qlofd/temp.cpp:1:\n/usr/include/c++/9/stdexcept:219:9: note: \u2018std::runtime_error\u2019 declared here\n  219 |   class runtime_error : public exception\n      |         ^~~~~~~~~~~~~\n/tmp/tmpxy1qlofd/temp.cpp:39:42: error: \u2018swapCount\u2019 cannot be used as a function\n   39 |     int x2 = swapCount(string(\"[[][]]][\"));\n      |                                          ^\n/tmp/tmpxy1qlofd/temp.cpp:41:15: error: \u2018runtime_error\u2019 was not declared in this scope; did you mean \u2018std::runtime_error\u2019?\n   41 |         throw runtime_error(\"Exception -- test case 2 did not pass.\");\n      |               ^~~~~~~~~~~~~\n      |               std::runtime_error\nIn file included from /usr/include/c++/9/system_error:41,\n                 from /usr/include/c++/9/bits/ios_base.h:46,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpxy1qlofd/temp.cpp:1:\n/usr/include/c++/9/stdexcept:219:9: note: \u2018std::runtime_error\u2019 declared here\n  219 |   class runtime_error : public exception\n      |         ^~~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/387", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the hexadecimal number is even or odd.\n * > evenOrOdd(string(\"AB3454D\"))\n * string(\"Odd\")\n * > evenOrOdd(string(\"ABC\"))\n * string(\"Even\")\n * > evenOrOdd(string(\"AAD\"))\n * string(\"Odd\")\n */\nstring evenOrOdd(string n) {\nchar lastDigit = n.back();\n    if (lastDigit == '0' || lastDigit == '2' || lastDigit == '4' || lastDigit == '6' || lastDigit == '8' || \n        lastDigit == 'A' || lastDigit == 'C' || lastDigit == 'E') {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }", "entry_point": "evenOrOdd", "result": "Compilation failed: /tmp/tmpnmss8e8g/temp.cpp: In function \u2018std::string evenOrOdd(std::string)\u2019:\n/tmp/tmpnmss8e8g/temp.cpp:24:1: error: a template declaration cannot appear at block scope\n   24 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpnmss8e8g/temp.cpp:45:1: error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmpnmss8e8g/temp.cpp:15:28: note: to match this \u2018{\u2019\n   15 | string evenOrOdd(string n) {\n      |                            ^\n", "passed": false}
{"task_id": "MBCPP/388", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the highest power of 2 that is less than or equal to n.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\nint p = 1;\n    while (p <= n) {\n        p <<= 1;\n    }\n    return p >> 1;", "entry_point": "highestPowerOf2", "result": "passed", "passed": true}
{"task_id": "MBCPP/389", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th lucas number.\n * > findLucas(9)\n * 76\n * > findLucas(4)\n * 7\n * > findLucas(3)\n * 4\n */\nint findLucas(int n) {\nif (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    int a = 2;\n    int b = 1;\n    int c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;", "entry_point": "findLucas", "result": "passed", "passed": true}
{"task_id": "MBCPP/391", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert more than one list to nested dictionary.\n * > convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\")}, vector<int>{85, 98, 89, 92})\n * {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}\n * > convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400})\n * {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}\n * > convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40})\n * {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}\n */\nvector<unordered_map<string, unordered_map<string, int>>> convertListDictionary(vector<string> l1, vector<string> l2, vector<int> l3) {\nvector<unordered_map<string, unordered_map<string, int>>> result;\n    for (int i = 0; i < l1.size(); ++i) {\n        unordered_map<string, unordered_map<string, int>> inner_map;\n        unordered_map<string, int> innermost_map;\n        innermost_map[l2[i]] = l3[i];\n        inner_map[l1[i]] = innermost_map;\n        result.push_back(inner_map);\n    }\n    return result;", "entry_point": "convertListDictionary", "result": "passed", "passed": true}
{"task_id": "MBCPP/392", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n * > getMaxSum(60)\n * 106\n * > getMaxSum(10)\n * 12\n * > getMaxSum(2)\n * 2\n */\nint getMaxSum(int n) {\nstd::unordered_map<int, int> memo;\n\nint getMaxSum(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    if (memo.count(n)) {\n        return memo[n];\n    }\n\n    int sum_divided = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n    memo[n] = std::max(n, sum_divided);\n    return memo[n];", "entry_point": "getMaxSum", "result": "Compilation failed: /tmp/tmpugzz_9e2/temp.cpp: In function \u2018int getMaxSum(int)\u2019:\n/tmp/tmpugzz_9e2/temp.cpp:18:22: error: a function-definition is not allowed here before \u2018{\u2019 token\n   18 | int getMaxSum(int n) {\n      |                      ^\n/tmp/tmpugzz_9e2/temp.cpp:31:1: error: a template declaration cannot appear at block scope\n   31 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpugzz_9e2/temp.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmpugzz_9e2/temp.cpp:15:22: note: to match this \u2018{\u2019\n   15 | int getMaxSum(int n) {\n      |                      ^\n/tmp/tmpugzz_9e2/temp.cpp:52:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   52 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/394", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if given tuple is distinct or not.\n * > checkDistinct(vector<int>{1, 4, 5, 6, 1, 4})\n * false\n * > checkDistinct(vector<int>{1, 4, 5, 6})\n * true\n * > checkDistinct(vector<int>{2, 3, 4, 5, 6})\n * true\n */\nbool checkDistinct(vector<int> testTup) {\nset<int> s(testTup.begin(), testTup.end());\nreturn s.size() == testTup.size();", "entry_point": "checkDistinct", "result": "passed", "passed": true}
{"task_id": "MBCPP/396", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string starts and ends with the same character or not using regex.\n * > checkChar(string(\"abba\"))\n * string(\"Valid\")\n * > checkChar(string(\"a\"))\n * string(\"Valid\")\n * > checkChar(string(\"abcd\"))\n * string(\"Invalid\")\n */\nstring checkChar(string str) {\nregex pattern(\"^(.).*1$\");\n    if (regex_match(str, pattern)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }", "entry_point": "checkChar", "result": "Compilation failed: /tmp/tmp1favk7qq/temp.cpp: In function \u2018std::string checkChar(std::string)\u2019:\n/tmp/tmp1favk7qq/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp1favk7qq/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmp1favk7qq/temp.cpp:15:30: note: to match this \u2018{\u2019\n   15 | string checkChar(string str) {\n      |                              ^\n", "passed": false}
{"task_id": "MBCPP/397", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of three specific numbers.\n * > medianNumbers(25, 55, 65)\n * 55.0\n * > medianNumbers(20, 10, 30)\n * 20.0\n * > medianNumbers(15, 45, 75)\n * 45.0\n */\ndouble medianNumbers(int a, int b, int c) {\nstd::vector<int> nums = {a, b, c};\nstd::sort(nums.begin(), nums.end());\nreturn static_cast<double>(nums[1]);", "entry_point": "medianNumbers", "result": "passed", "passed": true}
{"task_id": "MBCPP/398", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n * > sumOfDigits(vector<int>{10, 2, 56})\n * 14\n * > sumOfDigits(vector<int>{10, 20, -4, 5, -70})\n * 19\n */\nint sumOfDigits(vector<int> nums) {\nint totalSum = 0;\n    for (int num : nums) {\n        int absNum = abs(num); // Handle negative numbers by taking absolute value\n        while (absNum > 0) {\n            totalSum += absNum % 10;\n            absNum /= 10;\n        }\n    }\n    return totalSum;", "entry_point": "sumOfDigits", "result": "passed", "passed": true}
{"task_id": "MBCPP/399", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n * > bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {15, 6, 5, 10}\n * > bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4})\n * {13, 6, 3, 14}\n * > bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6})\n * {11, 2, 13, 13}\n */\nvector<int> bitwiseXor(vector<int> testTup1, vector<int> testTup2) {\nvector<int> result;\nfor (int i = 0; i < testTup1.size(); i++) {\nresult.push_back(testTup1[i] ^ testTup2[i]);\n}\nreturn result;", "entry_point": "bitwiseXor", "result": "passed", "passed": true}
{"task_id": "MBCPP/400", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n * > extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}})\n * 3\n * > extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}})\n * 4\n * > extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}})\n * 4\n */\nint extractFreq(vector<vector<int>> testList) {\nstd::set<std::pair<int, int>> uniqueTuples;\n\n    for (const auto& p : testList) {\n        // Ensure the pair is always stored in a canonical order (e.g., smaller element first)\n        if (p[0] < p[1]) {\n            uniqueTuples.insert({p[0], p[1]});\n        } else {\n            uniqueTuples.insert({p[1], p[0]});\n        }\n    }\n\n    return uniqueTuples.size();", "entry_point": "extractFreq", "result": "passed", "passed": true}
{"task_id": "MBCPP/401", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n * > addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{7, 10}, {7, 14}, {3, 10}, {8, 13}}\n * > addNestedTuples(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{9, 12}, {9, 16}, {5, 12}, {10, 15}}\n * > addNestedTuples(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{11, 14}, {11, 18}, {7, 14}, {12, 17}}\n */\nvector<vector<int>> addNestedTuples(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\nvector<vector<int>> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nvector<int> inner_result;\nfor (size_t j = 0; j < testTup1[i].size(); ++j) {\ninner_result.push_back(testTup1[i][j] + testTup2[i][j]);\n}\nresult.push_back(inner_result);\n}\nreturn result;", "entry_point": "addNestedTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/402", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr%p.\n * > ncrModp(10, 2, 13)\n * 6\n * > ncrModp(15, 12, 43)\n * 25\n * > ncrModp(17, 9, 18)\n * 10\n */\nint ncrModp(int n, int r, int p) {\nlong long power(long long base, long long exp, long long mod) {\n    long long res = 1;\n    base %= mod;\n    while (exp > 0) {\n        if (exp % 2 == 1) res = (res * base) % mod;\n        base = (base * base) % mod;\n        exp /= 2;\n    }\n    return res;\n}\n\nlong long modInverse(long long n, long long mod) {\n    return power(n, mod - 2, mod);\n}\n\n    if (r < 0 || r > n) return 0;\n    if (r == 0 || r == n) return 1;\n    if (r > n / 2) r = n - r;\n\n    long long fact[n + 1];\n    fact[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        fact[i] = (fact[i - 1] * i) % p;\n    }\n\n    long long numerator = fact[n];\n    long long denominator = (fact[r] * fact[n - r]) % p;\n    long long invDenominator = modInverse(denominator, p);\n\n    return (numerator * invDenominator) % p;", "entry_point": "ncrModp", "result": "Compilation failed: /tmp/tmp040edsyl/temp.cpp: In function \u2018int ncrModp(int, int, int)\u2019:\n/tmp/tmp040edsyl/temp.cpp:16:63: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long power(long long base, long long exp, long long mod) {\n      |                                                               ^\n/tmp/tmp040edsyl/temp.cpp:27:50: error: a function-definition is not allowed here before \u2018{\u2019 token\n   27 | long long modInverse(long long n, long long mod) {\n      |                                                  ^\n/tmp/tmp040edsyl/temp.cpp:43:32: error: \u2018modInverse\u2019 was not declared in this scope\n   43 |     long long invDenominator = modInverse(denominator, p);\n      |                                ^~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/403", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a url is valid or not using regex.\n * > isValidUrl(string(\"https://www.google.com\"))\n * true\n * > isValidUrl(string(\"https:/www.gmail.com\"))\n * false\n * > isValidUrl(string(\"https:// www.redit.com\"))\n * false\n */\nbool isValidUrl(string str) {\nconst regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._+~#?&//=]{2,256}.[a-z]{2,6}b([-a-zA-Z0-9@:%._+~#?&//=]*)\");\n    if (str.empty()) {\n        return false;\n    }\n    return regex_match(str, pattern);", "entry_point": "isValidUrl", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/404", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum of two numbers.\n * > minimum(1, 2)\n * 1\n * > minimum(-5, -4)\n * -5\n * > minimum(0, 0)\n * 0\n */\nint minimum(int a, int b) {\nif (a < b) {\n        return a;\n    } else {\n        return b;\n    }", "entry_point": "minimum", "result": "Compilation failed: /tmp/tmpxzen_n2q/temp.cpp: In function \u2018int minimum(int, int)\u2019:\n/tmp/tmpxzen_n2q/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpxzen_n2q/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmpxzen_n2q/temp.cpp:15:27: note: to match this \u2018{\u2019\n   15 | int minimum(int a, int b) {\n      |                           ^\n", "passed": false}
{"task_id": "MBCPP/406", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the parity of a given number.\n * > findParity(12)\n * string(\"Even Parity\")\n * > findParity(7)\n * string(\"Odd Parity\")\n * > findParity(10)\n * string(\"Even Parity\")\n */\nstring findParity(int x) {\nif (x % 2 == 0) {\n        return \"Even Parity\";\n    } else {\n        return \"Odd Parity\";\n    }", "entry_point": "findParity", "result": "Compilation failed: /tmp/tmp9otqj738/temp.cpp: In function \u2018std::string findParity(int)\u2019:\n/tmp/tmp9otqj738/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp9otqj738/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp9otqj738/temp.cpp:15:26: note: to match this \u2018{\u2019\n   15 | string findParity(int x) {\n      |                          ^\n", "passed": false}
{"task_id": "MBCPP/408", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 2)\n * {{1, 2}, {1, 4}}\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 1)\n * {{1, 2}}\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 7)\n * {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\n */\nvector<vector<int>> kSmallestPairs(vector<int> nums1, vector<int> nums2, int k) {\nvector<vector<int>> result;\nif (nums1.empty() || nums2.empty() || k == 0) {\nreturn result;\n}\n\n\n// Min-priority queue stores tuples of {sum, index1, index2}\n// The custom comparator makes it a min-heap based on the sum.\npriority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<tuple<int, int, int>>> pq;\n\n// Initialize the priority queue with pairs (nums1[i], nums2[0]) for all i,\n// up to k or the size of nums1.\nfor (int i = 0; i < nums1.size() && i < k; ++i) {\n    pq.push({nums1[i] + nums2[0], i, 0});\n}\n\n// Extract k smallest pairs\nwhile (k > 0 && !pq.empty()) {\n    auto [sum, i, j] = pq.top();\n    pq.pop();\n\n    result.push_back({nums1[i], nums2[j]});\n    k--;\n\n    // If there's a next element in nums2 for the current nums1[i], add that pair to the heap\n    if (j + 1 < nums2.size()) {\n        pq.push({nums1[i] + nums2[j + 1], i, j + 1});\n    }\n}\n\nreturn result;", "entry_point": "kSmallestPairs", "result": "passed", "passed": true}
{"task_id": "MBCPP/409", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum product from the pairs of tuples within a given list.\n * > minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 8\n * > minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 30\n * > minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 100\n */\nint minProductTuple(vector<vector<int>> list1) {\nint min_product = INT_MAX;\n    for (const auto& p : list1) {\n        int product = p[0] * p[1];\n        if (product < min_product) {\n            min_product = product;\n        }\n    }\n    return min_product;", "entry_point": "minProductTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/411", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given snake case string to camel case string by using regex.\n * > snakeToCamel(string(\"android_tv\"))\n * string(\"AndroidTv\")\n * > snakeToCamel(string(\"google_pixel\"))\n * string(\"GooglePixel\")\n * > snakeToCamel(string(\"apple_watch\"))\n * string(\"AppleWatch\")\n */\nstring snakeToCamel(string word) {\nstring result = \"\";\n    regex re(\"_([a-z])\");\n    string temp_word = word; // Create a mutable copy\n\n    // Capitalize the first letter of the entire string\n    if (!temp_word.empty()) {\n        temp_word[0] = toupper(temp_word[0]);\n    }\n\n    result = regex_replace(temp_word, re, [](const smatch& m) {\n        return string(1, toupper(m[1].str()[0]));\n    });\n\n    return result;", "entry_point": "snakeToCamel", "result": "Compilation failed: /tmp/tmpn09wc91v/temp.cpp: In function \u2018std::string snakeToCamel(std::string)\u2019:\n/tmp/tmpn09wc91v/temp.cpp:27:6: error: no matching function for call to \u2018regex_replace(std::string&, std::__cxx11::regex&, snakeToCamel(std::string)::<lambda(const smatch&)>)\u2019\n   27 |     });\n      |      ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from /tmp/tmpn09wc91v/temp.cpp:1:\n/usr/include/c++/9/bits/regex.h:2365:5: note: candidate: \u2018template<class _Out_iter, class _Bi_iter, class _Rx_traits, class _Ch_type, class _St, class _Sa> _Out_iter std::regex_replace(_Out_iter, _Bi_iter, _Bi_iter, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&, const std::__cxx11::basic_string<_Ch_type, _St, _Sa>&, std::regex_constants::match_flag_type)\u2019\n 2365 |     regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n      |     ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2365:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn09wc91v/temp.cpp:27:6: note:   deduced conflicting types for parameter \u2018_Bi_iter\u2019 (\u2018std::__cxx11::basic_regex<char>\u2019 and \u2018snakeToCamel(std::string)::<lambda(const smatch&)>\u2019)\n   27 |     });\n      |      ^\nIn file included from /usr/include/c++/9/bits/regex.h:2870,\n                 from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from /tmp/tmpn09wc91v/temp.cpp:1:\n/usr/include/c++/9/bits/regex.tcc:465:5: note: candidate: \u2018template<class _Out_iter, class _Bi_iter, class _Rx_traits, class _Ch_type> _Out_iter std::regex_replace(_Out_iter, _Bi_iter, _Bi_iter, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&, const _Ch_type*, std::regex_constants::match_flag_type)\u2019\n  465 |     regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,\n      |     ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.tcc:465:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn09wc91v/temp.cpp:27:6: note:   deduced conflicting types for parameter \u2018_Bi_iter\u2019 (\u2018std::__cxx11::basic_regex<char>\u2019 and \u2018snakeToCamel(std::string)::<lambda(const smatch&)>\u2019)\n   27 |     });\n      |      ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from /tmp/tmpn09wc91v/temp.cpp:1:\n/usr/include/c++/9/bits/regex.h:2410:5: note: candidate: \u2018template<class _Rx_traits, class _Ch_type, class _St, class _Sa, class _Fst, class _Fsa> std::__cxx11::basic_string<_Ch_type, _St, _Sa> std::regex_replace(const std::__cxx11::basic_string<_Ch_type, _St, _Sa>&, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&, const std::__cxx11::basic_string<_Ch_type, _Fst, _Fsa>&, std::regex_constants::match_flag_type)\u2019\n 2410 |     regex_replace(const basic_string<_Ch_type, _St, _Sa>& __s,\n      |     ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2410:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn09wc91v/temp.cpp:27:6: note:   \u2018snakeToCamel(std::string)::<lambda(const smatch&)>\u2019 is not derived from \u2018const std::__cxx11::basic_string<_Ch_type, _Fst, _Fsa>\u2019\n   27 |     });\n      |      ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from /tmp/tmpn09wc91v/temp.cpp:1:\n/usr/include/c++/9/bits/regex.h:2436:5: note: candidate: \u2018template<class _Rx_traits, class _Ch_type, class _St, class _Sa> std::__cxx11::basic_string<_Ch_type, _St, _Sa> std::regex_replace(const std::__cxx11::basic_string<_Ch_type, _St, _Sa>&, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&, const _Ch_type*, std::regex_constants::match_flag_type)\u2019\n 2436 |     regex_replace(const basic_string<_Ch_type, _St, _Sa>& __s,\n      |     ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2436:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn09wc91v/temp.cpp:27:6: note:   mismatched types \u2018const _Ch_type*\u2019 and \u2018snakeToCamel(std::string)::<lambda(const smatch&)>\u2019\n   27 |     });\n      |      ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from /tmp/tmpn09wc91v/temp.cpp:1:\n/usr/include/c++/9/bits/regex.h:2462:5: note: candidate: \u2018template<class _Rx_traits, class _Ch_type, class _St, class _Sa> std::__cxx11::basic_string<_Ch_type> std::regex_replace(const _Ch_type*, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&, const std::__cxx11::basic_string<_Ch_type, _St, _Sa>&, std::regex_constants::match_flag_type)\u2019\n 2462 |     regex_replace(const _Ch_type* __s,\n      |     ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2462:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn09wc91v/temp.cpp:27:6: note:   mismatched types \u2018const _Ch_type*\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\n   27 |     });\n      |      ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from /tmp/tmpn09wc91v/temp.cpp:1:\n/usr/include/c++/9/bits/regex.h:2488:5: note: candidate: \u2018template<class _Rx_traits, class _Ch_type> std::__cxx11::basic_string<_Ch_type> std::regex_replace(const _Ch_type*, const std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&, const _Ch_type*, std::regex_constants::match_flag_type)\u2019\n 2488 |     regex_replace(const _Ch_type* __s,\n      |     ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2488:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn09wc91v/temp.cpp:27:6: note:   mismatched types \u2018const _Ch_type*\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\n   27 |     });\n      |      ^\n", "passed": false}
{"task_id": "MBCPP/412", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove odd numbers from a given list.\n * > removeOdd(vector<int>{1, 2, 3})\n * {2}\n * > removeOdd(vector<int>{2, 4, 6})\n * {2, 4, 6}\n * > removeOdd(vector<int>{10, 20, 3})\n * {10, 20}\n */\nvector<int> removeOdd(vector<int> l) {\nvector<int> result;\nfor (int x : l) {\nif (x % 2 == 0) {\nresult.push_back(x);\n}\n}\nreturn result;", "entry_point": "removeOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/414", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the value exists in a sequence or not.\n * > overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9})\n * false\n * > overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * false\n * > overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5})\n * true\n */\nbool overlapping(vector<int> list1, vector<int> list2) {\nfor (int i = 0; i < list1.size(); i++) {\n        for (int j = 0; j < list2.size(); j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;", "entry_point": "overlapping", "result": "passed", "passed": true}
{"task_id": "MBCPP/415", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find a pair with highest product from a given array of integers.\n * > maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4})\n * {7, 8}\n * > maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6})\n * {-4, -6}\n * > maxProduct(vector<int>{1, 2, 3})\n * {2, 3}\n */\nvector<int> maxProduct(vector<int> arr) {\nif (arr.size() < 2) {\n        return {}; // Or throw an exception, as a pair cannot be formed.\n    }\n\n    int max1 = INT_MIN, max2 = INT_MIN;\n    int min1 = INT_MAX, min2 = INT_MAX;\n\n    for (int x : arr) {\n        if (x > max1) {\n            max2 = max1;\n            max1 = x;\n        } else if (x > max2) {\n            max2 = x;\n        }\n\n        if (x < min1) {\n            min2 = min1;\n            min1 = x;\n        } else if (x < min2) {\n            min2 = x;\n        }\n    }\n\n    if ((long long)max1 * max2 >= (long long)min1 * min2) {\n        return {max2, max1};\n    } else {\n        return {min1, min2};\n    }", "entry_point": "maxProduct", "result": "Compilation failed: /tmp/tmp894wk5an/temp.cpp: In function \u2018std::vector<int> maxProduct(std::vector<int>)\u2019:\n/tmp/tmp894wk5an/temp.cpp:45:1: error: a template declaration cannot appear at block scope\n   45 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp894wk5an/temp.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp894wk5an/temp.cpp:15:41: note: to match this \u2018{\u2019\n   15 | vector<int> maxProduct(vector<int> arr) {\n      |                                         ^\n", "passed": false}
{"task_id": "MBCPP/416", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n * > breaksum(12)\n * 13\n * > breaksum(24)\n * 27\n * > breaksum(23)\n * 23\n */\nint breaksum(int n) {\nif (n == 0 || n == 1)\n        return n;\n    return max(n, breaksum(n/2) + breaksum(n/3) + breaksum(n/4));", "entry_point": "breaksum", "result": "passed", "passed": true}
{"task_id": "MBCPP/417", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common first element in given list of tuple.\n * > groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}})\n * {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}\n * > groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}\n * > groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}})\n * {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}\n */\nvector<vector<string>> groupTuples(vector<vector<string>> input) {\nmap<string, vector<stringng>> grouped_map;\nfor (const auto& tuple : input) {\nif (!tuple.empty()) {\ngrouped_map[tuple[0]].push_back(tuple[1]);\n}\n}\n\n\nvector<vector<string>> result;\nfor (const auto& pair : grouped_map) {\n    vector<string> current_group;\n    current_group.push_back(pair.first);\n    for (const auto& element : pair.second) {\n        current_group.push_back(element);\n    }\n    result.push_back(current_group);\n}\nreturn result;", "entry_point": "groupTuples", "result": "Compilation failed: /tmp/tmp63nxp9nf/temp.cpp: In function \u2018std::vector<std::vector<std::__cxx11::basic_string<char> > > groupTuples(std::vector<std::vector<std::__cxx11::basic_string<char> > >)\u2019:\n/tmp/tmp63nxp9nf/temp.cpp:16:20: error: \u2018stringng\u2019 was not declared in this scope\n   16 | map<string, vector<stringng>> grouped_map;\n      |                    ^~~~~~~~\n/tmp/tmp63nxp9nf/temp.cpp:16:20: error: template argument 1 is invalid\n/tmp/tmp63nxp9nf/temp.cpp:16:20: error: template argument 2 is invalid\n/tmp/tmp63nxp9nf/temp.cpp:16:28: error: template argument 2 is invalid\n   16 | map<string, vector<stringng>> grouped_map;\n      |                            ^~\n/tmp/tmp63nxp9nf/temp.cpp:16:28: error: template argument 4 is invalid\n/tmp/tmp63nxp9nf/temp.cpp:19:12: error: no match for \u2018operator[]\u2019 (operand types are \u2018int\u2019 and \u2018const value_type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019})\n   19 | grouped_map[tuple[0]].push_back(tuple[1]);\n      |            ^\n/tmp/tmp63nxp9nf/temp.cpp:25:25: error: \u2018begin\u2019 was not declared in this scope; did you mean \u2018std::begin\u2019?\n   25 | for (const auto& pair : grouped_map) {\n      |                         ^~~~~~~~~~~\n      |                         std::begin\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from /tmp/tmp63nxp9nf/temp.cpp:1:\n/usr/include/c++/9/valarray:1224:5: note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>& __va)\n      |     ^~~~~\n/tmp/tmp63nxp9nf/temp.cpp:25:25: error: \u2018end\u2019 was not declared in this scope; did you mean \u2018std::end\u2019?\n   25 | for (const auto& pair : grouped_map) {\n      |                         ^~~~~~~~~~~\n      |                         std::end\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from /tmp/tmp63nxp9nf/temp.cpp:1:\n/usr/include/c++/9/valarray:1244:5: note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>& __va)\n      |     ^~~\n", "passed": false}
{"task_id": "MBCPP/419", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n * > roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5})\n * 243\n * > roundAndSum(vector<double>{25.0, 56.7, 89.2})\n * 513\n */\nint roundAndSum(vector<double> list1) {\nint sum = 0;\n    for (double num : list1) {\n        sum += round(num);\n    }\n    return sum * list1.size();", "entry_point": "roundAndSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/420", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n even natural numbers.\n * > cubeSum(2)\n * 72\n * > cubeSum(3)\n * 288\n * > cubeSum(4)\n * 800\n */\nint cubeSum(int n) {\nint sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(2 * i, 3);\n    }\n    return sum;", "entry_point": "cubeSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/423", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve gold mine problem.\n * > getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4)\n * 16\n * > getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2)\n * 70\n * > getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2)\n * 13\n */\nint getMaxgold(vector<vector<int>> gold, int m, int n) {\nvector<vector<int>> dp(m, vector<int>(n));\n\n\n// Initialize the last column of dp table\nfor (int i = 0; i < m; i++) {\n    dp[i][n - 1] = gold[i][n - 1];\n}\n\n// Fill the dp table from right to left\nfor (int col = n - 2; col >= 0; col--) {\n    for (int row = 0; row < m; row++) {\n        // Gold collected by moving right\n        int right = dp[row][col + 1];\n\n        // Gold collected by moving right-up\n        int right_up = (row == 0) ? 0 : dp[row - 1][col + 1];\n\n        // Gold collected by moving right-down\n        int right_down = (row == m - 1) ? 0 : dp[row + 1][col + 1];\n\n        dp[row][col] = gold[row][col] + max({right, right_up, right_down});\n    }\n}\n\n// Find the maximum gold in the first column\nint max_gold = 0;\nfor (int i = 0; i < m; i++) {\n    max_gold = max(max_gold, dp[i][0]);\n}\n\nreturn max_gold;", "entry_point": "getMaxgold", "result": "passed", "passed": true}
{"task_id": "MBCPP/424", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract only the rear index element of each string in the given tuple.\n * > extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")})\n * {string(\"s\"), string(\"r\"), string(\"s\")}\n * > extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")})\n * {string(\"e\"), string(\"r\"), string(\"e\")}\n * > extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")})\n * {string(\"a\"), string(\"t\"), string(\"o\")}\n */\nvector<string> extractRear(vector<string> testTuple) {\nvector<string> result;\nfor (const string& s : testTuple) {\nif (!s.empty()) {\nresult.push_back(string(1, s.back()));\n} else {\nresult.push_back(\"\"); // Handle empty strings if needed\n}\n}\nreturn result;", "entry_point": "extractRear", "result": "passed", "passed": true}
{"task_id": "MBCPP/426", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter odd numbers using lambda function.\n * > filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 3, 5, 7, 9}\n * > filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {45, 67, 93}\n * > filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {5, 7, 9, 3}\n */\nvector<int> filterOddnumbers(vector<int> nums) {\nvector<int> oddNumbers;\nfor (int num : nums) {\nif (num % 2 != 0) {\noddNumbers.push_back(num);\n}\n}\nreturn oddNumbers;", "entry_point": "filterOddnumbers", "result": "passed", "passed": true}
{"task_id": "MBCPP/427", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of\u806f\u76df-mm-dd format to dd-mm-yyyy format by using regex.\n * > changeDateFormat(string(\"2026-01-02\"))\n * string(\"02-01-2026\")\n * > changeDateFormat(string(\"2020-11-13\"))\n * string(\"13-11-2020\")\n * > changeDateFormat(string(\"2021-04-26\"))\n * string(\"26-04-2021\")\n */\nstring changeDateFormat(string dt) {\nstd::regex date_regex(\"(d{4})-(d{2})-(d{2})\");\n    return std::regex_replace(dt, date_regex, \"$3-$2-$1\");", "entry_point": "changeDateFormat", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/428", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using shell sort.\n * > shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95})\n * {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}\n * > shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68})\n * {22, 24, 34, 39, 68, 73, 87}\n * > shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74})\n * {16, 30, 32, 74, 82, 83, 96}\n */\nvector<int> shellSort(vector<int> myList) {\nint n = myList.size();\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i += 1) {\n            int temp = myList[i];\n            int j;\n            for (j = i; j >= gap && myList[j - gap] > temp; j -= gap) {\n                myList[j] = myList[j - gap];\n            }\n            myList[j] = temp;\n        }\n    }\n    return myList;", "entry_point": "shellSort", "result": "passed", "passed": true}
{"task_id": "MBCPP/429", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the elementwise and tuples from the given two tuples.\n * > andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {0, 0, 2, 1}\n * > andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8})\n * {1, 2, 3, 0}\n * > andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17})\n * {0, 9, 10, 0}\n */\nvector<int> andTuples(vector<int> testTup1, vector<int> testTup2) {\nvector<int> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nresult.push_back(testTup1[i] & testTup2[i]);\n}\nreturn result;", "entry_point": "andTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/430", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the directrix of a parabola.\n * > parabolaDirectrix(5, 3, 2)\n * -198\n * > parabolaDirectrix(9, 8, 4)\n * -2336\n * > parabolaDirectrix(2, 4, 6)\n * -130\n */\nint parabolaDirectrix(int a, int b, int c) {\n    return c - (b * b + 1) * 4 * a;", "entry_point": "parabolaDirectrix", "result": "passed", "passed": true}
{"task_id": "MBCPP/433", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the entered number is greater than the elements of the given array.\n * > checkGreater(vector<int>{1, 2, 3, 4, 5}, 4)\n * string(\"No, entered number is less than those in the array\")\n * > checkGreater(vector<int>{2, 3, 4, 5, 6}, 8)\n * string(\"Yes, the entered number is greater than those in the array\")\n * > checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11)\n * string(\"Yes, the entered number is greater than those in the array\")\n */\nstring checkGreater(vector<int> arr, int number) {\nfor (int x : arr) {\n        if (number <= x) {\n            return \"No, entered number is less than those in the array\";\n        }\n    }\n    return \"Yes, the entered number is greater than those in the array\";", "entry_point": "checkGreater", "result": "passed", "passed": true}
{"task_id": "MBCPP/434", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n * > textMatchOne(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"abba\"))\n * string(\"Found a match!\")\n */\nstring textMatchOne(string text) {\nregex r(\"ab+\");\n    if (regex_search(text, r)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatchOne", "result": "Compilation failed: /tmp/tmpaht34gkr/temp.cpp: In function \u2018std::string textMatchOne(std::string)\u2019:\n/tmp/tmpaht34gkr/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpaht34gkr/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpaht34gkr/temp.cpp:15:34: note: to match this \u2018{\u2019\n   15 | string textMatchOne(string text) {\n      |                                  ^\n", "passed": false}
{"task_id": "MBCPP/435", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit of a given number.\n * > lastDigit(123)\n * 3\n * > lastDigit(25)\n * 5\n * > lastDigit(30)\n * 0\n */\nint lastDigit(int n) {\nreturn n % 10;", "entry_point": "lastDigit", "result": "passed", "passed": true}
{"task_id": "MBCPP/436", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print negative numbers in a list.\n * > negNos(vector<int>{-1, 4, 5, -6})\n * {-1, -6}\n * > negNos(vector<int>{-1, -2, 3, 4})\n * {-1, -2}\n * > negNos(vector<int>{-7, -6, 8, 9})\n * {-7, -6}\n */\nvector<int> negNos(vector<int> list1) {\nvector<int> negativeNumbers;\nfor (int num : list1) {\nif (num < 0) {\nnegativeNumbers.push_back(num);\n}\n}\nreturn negativeNumbers;", "entry_point": "negNos", "result": "passed", "passed": true}
{"task_id": "MBCPP/437", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove odd characters in a string.\n * > removeOdd(string(\"python\"))\n * string(\"yhn\")\n * > removeOdd(string(\"program\"))\n * string(\"rga\")\n * > removeOdd(string(\"language\"))\n * string(\"agae\")\n */\nstring removeOdd(string str1) {\nstring result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if ((i + 1) % 2 == 0) { // Check if the character's position is even (1-indexed)\n            result += str1[i];\n        }\n    }\n    return result;", "entry_point": "removeOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/438", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count bidirectional tuple pairs.\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"3\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"2\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}})\n * string(\"4\")\n */\nstring countBidirectional(vector<vector<int>> testList) {\nmap<pair<int, int>, int> counts;\n    for (const auto& p : testList) {\n        counts[{p[0], p[1]}]++;\n    }\n\n    int bidirectional_pairs = 0;\n    for (const auto& entry : counts) {\n        pair<int, int> current_pair = entry.first;\n        int current_count = entry.second;\n\n        pair<int, int> reversed_pair = {current_pair.second, current_pair.first};\n\n        if (current_pair.first < current_pair.second) {\n            // If current_pair is (A, B) where A < B, look for (B, A).\n            if (counts.count(reversed_pair)) {\n                bidirectional_pairs += current_count * counts[reversed_pair];\n            }\n        } else if (current_pair.first == current_pair.second) {\n            // If current_pair is (A, A). Its reverse is also (A, A).\n            // Each instance of (A, A) can form a bidirectional pair with any other distinct instance of (A, A).\n            // Number of ways to choose 2 distinct (A,A) instances from 'current_count' is C(current_count, 2).\n            bidirectional_pairs += (long long)current_count * (current_count - 1) / 2;\n        }\n        // If current_pair.first > current_pair.second, it means its reversed_pair (where first < second)\n        // would have been processed already. So we skip this case to avoid double counting.\n    }\n\n    return to_string(bidirectional_pairs);", "entry_point": "countBidirectional", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 2 did not pass.\n", "passed": false}
{"task_id": "MBCPP/439", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list of multiple integers into a single integer.\n * > multipleToSingle(vector<int>{11, 33, 50})\n * 113350\n * > multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6})\n * -123456\n * > multipleToSingle(vector<int>{10, 15, 20, 25})\n * 10152025\n */\nint multipleToSingle(vector<int> l) {\nstring s = \"\";\n    for (int x : l) {\n        s += to_string(x);\n    }\n    return stoi(s);", "entry_point": "multipleToSingle", "result": "passed", "passed": true}
{"task_id": "MBCPP/441", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cube.\n * > surfaceareaCube(5)\n * 150\n * > surfaceareaCube(3)\n * 54\n * > surfaceareaCube(10)\n * 600\n */\nint surfaceareaCube(int l) {\nreturn 6 * l * l;", "entry_point": "surfaceareaCube", "result": "passed", "passed": true}
{"task_id": "MBCPP/442", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of positive numbers in an array of integers.\n * > positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.54\n * > positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.69\n * > positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.56\n */\ndouble positiveCount(vector<int> nums) {\nint positive_count = 0;\n    for (int num : nums) {\n        if (num > 0) {\n            positive_count++;\n        }\n    }\n    if (nums.empty()) {\n        return 0.0;\n    }\n    return stati", "entry_point": "positiveCount", "result": "Compilation failed: /tmp/tmpumipkce5/temp.cpp: In function \u2018double positiveCount(std::vector<int>)\u2019:\n/tmp/tmpumipkce5/temp.cpp:25:12: error: \u2018stati\u2019 was not declared in this scope; did you mean \u2018static\u2019?\n   25 |     return stati\n      |            ^~~~~\n      |            static\n/tmp/tmpumipkce5/temp.cpp:25:17: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   25 |     return stati\n      |                 ^\n      |                 ;\n   26 | }\n      | ~                \n", "passed": false}
{"task_id": "MBCPP/443", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest negative number from the given list.\n * > largestNeg(vector<int>{1, 2, 3, -4, -6})\n * -6\n * > largestNeg(vector<int>{1, 2, 3, -8, -9})\n * -9\n * > largestNeg(vector<int>{1, 2, 3, 4, -1})\n * -1\n */\nint largestNeg(vector<int> list1) {\nint largest_neg = INT_MIN; // Initialize with the smallest possible integer value\n    bool found_negative = false;\n\n    for (int num : list1) {\n        if (num < 0) {\n            if (!found_negative) {\n                largest_neg = num;\n                found_negative = true;\n            } else if (num > largest_neg) { // For negative numbers, \"largest\" means closest to zero\n                largest_neg = num;\n            }\n        }\n    }\n\n    // The problem statement implies there will always be a negative number.\n    // If there were no negative numbers, returning INT_MIN or throwing an exception\n    // would be alternatives. Given the examples, we assume at least one negative.\n    return largest_neg;", "entry_point": "largestNeg", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/444", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to trim each tuple by k in the given tuple list.\n * > trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2)\n * string(\"[(2,), (9,), (2,), (2,)]\")\n * > trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1)\n * string(\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")\n * > trimTuple(vector<vector<int>>{{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1)\n * string(\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")\n */\nstring trimTuple(vector<vector<int>> testList, int k) {\nstringstream ss;\n    ss << \"[\";\n    for (int i = 0; i < testList.size(); ++i) {\n        ss << \"(\";\n        for (int j = k; j < testList[i].size() - k; ++j) {\n            ss << testList[i][j];\n            if (j < testList[i].size() - k - 1) {\n                ss << \", \";\n            }\n        }\n        ss << \")\";\n        if (i < testList.size() - 1) {\n            ss << \", \";\n        }\n    }\n    ss << \"]\";\n    return ss.str();", "entry_point": "trimTuple", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/445", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n * > indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 21}, {12, 45}, {2, 9}, {7, 30}}\n * > indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{14, 32}, {20, 60}, {6, 20}, {16, 44}}\n * > indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{24, 45}, {30, 77}, {12, 33}, {27, 60}}\n */\nvector<vector<int>> indexMultiplication(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\nvector<vector<int>> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nvector<int> temp;\nfor (size_t j = 0; j < testTup1[i].size(); ++j) {\ntemp.push_back(testTup1[i][j] * testTup2[i][j]);\n}\nresult.push_back(temp);\n}\nreturn result;", "entry_point": "indexMultiplication", "result": "passed", "passed": true}
{"task_id": "MBCPP/447", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find cubes of individual elements in a list using lambda function.\n * > cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n * > cubeNums(vector<int>{10, 20, 30})\n * {1000, 8000, 27000}\n * > cubeNums(vector<int>{12, 15})\n * {1728, 3375}\n */\nvector<int> cubeNums(vector<int> nums) {\nvector<int> result;\nfor_each(nums.begin(), nums.end(), [&](int n){\nresult.push_back(n * n * n);\n});\nreturn result;", "entry_point": "cubeNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/448", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of perrin numbers.\n * > calSum(9)\n * 49\n * > calSum(10)\n * 66\n * > calSum(11)\n * 88\n */\nint calSum(int n) {\nint a = 3, b = 0, c = 2;\n    if (n == 0)\n        return 3;\n    if (n == 1)\n        return 3;\n    if (n == 2)\n        return 5;\n\n    int sum = 5; // Sum of P(0), P(1), P(2)\n    for (int i = 3; i <= n; ++i) {\n        int nextPerrin = a + b;\n        sum += nextPerrin;\n        a = b;\n        b = c;\n        c = nextPerrin;\n    }\n    return sum;", "entry_point": "calSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/449", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if 3 points are given.\n * > checkTriangle(1, 5, 2, 5, 4, 6)\n * string(\"Yes\")\n * > checkTriangle(1, 1, 1, 4, 1, 5)\n * string(\"No\")\n * > checkTriangle(1, 1, 1, 1, 1, 1)\n * string(\"No\")\n */\nstring checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\ndouble d1 = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\n    double d2 = sqrt(pow(x3 - x2, 2) + pow(y3 - y2, 2));\n    double d3 = sqrt(pow(x1 - x3, 2) + pow(y1 - y3, 2));\n\n    if (d1 + d2 > d3 && d2 + d3 > d1 && d1 + d3 > d2) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }", "entry_point": "checkTriangle", "result": "Compilation failed: /tmp/tmpy8sq2sxk/temp.cpp: In function \u2018std::string checkTriangle(int, int, int, int, int, int)\u2019:\n/tmp/tmpy8sq2sxk/temp.cpp:26:1: error: a template declaration cannot appear at block scope\n   26 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpy8sq2sxk/temp.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpy8sq2sxk/temp.cpp:15:70: note: to match this \u2018{\u2019\n   15 | string checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n      |                                                                      ^\n", "passed": false}
{"task_id": "MBCPP/450", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified size of strings from a give list of string values.\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8)\n * {string(\"practice\"), string(\"solution\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6)\n * {string(\"Python\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9)\n * {string(\"exercises\")}\n */\nvector<string> extractString(vector<string> str, int l) {\nvector<string> result;\nfor (string s : str) {\nif (s.length() == l) {\nresult.push_back(s);\n}\n}\nreturn result;", "entry_point": "extractString", "result": "passed", "passed": true}
{"task_id": "MBCPP/451", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from the given string using regex.\n * > removeWhitespaces(string(\" Google    Flutter \"))\n * string(\"GoogleFlutter\")\n * > removeWhitespaces(string(\" Google    Dart \"))\n * string(\"GoogleDart\")\n * > removeWhitespaces(string(\" iOS    Swift \"))\n * string(\"iOSSwift\")\n */\nstring removeWhitespaces(string text1) {\nstd::string result = std::regex_replace(text1, std::regex(\"s+\"), \"\");\n    return result;", "entry_point": "removeWhitespaces", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/453", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even factors of a number.\n * > sumoffactors(18)\n * 26\n * > sumoffactors(30)\n * 48\n * > sumoffactors(6)\n * 8\n */\nint sumoffactors(int n) {\nint sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0 && i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;", "entry_point": "sumoffactors", "result": "passed", "passed": true}
{"task_id": "MBCPP/454", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z'.\n * > textMatchWordz(string(\"pythonz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"xyz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWordz(string text) {\nregex r(\"z\");\n    if (regex_search(text, r)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatchWordz", "result": "Compilation failed: /tmp/tmpkuldy_68/temp.cpp: In function \u2018std::string textMatchWordz(std::string)\u2019:\n/tmp/tmpkuldy_68/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpkuldy_68/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpkuldy_68/temp.cpp:15:36: note: to match this \u2018{\u2019\n   15 | string textMatchWordz(string text) {\n      |                                    ^\n", "passed": false}
{"task_id": "MBCPP/455", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 31 days or not.\n * > checkMonthnumbNumber(5)\n * true\n * > checkMonthnumbNumber(2)\n * false\n * > checkMonthnumbNumber(6)\n * false\n */\nbool checkMonthnumbNumber(int monthnum2) {\nreturn (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12);", "entry_point": "checkMonthnumbNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/456", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse strings in a given list of string values.\n * > reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")})\n * {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}\n * > reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")})\n * {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}\n * > reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")})\n * {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}\n */\nvector<string> reverseStringList(vector<string> stringlist) {\nfor (string &s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;", "entry_point": "reverseStringList", "result": "passed", "passed": true}
{"task_id": "MBCPP/458", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rectangle.\n * > rectangleArea(10, 20)\n * 200\n * > rectangleArea(10, 5)\n * 50\n * > rectangleArea(4, 2)\n * 8\n */\nint rectangleArea(int l, int b) {\nreturn l * b;", "entry_point": "rectangleArea", "result": "passed", "passed": true}
{"task_id": "MBCPP/459", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove uppercase substrings from a given string by using regex.\n * > removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"))\n * string(\"cstyoravoitshos\")\n * > removeUppercase(string(\"wAtchTheinTernEtrAdIo\"))\n * string(\"wtchheinerntrdo\")\n * > removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"))\n * string(\"oiceachndreomendaion\")\n */\nstring removeUppercase(string str1) {\nstd::regex pattern(\"[A-Z]+\");\n    return std::regex_replace(str1, pattern, \"\");", "entry_point": "removeUppercase", "result": "passed", "passed": true}
{"task_id": "MBCPP/460", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the first element of each sublist.\n * > extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}})\n * {1, 3, 6}\n * > extract(vector<vector<int>>{{1, 2, 3}, {4, 5}})\n * {1, 4}\n * > extract(vector<vector<int>>{{9, 8, 1}, {1, 2}})\n * {9, 1}\n */\nvector<int> extract(vector<vector<int>> lst) {\nvector<int> result;\nfor (const auto& sublist : lst) {\nif (!sublist.empty()) {\nresult.push_back(sublist[0]);\n}\n}\nreturn result;", "entry_point": "extract", "result": "passed", "passed": true}
{"task_id": "MBCPP/461", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the upper case characters in a given string.\n * > upperCtr(string(\"PYthon\"))\n * 1\n * > upperCtr(string(\"BigData\"))\n * 1\n * > upperCtr(string(\"program\"))\n * 0\n */\nint upperCtr(string str) {\nint count = 0;\n    for (char c : str) {\n        if (isupper(c)) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "upperCtr", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/463", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product subarray of the given array.\n * > maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2})\n * 112\n * > maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2})\n * 180\n * > maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3})\n * 80\n */\nint maxSubarrayProduct(vector<int> arr) {\nint n = arr.size();\n    if (n == 0) {\n        return 0;\n    }\n\n    int max_so_far = arr[0];\n    int min_so_far = arr[0];\n    int result = max_so_far;\n\n    for (int i = 1; i < n; i++) {\n        int curr = arr[i];\n        int temp_max = max({curr, max_so_far * curr, min_so_far * curr});\n        min_so_far = min({curr, max_so_far * curr, min_so_far * curr});\n\n        max_so_far = temp_max;\n\n        result = max(result, max_so_far);\n    }\n\n    return result;", "entry_point": "maxSubarrayProduct", "result": "passed", "passed": true}
{"task_id": "MBCPP/464", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all values are same in a dictionary.\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10)\n * false\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12)\n * true\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5)\n * false\n */\nbool checkValue(unordered_map<string, int> dict, int n) {\nfor (auto& it : dict) {\n        if (it.second != n) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkValue", "result": "passed", "passed": true}
{"task_id": "MBCPP/466", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the peak element in the given array.\n * > findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6)\n * 2\n * > findPeak(vector<int>{2, 3, 4, 5, 6}, 5)\n * 4\n * > findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6)\n * 5\n */\nint findPeak(vector<int> arr, int n) {\nint left = 0;\n    int right = n - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] < arr[mid + 1]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;", "entry_point": "findPeak", "result": "passed", "passed": true}
{"task_id": "MBCPP/467", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert decimal number to octal number.\n * > decimalToOctal(10)\n * 12\n * > decimalToOctal(2)\n * 2\n * > decimalToOctal(33)\n * 41\n */\nint decimalToOctal(int decinum) {\nint octalNum = 0;\n    int countval = 1;\n\n    while (decinum != 0) {\n        int remainder = decinum % 8;\n        octalNum += remainder * countval;\n        countval *= 10;\n        decinum /= 8;\n    }\n    return octalNum;", "entry_point": "decimalToOctal", "result": "passed", "passed": true}
{"task_id": "MBCPP/468", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n * > maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6)\n * 45000\n * > maxProduct(vector<int>{4, 42, 55, 68, 80}, 5)\n * 50265600\n * > maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8)\n * 21780000\n */\nint maxProduct(vector<int> arr, int n) {\nvector<long long> dp(n, 0);\nlong long overallMax = 0;\n\n\nfor (int i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (int j = 0; j < i; j++) {\n        if (arr[i] > arr[j]) {\n            dp[i] = max(dp[i], (long long)arr[i] * dp[j]);\n        }\n    }\n    overallMax = max(overallMax, dp[i]);\n}\nreturn overallMax;", "entry_point": "maxProduct", "result": "passed", "passed": true}
{"task_id": "MBCPP/469", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum profit earned from a maximum of k stock transactions\n * > maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3)\n * 10\n * > maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2)\n * 7\n * > maxProfit(vector<int>{10, 6, 8, 4, 2}, 2)\n * 2\n */\nint maxProfit(vector<int> price, int k) {\nint n = price.size();\n    if (n == 0 || k == 0) {\n        return 0;\n    }\n\n    // If k is large enough, it's equivalent to unlimited transactions\n    // In this case, we can simply sum up all positive differences\n    if (k >= n / 2) {\n        int max_profit = 0;\n        for (int i = 1; i < n; ++i) {\n            if (price[i] > price[i - 1]) {\n                max_profit += price[i] - price[i - 1];\n            }\n        }\n        return max_profit;\n    }\n\n    // dp[i][j] represents the maximum profit using at most i transactions up to day j-1\n    // We can optimize space by only storing the previous transaction's data.\n    // buy[j] will store the maximum profit after j transactions, ending with a buy (or holding)\n    // sell[j] will store the maximum profit after j transactions, ending with a sell (or not holding)\n    vector<int> buy(k + 1, INT_MIN);\n    vector<int> sell(k + 1, 0);\n\n    for (int p : price) {\n        for (int j = k; j >= 1; --j) {\n            sell[j] = max(sell[j], buy[j] + p);       // Option to sell today\n            buy[j] = max(buy[j], sell[j - 1] - p);     // Option to buy today\n        }\n    }\n\n    return sell[k];", "entry_point": "maxProfit", "result": "passed", "passed": true}
{"task_id": "MBCPP/470", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the pairwise addition of the elements of the given tuples.\n * > addPairwise(vector<int>{1, 5, 7, 8, 10})\n * {6, 12, 15, 18}\n * > addPairwise(vector<int>{2, 6, 8, 9, 11})\n * {8, 14, 17, 20}\n * > addPairwise(vector<int>{3, 7, 9, 10, 12})\n * {10, 16, 19, 22}\n */\nvector<int> addPairwise(vector<int> testTup) {\nvector<int> result;\nif (testTup.empty()) {\nreturn result;\n}\nfor (size_t i = 0; i < testTup.size() - 1; ++i) {\nresult.push_back(testTup[i] + testTup[i+1]);\n}\nreturn result;", "entry_point": "addPairwise", "result": "passed", "passed": true}
{"task_id": "MBCPP/471", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of array multiplication divided by n.\n * > findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11)\n * 9\n * > findRemainder(vector<int>{1, 1, 1}, 3, 1)\n * 0\n * > findRemainder(vector<int>{1, 2, 1}, 3, 2)\n * 0\n */\nint findRemainder(vector<int> arr, int lens, int n) {\nlong long product = 1;\n    for (int i = 0; i < lens; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;", "entry_point": "findRemainder", "result": "passed", "passed": true}
{"task_id": "MBCPP/472", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given list contains consecutive numbers or not.\n * > checkConsecutive(vector<int>{1, 2, 3, 4, 5})\n * true\n * > checkConsecutive(vector<int>{1, 2, 3, 5, 6})\n * false\n * > checkConsecutive(vector<int>{1, 2, 1})\n * false\n */\nbool checkConsecutive(vector<int> l) {\nif (l.size() <= 1) {\n        return true;\n    }\n    sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1] + 1) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkConsecutive", "result": "passed", "passed": true}
{"task_id": "MBCPP/474", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace characters in a string.\n * > replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"))\n * string(\"pollgon\")\n * > replaceChar(string(\"character\"), string(\"c\"), string(\"a\"))\n * string(\"aharaater\")\n * > replaceChar(string(\"python\"), string(\"l\"), string(\"a\"))\n * string(\"python\")\n */\nstring replaceChar(string str1, string ch, string newch) {\nfor (int i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch[0]) {\n            str1[i] = newch[0];\n        }\n    }\n    return str1;", "entry_point": "replaceChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/476", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the largest and smallest value in a given array.\n * > bigSum(vector<int>{1, 2, 3})\n * 4\n * > bigSum(vector<int>{-1, 2, 3, 4})\n * 3\n * > bigSum(vector<int>{2, 3, 6})\n * 8\n */\nint bigSum(vector<int> nums) {\nif (nums.empty()) {\n        return 0; \n    }\n    \n    int smallest = nums[0];\n    int largest = nums[0];\n    \n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] < smallest) {\n            smallest = nums[i];\n        }\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n    }\n    \n    return smallest + largest;", "entry_point": "bigSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/477", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to lower case.\n * > isLower(string(\"InValid\"))\n * string(\"invalid\")\n * > isLower(string(\"TruE\"))\n * string(\"true\")\n * > isLower(string(\"SenTenCE\"))\n * string(\"sentence\")\n */\nstring isLower(string str) {\ntransform(str.begin(), str.end(), str.begin(), ::tolower);\n    return str;", "entry_point": "isLower", "result": "passed", "passed": true}
{"task_id": "MBCPP/478", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string.\n * > removeLowercase(string(\"PYTHon\"))\n * string(\"PYTH\")\n * > removeLowercase(string(\"FInD\"))\n * string(\"FID\")\n * > removeLowercase(string(\"STRinG\"))\n * string(\"STRG\")\n */\nstring removeLowercase(string str1) {\nstring result = \"\";\n    for (char c : str1) {\n        if (!islower(c)) {\n            result += c;\n        }\n    }\n    return result;", "entry_point": "removeLowercase", "result": "passed", "passed": true}
{"task_id": "MBCPP/479", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit of a given number.\n * > firstDigit(123)\n * 1\n * > firstDigit(456)\n * 4\n * > firstDigit(12)\n * 1\n */\nint firstDigit(int n) {\nwhile (n >= 10) {\n        n /= 10;\n    }\n    return n;", "entry_point": "firstDigit", "result": "passed", "passed": true}
{"task_id": "MBCPP/480", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occurring character in a given string.\n * > getMaxOccuringChar(string(\"data\"))\n * string(\"a\")\n * > getMaxOccuringChar(string(\"create\"))\n * string(\"e\")\n * > getMaxOccuringChar(string(\"brilliant girl\"))\n * string(\"i\")\n */\nstring getMaxOccuringChar(string str1) {\nint count[256] = {0}; // Assuming ASCII characters\n    int max_freq = 0;\n    char result_char = '0';\n\n    for (char c : str1) {\n        count[c]++;\n        if (count[c] > max_freq) {\n            max_freq = count[c];\n            result_char = c;\n        } else if (count[c] == max_freq) {\n            // If frequencies are same, choose the lexicographically smaller character\n            if (result_char == '0' || c < result_char) {\n                result_char = c;\n            }\n        }\n    }\n    return string(1, result_char);", "entry_point": "getMaxOccuringChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/481", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9)\n * true\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30)\n * false\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15)\n * true\n */\nbool isSubsetSum(vector<int> set, int n, int sum) {\nbool dp[n + 1][sum + 1];\n\n    // If sum is 0, then answer is true\n    for (int i = 0; i <= n; i++)\n        dp[i][0] = true;\n\n    // If sum is not 0 and set is empty, then answer is false\n    for (int i = 1; i <= sum; i++)\n        dp[0][i] = false;\n\n    // Fill the dp table in bottom up manner\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= sum; j++) {\n            if (j < set[i - 1])\n                dp[i][j] = dp[i - 1][j];\n            else\n                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i - 1]];\n        }\n    }\n\n    return dp[n][sum];", "entry_point": "isSubsetSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/482", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n * > match(string(\"Geeks\"))\n * string(\"Yes\")\n * > match(string(\"geeksforGeeks\"))\n * string(\"Yes\")\n * > match(string(\"geeks\"))\n * string(\"No\")\n */\nstring match(string text) {\nregex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }", "entry_point": "match", "result": "Compilation failed: /tmp/tmpfotpjmxz/temp.cpp: In function \u2018std::string match(std::string)\u2019:\n/tmp/tmpfotpjmxz/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpfotpjmxz/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpfotpjmxz/temp.cpp:15:27: note: to match this \u2018{\u2019\n   15 | string match(string text) {\n      |                           ^\n", "passed": false}
{"task_id": "MBCPP/483", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first natural number whose factorial is divisible by x.\n * > firstFactorialDivisibleNumber(10)\n * 5\n * > firstFactorialDivisibleNumber(15)\n * 5\n * > firstFactorialDivisibleNumber(5)\n * 4\n */\nint firstFactorialDivisibleNumber(int x) {\nint i = 1;\n    long long fact = 1; // Use long long to prevent overflow for larger factorials\n    while (true) {\n        fact *= i;\n        if (fact % x == 0) {\n            return i;\n        }\n        i++;\n    }", "entry_point": "firstFactorialDivisibleNumber", "result": "Compilation failed: /tmp/tmpjfy94x71/temp.cpp: In function \u2018int firstFactorialDivisibleNumber(int)\u2019:\n/tmp/tmpjfy94x71/temp.cpp:26:1: error: a template declaration cannot appear at block scope\n   26 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpjfy94x71/temp.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpjfy94x71/temp.cpp:15:42: note: to match this \u2018{\u2019\n   15 | int firstFactorialDivisibleNumber(int x) {\n      |                                          ^\n", "passed": false}
{"task_id": "MBCPP/484", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the matching tuples from the given two tuples.\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}})\n * {{string(\"you\"), string(\"?\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}})\n * {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}})\n * {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}\n */\nvector<vector<string>> removeMatchingTuple(vector<vector<string>> testList1, vector<vector<string>> testList2) {\nvector<vector<string>> result;\nfor (const auto& tuple1 : testList1) {\nbool found = false;\nfor (const auto& tuple2 : testList2) {\nif (tuple1 == tuple2) {\nfound = true;\nbreak;\n}\n}\nif (!found) {\nresult.push_back(tuple1);\n}\n}\nreturn result;", "entry_point": "removeMatchingTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/485", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest palindromic number in the given array.\n * > largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4)\n * 54545\n * > largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6)\n * 5\n */\nint largestPalindrome(vector<int> a, int n) {\nauto isPalindrome = [](int num) {\n        if (num < 0) return false;\n        int original = num;\n        int reversed = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n        return original == reversed;\n    };\n\n    int largestPal = -1;\n    for (int i = 0; i < n; ++i) {\n        if (isPalindrome(a[i])) {\n            if (a[i] > largestPal) {\n                largestPal = a[i];\n            }\n        }\n    }\n    return largestPal;", "entry_point": "largestPalindrome", "result": "passed", "passed": true}
{"task_id": "MBCPP/486", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute binomial probability for the given number.\n * > binomialProbability(10, 5, 0.3333333333333333)\n * 0.13656454808718185\n * > binomialProbability(11, 6, 0.5)\n * 0.2255859375\n * > binomialProbability(12, 7, 0.6)\n * 0.227030335488\n */\ndouble binomialProbability(int n, int k, double p) {\ndouble combinations(int n, int k) {\n    if (k < 0 || k > n) {\n        return 0;\n    }\n    if (k == 0 || k == n) {\n        return 1.0;\n    }\n    if (k > n / 2) {\n        k = n - k;\n    }\n    double res = 1.0;\n    for (int i = 1; i <= k; ++i) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n\n    double q = 1.0 - p;\n    return combinations(n, k) * pow(p, k) * pow(q, n - k);", "entry_point": "binomialProbability", "result": "Compilation failed: /tmp/tmpp3uue_xy/temp.cpp: In function \u2018double binomialProbability(int, int, double)\u2019:\n/tmp/tmpp3uue_xy/temp.cpp:16:35: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | double combinations(int n, int k) {\n      |                                   ^\n/tmp/tmpp3uue_xy/temp.cpp:34:12: error: \u2018combinations\u2019 was not declared in this scope\n   34 |     return combinations(n, k) * pow(p, k) * pow(q, n - k);\n      |            ^~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/487", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n * > sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}})\n * {{2, 1}, {3, 2}, {1, 3}}\n * > sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}})\n * {{1, 1}, {3, 3}, {2, 4}}\n * > sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}})\n * {{4, 3}, {6, 7}, {3, 9}}\n */\nvector<vector<int>> sortTuple(vector<vector<int>> tup) {\nsort(tup.begin(), tup.end(), [](const vector<int>& a, const vector<int>& b) {\nreturn a[1] < b[1];\n});\nreturn tup;", "entry_point": "sortTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/488", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a pentagon.\n * > areaPentagon(5)\n * 43.01193501472417\n * > areaPentagon(10)\n * 172.0477400588967\n * > areaPentagon(15)\n * 387.10741513251753\n */\ndouble areaPentagon(int a) {\nreturn (5 * a * a) / (4 * tan(M_PI / 5));", "entry_point": "areaPentagon", "result": "passed", "passed": true}
{"task_id": "MBCPP/489", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the largest value in a given array.\n * > frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4})\n * 2\n * > frequencyOfLargest(3, vector<int>{5, 6, 5})\n * 1\n * > frequencyOfLargest(4, vector<int>{2, 7, 7, 7})\n * 3\n */\nint frequencyOfLargest(int n, vector<int> arr) {\nif (n == 0) {\n        return 0;\n    }\n\n    int max_val = arr[0];\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == max_val) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "frequencyOfLargest", "result": "passed", "passed": true}
{"task_id": "MBCPP/491", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of geometric progression series.\n * > sumGp(1, 5, 2)\n * 31\n * > sumGp(1, 5, 4)\n * 341\n * > sumGp(2, 6, 3)\n * 728\n */\nint sumGp(int a, int n, int r) {\nif (r == 1) {\n        return a * n;\n    } else {\n        return a * (pow(r, n) - 1) / (r - 1);\n    }", "entry_point": "sumGp", "result": "Compilation failed: /tmp/tmp8a9bqn9w/temp.cpp: In function \u2018int sumGp(int, int, int)\u2019:\n/tmp/tmp8a9bqn9w/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp8a9bqn9w/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp8a9bqn9w/temp.cpp:15:32: note: to match this \u2018{\u2019\n   15 | int sumGp(int a, int n, int r) {\n      |                                ^\n", "passed": false}
{"task_id": "MBCPP/492", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search an element in the given array by using binary search.\n * > binarySearch(vector<int>{1, 2, 3, 5, 8}, 6)\n * false\n * > binarySearch(vector<int>{7, 8, 9, 10, 13}, 10)\n * true\n * > binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23)\n * false\n */\nbool binarySearch(vector<int> itemList, int item) {\nint low = 0;\n    int high = itemList.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (itemList[mid] == item) {\n            return true;\n        } else if (itemList[mid] < item) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return false;", "entry_point": "binarySearch", "result": "passed", "passed": true}
{"task_id": "MBCPP/493", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n * > calculatePolygons(1, 1, 4, 4, 3)\n * {{{-5.0, -4.196152422706632}, {-5.0, -0.7320508075688767}, {-2.0, 1.0}, {1.0, -0.7320508075688767}, {1.0, -4.196152422706632}, {-2.0, -5.928203230275509}, {-5.0, -4.196152422706632}}, {{1.0, -4.196152422706632}, {1.0, -0.7320508075688767}, {4.0, 1.0}, {7.0, -0.7320508075688767}, {7.0, -4.196152422706632}, {4.0, -5.928203230275509}, {1.0, -4.196152422706632}}, {{7.0, -4.196152422706632}, {7.0, -0.7320508075688767}, {10.0, 1.0}, {13.0, -0.7320508075688767}, {13.0, -4.196152422706632}, {10.0, -5.928203230275509}, {7.0, -4.196152422706632}}, {{-2.0, 1.0000000000000004}, {-2.0, 4.464101615137755}, {1.0, 6.196152422706632}, {4.0, 4.464101615137755}, {4.0, 1.0000000000000004}, {1.0, -0.7320508075688767}, {-2.0, 1.0000000000000004}}, {{4.0, 1.0000000000000004}, {4.0, 4.464101615137755}, {7.0, 6.196152422706632}, {10.0, 4.464101615137755}, {10.0, 1.0000000000000004}, {7.0, -0.7320508075688767}, {4.0, 1.0000000000000004}}, {{-5.0, 6.196152422706632}, {-5.0, 9.660254037844387}, {-2.0, 11.392304845413264}, {1.0, 9.660254037844387}, {1.0, 6.196152422706632}, {-2.0, 4.464101615137755}, {-5.0, 6.196152422706632}}, {{1.0, 6.196152422706632}, {1.0, 9.660254037844387}, {4.0, 11.392304845413264}, {7.0, 9.660254037844387}, {7.0, 6.196152422706632}, {4.0, 4.464101615137755}, {1.0, 6.196152422706632}}, {{7.0, 6.196152422706632}, {7.0, 9.660254037844387}, {10.0, 11.392304845413264}, {13.0, 9.660254037844387}, {13.0, 6.196152422706632}, {10.0, 4.464101615137755}, {7.0, 6.196152422706632}}, {{-2.0, 11.392304845413264}, {-2.0, 14.85640646055102}, {1.0, 16.588457268119896}, {4.0, 14.85640646055102}, {4.0, 11.392304845413264}, {1.0, 9.660254037844387}, {-2.0, 11.392304845413264}}, {{4.0, 11.392304845413264}, {4.0, 14.85640646055102}, {7.0, 16.588457268119896}, {10.0, 14.85640646055102}, {10.0, 11.392304845413264}, {7.0, 9.660254037844387}, {4.0, 11.392304845413264}}}\n * > calculatePolygons(5, 4, 7, 9, 8)\n * {{{-11.0, -9.856406460551018}, {-11.0, -0.6188021535170058}, {-3.0, 4.0}, {5.0, -0.6188021535170058}, {5.0, -9.856406460551018}, {-3.0, -14.475208614068023}, {-11.0, -9.856406460551018}}, {{5.0, -9.856406460551018}, {5.0, -0.6188021535170058}, {13.0, 4.0}, {21.0, -0.6188021535170058}, {21.0, -9.856406460551018}, {13.0, -14.475208614068023}, {5.0, -9.856406460551018}}, {{21.0, -9.856406460551018}, {21.0, -0.6188021535170058}, {29.0, 4.0}, {37.0, -0.6188021535170058}, {37.0, -9.856406460551018}, {29.0, -14.475208614068023}, {21.0, -9.856406460551018}}, {{-3.0, 4.0}, {-3.0, 13.237604307034012}, {5.0, 17.856406460551018}, {13.0, 13.237604307034012}, {13.0, 4.0}, {5.0, -0.6188021535170058}, {-3.0, 4.0}}, {{13.0, 4.0}, {13.0, 13.237604307034012}, {21.0, 17.856406460551018}, {29.0, 13.237604307034012}, {29.0, 4.0}, {21.0, -0.6188021535170058}, {13.0, 4.0}}, {{-11.0, 17.856406460551018}, {-11.0, 27.09401076758503}, {-3.0, 31.712812921102035}, {5.0, 27.09401076758503}, {5.0, 17.856406460551018}, {-3.0, 13.237604307034012}, {-11.0, 17.856406460551018}}, {{5.0, 17.856406460551018}, {5.0, 27.09401076758503}, {13.0, 31.712812921102035}, {21.0, 27.09401076758503}, {21.0, 17.856406460551018}, {13.0, 13.237604307034012}, {5.0, 17.856406460551018}}, {{21.0, 17.856406460551018}, {21.0, 27.09401076758503}, {29.0, 31.712812921102035}, {37.0, 27.09401076758503}, {37.0, 17.856406460551018}, {29.0, 13.237604307034012}, {21.0, 17.856406460551018}}, {{-3.0, 31.712812921102035}, {-3.0, 40.95041722813605}, {5.0, 45.569219381653056}, {13.0, 40.95041722813605}, {13.0, 31.712812921102035}, {5.0, 27.09401076758503}, {-3.0, 31.712812921102035}}, {{13.0, 31.712812921102035}, {13.0, 40.95041722813605}, {21.0, 45.569219381653056}, {29.0, 40.95041722813605}, {29.0, 31.712812921102035}, {21.0, 27.09401076758503}, {13.0, 31.712812921102035}}}\n * > calculatePolygons(9, 6, 4, 3, 2)\n * {{{5.0, 2.5358983848622456}, {5.0, 4.8452994616207485}, {7.0, 6.0}, {9.0, 4.8452994616207485}, {9.0, 2.5358983848622456}, {7.0, 1.3811978464829942}, {5.0, 2.5358983848622456}}, {{7.0, 6.0}, {7.0, 8.309401076758503}, {9.0, 9.464101615137753}, {11.0, 8.309401076758503}, {11.0, 6.0}, {9.0, 4.8452994616207485}, {7.0, 6.0}}}\n */\nvector<vector<vector<double>>> calculatePolygons(int startx, int starty, int endx, int endy, int radius) {\nconst double SQRT3 = sqrt(3.0);\nvector<vector<vector<double>>> polygons;\n\n\n// Calculate the horizontal and vertical spacing between hexagon centers\ndouble hex_width = radius * 2.0;\ndouble hex_height = SQRT3 * radius;\n\ndouble horizontal_spacing = hex_width * 0.75; // 3/2 * radius\ndouble vertical_spacing = hex_height; // SQRT3 * radius\n\nfor (int row = 0; ; ++row) {\n    double center_y_even_col = starty + row * vertical_spacing;\n    double center_y_odd_col = starty + row * vertical_spacing + hex_height / 2.0;\n\n    bool row_has_polygons = false;\n\n    for (int col = 0; ; ++col) {\n        double center_x;\n        double center_y;\n\n        // Offset columns for hexagonal grid\n        if (col % 2 == 0) { // Even column\n            center_x = startx + col * horizontal_spacing;\n            center_y = center_y_even_col;\n        } else { // Odd column\n            center_x = startx + col * horizontal_spacing;\n            center_y = center_y_odd_col;\n        }\n\n        // Check if the current hexagon is within the desired x-range\n        if (center_x - radius > endx && col > 0) { // Chec", "entry_point": "calculatePolygons", "result": "Compilation failed: /tmp/tmp_dk5z01c/temp.cpp: In function \u2018std::vector<std::vector<std::vector<double> > > calculatePolygons(int, int, int, int, int)\u2019:\n/tmp/tmp_dk5z01c/temp.cpp:50:1: error: a template declaration cannot appear at block scope\n   50 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp_dk5z01c/temp.cpp:71:1: error: expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmp_dk5z01c/temp.cpp:33:32: note: to match this \u2018{\u2019\n   33 |     for (int col = 0; ; ++col) {\n      |                                ^\n/tmp/tmp_dk5z01c/temp.cpp:71:1: error: expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmp_dk5z01c/temp.cpp:27:28: note: to match this \u2018{\u2019\n   27 | for (int row = 0; ; ++row) {\n      |                            ^\n/tmp/tmp_dk5z01c/temp.cpp:71:1: error: expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmp_dk5z01c/temp.cpp:15:106: note: to match this \u2018{\u2019\n   15 | vector<vector<vector<double>>> calculatePolygons(int startx, int starty, int endx, int endy, int radius) {\n      |                                                                                                          ^\n", "passed": false}
{"task_id": "MBCPP/494", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary tuple to integer.\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1})\n * string(\"105\")\n * > binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1})\n * string(\"101\")\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1})\n * string(\"53\")\n */\nstring binaryToInteger(vector<int> testTup) {\nlong long decimal_value = 0;\n    long long power = 1;\n    for (int i = testTup.size() - 1; i >= 0; i--) {\n        if (testTup[i] == 1) {\n            decimal_value += power;\n        }\n        power *= 2;\n    }\n    return to_string(decimal_value);", "entry_point": "binaryToInteger", "result": "passed", "passed": true}
{"task_id": "MBCPP/495", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string by using regex.\n * > removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"))\n * string(\"KDALOOOHLAJSI\")\n * > removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"))\n * string(\"PTEAIMAAY\")\n * > removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"))\n * string(\"NTYSZTNOGI\")\n */\nstring removeLowercase(string str1) {\nstd::regex pattern(\"[a-z]+\");\n    return std::regex_replace(str1, pattern, \"\");", "entry_point": "removeLowercase", "result": "passed", "passed": true}
{"task_id": "MBCPP/496", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3)\n * {14, 22, 25}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2)\n * {14, 22}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {14, 22, 22, 25, 35}\n */\nvector<int> heapQueueSmallest(vector<int> nums, int n) {\npriority_queue<int, vectoror<int>, greater<int>> minHeap;\n\n\nfor (int num : nums) {\n    minHeap.push(num);\n}\n\nvector<int> result;\nfor (int i = 0; i < n && !minHeap.empty(); ++i) {\n    result.push_back(minHeap.top());\n    minHeap.pop();\n}\nreturn result;", "entry_point": "heapQueueSmallest", "result": "Compilation failed: /tmp/tmpngiksnkz/temp.cpp: In function \u2018std::vector<int> heapQueueSmallest(std::vector<int>, int)\u2019:\n/tmp/tmpngiksnkz/temp.cpp:16:21: error: \u2018vectoror\u2019 was not declared in this scope\n   16 | priority_queue<int, vectoror<int>, greater<int>> minHeap;\n      |                     ^~~~~~~~\n/tmp/tmpngiksnkz/temp.cpp:16:33: error: template argument 2 is invalid\n   16 | priority_queue<int, vectoror<int>, greater<int>> minHeap;\n      |                                 ^\n/tmp/tmpngiksnkz/temp.cpp:16:33: error: template argument 3 is invalid\n/tmp/tmpngiksnkz/temp.cpp:16:34: error: expected unqualified-id before \u2018,\u2019 token\n   16 | priority_queue<int, vectoror<int>, greater<int>> minHeap;\n      |                                  ^\n/tmp/tmpngiksnkz/temp.cpp:16:47: error: invalid declarator before \u2018>\u2019 token\n   16 | priority_queue<int, vectoror<int>, greater<int>> minHeap;\n      |                                               ^~\n/tmp/tmpngiksnkz/temp.cpp:20:5: error: \u2018minHeap\u2019 was not declared in this scope\n   20 |     minHeap.push(num);\n      |     ^~~~~~~\n/tmp/tmpngiksnkz/temp.cpp:24:27: error: \u2018minHeap\u2019 was not declared in this scope\n   24 | for (int i = 0; i < n && !minHeap.empty(); ++i) {\n      |                           ^~~~~~~\n", "passed": false}
{"task_id": "MBCPP/497", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cone.\n * > surfaceareaCone(5, 12)\n * 282.7433388230814\n * > surfaceareaCone(10, 15)\n * 880.5179353159282\n * > surfaceareaCone(19, 17)\n * 2655.923961165254\n */\ndouble surfaceareaCone(int r, int h) {\ndouble l = sqrt(r * r + h * h);\n    return M_PI * r * (r + l);", "entry_point": "surfaceareaCone", "result": "passed", "passed": true}
{"task_id": "MBCPP/498", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find gcd of two positive integers.\n * > gcd(12, 17)\n * 1\n * > gcd(4, 6)\n * 2\n * > gcd(2, 9)\n * 1\n */\nint gcd(int x, int y) {\nwhile (y != 0) {\n        int temp = y;\n        y = x % y;\n        x = temp;\n    }\n    return x;", "entry_point": "gcd", "result": "passed", "passed": true}
{"task_id": "MBCPP/499", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the diameter of a circle.\n * > diameterCircle(10)\n * 20\n * > diameterCircle(40)\n * 80\n * > diameterCircle(15)\n * 30\n */\nint diameterCircle(int r) {\nreturn 2 * r;", "entry_point": "diameterCircle", "result": "passed", "passed": true}
{"task_id": "MBCPP/500", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate all elements of the given list into a string.\n * > concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")})\n * string(\"  hello there have a rocky day\")\n * > concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), \u044e\u0433\u043e(\"you\")})\n * string(\"  Hi there How are you\")\n * > concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")})\n * string(\"  Part of the journey is end\")\n */\nstring concatenateElements(vector<string> list) {\nstring result = \" \";\n    for (string s : list) {\n        result += \" \";\n        result += s;\n    }\n    return result;", "entry_point": "concatenateElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/501", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find common divisor between two numbers in a given pair.\n * > numCommDiv(2, 4)\n * 2\n * > numCommDiv(2, 8)\n * 2\n * > numCommDiv(12, 24)\n * 6\n */\nint numCommDiv(int x, int y) {\nint result = 0;\n    int n = std::gcd(x, y);\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i == 0) {\n            if (n / i == i) {\n                result += 1;\n            } else {\n                result += 2;\n            }\n        }\n    }\n    return result;", "entry_point": "numCommDiv", "result": "Compilation failed: /tmp/tmp5nawi2un/temp.cpp: In function \u2018int numCommDiv(int, int)\u2019:\n/tmp/tmp5nawi2un/temp.cpp:17:18: error: \u2018gcd\u2019 is not a member of \u2018std\u2019\n   17 |     int n = std::gcd(x, y);\n      |                  ^~~\n", "passed": false}
{"task_id": "MBCPP/502", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of two numbers.\n * > find(3, 3)\n * 0\n * > find(10, 3)\n * 1\n * > find(16, 5)\n * 1\n */\nint find(int n, int m) {\nreturn n % m;", "entry_point": "find", "result": "passed", "passed": true}
{"task_id": "MBCPP/503", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add consecutive numbers of a given list.\n * > addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {2, 4, 7, 8, 9, 11, 13}\n * > addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10})\n * {9, 13, 17, 15, 16}\n * > addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {3, 5, 7, 9, 11, 13, 15, 17, 19}\n */\nvector<int> addConsecutiveNums(vector<int> nums) {\nvector<int> result;\nif (nums.empty()) {\nreturn result;\n}\nfor (size_t i = 0; i < nums.size() - 1; ++i) {\nresult.push_back(nums[i] + nums[i+1]);\n}\nreturn result;", "entry_point": "addConsecutiveNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/504", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n natural numbers.\n * > sumOfSeries(5)\n * 225\n * > sumOfSeries(2)\n * 9\n * > sumOfSeries(3)\n * 36\n */\nint sumOfSeries(int n) {\nint sum = 0;    for (int i = 1; i <= n; i++)        sum += (i * i * i);    return sum;", "entry_point": "sumOfSeries", "result": "passed", "passed": true}
{"task_id": "MBCPP/505", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all zeroes to the end of the given array.\n * > reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1})\n * {6, 8, 2, 3, 4, 1, 0, 0, 0}\n * > reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0})\n * {4, 2, 7, 9, 12, 0, 0, 0, 0}\n * > reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2})\n * {3, 11, 74, 14, 1, 2, 0, 0, 0}\n */\nvector<int> reOrder(vector<int> a) {\nint count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != 0) {\n            a[count++] = a[i];\n        }\n    }\n    while (count < a.size()) {\n        a[count++] = 0;\n    }\n    return a;", "entry_point": "reOrder", "result": "passed", "passed": true}
{"task_id": "MBCPP/506", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the permutation coefficient of given p(n, k).\n * > permutationCoefficient(10, 2)\n * 90\n * > permutationCoefficient(10, 3)\n * 720\n * > permutationCoefficient(10, 1)\n * 10\n */\nint permutationCoefficient(int n, int k) {\nint res = 1;\n    for (int i = 0; i < k; i++) {\n        res *= (n - i);\n    }\n    return res;", "entry_point": "permutationCoefficient", "result": "passed", "passed": true}
{"task_id": "MBCPP/507", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove specific words from a given list.\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"black\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")})\n * {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> removewords) {\nvector<string> result_list;\nfor (const string& word : list1) {\nbool found = false;\nfor (const string& remove_word : removewords) {\nif (word == remove_word) {\nfound = true;\nbreak;\n}\n}\nif (!found) {\nresult_list.push_back(word);\n}\n}\nreturn result_list;", "entry_point": "removeWords", "result": "passed", "passed": true}
{"task_id": "MBCPP/508", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the common elements between two given lists are in the same order or not.\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n * > sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")})\n * false\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n */\nbool sameOrder(vector<string> l1, vector<string> l2) {\nvector<string> common_elements_l1;\nvector<string> common_elements_l2;\n\n\n// Populate common_elements_l1 in the order they appear in l1\nfor (const string& s1 : l1) {\n    for (const string& s2 : l2) {\n        if (s1 == s2) {\n            common_elements_l1.push_back(s1);\n            break; // Found in l2, move to next element in l1\n        }\n    }\n}\n\n// Populate common_elements_l2 in the order they appear in l2\nfor (const string& s2 : l2) {\n    for (const string& s1 : l1) {\n        if (s2 == s1) {\n            common_elements_l2.push_back(s2);\n            break; // Found in l1, move to next element in l2\n        }\n    }\n}\n\n// Check if the two lists of common elements are identical\nreturn common_elements_l1 == common_elements_l2;", "entry_point": "sameOrder", "result": "passed", "passed": true}
{"task_id": "MBCPP/509", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of odd numbers till a given odd number.\n * > averageOdd(9)\n * 5\n * > averageOdd(5)\n * 3\n * > averageOdd(11)\n * 6\n */\nint averageOdd(int n) {\nreturn (n + 1) / 2;", "entry_point": "averageOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/510", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n * > noOfSubsequences(vector<int>{1, 2, 3, 4}, 10)\n * 11\n * > noOfSubsequences(vector<int>{4, 8, 7, 2}, 50)\n * 9\n * > noOfSubsequences(vector<int>{5, 6, 7, 8}, 15)\n * 4\n */\nint noOfSubsequences(vector<int> arr, int k) {\nint n = arr.size();\n    long long count = 0;\n    for (int i = 0; i < (1 << n); ++i) {\n        long long product = 1;\n        bool has_elements = false;\n        for (int j = 0; j < n; ++j) {\n            if ((i >> j) & 1) { // If j-th bit is set, include arr[j] in the subsequence\n                if (arr[j] == 0) { // If 0 is in the subsequence and k > 0, product is 0\n                    product = 0;\n                    has_elements = true;\n                    break;\n                }\n                if (k != 0 && product > k / arr[j]) { // Avoid overflow and check product limit\n                    product = k + 1; // Mark as exceeding k\n                    break;\n                }\n                product *= arr[j];\n                has_elements = true;\n            }\n        }\n        if (has_elements && product < k) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "noOfSubsequences", "result": "passed", "passed": true}
{"task_id": "MBCPP/511", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum sum of factors of a given number.\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nint findMinSum(int num) {\nint sum = 0;\n    for (int i = 2; i * i <= num; i++) {\n        while (num % i == 0) {\n            sum += i;\n            num /= i;\n        }\n    }\n    if (num > 1) { // If num is still greater than 1, it means it's a prime factor itself\n        sum += num;\n    }\n    return sum;", "entry_point": "findMinSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/514", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the summation of tuple elements in the given tuple list.\n * > sumElements(vector<int>{7, 8, 9, 1, 10, 7})\n * 42\n * > sumElements(vector<int>{1, 2, 3, 4, 5, 6})\n * 21\n * > sumElements(vector<int>{11, 12, 13, 45, 14})\n * 95\n */\nint sumElements(vector<int> testTup) {\nint sum = 0;\n    for (int i = 0; i < testTup.size(); i++) {\n        sum += testTup[i];\n    }\n    return sum;", "entry_point": "sumElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/515", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if there is a subset with sum divisible by m.\n * > modularSum(vector<int>{3, 1, 7, 5}, 4, 6)\n * true\n * > modularSum(vector<int>{1, 7}, 2, 5)\n * false\n * > modularSum(vector<int>{1, 6}, 2, 5)\n * false\n */\nbool modularSum(vector<int> arr, int n, int m) {\nvector<bool> dp(m, false);\ndp[0] = true;\nfor (int i = 0; i < n; i++) {\nvector<bool> next_dp = dp;\nfor (int j = 0; j < m; j++) {\nif (dp[j]) {\nnext_dp[(j + arr[i]) % m] = true;\n}\n}\ndp = next_dp;\n}\nreturn dp[0];", "entry_point": "modularSum", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/516", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using radix sort.\n * > radixSort(vector<int>{15, 79, 25, 68, 37})\n * {15, 25, 37, 68, 79}\n * > radixSort(vector<int>{9, 11, 8, 7, 3, 2})\n * {2, 3, 7, 8, 9, 11}\n * > radixSort(vector<int>{36, 12, 24, 26, 29})\n * {12, 24, 26, 29, 36}\n */\nvector<int> radixSort(vector<int> nums) {\nif (nums.empty()) {\n        return nums;\n    }\n\n    int max_val = 0;\n    for (int num : nums) {\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n\n    // Perform counting sort for every digit place\n    for (int exp = 1; max_val / exp > 0; exp *= 10) {\n        // Counting sort for the current digit place\n        vector<int> output(nums.size());\n        vector<int> count(10, 0);\n\n        // Store count of occurrences in count[]\n        for (int i = 0; i < nums.size(); i++) {\n            count[(nums[i] / exp) % 10]++;\n        }\n\n        // Change count[i] so that count[i] now contains actual\n        // position of this digit in output[]\n        for (int i = 1; i < 10; i++) {\n            count[i] += count[i - 1];\n        }\n\n        // Build the output array\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\n            count[(nums[i] / exp) % 10]--;\n        }\n\n        // Copy the output array to nums[], so that nums[] now\n        // contains sorted numbers according to current digit\n        for (int i = 0; i < nums.size(); i++) {\n            nums[i] = output[i];\n        }\n    }\n    return nums;", "entry_point": "radixSort", "result": "passed", "passed": true}
{"task_id": "MBCPP/517", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest postive number from the given list.\n * > largestPos(vector<int>{1, 2, 3, 4, -1})\n * 4\n * > largestPos(vector<int>{0, 1, 2, -5, -1, 6})\n * 6\n * > largestPos(vector<int>{0, 0, 1, 0})\n * 1\n */\nint largestPos(vector<int> list1) {\nint max_val = 0;\n    for (int x : list1) {\n        if (x > max_val) {\n            max_val = x;\n        }\n    }\n    return max_val;", "entry_point": "largestPos", "result": "passed", "passed": true}
{"task_id": "MBCPP/518", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the square root of a perfect number.\n * > sqrtRoot(4)\n * 2\n * > sqrtRoot(16)\n * 4\n * > sqrtRoot(400)\n * 20\n */\nint sqrtRoot(int num) {\nreturn static_cast<int>(sqrt(num));", "entry_point": "sqrtRoot", "result": "passed", "passed": true}
{"task_id": "MBCPP/519", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate volume of a tetrahedron.\n * > volumeTetrahedron(10)\n * 117.85\n * > volumeTetrahedron(15)\n * 397.75\n * > volumeTetrahedron(20)\n * 942.81\n */\ndouble volumeTetrahedron(int num) {\nreturn (pow(num, 3) * sqrt(2)) / 12;", "entry_point": "volumeTetrahedron", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/520", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lcm of the given array elements.\n * > getLcm(vector<int>{2, 7, 3, 9, 4})\n * 252\n * > getLcm(vector<int>{1, 2, 8, 3})\n * 24\n * > getLcm(vector<int>{3, 8, 4, 10, 5})\n * 120\n */\nint getLcm(vector<int> l) {\nlong long gcd(long long a, long long b) {\n    while (b) {\n        a %= b;\n        swap(a, b);\n    }\n    return a;\n}\n\nlong long lcm(long long a, long long b) {\n    if (a == 0 || b == 0) return 0;\n    return abs(a * b) / gcd(a, b);\n}\n\n    if (l.empty()) {\n        return 0; // Or throw an exception, depending on desired behavior for empty input\n    }\n\n    long long result = l[0];\n    for (size_t i = 1; i < l.size(); ++i) {\n        result = lcm(result, l[i]);\n    }\n    return result;", "entry_point": "getLcm", "result": "Compilation failed: /tmp/tmp198iurot/temp.cpp: In function \u2018int getLcm(std::vector<int>)\u2019:\n/tmp/tmp198iurot/temp.cpp:16:41: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long gcd(long long a, long long b) {\n      |                                         ^\n/tmp/tmp198iurot/temp.cpp:24:41: error: a function-definition is not allowed here before \u2018{\u2019 token\n   24 | long long lcm(long long a, long long b) {\n      |                                         ^\n/tmp/tmp198iurot/temp.cpp:35:18: error: \u2018lcm\u2019 was not declared in this scope\n   35 |         result = lcm(result, l[i]);\n      |                  ^~~\n", "passed": false}
{"task_id": "MBCPP/521", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is scalene or not.\n * > checkIsosceles(6, 8, 12)\n * true\n * > checkIsosceles(6, 6, 12)\n * false\n * > checkIsosceles(6, 15, 20)\n * true\n */\nbool checkIsosceles(int x, int y, int z) {\nif (x == y || y == z || x == z)\n        return false;\n    else\n        return true;", "entry_point": "checkIsosceles", "result": "passed", "passed": true}
{"task_id": "MBCPP/522", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest bitonic subsequence for the given array.\n * > lbs(vector<int>{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15})\n * 7\n * > lbs(vector<int>{1, 11, 2, 10, 4, 5, 2, 1})\n * 6\n * > lbs(vector<int>{80, 60, 30, 40, 20, 10})\n * 5\n */\nint lbs(vector<int> arr) {\nint n = arr.size();\n    if (n == 0) return 0;\n\n    vector<int> lis(n, 1); // lis[i] stores the length of the longest increasing subsequence ending at index i\n    vector<int> lds(n, 1); // lds[i] stores the length of the longest decreasing subsequence starting at index i\n\n    // Compute LIS for each element from left to right\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j]) {\n                lis[i] = max(lis[i], 1 + lis[j]);\n            }\n        }\n    }\n\n    // Compute LDS for each element from right to left\n    for (int i = n - 2; i >= 0; --i) {\n        for (int j = n - 1; j > i; --j) {\n            if (arr[i] > arr[j]) {\n                lds[i] = max(lds[i], 1 + lds[j]);\n            }\n        }\n    }\n\n    int max_lbs = 0;\n    // The length of the longest bitonic subsequence with arr[i] as the peak\n    // is lis[i] + lds[i] - 1 (subtract 1 because arr[i] is counted in both LIS and LDS)\n    for (int i = 0; i < n; ++i) {\n        max_lbs = max(max_lbs, lis[i] + lds[i] - 1);\n    }\n\n    return max_lbs;", "entry_point": "lbs", "result": "passed", "passed": true}
{"task_id": "MBCPP/523", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n * > checkString(string(\"python\"))\n * {string(\"String must have 1 upper case character.\"), string(\"String must have 1 number.\"), string(\"String length should be atleast 8.\")}\n * > checkString(string(\"123python\"))\n * {string(\"String must have 1 upper case character.\")}\n * > checkString(string(\"123Python\"))\n * {string(\"Valid string.\")}\n */\nvector<string> checkString(string str1) {\nvector<string> result;\n\n\nauto hasCapital = [](const string& s) {\n    for (char c : s) {\n        if (isupper(c)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nauto hasLowercase = [](const string& s) {\n    for (char c : s) {\n        if (islower(c)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nauto hasNumber = [](const string& s) {\n    for (char c : s) {\n        if (isdigit(c)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nif (!hasCapital(str1)) {\n    result.push_back(\"String must have 1 upper case character.\");\n}\nif (!hasLowercase(str1)) {\n    result.push_back(\"String must have 1 lower case character.\");\n}\nif (!hasNumber(str1)) {\n    result.push_back(\"String must have 1 number.\");\n}\nif (str1.length() < 8) {\n    result.push_back(\"String length should be atleast 8.\");\n}\n\nif (result.empty()) {\n    result.push_back(\"Valid string.\");\n}\n\nreturn result;", "entry_point": "checkString", "result": "passed", "passed": true}
{"task_id": "MBCPP/524", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of maximum increasing subsequence of the given array.\n * > maxSumIncreasingSubsequence(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7)\n * 106\n * > maxSumIncreasingSubsequence(vector<int>{3, 4, 5, 10}, 4)\n * 22\n * > maxSumIncreasingSubsequence(vector<int>{10, 5, 4, 3}, 4)\n * 10\n */\nint maxSumIncreasingSubsequence(vector<int> arr, int n) {\nvector<int> dp(n);\nfor (int i = 0; i < n; ++i) {\ndp[i] = arr[i];\n}\n\n\nfor (int i = 1; i < n; ++i) {\n    for (int j = 0; j < i; ++j) {\n        if (arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n            dp[i] = dp[j] + arr[i];\n        }\n    }\n}\n\nint max_sum = 0;\nfor (int i = 0; i < n; ++i) {\n    if (dp[i] > max_sum) {\n        max_sum = dp[i];\n    }\n}\nreturn max_sum;", "entry_point": "maxSumIncreasingSubsequence", "result": "passed", "passed": true}
{"task_id": "MBCPP/525", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether two given lines are parallel or not.\n * > parallelLines(vector<int>{2, 3, 4}, vector<int>{2, 3, 8})\n * true\n * > parallelLines(vector<int>{2, 3, 4}, vector<int>{4, -3, 8})\n * false\n * > parallelLines(vector<int>{3, 3}, vector<int>{5, 5})\n * true\n */\nbool parallelLines(vector<int> line1, vector<int> line2) {\n// A line in 2D can be represented as ax + by + c = 0.\n    // In this problem, the input vectors `line1` and `line2` contain the\n    // coefficients [a, b, c].\n    // Two lines a1x + b1y + c1 = 0 and a2x + b2y + c2 = 0 are parallel\n    // if their slopes are equal.\n    // The slope of a line ax + by + c = 0 is -a/b.\n    // So, two lines are parallel if -a1/b1 = -a2/b2.\n    // This simplifies to a1*b2 = a2*b1.\n\n    // Handle the case where the lines might represent just a direction vector [dx, dy]\n    // or a point [x, y]. The problem examples suggest the input is coefficients of a line equation.\n    // Example 1: `line1 = {2, 3, 4}`, `line2 = {2, 3, 8}`\n    // Here a1=2, b1=3, c1=4 and a2=2, b2=3, c2=8.\n    // a1*b2 = 2*3 = 6\n    // a2*b1 = 2*3 = 6\n    // Since 6 == 6, they are parallel. Output: true.\n\n    // Example 2: `line1 = {2, 3, 4}`, `line2 = {4, -3, 8}`\n    // Here a1=2, b1=3, c1=4 and a2=4, b2=-3, c2=8.\n    // a1*b2 = 2*(-3) = -6\n    // a2*b1 = 4*3 = 12\n    // Since -6 != 12, they are not parallel. Output: false.\n\n    // Example 3: `line1 = {3, 3}`, `line2 = {5, 5}`\n    // This implies the input format might be different for lines passing through the origin\n    // or simply representing direction vectors [a, b].\n    // If the input is [a, b], then the line passes through the origin and its equation is ax + by = 0.\n    // In this case, a1=3, b1=3, c1=0 and a2=5, b2=5, c2=0.\n    // a1*b2 = 3*5 = 15\n    // a2*b1 = 5*3 = 15\n    // Since 15 == 15, they are parallel. Output: true.\n\n    // Based on the examples, the vectors represent the coefficients [a, b, c]\n    // for lines in the form ax + by + c = 0. If a vector has only two elements,\n    // it implies c = 0 (line passes through the origin).\n\n    long long a1 = line1[0];\n    long long b1 = line1[1];\n    long long a2 = line2[0];\n    long long b2 = line2[1];\n\n    // For lines to be parallel, their slopes must be equal.\n    // Slope of line1: -a1/b1\n    // Slope of line2: -a2/b2\n    // -a1/b1 = -a2/b2  =>  a1*b2 = a2*b1\n    // This cross-multiplication handles vertical lines (b=0) correctly as well,\n    // as long as we consider the specific case of both b1 and b2 being 0.\n\n    // If both b1 and b2 are 0, then the lines are vertical (ax + c = 0).\n    // They are parallel if they both have b=0.\n    if (b1 == 0 && b2 == 0) {\n        return true; // Both lines are vertical, so they are parallel.\n    }\n    \n    // If only one of b1 or b2 is 0, they are not parallel.\n    // For example, if b1 = 0, line1 is vertical. If b2 != 0, line2 has a finite slope.\n    if (b1 == 0 || b2 == 0) {\n        return false;\n    }\n\n    // Otherwise, calculate slopes and compare.\n    // Using cross-multiplication to avoid floating point issues and division by zero for non-vertical lines.\n    // a1*b2 == a2*b1\n    return (a1 * b2 == a2 * b1);", "entry_point": "parallelLines", "result": "passed", "passed": true}
{"task_id": "MBCPP/526", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to capitalize first and last letters of each word of a given string.\n * > capitalizeFirstLastLetters(string(\"python\"))\n * string(\"PythoN\")\n * > capitalizeFirstLastLetters(string(\"bigdata\"))\n * string(\"BigdatA\")\n * > capitalizeFirstLastLetters(string(\"Hadoop\"))\n * string(\"HadooP\")\n */\nstring capitalizeFirstLastLetters(string str1) {\nsize_t len = str1.length();\n    if (len == 0) {\n        return str1;\n    }\n\n    bool newWord = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (str1[i] == ' ') {\n            newWord = true;\n        } else {\n            if (newWord) {\n                str1[i] = toupper(str1[i]);\n                newWord = false;\n            }\n\n            // Check if it's the last letter of a word\n            if (i == len - 1 || str1[i + 1] == ' ') {\n                str1[i] = toupper(str1[i]);\n            }\n        }\n    }\n    return str1;", "entry_point": "capitalizeFirstLastLetters", "result": "passed", "passed": true}
{"task_id": "MBCPP/527", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n * > getPairsCount(vector<int>{1, 5, 7, -1, 5}, 5, 6)\n * 3\n * > getPairsCount(vector<int>{1, 5, 7, -1}, 4, 6)\n * 2\n * > getPairsCount(vector<int>{1, 1, 1, 1}, 4, 2)\n * 6\n */\nint getPairsCount(vector<int> arr, int n, int sum) {\nint count = 0;\n    unordered_map<int, int> freq;\n\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.count(complement)) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    return count;", "entry_point": "getPairsCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/529", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth jacobsthal-lucas number.\n * > jacobsthalLucas(5)\n * 31\n * > jacobsthalLucas(2)\n * 5\n * > jacobsthalLucas(4)\n * 17\n */\nint jacobsthalLucas(int n) {\nif (n == 0) return 2;\n    if (n == 1) return 1;\n    return jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);", "entry_point": "jacobsthalLucas", "result": "passed", "passed": true}
{"task_id": "MBCPP/530", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of negative numbers in an array of integers.\n * > negativeCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.31\n * > negativeCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.31\n * > negativeCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.44\n */\ndouble negativeCount(vector<int> nums) {\nint n = nums.size();\n    if (n == 0) {\n        return 0.0;\n    }\n    int negative_count = 0;\n    for (int num : nums) {\n        if (num < 0) {\n            negative_count++;\n        }\n    }\n    return (double)negative_count / n;", "entry_point": "negativeCount", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/531", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum number of coins that make a given value.\n * > minCoins(vector<int>{9, 6, 5, 1}, 4, 11)\n * 2\n * > minCoins(vector<int>{4, 5, 6, 7, 8, 9}, 6, 9)\n * 1\n * > minCoins(vector<int>{1, 2, 3}, 3, 4)\n * 2\n */\nint minCoins(vector<int> coins, int m, int v) {\nvector<int> dp(v + 1, INT_MAX);\ndp[0] = 0;\n\n\nfor (int i = 1; i <= v; i++) {\n    for (int j = 0; j < m; j++) {\n        if (coins[j] <= i) {\n            int sub_res = dp[i - coins[j]];\n            if (sub_res != INT_MAX) {\n                dp[i] = min(dp[i], sub_res + 1);\n            }\n        }\n    }\n}\n\nreturn (dp[v] == INT_MAX) ? -1 : dp[v];", "entry_point": "minCoins", "result": "passed", "passed": true}
{"task_id": "MBCPP/532", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the two given strings are permutations of each other.\n * > checkPermutation(string(\"abc\"), string(\"cba\"))\n * true\n * > checkPermutation(string(\"test\"), string(\"ttew\"))\n * false\n * > checkPermutation(string(\"xxyz\"), string(\"yxzx\"))\n * true\n */\nbool checkPermutation(string str1, string str2) {\nif (str1.length() != str2.length()) {\n        return false;\n    }\n    sort(str1.begin(), str1.end());\n    sort(str2.begin(), str2.end());\n    return str1 == str2;", "entry_point": "checkPermutation", "result": "passed", "passed": true}
{"task_id": "MBCPP/534", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n * > searchLiteral(string(\"python\"), string(\"python programming language\"))\n * {0, 6}\n * > searchLiteral(string(\"programming\"), string(\"python programming language\"))\n * {7, 18}\n * > searchLiteral(string(\"language\"), string(\"python programming language\"))\n * {19, 27}\n */\nvector<int> searchLiteral(string pattern, string text) {\nvector<int> result;\nsize_t found_pos = text.find(pattern);\n\n\nif (found_pos != string::npos) {\n    result.push_back(found_pos);\n    result.push_back(found_pos + pattern.length());\n}\nreturn result;", "entry_point": "searchLiteral", "result": "passed", "passed": true}
{"task_id": "MBCPP/535", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top or bottom surface area of a cylinder.\n * > topbottomSurfacearea(10)\n * 314.15000000000003\n * > topbottomSurfacearea(5)\n * 78.53750000000001\n * > topbottomSurfacearea(4)\n * 50.264\n */\ndouble topbottomSurfacearea(int r) {\nreturn 3.1415 * r * r;", "entry_point": "topbottomSurfacearea", "result": "passed", "passed": true}
{"task_id": "MBCPP/536", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to select the nth items of a list.\n * > nthItems(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2)\n * {1, 3, 5, 7, 9}\n * > nthItems(vector<int>{10, 15, 19, 17, 16, 18}, 3)\n * {10, 17}\n * > nthItems(vector<int>{14, 16, 19, 15, 17}, 4)\n * {14, 17}\n */\nvector<int> nthItems(vector<int> list, int n) {\nvector<int> result;\nif (n <= 0) {\nreturn result;\n}\nfor (int i = 0; i < list.size(); i += n) {\nresult.push_back(list[i]);\n}\nreturn result;", "entry_point": "nthItems", "result": "passed", "passed": true}
{"task_id": "MBCPP/537", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated word in a given string.\n * > firstRepeatedWord(string(\"ab ca bc ab\"))\n * string(\"ab\")\n * > firstRepeatedWord(string(\"ab ca bc\"))\n * string(\"None\")\n * > firstRepeatedWord(string(\"ab ca bc ca ab bc\"))\n * string(\"ca\")\n */\nstring firstRepeatedWord(string str1) {\nunordered_set<string> seenWords;\nstringstream ss(str1);\nstring word;\n\n\nwhile (ss >> word) {\n    if (seenWords.count(word)) {\n        return word;\n    }\n    seenWords.insert(word);\n}\nreturn \"None\";", "entry_point": "firstRepeatedWord", "result": "passed", "passed": true}
{"task_id": "MBCPP/538", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a given string list to a tuple.\n * > stringListToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringListToTuple(string(\"bigdata\"))\n * {string(\"b\"), string(\"i\"), string(\"g\"), string(\"d\"), string(\"a\"), string(\"t\"), string(\"a\")}\n * > stringListToTuple(string(\"language\"))\n * {string(\"l\"), string(\"a\"), string(\"n\"), string(\"g\"), string(\"u\"), string(\"a\"), string(\"g\"), string(\"e\")}\n */\nvector<string> stringListToTuple(string str1) {\nvector<string> result;\nfor (char c : str1) {\nresult.push_back(string(1, c));\n}\nreturn result;", "entry_point": "stringListToTuple", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/540", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between highest and least frequencies in a given array.\n * > findDiff(vector<int>{1, 1, 2, 2, 7, 8, 4, 5, 1, 4}, 10)\n * 2\n * > findDiff(vector<int>{1, 7, 9, 2, 3, 3, 1, 3, 3}, 9)\n * 3\n * > findDiff(vector<int>{1, 2, 1, 2}, 4)\n * 0\n */\nint findDiff(vector<int> arr, int n) {\nunordered_map<int, int> freq;\n    for (int x : arr) {\n        freq[x]++;\n    }\n\n    if (freq.empty()) {\n        return 0; // Handle empty array case\n    }\n\n    int minFreq = INT_MAX;\n    int maxFreq = INT_MIN;\n\n    for (auto const& [val, count] : freq) {\n        if (count < minFreq) {\n            minFreq = count;\n        }\n        if (count > maxFreq) {\n            maxFreq = count;\n        }\n    }\n    return maxFreq - minFreq;", "entry_point": "findDiff", "result": "passed", "passed": true}
{"task_id": "MBCPP/541", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is abundant or not.\n * > checkAbundant(12)\n * true\n * > checkAbundant(15)\n * false\n * > checkAbundant(18)\n * true\n */\nbool checkAbundant(int n) {\nint sum_div = 1;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            sum_div += i;\n            if (i * i != n) {\n                sum_div += n / i;\n            }\n        }\n    }\n    return sum_div > n;", "entry_point": "checkAbundant", "result": "passed", "passed": true}
{"task_id": "MBCPP/542", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n * > fillSpaces(string(\"Boult Curve Wireless Neckband\"))\n * string(\"Boult:Curve:Wireless:Neckband\")\n * > fillSpaces(string(\"Stereo Sound Sweatproof\"))\n * string(\"Stereo:Sound:Sweatproof\")\n * > fillSpaces(string(\"Probass Curve Audio\"))\n * string(\"Probass:Curve:Audio\")\n */\nstring fillSpaces(string text) {\nstd::regex pattern(\"[ ,.]\");\n    return std::regex_replace(text, pattern, \":\");", "entry_point": "fillSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/543", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two numbers and print number of digits of sum.\n * > countDigits(9875, 10)\n * 4\n * > countDigits((long long)98759853034, 100)\n * 11\n * > countDigits(1234567, 500)\n * 7\n */\nint countDigits(int num1, int num2) {\nlong long sum = (long long)num1 + num2;\n    if (sum == 0) {\n        return 1;\n    }\n    int count = 0;\n    while (sum != 0) {\n        sum /= 10;\n        count++;\n    }\n    return count;", "entry_point": "countDigits", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/544", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten the tuple list to a string.\n * > flattenTuple(vector<vector<string>>{{string(\"1\"), string(\"4\"), string(\"6\")}, {string(\"5\"), string(\"8\")}, {string(\"2\"), string(\"9\")}, {string(\"1\"), string(\"10\")}})\n * string(\"1 4 6 5 8 2 9 1 10\")\n * > flattenTuple(vector<vector<string>>{{string(\"2\"), string(\"3\"), string(\"4\")}, {string(\"6\"), string(\"9\")}, {string(\"3\"), string(\"2\")}, {string(\"2\"), string(\"11\")}})\n * string(\"2 3 4 6 9 3 2 2 11\")\n * > flattenTuple(vector<vector<string>>{{string(\"14\"), string(\"21\"), string(\"9\")}, {string(\"24\"), string(\"19\")}, {string(\"12\"), string(\"29\")}, {string(\"23\"), string(\"17\")}})\n * string(\"14 21 9 24 19 12 29 23 17\")\n */\nstring flattenTuple(vector<vector<string>> testList) {\nstring result = \"\";\n    for (const auto& innerList : testList) {\n        for (const auto& str : innerList) {\n            result += str + \" \";\n        }\n    }\n    if (!result.empty()) {\n        result.pop_back(); // Remove the trailing space\n    }\n    return result;", "entry_point": "flattenTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/545", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle only first and last bits of a given number.\n * > toggleFAndLBits(10)\n * 3\n * > toggleFAndLBits(15)\n * 6\n * > toggleFAndLBits(20)\n * 5\n */\nint toggleFAndLBits(int n) {\n// Toggle the first bit (LSB)\n    n = n ^ 1;\n\n    // Toggle the last bit (MSB)\n    // Find the position of the MSB\n    int msb_pos = 0;\n    int temp = n;\n    while (temp > 0) {\n        temp = temp >> 1;\n        msb_pos++;\n    }\n    if (msb_pos > 0) {\n        n = n ^ (1 << (msb_pos - 1));\n    }\n    return n;", "entry_point": "toggleFAndLBits", "result": "passed", "passed": true}
{"task_id": "MBCPP/547", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of hamming distances of all consecutive numbers from o to n.\n * > totalHammingDistance(4)\n * 7\n * > totalHammingDistance(2)\n * 3\n * > totalHammingDistance(5)\n * 8\n */\nint totalHammingDistance(int n) {\nint total_hamming_distance = 0;\n    for (int i = 0; i < 31; ++i) { // Iterate through each bit position (assuming up to 31 bits for int)\n        int count_ones = 0;\n        int count_zeros = 0;\n        for (int j = 0; j <= n; ++j) { // Iterate through numbers from 0 to n\n            if ((j >> i) & 1) { // Check if the i-th bit is set\n                count_ones++;\n            } else {\n                count_zeros++;\n            }\n        }\n        total_hamming_distance += count_ones * count_zeros;\n    }\n    return total_hamming_distance;", "entry_point": "totalHammingDistance", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/548", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the longest increasing subsequence of the given sequence.\n * > longestIncreasingSubsequence(vector<int>{10, 22, 9, 33, 21, 50, 41, 60})\n * 5\n * > longestIncreasingSubsequence(vector<int>{3, 10, 2, 1, 20})\n * 3\n * > longestIncreasingSubsequence(vector<int>{50, 3, 10, 7, 40, 80})\n * 4\n */\nint longestIncreasingSubsequence(vector<int> arr) {\nif (arr.empty()) {\n        return 0;\n    }\n\n    vector<int> dp(arr.size(), 1);\n    int maxLength = 1;\n\n    for (int i = 1; i < arr.size(); ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLength = max(maxLength, dp[i]);\n    }\n\n    return maxLength;", "entry_point": "longestIncreasingSubsequence", "result": "passed", "passed": true}
{"task_id": "MBCPP/549", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n odd natural numbers.\n * > oddNumSum(1)\n * 1\n * > oddNumSum(2)\n * 244\n * > oddNumSum(3)\n * 3369\n */\nint oddNumSum(int n) {\nlong long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        long long odd_num = 2LL * i - 1;\n        sum += odd_num * odd_num * odd_num * odd_num * odd_num;\n    }\n    return sum;", "entry_point": "oddNumSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/550", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum element in a sorted and rotated array.\n * > findMax(vector<int>{2, 3, 5, 6, 9}, 0, 4)\n * 9\n * > findMax(vector<int>{3, 4, 5, 2, 1}, 0, 4)\n * 5\n * > findMax(vector<int>{1, 2, 3}, 0, 2)\n * 3\n */\nint findMax(vector<int> arr, int low, int high) {\nint findMax(vector<intt> arr, int low, int high) {\nif (low == high) {\nreturn arr[low];\n}\n\n\nif (high < low) { // This case handles an empty or invalid range, though not expected by the prompt\n    return -1; // Or throw an exception, depending on error handling strategy\n}\n\nint mid = low + (high - low) / 2;\n\n// If arr[mid] is greater than its next element, then arr[mid] is the maximum element\nif (mid < high && arr[mid] > arr[mid + 1]) {\n    return arr[mid];\n}\n\n// If arr[mid] is smaller than its previous element, then arr[mid-1] is the maximum element\nif (mid > low && arr[mid] < arr[mid - 1]) {\n    return arr[mid - 1];\n}\n\n// If the right half is sorted, the maximum is in the left half\nif (arr[low] > arr[mid]) {\n    return findMax(arr, low, mid - 1);\n} else { // If the left half is sorted, the maximum is in the right half\n    return findMax(arr, mid + 1, high);\n}", "entry_point": "findMax", "result": "Compilation failed: /tmp/tmp7uhyqpsr/temp.cpp: In function \u2018int findMax(std::vector<int>, int, int)\u2019:\n/tmp/tmp7uhyqpsr/temp.cpp:16:20: error: \u2018intt\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n   16 | int findMax(vector<intt> arr, int low, int high) {\n      |                    ^~~~\n      |                    int\n/tmp/tmp7uhyqpsr/temp.cpp:16:24: error: template argument 1 is invalid\n   16 | int findMax(vector<intt> arr, int low, int high) {\n      |                        ^\n/tmp/tmp7uhyqpsr/temp.cpp:16:24: error: template argument 2 is invalid\n/tmp/tmp7uhyqpsr/temp.cpp:16:50: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | int findMax(vector<intt> arr, int low, int high) {\n      |                                                  ^\n/tmp/tmp7uhyqpsr/temp.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp7uhyqpsr/temp.cpp:15:49: note: to match this \u2018{\u2019\n   15 | int findMax(vector<int> arr, int low, int high) {\n      |                                                 ^\n/tmp/tmp7uhyqpsr/temp.cpp:66:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   66 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/551", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract a specified column from a given nested list.\n * > extractColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {1, 2, 1}\n * > extractColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {3, -5, 1}\n * > extractColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {1, 5, 1, 13, 5, 9}\n */\nvector<int> extractColumn(vector<vector<int>> list1, int n) {\nvector<int> result;\nfor (int i = 0; i < list1.size(); i++) {\nif (n < list1[i].size()) {\nresult.push_back(list1[i][n]);\n}\n}\nreturn result;", "entry_point": "extractColumn", "result": "passed", "passed": true}
{"task_id": "MBCPP/552", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a given sequence is linear or not.\n * > seqLinear(vector<int>{0, 2, 4, 6, 8, 10})\n * string(\"Linear Sequence\")\n * > seqLinear(vector<int>{1, 2, 3})\n * string(\"Linear Sequence\")\n * > seqLinear(vector<int>{1, 5, 2})\n * string(\"Non Linear Sequence\")\n */\nstring seqLinear(vector<int> seqNums) {\nif (seqNums.size() <= 2) {\n        return \"Linear Sequence\";\n    }\n    int diff = seqNums[1] - seqNums[0];\n    for (size_t i = 2; i < seqNums.size(); ++i) {\n        if (seqNums[i] - seqNums[i - 1] != diff) {\n            return \"Non Linear Sequence\";\n        }\n    }\n    return \"Linear Sequence\";", "entry_point": "seqLinear", "result": "passed", "passed": true}
{"task_id": "MBCPP/553", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuple to a floating-point number.\n * > tupleToFloat(vector<int>{4, 56})\n * 4.56\n * > tupleToFloat(vector<int>{7, 256})\n * 7.256\n * > tupleToFloat(vector<int>{8, 123})\n * 8.123\n */\ndouble tupleToFloat(vector<int> testTup) {\ndouble result = testTup[0];\n    double fractionalPart = testTup[1];\n    while (fractionalPart >= 1.0) {\n        fractionalPart /= 10.0;\n    }\n    result += fractionalPart;\n    return result;", "entry_point": "tupleToFloat", "result": "passed", "passed": true}
{"task_id": "MBCPP/554", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find odd numbers from a mixed list.\n * > split(vector<int>{1, 2, 3, 4, 5, 6})\n * {1, 3, 5}\n * > split(vector<int>{10, 11, 12, 13})\n * {11, 13}\n * > split(vector<int>{7, 8, 9, 1})\n * {7, 9, 1}\n */\nvector<int> split(vector<int> list) {\nvector<int> oddNumbers;\nfor (int num : list) {\nif (num % 2 != 0) {\noddNumbers.push_back(num);\n}\n}\nreturn oddNumbers;", "entry_point": "split", "result": "passed", "passed": true}
{"task_id": "MBCPP/555", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n * > difference(3)\n * 30\n * > difference(5)\n * 210\n * > difference(2)\n * 6\n */\nint difference(int n) {\nlong long sum_of_cubes = (long long)n * (n + 1) / 2;\n    sum_of_cubes = sum_of_cubes * sum_of_cubes;\n    long long sum_of_naturals = (long long)n * (n + 1) / 2;\n    return sum_of_cubes - sum_of_naturals;", "entry_point": "difference", "result": "passed", "passed": true}
{"task_id": "MBCPP/556", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an odd number.\n * > findOddPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 6\n * > findOddPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 12\n * > findOddPair(vector<int>{1, 2, 3}, 3)\n * 2\n */\nint findOddPair(vector<int> a, int n) {\nint odd_count = 0;\n    int even_count = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n\n    // A pair (x, y) has an odd XOR if one is even and the other is odd.\n    // (even ^ odd) = odd\n    // (even ^ even) = even\n    // (odd ^ odd) = even\n    return odd_count * even_count;", "entry_point": "findOddPair", "result": "passed", "passed": true}
{"task_id": "MBCPP/557", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to toggle characters case in a string.\n * > toggleString(string(\"Python\"))\n * string(\"pYTHON\")\n * > toggleString(string(\"Pangram\"))\n * string(\"pANGRAM\")\n * > toggleString(string(\"LIttLE\"))\n * string(\"liTTle\")\n */\nstring toggleString(string str) {\nfor (char &c : str) {\n        if (islower(c)) {\n            c = toupper(c);\n        } else if (isupper(c)) {\n            c = tolower(c);\n        }\n    }\n    return str;", "entry_point": "toggleString", "result": "passed", "passed": true}
{"task_id": "MBCPP/558", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the digit distance between two integers.\n * > digitDistanceNums(1, 2)\n * 1\n * > digitDistanceNums(23, 56)\n * 6\n * > digitDistanceNums(123, 256)\n * 7\n */\nint digitDistanceNums(int n1, int n2) {\nint distance = 0;\n    while (n1 > 0 || n2 > 0) {\n        distance += abs((n1 % 10) - (n2 % 10));\n        n1 /= 10;\n        n2 /= 10;\n    }\n    return distance;", "entry_point": "digitDistanceNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/559", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous subarray in the given array.\n * > maxSubArraySum(vector<int>{-2, -3, 4, -1, -2, 1, 5, -3}, 8)\n * 7\n * > maxSubArraySum(vector<int>{-3, -4, 5, -2, -3, 2, 6, -4}, 8)\n * 8\n * > maxSubArraySum(vector<int>{-4, -5, 6, -3, -4, 3, 7, -5}, 8)\n * 10\n */\nint maxSubArraySum(vector<int> a, int size) {\nint max_so_far = INT_MIN;\n    int current_max = 0;\n\n    for (int i = 0; i < size; i++) {\n        current_max = current_max + a[i];\n        if (max_so_far < current_max) {\n            max_so_far = current_max;\n        }\n        if (current_max < 0) {\n            current_max = 0;\n        }\n    }\n    return max_so_far;", "entry_point": "maxSubArraySum", "result": "passed", "passed": true}
{"task_id": "MBCPP/560", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the union of elements of the given tuples.\n * > unionElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {3, 4, 5, 6, 7, 10}\n * > unionElements(vector<int>{1, 2, 3, 4}, vector<int>{3, 4, 5, 6})\n * {1, 2, 3, 4, 5, 6}\n * > unionElements(vector<int>{11, 12, 13, 14}, vector<int>{13, 15, 16, 17})\n * {11, 12, 13, 14, 15, 16, 17}\n */\nvector<int> unionElements(vector<int> testTup1, vector<int> testTup2) {\nstd::set<int> uniqueElements;\nfor (int x : testTup1) {\nuniqueElements.insert(x);\n}\nfor (int x : testTup2) {\nuniqueElements.insert(x);\n}\nstd::vector<int> result(uniqueElements.begin(), uniqueElements.end());\nreturn result;", "entry_point": "unionElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/562", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum length of sublist.\n * > findMaxLength(vector<vector<int>>{{1}, {1, 4}, {5, 6, 7, 8}})\n * 4\n * > findMaxLength(vector<vector<int>>{{0, 1}, {2, 2}, {3, 2, 1}})\n * 3\n * > findMaxLength(vector<vector<int>>{{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}})\n * 5\n */\nint findMaxLength(vector<vector<int>> lst) {\nint maxLength = 0;\n    for (const auto& sublist : lst) {\n        if (sublist.size() > maxLength) {\n            maxLength = sublist.size();\n        }\n    }\n    return maxLength;", "entry_point": "findMaxLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/563", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract values between quotation marks of a string.\n * > extractValues(string(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\"))\n * {string(\"Python\"), string(\"PHP\"), string(\"Java\")}\n * > extractValues(string(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\"))\n * {string(\"python\"), string(\"program\"), string(\"language\")}\n * > extractValues(string(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\"))\n * {string(\"red\"), string(\"blue\"), string(\"green\"), string(\"yellow\")}\n */\nvector<string> extractValues(string text) {\nvector<string> result;\nsize_t start_pos = 0;\nwhile ((start_pos = text.find('\"', start_pos)) != string::npos) {\nsize_t end_pos = text.find('\"', start_pos + 1);\nif (end_pos != string::npos) {\nresult.push_back(text.substr(start_pos + 1, end_pos - (start_pos + 1)));\nstart_pos = end_pos + 1;\n} else {\nbreak; // Mismatched quotes\n}\n}\nreturn result;", "entry_point": "extractValues", "result": "passed", "passed": true}
{"task_id": "MBCPP/564", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unequal element pairs from the given array.\n * > countPairs(vector<int>{1, 2, 1}, 3)\n * 2\n * > countPairs(vector<int>{1, 1, 1, 1}, 4)\n * 0\n * > countPairs(vector<int>{1, 2, 3, 4, 5}, 5)\n * 10\n */\nint countPairs(vector<int> arr, int n) {\nint count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] != arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;", "entry_point": "countPairs", "result": "passed", "passed": true}
{"task_id": "MBCPP/565", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to split a string into characters.\n * > split(string(\"python\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > split(string(\"Name\"))\n * {string(\"N\"), string(\"a\"), string(\"m\"), string(\"e\")}\n * > split(string(\"program\"))\n * {string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")}\n */\nvector<string> split(string word) {\nvector<string> result;\nfor (char c : word) {\nresult.push_back(string(1, c));\n}\nreturn result;", "entry_point": "split", "result": "passed", "passed": true}
{"task_id": "MBCPP/566", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the sum of a non-negative integer.\n * > sumDigits(345)\n * 12\n * > sumDigits(12)\n * 3\n * > sumDigits(97)\n * 16\n */\nint sumDigits(int n) {\nint sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;", "entry_point": "sumDigits", "result": "passed", "passed": true}
{"task_id": "MBCPP/567", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a specified list is sorted or not.\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 12, 14, 16, 17})\n * true\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 12, 14, 20, 17})\n * false\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 15, 14, 20})\n * false\n */\nbool issortList(vector<int> list1) {\nfor (int i = 0; i < list1.size() - 1; i++) {\n        if (list1[i] > list1[i+1]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "issortList", "result": "passed", "passed": true}
{"task_id": "MBCPP/569", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\")}, {string(\"green\"), string(\"orange\")}, {string(\"white\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\")}, {string(\"green\"), string(\"orange\")}, {string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"d\"), string(\"c\")}, {string(\"g\"), string(\"h\")}, {string(\"f\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\")}, {string(\"c\"), string(\"d\")}, {string(\"g\"), string(\"h\")}, {string(\"e\"), string(\"f\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> list1) {\nfor (int i = 0; i < list1.size(); i++) {\n        sort(list1[i].begin(), list1[i].end());\n    }\n    return list1;", "entry_point": "sortSublists", "result": "passed", "passed": true}
{"task_id": "MBCPP/570", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove words from a given list of strings containing a character or string.\n * > removeWords(vector<string>{string(\"Red color\"), string(\"Orange#\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"#\"), string(\"color\"), string(\"@\")})\n * {string(\"Red\"), string(\"\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n * > removeWords(vector<string>{string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"&\"), string(\"+\"), string(\"@\")})\n * {string(\"Red\"), string(\"\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n * > removeWords(vector<string>{string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"@\")})\n * {string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> charlist) {\nvector<string> result = list1;\nfor (string& s : result) {\nfor (const string& char_to_remove : charlist) {\nsize_t pos;\nwhile ((pos = s.find(char_to_remove)) != string::npos) {\ns.erase(pos, char_to_remove.length());\n}\n}\n}\nreturn result;", "entry_point": "removeWords", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/571", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n * > maxSumPairDiffLessthanK(vector<int>{3, 5, 10, 15, 17, 12, 9}, 7, 4)\n * 62\n * > maxSumPairDiffLessthanK(vector<int>{5, 15, 10, 300}, 4, 12)\n * 25\n * > maxSumPairDiffLessthanK(vector<int>{1, 2, 3, 4, 5, 6}, 6, 6)\n * 21\n */\nint maxSumPairDiffLessthanK(vector<int> arr, int n, int k) {\nsort(arr.begin(), arr.end());\n    int dp[n + 1];\n    dp[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        dp[i] = dp[i - 1];\n        if (i - 2 >= 0 && arr[i - 1] - arr[i - 2] < k) {\n            dp[i] = max(dp[i], dp[i - 2] + arr[i - 1] + arr[i - 2]);\n        }\n    }\n    return dp[n];", "entry_point": "maxSumPairDiffLessthanK", "result": "passed", "passed": true}
{"task_id": "MBCPP/572", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove two duplicate numbers from a given number of lists.\n * > twoUniqueNums(vector<int>{1, 2, 3, 2, 3, 4, 5})\n * {1, 4, 5}\n * > twoUniqueNums(vector<int>{1, 2, 3, 2, 4, 5})\n * {1, 3, 4, 5}\n * > twoUniqueNums(vector<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n */\nvector<int> twoUniqueNums(vector<int> nums) {\nmap<int, int> counts;\n    for (int num : nums) {\n        counts[num]++;\n    }\n\n    vector<int> result;\n    for (int num : nums) {\n        if (counts[num] <= 1) {\n            result.push_back(num);\n        }\n    }\n    return result;", "entry_point": "twoUniqueNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/573", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the product of the unique numbers of a given list.\n * > uniqueProduct(vector<int>{10, 20, 30, 40, 20, 50, 60, 40})\n * 720000000\n * > uniqueProduct(vector<int>{1, 2, 3, 1})\n * 6\n * > uniqueProduct(vector<int>{7, 8, 9, 0, 1, 1})\n * 0\n */\nint uniqueProduct(vector<int> listData) {\nlong long product = 1;\nunordered_set<int> uniqueNumbers;\n\n\nfor (int num : listData) {\n    uniqueNumbers.insert(num);\n}\n\nfor (int num : uniqueNumbers) {\n    product *= num;\n}\n\nreturn product;", "entry_point": "uniqueProduct", "result": "passed", "passed": true}
{"task_id": "MBCPP/574", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cylinder.\n * > surfaceareaCylinder(10, 5)\n * 942.45\n * > surfaceareaCylinder(4, 5)\n * 226.18800000000002\n * > surfaceareaCylinder(4, 10)\n * 351.848\n */\ndouble surfaceareaCylinder(int r, int h) {\nreturn 2 * M_PI * r * (r + h);", "entry_point": "surfaceareaCylinder", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/575", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find nth number in a sequence which is not a multiple of a given number.\n * > countNo(2, 3, 1, 10)\n * 5\n * > countNo(3, 6, 4, 20)\n * 11\n * > countNo(5, 10, 4, 20)\n * 16\n */\nint countNo(int a, int n, int l, int r) {\nint count = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i % a != 0) {\n            count++;\n            if (count == n) {\n                return i;\n            }\n        }\n    }\n    return -1;", "entry_point": "countNo", "result": "passed", "passed": true}
{"task_id": "MBCPP/576", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array is subarray of another or not.\n * > isSubArray(vector<int>{1, 4, 3, 5}, vector<int>{1, 2}, 4, 2)\n * false\n * > isSubArray(vector<int>{1, 2, 1}, vector<int>{1, 2, 1}, 3, 3)\n * true\n * > isSubArray(vector<int>{1, 0, 2, 2}, vector<int>{2, 2, 0}, 4, 3)\n * false\n */\nbool isSubArray(vector<int> a, vector<int> b, int n, int m) {\nint i = 0, j = 0;\n    while (i < n && j < m) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return (j == m);", "entry_point": "isSubArray", "result": "passed", "passed": true}
{"task_id": "MBCPP/577", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit in factorial of a given number.\n * > lastDigitFactorial(4)\n * 4\n * > lastDigitFactorial(21)\n * 0\n * > lastDigitFactorial(30)\n * 0\n */\nint lastDigitFactorial(int n) {\nif (n >= 5) {\n        return 0;\n    } else if (n == 0) {\n        return 1;\n    } else if (n == 1) {\n        return 1;\n    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n        return 6;\n    } else { // n == 4\n        return 4;\n    }", "entry_point": "lastDigitFactorial", "result": "Compilation failed: /tmp/tmp2t_6_03d/temp.cpp: In function \u2018int lastDigitFactorial(int)\u2019:\n/tmp/tmp2t_6_03d/temp.cpp:30:1: error: a template declaration cannot appear at block scope\n   30 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp2t_6_03d/temp.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmp2t_6_03d/temp.cpp:15:31: note: to match this \u2018{\u2019\n   15 | int lastDigitFactorial(int n) {\n      |                               ^\n", "passed": false}
{"task_id": "MBCPP/578", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to interleave lists of the same length.\n * > interleaveLists(vector<int>{1, 2, 3, 4, 5, 6, 7}, vector<int>{10, 20, 30, 40, 50, 60, 70}, vector<int>{100, 200, 300, 400, 500, 600, 700})\n * {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700}\n * > interleaveLists(vector<int>{10, 20}, vector<int>{15, 2}, vector<int>{5, 10})\n * {10, 15, 5, 20, 2, 10}\n * > interleaveLists(vector<int>{11, 44}, vector<int>{10, 15}, vector<int>{20, 5})\n * {11, 10, 20, 44, 15, 5}\n */\nvector<int> interleaveLists(vector<int> list1, vector<int> list2, vector<int> list3) {\nvector<int> result;\nint n = list1.size();\nfor (int i = 0; i < n; ++i) {\nresult.push_back(list1[i]);\nresult.push_back(list2[i]);\nresult.push_back(list3[i]);\n}\nreturn result;", "entry_point": "interleaveLists", "result": "passed", "passed": true}
{"task_id": "MBCPP/579", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the dissimilar elements in the given two tuples.\n * > findDissimilar(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {3, 6, 7, 10}\n * > findDissimilar(vector<int>{1, 2, 3, 4}, vector<int>{7, 2, 3, 9})\n * {1, 4, 7, 9}\n * > findDissimilar(vector<int>{21, 11, 25, 26}, vector<int>{26, 34, 21, 36})\n * {34, 36, 11, 25}\n */\nvector<int> findDissimilar(vector<int> testTup1, vector<int> testTup2) {\n// Sort both input vectors to use set_symmetric_difference\n    sort(testTup1.begin(), testTup1.end());\n    sort(testTup2.begin(), testTup2.end());\n\n    vector<int> dissimilarElements;\n    set_symmetric_difference(testTup1.begin(), testTup1.end(),\n                             testTup2.begin(), testTup2.end(),\n                             back_inserter(dissimilarElements));\n\n    return dissimilarElements;", "entry_point": "findDissimilar", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 2 did not pass.\n", "passed": false}
{"task_id": "MBCPP/581", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the surface area of the square pyramid.\n * > surfaceArea(3, 4)\n * 33\n * > surfaceArea(4, 5)\n * 56\n * > surfaceArea(1, 2)\n * 5\n */\nint surfaceArea(int b, int s) {\nreturn b * b + 2 * b * s;", "entry_point": "surfaceArea", "result": "passed", "passed": true}
{"task_id": "MBCPP/582", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a dictionary is empty or not.\n * > myDict(unordered_set<int>{10})\n * false\n * > myDict(unordered_set<int>{11})\n * false\n */\nbool myDict(unordered_set<int> dict1) {\nreturn dict1.empty();", "entry_point": "myDict", "result": "passed", "passed": true}
{"task_id": "MBCPP/583", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for nth catalan number.\n * > catalanNumber(10)\n * 16796\n * > catalanNumber(9)\n * 4862\n * > catalanNumber(7)\n * 429\n */\nint catalanNumber(int num) {\nif (num <= 1) {\n        return 1;\n    }\n\n    int* catalan = new int[num + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for (int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n        }\n    }\n\n    int result = catalan[num];\n    delete[] catalan;\n    return result;", "entry_point": "catalanNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/584", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all adverbs and their positions in a given sentence by using regex.\n * > findAdverbs(string(\"Clearly, he has no excuse for such behavior.\"))\n * string(\"0-7: Clearly\")\n * > findAdverbs(string(\"Please handle the situation carefuly\"))\n * string(\"28-36: carefuly\")\n * > findAdverbs(string(\"Complete the task quickly\"))\n * string(\"18-25: quickly\")\n */\nstring findAdverbs(string text) {\nstring result = \"\";\n    // A simple regex to find words ending in \"ly\". This might not catch all adverbs\n    // and might catch some non-adverbs, but it covers the examples given.\n    regex r(\"b(w+ly)b\"); \n\n    for (sregex_iterator it(text.begin(), text.end(), r), end_it; it != end_it; ++it) {\n        smatch match = *it;\n        if (!result.empty()) {\n            result += \"n\"; \n        }\n        result += to_string(match.position()) + \"-\" + to_string(match.position() + match.length()) + \": \" + match.str();\n    }\n    return result;", "entry_point": "findAdverbs", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/586", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to split the array and add the first part to the end.\n * > splitArr(vector<int>{12, 10, 5, 6, 52, 36}, 6, 2)\n * {5, 6, 52, 36, 12, 10}\n * > splitArr(vector<int>{1, 2, 3, 4}, 4, 1)\n * {2, 3, 4, 1}\n * > splitArr(vector<int>{0, 1, 2, 3, 4, 5, 6, 7}, 8, 3)\n * {3, 4, 5, 6, 7, 0, 1, 2}\n */\nvector<int> splitArr(vector<int> a, int n, int k) {\nvector<int> result;\nfor (int i = k; i < n; ++i) {\nresult.push_back(a[i]);\n}\nfor (int i = 0; i < k; ++i) {\nresult.push_back(a[i]);\n}\nreturn result;", "entry_point": "splitArr", "result": "passed", "passed": true}
{"task_id": "MBCPP/587", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list to a tuple.\n * > listTuple(vector<int>{5, 10, 7, 4, 15, 3})\n * {5, 10, 7, 4, 15, 3}\n * > listTuple(vector<int>{2, 4, 5, 6, 2, 3, 4, 4, 7})\n * {2, 4, 5, 6, 2, 3, 4, 4, 7}\n * > listTuple(vector<int>{58, 44, 56})\n * {58, 44, 56}\n */\nvector<int> listTuple(vector<int> listx) {\nreturn listx;", "entry_point": "listTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/588", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between largest and smallest value in a given array.\n * > bigDiff(vector<int>{1, 2, 3, 4})\n * 3\n * > bigDiff(vector<int>{4, 5, 12})\n * 8\n * > bigDiff(vector<int>{9, 2, 3})\n * 7\n */\nint bigDiff(vector<int> nums) {\nif (nums.empty()) {\n        return 0; // Or throw an exception, depending on desired behavior for empty input\n    }\n    int min_val = nums[0];\n    int max_val = nums[0];\n    for (int i = 1; i < nums.size(); ++i) {\n        if (nums[i] < min_val) {\n            min_val = nums[i];\n        }\n        if (nums[i] > max_val) {\n            max_val = nums[i];\n        }\n    }\n    return max_val - min_val;", "entry_point": "bigDiff", "result": "passed", "passed": true}
{"task_id": "MBCPP/589", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find perfect squares between two given numbers.\n * > perfectSquares(1, 30)\n * {1, 4, 9, 16, 25}\n * > perfectSquares(50, 100)\n * {64, 81, 100}\n * > perfectSquares(100, 200)\n * {100, 121, 144, 169, 196}\n */\nvector<int> perfectSquares(int a, int b) {\nvector<int> result;\nint start = ceil(sqrt(a));\nint end = floor(sqrt(b));\n\n\nfor (int i = start; i <= end; ++i) {\n    result.push_back(i * i);\n}\nreturn result;", "entry_point": "perfectSquares", "result": "passed", "passed": true}
{"task_id": "MBCPP/591", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to interchange the first and last elements in a list.\n * > swapList(vector<int>{12, 35, 9, 56, 24})\n * {24, 35, 9, 56, 12}\n * > swapList(vector<int>{1, 2, 3})\n * {3, 2, 1}\n * > swapList(vector<int>{4, 5, 6})\n * {6, 5, 4}\n */\nvector<int> swapList(vector<int> newlist) {\nif (newlist.size() < 2) {\n        return newlist;\n    }\n    std::swap(newlist[0], newlist[newlist.size() - 1]);\n    return newlist;", "entry_point": "swapList", "result": "passed", "passed": true}
{"task_id": "MBCPP/592", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of product of binomial co-efficients.\n * > sumOfProduct(3)\n * 15\n * > sumOfProduct(4)\n * 56\n * > sumOfProduct(1)\n * 1\n */\nint sumOfProduct(int n) {\nlong long nCr(int n, int r) {\n    if (r < 0 || r > n) {\n        return 0;\n    }\n    if (r == 0 || r == n) {\n        return 1;\n    }\n    if (r > n / 2) {\n        r = n - r;\n    }\n    long long res = 1;\n    for (int i = 1; i <= r; ++i) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n\nint sumOfProduct(int n) {\n    // The problem asks for the sum of products of consecutive binomial coefficients,\n    // which is defined as:\n    // sum_{i=0 to n-1} (nCi * nC(i+1))\n    // This is not a standard identity with a simple closed form like the sum of squares of binomial coefficients.\n    // The sum of squares of binomial coefficients is sum_{i=0 to n} (nCi)^2 = (2nCn).\n    // The given examples are:\n    // sumOfProduct(3) = (3C0*3C1) + (3C1*3C2) + (3C2*3C3) = (1*3) + (3*3) + (3*1) = 3 + 9 + 3 = 15\n    // sumOfProduct(4) = (4C0*4C1) + (4C1*4C2) + (4C2*4C3) + (4C3*4C4) = (1*4) + (4*6) + (6*4) + (4*1) = 4 + 24 + 24 + 4 = 56\n    // sumOfProduct(1) = (1C0*1C1) = (1*1) = 1\n\n    long long sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += nCr(n, i) * nCr(n, i + 1);\n    }\n    return sum;", "entry_point": "sumOfProduct", "result": "Compilation failed: /tmp/tmp_av8t3w3/temp.cpp: In function \u2018int sumOfProduct(int)\u2019:\n/tmp/tmp_av8t3w3/temp.cpp:16:29: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long nCr(int n, int r) {\n      |                             ^\n/tmp/tmp_av8t3w3/temp.cpp:33:25: error: a function-definition is not allowed here before \u2018{\u2019 token\n   33 | int sumOfProduct(int n) {\n      |                         ^\n/tmp/tmp_av8t3w3/temp.cpp:51:1: error: a template declaration cannot appear at block scope\n   51 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp_av8t3w3/temp.cpp:72:1: error: expected \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmp_av8t3w3/temp.cpp:15:25: note: to match this \u2018{\u2019\n   15 | int sumOfProduct(int n) {\n      |                         ^\n/tmp/tmp_av8t3w3/temp.cpp:72:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   72 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/593", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove leading zeroes from an ip address.\n * > removezeroIp(string(\"216.08.094.196\"))\n * string(\"216.8.94.196\")\n * > removezeroIp(string(\"12.01.024\"))\n * string(\"12.1.24\")\n * > removezeroIp(string(\"216.08.094.0196\"))\n * string(\"216.8.94.196\")\n */\nstring removezeroIp(string ip) {\nstring result = \"\";\n    string current_part = \"\";\n    for (char c : ip) {\n        if (c == '.') {\n            result += to_string(stoi(current_part));\n            result += \".\";\n            current_part = \"\";\n        } else {\n            current_part += c;\n        }\n    }\n    result += to_string(stoi(current_part));\n    return result;", "entry_point": "removezeroIp", "result": "passed", "passed": true}
{"task_id": "MBCPP/594", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference of first even and odd number of a given list.\n * > diffEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 3\n * > diffEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 1\n * > diffEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 9\n */\nint diffEvenOdd(vector<int> list1) {\nint firstEven = -1;\n    int firstOdd = -1;\n\n    for (int num : list1) {\n        if (num % 2 == 0) {\n            if (firstEven == -1) {\n                firstEven = num;\n            }\n        } else {\n            if (firstOdd == -1) {\n                firstOdd = num;\n            }\n        }\n        if (firstEven != -1 && firstOdd != -1) {\n            break; \n        }\n    }\n    return abs(firstEven - firstOdd);", "entry_point": "diffEvenOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/597", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find kth element from the given two sorted arrays.\n * > findKth(vector<int>{2, 3, 6, 7, 9}, vector<int>{1, 4, 8, 10}, 5, 4, 5)\n * 6\n * > findKth(vector<int>{100, 112, 256, 349, 770}, vector<int>{72, 86, 113, 119, 265, 445, 892}, 5, 7, 7)\n * 256\n * > findKth(vector<int>{3, 4, 7, 8, 10}, vector<int>{2, 5, 9, 11}, 5, 4, 6)\n * 8\n */\nint findKth(vector<int> arr1, vector<int> arr2, int m, int n, int k) {\nint i = 0, j = 0;\n    while (true) {\n        if (i == m) {\n            return arr2[j + k - 1];\n        }\n        if (j == n) {\n            return arr1[i + k - 1];\n        }\n        if (k == 1) {\n            return min(arr1[i], arr2[j]);\n        }\n\n        int mid = k / 2;\n        int new_i = min(i + mid, m) - 1;\n        int new_j = min(j + mid, n) - 1;\n\n        if (arr1[new_i] <= arr2[new_j]) {\n            k -= (new_i - i + 1);\n            i = new_i + 1;\n        } else {\n            k -= (new_j - j + 1);\n            j = new_j + 1;\n        }", "entry_point": "findKth", "result": "Compilation failed: /tmp/tmp_7b44kai/temp.cpp: In function \u2018int findKth(std::vector<int>, std::vector<int>, int, int, int)\u2019:\n/tmp/tmp_7b44kai/temp.cpp:40:1: error: a template declaration cannot appear at block scope\n   40 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp_7b44kai/temp.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp_7b44kai/temp.cpp:17:18: note: to match this \u2018{\u2019\n   17 |     while (true) {\n      |                  ^\n/tmp/tmp_7b44kai/temp.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmp_7b44kai/temp.cpp:15:70: note: to match this \u2018{\u2019\n   15 | int findKth(vector<int> arr1, vector<int> arr2, int m, int n, int k) {\n      |                                                                      ^\n", "passed": false}
{"task_id": "MBCPP/598", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is armstrong or not.\n * > armstrongNumber(153)\n * true\n * > armstrongNumber(259)\n * false\n * > armstrongNumber(4458)\n * false\n */\nbool armstrongNumber(int number) {\nint originalNumber = number;\n    int sum = 0;\n    int numberOfDigits = 0;\n\n    // Count the number of digits\n    int temp = number;\n    while (temp > 0) {\n        temp /= 10;\n        numberOfDigits++;\n    }\n\n    // Calculate the sum of powers of digits\n    temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        sum += pow(digit, numberOfDigits);\n        temp /= 10;\n    }\n\n    return sum == originalNumber;", "entry_point": "armstrongNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/600", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is even or not using bitwise operator.\n * > isEven(1)\n * false\n * > isEven(2)\n * true\n * > isEven(3)\n * false\n */\nbool isEven(int n) {\nreturn (n & 1) == 0;", "entry_point": "isEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/602", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated character in a given string.\n * > firstRepeatedChar(string(\"abcabc\"))\n * string(\"a\")\n * > firstRepeatedChar(string(\"abc\"))\n * string(\"None\")\n * > firstRepeatedChar(string(\"123123\"))\n * string(\"1\")\n */\nstring firstRepeatedChar(string str1) {\nunordered_set<char> seen_chars;\nfor (char c : str1) {\nif (seen_chars.count(c)) {\nreturn string(1, c);\n}\nseen_chars.insert(c);\n}\nreturn \"None\";", "entry_point": "firstRepeatedChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/603", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get a lucid number smaller than or equal to n.\n * > getLudic(10)\n * {1, 2, 3, 5, 7}\n * > getLudic(25)\n * {1, 2, 3, 5, 7, 11, 13, 17, 23, 25}\n * > getLudic(45)\n * {1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43}\n */\nvector<int> getLudic(int n) {\nvector<intt> ludicNumbers;\nif (n < 1) {\nreturn ludicNumbers;\n}\n\n\nvector<int> numbers;\nfor (int i = 1; i <= n; ++i) {\n    numbers.push_back(i);\n}\n\nint currentLudicIndex = 0;\nwhile (currentLudicIndex < numbers.size()) {\n    int ludic = numbers[currentLudicIndex];\n    ludicNumbers.push_back(ludic);\n\n    if (ludic == 1) {\n        currentLudicIndex++;\n        continue;\n    }\n\n    vector<int> nextNumbers;\n    int count = 0;\n    for (int num : numbers) {\n        count++;\n        if (count % ludic != 0) {\n            nextNumbers.push_back(num);\n        }\n    }\n    numbers = nextNumbers;\n    currentLudicIndex = 0; \n}\nreturn ludicNumbers;", "entry_point": "getLudic", "result": "Compilation failed: /tmp/tmprr4mlp4y/temp.cpp: In function \u2018std::vector<int> getLudic(int)\u2019:\n/tmp/tmprr4mlp4y/temp.cpp:16:8: error: \u2018intt\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n   16 | vector<intt> ludicNumbers;\n      |        ^~~~\n      |        int\n/tmp/tmprr4mlp4y/temp.cpp:16:12: error: template argument 1 is invalid\n   16 | vector<intt> ludicNumbers;\n      |            ^\n/tmp/tmprr4mlp4y/temp.cpp:16:12: error: template argument 2 is invalid\n/tmp/tmprr4mlp4y/temp.cpp:18:8: error: could not convert \u2018ludicNumbers\u2019 from \u2018int\u2019 to \u2018std::vector<int>\u2019\n   18 | return ludicNumbers;\n      |        ^~~~~~~~~~~~\n      |        |\n      |        int\n/tmp/tmprr4mlp4y/temp.cpp:30:18: error: request for member \u2018push_back\u2019 in \u2018ludicNumbers\u2019, which is of non-class type \u2018int\u2019\n   30 |     ludicNumbers.push_back(ludic);\n      |                  ^~~~~~~~~\n/tmp/tmprr4mlp4y/temp.cpp:48:8: error: could not convert \u2018ludicNumbers\u2019 from \u2018int\u2019 to \u2018std::vector<int>\u2019\n   48 | return ludicNumbers;\n      |        ^~~~~~~~~~~~\n      |        |\n      |        int\n", "passed": false}
{"task_id": "MBCPP/604", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse words in a given string.\n * > reverseWords(string(\"python program\"))\n * string(\"program python\")\n * > reverseWords(string(\"java language\"))\n * string(\"language java\")\n * > reverseWords(string(\"indian man\"))\n * string(\"man indian\")\n */\nstring reverseWords(string s) {\nreverse(s.begin(), s.end());\n    int n = s.length();\n    int start = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == ' ') {\n            reverse(s.begin() + start, s.begin() + i);\n            start = i + 1;\n        }\n    }\n    reverse(s.begin() + start, s.end());\n    return s;", "entry_point": "reverseWords", "result": "passed", "passed": true}
{"task_id": "MBCPP/605", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given integer is a prime number.\n * > primeNum(13)\n * true\n * > primeNum(7)\n * true\n * > primeNum(-1010)\n * false\n */\nbool primeNum(int num) {\nif (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "primeNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/606", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert degrees to radians.\n * > radianDegree(90)\n * 1.5707963267948966\n * > radianDegree(60)\n * 1.0471975511965976\n * > radianDegree(120)\n * 2.0943951023931953\n */\ndouble radianDegree(int degree) {\nreturn degree * M_PI / 180.0;", "entry_point": "radianDegree", "result": "passed", "passed": true}
{"task_id": "MBCPP/608", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find nth bell number.\n * > bellNumber(2)\n * 2\n * > bellNumber(3)\n * 5\n * > bellNumber(4)\n * 15\n */\nint bellNumber(int n) {\nint bell[n + 1][n + 1];\n    bell[0][0] = 1;\n\n    for (int i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        for (int j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];", "entry_point": "bellNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/609", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum possible value for the given periodic function.\n * > floorMin(10, 20, 30)\n * 15\n * > floorMin(1, 2, 1)\n * 0\n * > floorMin(11, 10, 9)\n * 9\n */\nint floorMin(int a, int b, int n) {\nint val = n - (a + b) / 2;\n    if (val >= 0) {\n        return val;\n    } else {\n        return n;\n    }", "entry_point": "floorMin", "result": "Compilation failed: /tmp/tmpt69trs51/temp.cpp: In function \u2018int floorMin(int, int, int)\u2019:\n/tmp/tmpt69trs51/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpt69trs51/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpt69trs51/temp.cpp:15:35: note: to match this \u2018{\u2019\n   15 | int floorMin(int a, int b, int n) {\n      |                                   ^\n", "passed": false}
{"task_id": "MBCPP/610", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the k'th element from a given list.\n * > removeKthElement(vector<int>{1, 1, 2, 3, 4, 4, 5, 1}, 3)\n * {1, 1, 3, 4, 4, 5, 1}\n * > removeKthElement(vector<int>{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4)\n * {0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}\n * > removeKthElement(vector<int>{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5)\n * {10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10}\n */\nvector<int> removeKthElement(vector<int> list1, int l) {\nif (l >= 1 && l <= list1.size()) {\n        list1.erase(list1.begin() + l - 1);\n    }\n    return list1;", "entry_point": "removeKthElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/611", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum of nth column from the given tuple list.\n * > maxOfNth(vector<vector<int>>{{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2)\n * 19\n * > maxOfNth(vector<vector<int>>{{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1)\n * 10\n * > maxOfNth(vector<vector<int>>{{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1)\n * 11\n */\nint maxOfNth(vector<vector<int>> testList, int n) {\nint maxVal = INT_MIN; // Initialize with the smallest possible integer value\n    for (int i = 0; i < testList.size(); ++i) {\n        if (n >= 0 && n < testList[i].size()) { // Check if the column index is valid for the current row\n            if (testList[i][n] > maxVal) {\n                maxVal = testList[i][n];\n            }\n        }\n    }\n    return maxVal;", "entry_point": "maxOfNth", "result": "passed", "passed": true}
{"task_id": "MBCPP/614", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n * > cummulativeSum(vector<vector<int>>{{1, 3}, {5, 6, 7}, {2, 6}})\n * 30\n * > cummulativeSum(vector<vector<int>>{{2, 4}, {6, 7, 8}, {3, 7}})\n * 37\n * > cummulativeSum(vector<vector<int>>{{3, 5}, {7, 8, 9}, {4, 8}})\n * 44\n */\nint cummulativeSum(vector<vector<int>> testList) {\nint totalSum = 0;\n    for (const auto& innerList : testList) {\n        for (int value : innerList) {\n            totalSum += value;\n        }\n    }\n    return totalSum;", "entry_point": "cummulativeSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/615", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find average value of the numbers in a given tuple of tuples.\n * > averageTuple(vector<vector<int>>{{10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4}})\n * {30.5, 34.25, 27.0, 23.25}\n * > averageTuple(vector<vector<int>>{{1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3}})\n * {25.5, -18.0, 3.75}\n * > averageTuple(vector<vector<int>>{{100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40}})\n * {305.0, 342.5, 270.0, 232.5}\n */\nvector<double> averageTuple(vector<vector<int>> nums) {\nif (nums.empty()) {\n        return {};\n    }\n\n    int num_cols = nums[0].size();\n    if (num_cols == 0) {\n        return {};\n    }\n\n    vector<double> averages(num_cols, 0.0);\n    int num_rows = nums.size();\n\n    for (int col = 0; col < num_cols; ++col) {\n        double sum = 0.0;\n        for (int row = 0; row < num_rows; ++row) {\n            sum += nums[row][col];\n        }\n        averages[col] = sum / num_rows;\n    }\n\n    return averages;", "entry_point": "averageTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/616", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perfom the modulo of tuple elements in the given two tuples.\n * > tupleModulo(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5})\n * {0, 4, 5, 1}\n * > tupleModulo(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6})\n * {5, 5, 6, 1}\n * > tupleModulo(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7})\n * {5, 6, 7, 1}\n */\nvector<int> tupleModulo(vector<int> testTup1, vector<int> testTup2) {\nvector<int> resultTup;\nfor (size_t i = 0; i < testTup1.size(); i++) {\nresultTup.push_back(testTup1[i] % testTup2[i]);\n}\nreturn resultTup;", "entry_point": "tupleModulo", "result": "passed", "passed": true}
{"task_id": "MBCPP/618", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide two lists using map and lambda function.\n * > divList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3})\n * {4.0, 2.5, 2.0}\n * > divList(vector<int>{3, 2}, vector<int>{1, 4})\n * {3.0, 0.5}\n * > divList(vector<int>{90, 120}, vector<int>{50, 70})\n * {1.8, 1.7142857142857142}\n */\nvector<double> divList(vector<int> nums1, vector<int> nums2) {\nvector<double> result;\ntransform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result),\n[](int a, int b) {\nreturn static_cast<double>(a) / b;\n});\nreturn result;", "entry_point": "divList", "result": "passed", "passed": true}
{"task_id": "MBCPP/619", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all the numbers in it to the given string.\n * > moveNum(string(\"I1love143you55three3000thousand\"))\n * string(\"Iloveyouthreethousand1143553000\")\n * > moveNum(string(\"Avengers124Assemble\"))\n * string(\"AvengersAssemble124\")\n * > moveNum(string(\"Its11our12path13to14see15things16do17things\"))\n * string(\"Itsourpathtoseethingsdothings11121314151617\")\n */\nstring moveNum(string testStr) {\nstring chars;\n    string nums;\n    for (char c : testStr) {\n        if (isdigit(c)) {\n            nums += c;\n        } else {\n            chars += c;\n        }\n    }\n    return chars + nums;", "entry_point": "moveNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/620", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest subset where each pair is divisible.\n * > largestSubset(vector<int>{1, 3, 6, 13, 17, 18}, 6)\n * 4\n * > largestSubset(vector<int>{10, 5, 3, 15, 20}, 5)\n * 3\n * > largestSubset(vector<int>{18, 1, 3, 6, 13, 17}, 6)\n * 4\n */\nint largestSubset(vector<int> a, int n) {\nsort(a.begin(), a.end());\nvector<int> dp(n, 1);\nint max_len = 0;\n\n\nfor (int i = 0; i < n; ++i) {\n    for (int j = 0; j < i; ++j) {\n        if (a[i] % a[j] == 0) {\n            dp[i] = max(dp[i], 1 + dp[j]);\n        }\n    }\n    max_len = max(max_len, dp[i]);\n}\nreturn max_len;", "entry_point": "largestSubset", "result": "passed", "passed": true}
{"task_id": "MBCPP/621", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to increment the numeric values in the given strings by k.\n * > incrementNumerics(vector<string>{string(\"MSM\"), string(\"234\"), string(\"is\"), string(\"98\"), string(\"123\"), string(\"best\"), string(\"4\")}, 6)\n * {string(\"MSM\"), string(\"240\"), string(\"is\"), string(\"104\"), string(\"129\"), string(\"best\"), string(\"10\")}\n * > incrementNumerics(vector<string>{string(\"Dart\"), string(\"356\"), string(\"is\"), string(\"88\"), string(\"169\"), string(\"Super\"), string(\"6\")}, 12)\n * {string(\"Dart\"), string(\"368\"), string(\"is\"), string(\"100\"), string(\"181\"), string(\"Super\"), string(\"18\")}\n * > incrementNumerics(vector<string>{string(\"Flutter\"), string(\"451\"), string(\"is\"), string(\"44\"), string(\"96\"), string(\"Magnificent\"), string(\"12\")}, 33)\n * {string(\"Flutter\"), string(\"484\"), string(\"is\"), string(\"77\"), string(\"129\"), string(\"Magnificent\"), string(\"45\")}\n */\nvector<string> incrementNumerics(vector<string> testList, int k) {\nvector<string> resultList;\nfor (const string& s : testList) {\nbool isNumeric = true;\nif (s.empty()) {\nisNumeric = false;\n} else {\nfor (char c : s) {\nif (!isdigit(c)) {\nisNumeric = false;\nbreak;\n}\n}\n}\n\n\n    if (isNumeric) {\n        try {\n            int num = stoi(s);\n            num += k;\n            resultList.push_back(to_string(num));\n        } catch (const out_of_range& oor) {\n            // Handle cases where the number is too large for int\n            // For this problem, we'll just push back the original string\n            resultList.push_back(s);\n        } catch (const invalid_argument& ia) {\n            // This shouldn't happen if isNumeric is true, but good practice\n            resultList.push_back(s);\n        }\n    } else {\n        resultList.push_back(s);\n    }\n}\nreturn resultList;", "entry_point": "incrementNumerics", "result": "passed", "passed": true}
{"task_id": "MBCPP/622", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of two sorted arrays of same size.\n * > getMedian(vector<int>{1, 12, 15, 26, 38}, vector<int>{2, 13, 17, 30, 45}, 5)\n * 16.0\n * > getMedian(vector<int>{2, 4, 8, 9}, vector<int>{7, 13, 19, 28}, 4)\n * 8.5\n * > getMedian(vector<int>{3, 6, 14, 23, 36, 42}, vector<int>{2, 18, 27, 39, 49, 55}, 6)\n * 25.0\n */\ndouble getMedian(vector<int> arr1, vector<int> arr2, int n) {\nint i = 0;\n    int j = 0;\n    int count;\n    double m1 = -1, m2 = -1;\n \n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] <= arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n \n    return (m1 + m2) / 2.0;", "entry_point": "getMedian", "result": "passed", "passed": true}
{"task_id": "MBCPP/623", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th power of individual elements in a list using lambda function.\n * > nthNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2)\n * {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n * > nthNums(vector<int>{10, 20, 30}, 3)\n * {1000, 8000, 27000}\n * > nthNums(vector<int>{12, 15}, 5)\n * {248832, 759375}\n */\nvector<int> nthNums(vector<int> nums, int n) {\nvector<int> result;\nresult.reserve(nums.size());\n\n\ntransform(nums.begin(), nums.end(), back_inserter(result), \n          [&](int num) {\n    long long res = 1; // Use long long to avoid overflow for intermediate calculations\n    for (int i = 0; i < n; ++i) {\n        res *= num;\n    }\n    return static_cast<int>(res); // Cast back to int for the return type\n});\n\nreturn result;", "entry_point": "nthNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/624", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to upper case.\n * > isUpper(string(\"person\"))\n * string(\"PERSON\")\n * > isUpper(string(\"final\"))\n * string(\"FINAL\")\n * > isUpper(string(\"Valid\"))\n * string(\"VALID\")\n */\nstring isUpper(string str) {\ntransform(str.begin(), str.end(), str.begin(), ::toupper);\n    return str;", "entry_point": "isUpper", "result": "passed", "passed": true}
{"task_id": "MBCPP/625", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to interchange first and last elements in a given list.\n * > swapList(vector<int>{1, 2, 3})\n * {3, 2, 1}\n * > swapList(vector<int>{1, 2, 3, 4, 4})\n * {4, 2, 3, 4, 1}\n * > swapList(vector<int>{4, 5, 6})\n * {6, 5, 4}\n */\nvector<int> swapList(vector<int> newlist) {\nif (newlist.size() < 2) {\n        return newlist;\n    }\n    std::swap(newlist[0], newlist[newlist.size() - 1]);\n    return newlist;", "entry_point": "swapList", "result": "passed", "passed": true}
{"task_id": "MBCPP/626", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest triangle that can be inscribed in the semicircle.\n * > triangleArea(0)\n * 0\n * > triangleArea(-1)\n * -1\n * > triangleArea(2)\n * 4\n */\nint triangleArea(int r) {\nif (r < 0) {\n        return -1;\n    }\n    return r * r;", "entry_point": "triangleArea", "result": "passed", "passed": true}
{"task_id": "MBCPP/627", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the smallest missing number from the given array.\n * > findFirstMissing(vector<int>{0, 1, 2, 3}, 0, 3)\n * 4\n * > findFirstMissing(vector<int>{0, 1, 2, 6, 9}, 0, 4)\n * 3\n * > findFirstMissing(vector<int>{2, 3, 5, 8, 9}, 0, 4)\n * 0\n */\nint findFirstMissing(vector<int> array, int start, int end) {\nif (start > end)\n        return end + 1;\n\n    if (start != array[start])\n        return start;\n\n    int mid = (start + end) / 2;\n\n    // Left half has all elements\n    // from 0 to mid\n    if (array[mid] == mid)\n        return findFirstMissing(array, mid + 1, end);\n\n    return findFirstMissing(array, start, mid);", "entry_point": "findFirstMissing", "result": "passed", "passed": true}
{"task_id": "MBCPP/628", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n * > replaceSpaces(string(\"My Name is Dawood\"))\n * string(\"My%20Name%20is%20Dawood\")\n * > replaceSpaces(string(\"I am a Programmer\"))\n * string(\"I%20am%20a%20Programmer\")\n * > replaceSpaces(string(\"I love Coding\"))\n * string(\"I%20love%20Coding\")\n */\nstring replaceSpaces(string str) {\nstring result = \"\";\n    for (char c : str) {\n        if (c == ' ') {\n            result += \"%20\";\n        } else {\n            result += c;\n        }\n    }\n    return result;", "entry_point": "replaceSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/629", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find even numbers from a mixed list.\n * > split(vector<int>{1, 2, 3, 4, 5})\n * {2, 4}\n * > split(vector<int>{4, 5, 6, 7, 8, 0, 1})\n * {4, 6, 8, 0}\n */\nvector<int> split(vector<int> list) {\nvector<int> even_numbers;\nfor (int num : list) {\nif (num % 2 == 0) {\neven_numbers.push_back(num);\n}\n}\nreturn even_numbers;", "entry_point": "split", "result": "passed", "passed": true}
{"task_id": "MBCPP/630", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n * > getCoordinates(vector<int>{3, 4})\n * {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}}\n * > getCoordinates(vector<int>{4, 5})\n * {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}}\n * > getCoordinates(vector<int>{5, 6})\n * {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}}\n */\nvector<vector<int>> getCoordinates(vector<int> testTup) {\nvector<vector<int>> result;\nint x = testTup[0];\nint y = testTup[1];\n\n\nfor (int i = x - 1; i <= x + 1; ++i) {\n    for (int j = y - 1; j <= y + 1; ++j) {\n        result.push_back({i, j});\n    }\n}\nreturn result;", "entry_point": "getCoordinates", "result": "passed", "passed": true}
{"task_id": "MBCPP/631", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n * > replaceSpaces(string(\"Jumanji The Jungle\"))\n * string(\"Jumanji_The_Jungle\")\n * > replaceSpaces(string(\"The Avengers\"))\n * string(\"The_Avengers\")\n * > replaceSpaces(string(\"Fast and Furious\"))\n * string(\"Fast_and_Furious\")\n */\nstring replaceSpaces(string text) {\nstd::regex pattern(\" \");\n    return std::regex_replace(text, pattern, \"_\");", "entry_point": "replaceSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/632", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to move all zeroes to the end of the given list.\n * > moveZero(vector<int>{1, 0, 2, 0, 3, 4})\n * {1, 2, 3, 4, 0, 0}\n * > moveZero(vector<int>{2, 3, 2, 0, 0, 4, 0, 5, 0})\n * {2, 3, 2, 4, 5, 0, 0, 0, 0}\n * > moveZero(vector<int>{0, 1, 0, 1, 1})\n * {1, 1, 1, 0, 0}\n */\nvector<int> moveZero(vector<int> numList) {\nint nonZeroCount = 0;\n    for (int i = 0; i < numList.size(); ++i) {\n        if (numList[i] != 0) {\n            numList[nonZeroCount++] = numList[i];\n        }\n    }\n    while (nonZeroCount < numList.size()) {\n        numList[nonZeroCount++] = 0;\n    }\n    return numList;", "entry_point": "moveZero", "result": "passed", "passed": true}
{"task_id": "MBCPP/633", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of xor of all pairs of numbers in the given array.\n * > pairOrSum(vector<int>{5, 9, 7, 6}, 4)\n * 47\n * > pairOrSum(vector<int>{7, 3, 5}, 3)\n * 12\n * > pairOrSum(vector<int>{7, 3}, 2)\n * 4\n */\nint pairOrSum(vector<int> arr, int n) {\nint ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            ans += arr[i] ^ arr[j];\n        }\n    }\n    return ans;", "entry_point": "pairOrSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/634", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of first n even natural numbers.\n * > evenPowerSum(2)\n * 272\n * > evenPowerSum(3)\n * 1568\n * > evenPowerSum(4)\n * 5664\n */\nint evenPowerSum(int n) {\nlong long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        long long even_num = 2LL * i;\n        sum += even_num * even_num * even_num * even_num;\n    }\n    return sum;", "entry_point": "evenPowerSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/635", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n * > heapSort(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n * > heapSort(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 22, 25, 25, 35, 58, 65, 75, 85}\n * > heapSort(vector<int>{7, 1, 9, 5})\n * {1, 5, 7, 9}\n */\nvector<int> heapSort(vector<int> iterable) {\npriority_queue<int, vector<int>, greater<int>> minHeap;\n\n\nfor (int val : iterable) {\n    minHeap.push(val);\n}\n\nvector<int> sorted_vec;\nwhile (!minHeap.empty()) {\n    sorted_vec.push_back(minHeap.top());\n    minHeap.pop();\n}\nreturn sorted_vec;", "entry_point": "heapSort", "result": "passed", "passed": true}
{"task_id": "MBCPP/636", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if roots of a quadratic equation are reciprocal of each other or not.\n * > checkSolution(2, 0, 2)\n * string(\"Yes\")\n * > checkSolution(2, -5, 2)\n * string(\"Yes\")\n * > checkSolution(1, 2, 3)\n * string(\"No\")\n */\nstring checkSolution(int a, int b, int c) {\nif (a == c) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }", "entry_point": "checkSolution", "result": "Compilation failed: /tmp/tmp4w0mia3k/temp.cpp: In function \u2018std::string checkSolution(int, int, int)\u2019:\n/tmp/tmp4w0mia3k/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp4w0mia3k/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp4w0mia3k/temp.cpp:15:43: note: to match this \u2018{\u2019\n   15 | string checkSolution(int a, int b, int c) {\n      |                                           ^\n", "passed": false}
{"task_id": "MBCPP/637", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given amount has no profit and no loss\n * > noprofitNoloss(1500, 1200)\n * false\n * > noprofitNoloss(100, 100)\n * true\n * > noprofitNoloss(2000, 5000)\n * false\n */\nbool noprofitNoloss(int actualCost, int saleAmount) {\nreturn actualCost == saleAmount;", "entry_point": "noprofitNoloss", "result": "passed", "passed": true}
{"task_id": "MBCPP/638", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate wind chill index.\n * > windChill(120, 35)\n * 40\n * > windChill(40, 70)\n * 86\n * > windChill(10, 100)\n * 116\n */\nint windChill(int v, int t) {\n/*\n    The National Weather Service (NWS) wind chill formula is:\n    Wind Chill (\u00b0F) = 35.74 + 0.6215T - 35.75(V^0.16) + 0.4275T(V^0.16)\n    Where:\n    T = Air Temperature (\u00b0F)\n    V = Wind Speed (mph)\n    */\n    return round(35.74 + (0.6215 * t) - (35.75 * pow(v, 0.16)) + (0.4275 * t * pow(v, 0.16)));", "entry_point": "windChill", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/639", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n * > sampleNam(vector<string>{string(\"sally\"), string(\"Dylan\"), string(\"rebecca\"), string(\"Diana\"), string(\"Joanne\"), string(\"keith\")})\n * 16\n * > sampleNam(vector<string>{string(\"php\"), string(\"res\"), string(\"Python\"), string(\"abcd\"), string(\"Java\"), string(\"aaa\")})\n * 10\n * > sampleNam(vector<string>{string(\"abcd\"), string(\"Python\"), string(\"abba\"), string(\"aba\")})\n * 6\n */\nint sampleNam(vector<string> sampleNames) {\nint totalLength = 0;\n    for (const string& name : sampleNames) {\n        if (!name.empty() && isupper(name[0])) {\n            totalLength += name.length();\n        }\n    }\n    return totalLength;", "entry_point": "sampleNam", "result": "passed", "passed": true}
{"task_id": "MBCPP/640", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the parenthesis area in a string.\n * > removeParenthesis(vector<string>{string(\"python (chrome)\")})\n * string(\"python\")\n * > removeParenthesis(vector<string>{string(\"string(.abc)\")})\n * string(\"string\")\n * > removeParenthesis(vector<string>{string(\"alpha(num)\")})\n * string(\"alpha\")\n */\nstring removeParenthesis(vector<string> items) {\nstring s = items[0];\n    string result = \"\";\n    for (char c : s) {\n        if (c == '(') {\n            break;\n        }\n        result += c;\n    }\n    return result;", "entry_point": "removeParenthesis", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/641", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth nonagonal number.\n * > isNonagonal(10)\n * 325\n * > isNonagonal(15)\n * 750\n * > isNonagonal(18)\n * 1089\n */\nint isNonagonal(int n) {\nreturn n * (7 * n - 5) / 2;", "entry_point": "isNonagonal", "result": "passed", "passed": true}
{"task_id": "MBCPP/643", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z', not at the start or end of the word.\n * > textMatchWordzMiddle(string(\"pythonzabc.\"))\n * string(\"Found a match!\")\n * > textMatchWordzMiddle(string(\"xyzabc.\"))\n * string(\"Found a match!\")\n * > textMatchWordzMiddle(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWordzMiddle(string text) {\nstd::regex rx(\"bw*[^zZ]w*[zZ]w*[^zZ]w*b\");\n    std::smatch m;\n    if (std::regex_search(text, m, rx)) {\n        return string(\"Found a match!\");\n    } else {\n        return string(\"Not matched!\");\n    }", "entry_point": "textMatchWordzMiddle", "result": "Compilation failed: /tmp/tmp5ioonp5n/temp.cpp: In function \u2018std::string textMatchWordzMiddle(std::string)\u2019:\n/tmp/tmp5ioonp5n/temp.cpp:24:1: error: a template declaration cannot appear at block scope\n   24 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp5ioonp5n/temp.cpp:45:1: error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmp5ioonp5n/temp.cpp:15:42: note: to match this \u2018{\u2019\n   15 | string textMatchWordzMiddle(string text) {\n      |                                          ^\n", "passed": false}
{"task_id": "MBCPP/644", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse an array upto a given position.\n * > reverseArrayUptoK(vector<int>{1, 2, 3, 4, 5, 6}, 4)\n * {4, 3, 2, 1, 5, 6}\n * > reverseArrayUptoK(vector<int>{4, 5, 6, 7}, 2)\n * {5, 4, 6, 7}\n * > reverseArrayUptoK(vector<int>{9, 8, 7, 6, 5}, 3)\n * {7, 8, 9, 6, 5}\n */\nvector<int> reverseArrayUptoK(vector<int> input, int k) {\nint n = input.size();\n    if (k <= 0 || k > n) {\n        // Handle invalid k or do nothing if k is out of bounds\n        return input; \n    }\n    \n    int left = 0;\n    int right = k - 1;\n    \n    while (left < right) {\n        swap(input[left], input[right]);\n        left++;\n        right--;\n    }\n    \n    return input;", "entry_point": "reverseArrayUptoK", "result": "passed", "passed": true}
{"task_id": "MBCPP/645", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the product of it\u2019s kth index in the given tuples.\n * > findKProduct(vector<vector<int>>{{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2)\n * 665\n * > findKProduct(vector<vector<int>>{{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1)\n * 280\n * > findKProduct(vector<vector<int>>{{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 0)\n * 210\n */\nint findKProduct(vector<vector<int>> testList, int k) {\nint product = 1;\n    for (const auto& tuple : testList) {\n        if (k < tuple.size()) {\n            product *= tuple[k];\n        }\n    }\n    return product;", "entry_point": "findKProduct", "result": "passed", "passed": true}
{"task_id": "MBCPP/646", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of cubes of size k in a cube of size n.\n * > noOfCubes(2, 1)\n * 8\n * > noOfCubes(5, 2)\n * 64\n * > noOfCubes(1, 1)\n * 1\n */\nint noOfCubes(int n, int k) {\nint result = (n - k + 1);\n    return result * result * result;", "entry_point": "noOfCubes", "result": "passed", "passed": true}
{"task_id": "MBCPP/647", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at uppercase letters.\n * > splitUpperstring(string(\"PythonProgramLanguage\"))\n * {string(\"Python\"), string(\"Program\"), string(\"Language\")}\n * > splitUpperstring(string(\"PythonProgram\"))\n * {string(\"Python\"), string(\"Program\")}\n * > splitUpperstring(string(\"ProgrammingLanguage\"))\n * {string(\"Programming\"), string(\"Language\")}\n */\nvector<string> splitUpperstring(string text) {\nvector<string> result;\nstring currentWord;\nfor (char c : text) {\nif (isupper(c) && !currentWord.empty()) {\nresult.push_back(currentWord);\ncurrentWord = \"\";\n}\ncurrentWord += c;\n}\nif (!currentWord.empty()) {\nresult.push_back(currentWord);\n}\nreturn result;", "entry_point": "splitUpperstring", "result": "passed", "passed": true}
{"task_id": "MBCPP/648", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n * > exchangeElements(vector<int>{0, 1, 2, 3, 4, 5})\n * {1, 0, 3, 2, 5, 4}\n * > exchangeElements(vector<int>{5, 6, 7, 8, 9, 10})\n * {6, 5, 8, 7, 10, 9}\n * > exchangeElements(vector<int>{25, 35, 45, 55, 75, 95})\n * {35, 25, 55, 45, 95, 75}\n */\nvector<int> exchangeElements(vector<int> lst) {\nfor (size_t i = 0; i + 1 < lst.size(); i += 2) {\n        std::swap(lst[i], lst[i+1]);\n    }\n    return lst;", "entry_point": "exchangeElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/649", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the sum of the numbers in a list between the indices of a specified range.\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10)\n * 29\n * > sumRangeList(vector<int>{1, 2, 3, 4, 5}, 1, 2)\n * 5\n * > sumRangeList(vector<int>{1, 0, 1, 2, 5, 6}, 4, 5)\n * 11\n */\nint sumRangeList(vector<int> nums, int m, int n) {\nint sum = 0;\n    for (int i = m; i <= n; ++i) {\n        sum += nums[i];\n    }\n    return sum;", "entry_point": "sumRangeList", "result": "passed", "passed": true}
{"task_id": "MBCPP/650", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two arrays are equal or not.\n * > areEqual(vector<int>{1, 2, 3}, vector<int>{3, 2, 1}, 3, 3)\n * true\n * > areEqual(vector<int>{1, 1, 1}, vector<int>{2, 2, 2}, 3, 3)\n * false\n * > areEqual(vector<int>{8, 9}, vector<int>{4, 5, 6}, 2, 3)\n * false\n */\nbool areEqual(vector<int> arr1, vector<int> arr2, int n, int m) {\nif (n != m) {\n        return false;\n    }\n    sort(arr1.begin(), arr1.end());\n    sort(arr2.begin(), arr2.end());\n    for (int i = 0; i < n; i++) {\n        if (arr1[i] != arr2[i]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "areEqual", "result": "passed", "passed": true}
{"task_id": "MBCPP/651", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if one tuple is a subset of another tuple.\n * > checkSubset(vector<int>{10, 4, 5, 6}, vector<int>{5, 10})\n * true\n * > checkSubset(vector<int>{1, 2, 3, 4}, vector<int>{5, 6})\n * false\n * > checkSubset(vector<int>{7, 8, 9, 10}, vector<int>{10, 8})\n * true\n */\nbool checkSubset(vector<int> testTup1, vector<int> testTup2) {\nfor (int x : testTup2) {\n        bool found = false;\n        for (int y : testTup1) {\n            if (x == y) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkSubset", "result": "passed", "passed": true}
{"task_id": "MBCPP/652", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n * > matrixToList(vector<vector<vector<int>>>{{{4, 5}, {7, 8}}, {{10, 13}, {18, 17}}, {{0, 4}, {10, 1}}})\n * string(\"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\")\n * > matrixToList(vector<vector<vector<int>>>{{{5, 6}, {8, 9}}, {{11, 14}, {19, 18}}, {{1, 5}, {11, 2}}})\n * string(\"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\")\n * > matrixToList(vector<vector<vector<int>>>{{{6, 7}, {9, 10}}, {{12, 15}, {20, 21}}, {{23, 7}, {15, 8}}})\n * string(\"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\")\n */\nstring matrixToList(vector<vector<vector<int>>> testList) {\nstringstream ss;\n    ss << \"[\";\n\n    int num_columns = 0;\n    if (!testList.empty() && !testList[0].empty()) {\n        num_columns = testList[0][0].size();\n    }\n\n    for (int col_idx = 0; col_idx < num_columns; ++col_idx) {\n        ss << \"(\";\n        for (size_t i = 0; i < testList.size(); ++i) {\n            for (size_t j = 0; j < testList[i].size(); ++j) {\n                ss << testList[i][j][col_idx];\n                if (j < testList[i].size() - 1 || i < testList.size() - 1) {\n                    ss << \", \";\n                }\n            }\n        }\n        ss << \")\";\n        if (col_idx < num_columns - 1) {\n            ss << \", \";\n        }\n    }\n\n    ss << \"]\";\n    return ss.str();", "entry_point": "matrixToList", "result": "passed", "passed": true}
{"task_id": "MBCPP/654", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a rectangle.\n * > rectanglePerimeter(10, 20)\n * 60\n * > rectanglePerimeter(10, 5)\n * 30\n * > rectanglePerimeter(4, 2)\n * 12\n */\nint rectanglePerimeter(int l, int b) {\nreturn 2 * (l + b);", "entry_point": "rectanglePerimeter", "result": "passed", "passed": true}
{"task_id": "MBCPP/655", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of n natural numbers.\n * > fifthPowerSum(2)\n * 33\n * > fifthPowerSum(4)\n * 1300\n * > fifthPowerSum(3)\n * 276\n */\nint fifthPowerSum(int n) {\nlong long sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += (long long)i * i * i * i * i;\n    }\n    return sum;", "entry_point": "fifthPowerSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/656", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum sum of absolute differences of two arrays.\n * > findMinSum(vector<int>{3, 2, 1}, vector<int>{2, 1, 3}, 3)\n * 0\n * > findMinSum(vector<int>{1, 2, 3}, vector<int>{4, 5, 6}, 3)\n * 9\n * > findMinSum(vector<int>{4, 1, 8, 7}, vector<int>{2, 3, 6, 5}, 4)\n * 6\n */\nint findMinSum(vector<int> a, vector<int> b, int n) {\nsort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++)\n        sum = sum + abs(a[i] - b[i]);\n    return sum;", "entry_point": "findMinSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/657", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit in factorial of a given number.\n * > firstDigit(5)\n * 1\n * > firstDigit(10)\n * 3\n * > firstDigit(7)\n * 5\n */\nint firstDigit(int n) {\ndouble fact_log = 0;\n    for (int i = 1; i <= n; i++) {\n        fact_log += log10(i);\n    }\n\n    // Get the fractional part of log10(n!)\n    // This fractional part represents the digits of N! scaled to be between 1 and 10\n    double fractional_part = fact_log - floor(fact_log);\n\n    // The first digit is 10 raised to the power of the fractional part\n    int first_digit = static_cast<int>(pow(10, fractional_part));\n\n    return first_digit;", "entry_point": "firstDigit", "result": "passed", "passed": true}
{"task_id": "MBCPP/658", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum occurrences in a given list.\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2})\n * 2\n * > maxOccurrences(vector<int>{1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11})\n * 1\n * > maxOccurrences(vector<int>{1, 2, 3, 2, 4, 5, 1, 1, 1})\n * 1\n */\nint maxOccurrences(vector<int> list1) {\nif (list1.empty()) {\n        return 0; \n    }\n\n    unordered_map<int, int> occurrences;\n    for (int num : list1) {\n        occurrences[num]++;\n    }\n\n    int maxCount = 0;\n    int maxItem = list1[0]; \n\n    for (auto const& [item, count] : occurrences) {\n        if (count > maxCount) {\n            maxCount = count;\n            maxItem = item;\n        }\n    }\n    return maxItem;", "entry_point": "maxOccurrences", "result": "passed", "passed": true}
{"task_id": "MBCPP/659", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print duplicants from a list of integers.\n * > repeat(vector<int>{10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20})\n * {20, 30, -20, 60}\n * > repeat(vector<int>{-1, 1, -1, 8})\n * {-1}\n * > repeat(vector<int>{1, 2, 3, 1, 2})\n * {1, 2}\n */\nvector<int> repeat(vector<int> x) {\nvector<int> result;\nunordered_map<int, int> freq;\nfor (int i : x) {\nfreq[i]++;\n}\nfor (auto const& [key, val] : freq) {\nif (val > 1) {\nresult.push_back(key);\n}\n}\nreturn result;", "entry_point": "repeat", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/660", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to choose points from two ranges such that no point lies in both the ranges.\n * > findPoints(5, 10, 1, 5)\n * {1, 10}\n * > findPoints(3, 5, 7, 9)\n * {3, 9}\n * > findPoints(1, 5, 2, 8)\n * {1, 8}\n */\nvector<int> findPoints(int l1, int r1, int l2, int r2) {\nvector<int> result;\nresult.push_back(min(l1, l2));\nresult.push_back(max(r1, r2));\nreturn result;", "entry_point": "findPoints", "result": "passed", "passed": true}
{"task_id": "MBCPP/661", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n * > maxSumOfThreeConsecutive(vector<int>{100, 1000, 100, 1000, 1}, 5)\n * 2101\n * > maxSumOfThreeConsecutive(vector<int>{3000, 2000, 1000, 3, 10}, 5)\n * 5013\n * > maxSumOfThreeConsecutive(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, 8)\n * 27\n */\nint maxSumOfThreeConsecutive(vector<int> arr, int n) {\nif (n == 0) return 0;\n    if (n == 1) return arr[0];\n    if (n == 2) return arr[0] + arr[1];\n\n    vector<int> dp(n);\n    dp[0] = arr[0];\n    dp[1] = arr[0] + arr[1];\n    dp[2] = max({arr[0] + arr[1], arr[1] + arr[2], arr[0] + arr[2]});\n\n    for (int i = 3; i < n; ++i) {\n        dp[i] = max({dp[i - 1],             // Exclude arr[i]\n                     dp[i - 2] + arr[i],     // Exclude arr[i-1]\n                     dp[i - 3] + arr[i] + arr[i - 1]}); // Exclude arr[i-2]\n    }\n\n    return dp[n - 1];", "entry_point": "maxSumOfThreeConsecutive", "result": "passed", "passed": true}
{"task_id": "MBCPP/662", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list in a dictionary.\n * > sortedDict(unordered_map<string, vector<int>>{{string(\"n1\"), {2, 3, 1}}, {string(\"n2\"), {5, 1, 2}}, {string(\"n3\"), {3, 2, 4}}})\n * {{string(\"n1\"), {1, 2, 3}}, {string(\"n2\"), {1, 2, 5}}, {string(\"n3\"), {2, 3, 4}}}\n * > sortedDict(unordered_map<string, vector<int>>{{string(\"n1\"), {25, 37, 41}}, {string(\"n2\"), {41, 54, 63}}, {string(\"n3\"), {29, 38, 93}}})\n * {{string(\"n1\"), {25, 37, 41}}, {string(\"n2\"), {41, 54, 63}}, {string(\"n3\"), {29, 38, 93}}}\n * > sortedDict(unordered_map<string, vector<int>>{{string(\"n1\"), {58, 44, 56}}, {string(\"n2\"), {91, 34, 58}}, {string(\"n3\"), {100, 200, 300}}})\n * {{string(\"n1\"), {44, 56, 58}}, {string(\"n2\"), {34, 58, 91}}, {string(\"n3\"), {100, 200, 300}}}\n */\nunordered_map<string, vector<int>> sortedDict(unordered_map<string, vector<int>> dict1) {\nunordered_map<string, vectoror<int>> result;\nfor (auto const& [key, val] : dict1) {\nvector<int> sorted_val = val;\nsort(sorted_val.begin(), sorted_val.end());\nresult[key] = sorted_val;\n}\nreturn result;", "entry_point": "sortedDict", "result": "Compilation failed: /tmp/tmp45t8li_s/temp.cpp: In function \u2018std::unordered_map<std::__cxx11::basic_string<char>, std::vector<int> > sortedDict(std::unordered_map<std::__cxx11::basic_string<char>, std::vector<int> >)\u2019:\n/tmp/tmp45t8li_s/temp.cpp:16:23: error: \u2018vectoror\u2019 was not declared in this scope\n   16 | unordered_map<string, vectoror<int>> result;\n      |                       ^~~~~~~~\n/tmp/tmp45t8li_s/temp.cpp:16:35: error: template argument 2 is invalid\n   16 | unordered_map<string, vectoror<int>> result;\n      |                                   ^~\n/tmp/tmp45t8li_s/temp.cpp:16:35: error: template argument 5 is invalid\n/tmp/tmp45t8li_s/temp.cpp:17:18: warning: structured bindings only available with \u2018-std=c++17\u2019 or \u2018-std=gnu++17\u2019\n   17 | for (auto const& [key, val] : dict1) {\n      |                  ^\n/tmp/tmp45t8li_s/temp.cpp:20:7: error: no match for \u2018operator[]\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple_element<0, const std::pair<const std::__cxx11::basic_string<char>, std::vector<int> > >::type\u2019 {aka \u2018const std::__cxx11::basic_string<char>\u2019})\n   20 | result[key] = sorted_val;\n      |       ^\n/tmp/tmp45t8li_s/temp.cpp:22:8: error: could not convert \u2018result\u2019 from \u2018int\u2019 to \u2018std::unordered_map<std::__cxx11::basic_string<char>, std::vector<int> >\u2019\n   22 | return result;\n      |        ^~~~~~\n      |        |\n      |        int\n", "passed": false}
{"task_id": "MBCPP/663", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest possible value of k such that k modulo x is y.\n * > findMaxVal(15, 10, 5)\n * 15\n * > findMaxVal(187, 10, 5)\n * 185\n * > findMaxVal(16, 11, 1)\n * 12\n */\nint findMaxVal(int n, int x, int y) {\nint result = n - (n % x);\n    if (result + y <= n) {\n        return result + y;\n    } else {\n        return result - x + y;\n    }", "entry_point": "findMaxVal", "result": "Compilation failed: /tmp/tmpbohmyicj/temp.cpp: In function \u2018int findMaxVal(int, int, int)\u2019:\n/tmp/tmpbohmyicj/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpbohmyicj/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpbohmyicj/temp.cpp:15:37: note: to match this \u2018{\u2019\n   15 | int findMaxVal(int n, int x, int y) {\n      |                                     ^\n", "passed": false}
{"task_id": "MBCPP/664", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of even numbers till a given even number.\n * > averageEven(2)\n * 2\n * > averageEven(4)\n * 3\n * > averageEven(100)\n * 51\n */\nint averageEven(int n) {\nif (n % 2 != 0) {\n        return -1; // Or throw an error, as the input should be an even number\n    }\n    return (n + 2) / 2;", "entry_point": "averageEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/665", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift first element to the end of given list.\n * > moveLast(vector<int>{1, 2, 3, 4})\n * {2, 3, 4, 1}\n * > moveLast(vector<int>{2, 3, 4, 1, 5, 0})\n * {3, 4, 1, 5, 0, 2}\n * > moveLast(vector<int>{5, 4, 3, 2, 1})\n * {4, 3, 2, 1, 5}\n */\nvector<int> moveLast(vector<int> numList) {\nif (numList.empty()) {\n        return numList;\n    }\n\n    int firstElement = numList[0];\n    for (size_t i = 0; i < numList.size() - 1; ++i) {\n        numList[i] = numList[i + 1];\n    }\n    numList[numList.size() - 1] = firstElement;\n\n    return numList;", "entry_point": "moveLast", "result": "passed", "passed": true}
{"task_id": "MBCPP/666", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count occurrence of a character in a string.\n * > countChar(string(\"Python\"), string(\"o\"))\n * 1\n * > countChar(string(\"little\"), string(\"t\"))\n * 2\n * > countChar(string(\"assert\"), string(\"s\"))\n * 2\n */\nint countChar(string str, string chr) {\nint count = 0;\n    for (char c : str) {\n        if (c == chr[0]) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/667", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of vowels in the string.\n * > checkVow(string(\"corner\"), string(\"AaEeIiOoUu\"))\n * 2\n * > checkVow(string(\"valid\"), string(\"AaEeIiOoUu\"))\n * 2\n * > checkVow(string(\"true\"), string(\"AaEeIiOoUu\"))\n * 2\n */\nint checkVow(string str, string vowels) {\nint count = 0;\n    for (char c : str) {\n        if (vowels.find(c) != string::npos) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "checkVow", "result": "passed", "passed": true}
{"task_id": "MBCPP/668", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to replace multiple occurence of character by single.\n * > replace(string(\"peep\"), string(\"e\"))\n * string(\"pep\")\n * > replace(string(\"Greek\"), string(\"e\"))\n * string(\"Grek\")\n * > replace(string(\"Moon\"), string(\"o\"))\n * string(\"Mon\")\n */\nstring replace(string str, string chr) {\nstring res = \"\";\n    if (str.length() == 0) {\n        return res;\n    }\n    res += str[0];\n    for (int i = 1; i < str.length(); i++) {\n        if (str[i] != chr[0] || str[i-1] != chr[0]) {\n            res += str[i];\n        }\n    }\n    return res;", "entry_point": "replace", "result": "passed", "passed": true}
{"task_id": "MBCPP/669", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given ip address is valid or not using regex.\n * > checkIp(string(\"192.168.0.1\"))\n * string(\"Valid IP address\")\n * > checkIp(string(\"110.234.52.124\"))\n * string(\"Valid IP address\")\n * > checkIp(string(\"366.1.2.2\"))\n * string(\"Invalid IP address\")\n */\nstring checkIp(string ip) {\nconst regex ipv4_regex(\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\");\n\n    if (regex_match(ip, ipv4_regex)) {\n        return \"Valid IP address\";\n    } else {\n        return \"Invalid IP address\";\n    }", "entry_point": "checkIp", "result": "Compilation failed: /tmp/tmpxw0frsvk/temp.cpp: In function \u2018std::string checkIp(std::string)\u2019:\n/tmp/tmpxw0frsvk/temp.cpp:24:1: error: a template declaration cannot appear at block scope\n   24 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpxw0frsvk/temp.cpp:45:1: error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmpxw0frsvk/temp.cpp:15:27: note: to match this \u2018{\u2019\n   15 | string checkIp(string ip) {\n      |                           ^\n", "passed": false}
{"task_id": "MBCPP/670", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a sequence of numbers has a decreasing trend or not.\n * > decreasingTrend(vector<int>{-4, -3, -2, -1})\n * true\n * > decreasingTrend(vector<int>{1, 2, 3})\n * true\n * > decreasingTrend(vector<int>{3, 2, 1})\n * false\n */\nbool decreasingTrend(vector<int> nums) {\nif (nums.empty() || nums.size() == 1) {\n        return true;\n    }\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        if (nums[i] < nums[i+1]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "decreasingTrend", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/671", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the right most unset bit.\n * > setRightMostUnsetBit(21)\n * 23\n * > setRightMostUnsetBit(11)\n * 15\n * > setRightMostUnsetBit(15)\n * 15\n */\nint setRightMostUnsetBit(int n) {\nif ((n & (n + 1)) == 0) { // All bits are set\n        return n;\n    }\n    return n | (n + 1);", "entry_point": "setRightMostUnsetBit", "result": "passed", "passed": true}
{"task_id": "MBCPP/672", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum of three numbers.\n * > maxOfThree(10, 20, 30)\n * 30\n * > maxOfThree(55, 47, 39)\n * 55\n * > maxOfThree(10, 49, 30)\n * 49\n */\nint maxOfThree(int num1, int num2, int num3) {\nreturn max(num1, max(num2, num3));", "entry_point": "maxOfThree", "result": "passed", "passed": true}
{"task_id": "MBCPP/673", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a list of multiple integers into a single integer.\n * > convert(vector<int>{1, 2, 3})\n * 123\n * > convert(vector<int>{4, 5, 6})\n * 456\n * > convert(vector<int>{7, 8, 9})\n * 789\n */\nint convert(vector<int> list) {\nint result = 0;\n    for (int digit : list) {\n        result = result * 10 + digit;\n    }\n    return result;", "entry_point": "convert", "result": "passed", "passed": true}
{"task_id": "MBCPP/674", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove duplicate words from a given string using collections module.\n * > removeDuplicate(string(\"Python Exercises Practice Solution Exercises\"))\n * string(\"Python Exercises Practice Solution\")\n * > removeDuplicate(string(\"Python Exercises Practice Solution Python\"))\n * string(\"Python Exercises Practice Solution\")\n * > removeDuplicate(string(\"Python Exercises Practice Solution Practice\"))\n * string(\"Python Exercises Practice Solution\")\n */\nstring removeDuplicate(string str) {\nstringstream ss(str);\n    string wordt<string> uniqueWords;\nstring result = \"\";\n\n\nwhile (ss >> word) {\n    if (uniqueWords.find(word) == uniqueWords.end()) {\n        uniqueWords.insert(word);\n        result += word + \" \";\n    }\n}\n\nif (!result.empty()) {\n    result.pop_back(); // Remove the trailing space\n}\n\nreturn result;", "entry_point": "removeDuplicate", "result": "Compilation failed: /tmp/tmpjnxcnxb7/temp.cpp: In function \u2018std::string removeDuplicate(std::string)\u2019:\n/tmp/tmpjnxcnxb7/temp.cpp:17:17: error: expected initializer before \u2018<\u2019 token\n   17 |     string wordt<string> uniqueWords;\n      |                 ^\n/tmp/tmpjnxcnxb7/temp.cpp:21:14: error: \u2018word\u2019 was not declared in this scope\n   21 | while (ss >> word) {\n      |              ^~~~\n/tmp/tmpjnxcnxb7/temp.cpp:22:9: error: \u2018uniqueWords\u2019 was not declared in this scope\n   22 |     if (uniqueWords.find(word) == uniqueWords.end()) {\n      |         ^~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/675", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two integers. however, if the sum is between the given range it will return 20.\n * > sumNums(2, 10, 11, 20)\n * 20\n * > sumNums(15, 17, 1, 10)\n * 32\n * > sumNums(10, 15, 5, 30)\n * 20\n */\nint sumNums(int x, int y, int m, int n) {\nint sum = x + y;\n    if (sum >= m && sum <= n) {\n        return 20;\n    } else {\n        return sum;\n    }", "entry_point": "sumNums", "result": "Compilation failed: /tmp/tmppo58aoep/temp.cpp: In function \u2018int sumNums(int, int, int, int)\u2019:\n/tmp/tmppo58aoep/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmppo58aoep/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmppo58aoep/temp.cpp:15:41: note: to match this \u2018{\u2019\n   15 | int sumNums(int x, int y, int m, int n) {\n      |                                         ^\n", "passed": false}
{"task_id": "MBCPP/676", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n * > removeExtraChar(string(\"**\\//Google Android// - 12. \"))\n * string(\"GoogleAndroid12\")\n * > removeExtraChar(string(\"****\\//Google Flutter//*** - 36. \"))\n * string(\"GoogleFlutter36\")\n * > removeExtraChar(string(\"**\\//Google Firebase// - 478. \"))\n * string(\"GoogleFirebase478\")\n */\nstring removeExtraChar(string text1) {\nreturn std::regex_replace(text1, std::regex(\"[^a-zA-Z0-9]\"), \"\");", "entry_point": "removeExtraChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/677", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the triangle is valid or not.\n * > validityTriangle(60, 50, 90)\n * false\n * > validityTriangle(45, 75, 60)\n * true\n * > validityTriangle(30, 50, 100)\n * true\n */\nbool validityTriangle(int a, int b, int c) {\nif (a + b > c && a + c > b && b + c > a)\n        return true;\n    else\n        return false;", "entry_point": "validityTriangle", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/678", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove spaces from a given string.\n * > removeSpaces(string(\"a b c\"))\n * string(\"abc\")\n * > removeSpaces(string(\"1 2 3\"))\n * string(\"123\")\n * > removeSpaces(string(\" b c\"))\n * string(\"bc\")\n */\nstring removeSpaces(string str1) {\nstring new_str = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] != ' ') {\n            new_str += str1[i];\n        }\n    }\n    return new_str;", "entry_point": "removeSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/679", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to access dictionary key\u2019s element by index.\n * > accessKey(unordered_map<string, int>{{string(\"physics\"), 80}, {string(\"math\"), 90}, {string(\"chemistry\"), 86}}, 0)\n * string(\"physics\")\n * > accessKey(unordered_map<string, int>{{string(\"python\"), 10}, {string(\"java\"), 20}, {string(\"C++\"), 30}}, 2)\n * string(\"C++\")\n * > accessKey(unordered_map<string, int>{{string(\"program\"), 15}, {string(\"computer\"), 45}}, 1)\n * string(\"computer\")\n */\nstring accessKey(unordered_map<string, int> ditionary, int key) {\nauto it = ditionary.begin();\n    advance(it, key);\n    return it->first;", "entry_point": "accessKey", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/680", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a sequence of numbers has an increasing trend or not.\n * > increasingTrend(vector<int>{1, 2, 3, 4})\n * true\n * > increasingTrend(vector<int>{4, 3, 2, 1})\n * false\n * > increasingTrend(vector<int>{0, 1, 4, 9})\n * true\n */\nbool increasingTrend(vector<int> nums) {\nif (nums.empty() || nums.size() == 1) {\n        return true;\n    }\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        if (nums[i] >= nums[i+1]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "increasingTrend", "result": "passed", "passed": true}
{"task_id": "MBCPP/681", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the smallest prime divisor of a number.\n * > smallestDivisor(10)\n * 2\n * > smallestDivisor(25)\n * 5\n * > smallestDivisor(31)\n * 31\n */\nint smallestDivisor(int n) {\nif (n % 2 == 0) {\n        return 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return n;", "entry_point": "smallestDivisor", "result": "passed", "passed": true}
{"task_id": "MBCPP/682", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two lists using map and lambda function.\n * > mulList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {4, 10, 18}\n * > mulList(vector<int>{1, 2}, vector<int>{3, 4})\n * {3, 8}\n * > mulList(vector<int>{90, 120}, vector<int>{50, 70})\n * {4500, 8400}\n */\nvector<int> mulList(vector<int> nums1, vector<int> nums2) {\nvector<int> result;\ntransform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result),\n[](int a, int b){ return a * b; });\nreturn result;", "entry_point": "mulList", "result": "passed", "passed": true}
{"task_id": "MBCPP/683", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by sum of two squares or not.\n * > sumSquare(25)\n * true\n * > sumSquare(24)\n * false\n * > sumSquare(17)\n * true\n */\nbool sumSquare(int n) {\nif (n < 0) {\n        return false;\n    }\n    for (long long i = 0; i * i <= n; ++i) {\n        long long j_squared = n - i * i;\n        long long j = sqrt(j_squared);\n        if (j * j == j_squared) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "sumSquare", "result": "passed", "passed": true}
{"task_id": "MBCPP/684", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count occurences of a character in a repeated string.\n * > countChar(string(\"abcac\"), string(\"a\"))\n * 4\n * > countChar(string(\"abca\"), string(\"c\"))\n * 2\n * > countChar(string(\"aba\"), string(\"a\"))\n * 7\n */\nint countChar(string str, string x) {\nlong n = 1000000000000L;\n    long len = str.length();\n    long count = 0;\n    for (char c : str) {\n        if (c == x[0]) {\n            count++;\n        }\n    }\n    long repetitions = n / len;\n    long remainder = n % len;\n    long totalCount = repetitions * count;\n    for (int i = 0; i < remainder; i++) {\n        if (str[i] == x[0]) {\n            totalCount++;\n        }\n    }\n    return totalCount;", "entry_point": "countChar", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/685", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of prime numbers between 1 to n.\n * > sumOfPrimes(10)\n * 17\n * > sumOfPrimes(20)\n * 77\n * > sumOfPrimes(5)\n * 10\n */\nint sumOfPrimes(int n) {\nint sum = 0;\nvector<bool> is_prime(n + 1, true);\nis_prime[0] = is_prime[1] = false;\nfor (int p = 2; p * p <= n; p++) {\nif (is_prime[p]) {\nfor (int i = p * p; i <= n; i += p)\nis_prime[i] = false;\n}\n}\nfor (int p = 2; p <= n; p++) {\nif (is_prime[p]) {\nsum += p;\n}\n}\nreturn sum;", "entry_point": "sumOfPrimes", "result": "passed", "passed": true}
{"task_id": "MBCPP/686", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the frequency of each element in the given list.\n * > freqElement(vector<int>{4, 5, 4, 5, 6, 6, 5, 5, 4})\n * string(\"{4: 3, 5: 4, 6: 2}\")\n * > freqElement(vector<int>{7, 8, 8, 9, 4, 7, 6, 5, 4})\n * string(\"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\")\n * > freqElement(vector<int>{1, 4, 3, 1, 4, 5, 2, 6, 2, 7})\n * string(\"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\")\n */\nstring freqElement(vector<int> testTup) {\nmap<int, int> freq;\n    for (int i : testTup) {\n        freq[i]++;\n    }\n    string result = \"{\";\n    for (auto const& [key, val] : freq) {\n        result += to_string(key) + \": \" + to_string(val) + \", \";\n    }\n    if (result.length() > 1) {\n        result.pop_back(); // Remove trailing space\n        result.pop_back(); // Remove trailing comma\n    }\n    result += \"}\";\n    return result;", "entry_point": "freqElement", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 1 did not pass.\n", "passed": false}
{"task_id": "MBCPP/687", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n * > recurGcd(12, 14)\n * 2\n * > recurGcd(13, 17)\n * 1\n * > recurGcd(9, 3)\n * 3\n */\nint recurGcd(int a, int b) {\nif (b == 0)\n        return a;\n    return recurGcd(b, a % b);", "entry_point": "recurGcd", "result": "passed", "passed": true}
{"task_id": "MBCPP/688", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the length of a complex number.\n * > lenComplex(3, 4)\n * 5.0\n * > lenComplex(9, 10)\n * 13.45362404707371\n * > lenComplex(7, 9)\n * 11.40175425099138\n */\ndouble lenComplex(int a, int b) {\nreturn sqrt(pow(a, 2) + pow(b, 2));", "entry_point": "lenComplex", "result": "passed", "passed": true}
{"task_id": "MBCPP/689", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n * > minJumps(vector<int>{1, 3, 6, 1, 0, 9}, 6)\n * 3\n * > minJumps(vector<int>{1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}, 11)\n * 3\n * > minJumps(vector<int>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 11)\n * 10\n */\nint minJumps(vector<int> arr, int n) {\nif (n <= 1)\n        return 0;\n    if (arr[0] == 0)\n        return -1;\n    int maxReach = arr[0];\n    int step = arr[0];\n    int jump = 1;\n    for (int i = 1; i < n; i++) {\n        if (i == n - 1)\n            return jump;\n        maxReach = max(maxReach, i + arr[i]);\n        step--;\n        if (step == 0) {\n            jump++;\n            if (i >= maxReach)\n                return -1;\n            step = maxReach - i;\n        }\n    }\n    return -1;", "entry_point": "minJumps", "result": "passed", "passed": true}
{"task_id": "MBCPP/690", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply consecutive numbers of a given list.\n * > mulConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {1, 3, 12, 16, 20, 30, 42}\n * > mulConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10})\n * {20, 40, 72, 54, 60}\n * > mulConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 6, 12, 20, 30, 42, 56, 72, 90}\n */\nvector<int> mulConsecutiveNums(vector<int> nums) {\nvector<int> result;\nif (nums.empty()) {\nreturn result;\n}\nfor (size_t i = 0; i < nums.size() - 1; ++i) {\nresult.push_back(nums[i] * nums[i+1]);\n}\nreturn result;", "entry_point": "mulConsecutiveNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/691", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n * > groupElement(vector<vector<int>>{{6, 5}, {2, 7}, {2, 5}, {8, 7}, {9, 8}, {3, 7}})\n * {{5, {6, 2}}, {7, {2, 8, 3}}, {8, {9}}}\n * > groupElement(vector<vector<int>>{{7, 6}, {3, 8}, {3, 6}, {9, 8}, {10, 9}, {4, 8}})\n * {{6, {7, 3}}, {8, {3, 9, 4}}, {9, {10}}}\n * > groupElement(vector<vector<int>>{{8, 7}, {4, 9}, {4, 7}, {10, 9}, {11, 10}, {5, 9}})\n * {{7, {8, 4}}, {9, {4, 10, 5}}, {10, {11}}}\n */\nunordered_map<int, vector<int>> groupElement(vector<vector<int>> testList) {\nunordered_map<int, vector<int>> result;\nfor (const auto& p : testList) {\nresult[p[1]].push_back(p[0]);\n}\nreturn result;", "entry_point": "groupElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/692", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last two digits in factorial of a given number.\n * > lastTwoDigits(7)\n * 40\n * > lastTwoDigits(5)\n * 20\n * > lastTwoDigits(2)\n * 2\n */\nint lastTwoDigits(int n) {\nif (n >= 10) {\n        return 0; // For N >= 10, N! is a multiple of 100, so last two digits are 00.\n    }\n\n    long long fac = 1;\n    for (int i = 1; i <= n; i++) {\n        fac = (fac * i) % 100;\n    }\n    return fac;", "entry_point": "lastTwoDigits", "result": "passed", "passed": true}
{"task_id": "MBCPP/693", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove multiple spaces in a string by using regex.\n * > removeMultipleSpaces(string(\"Google      Assistant\"))\n * string(\"Google Assistant\")\n * > removeMultipleSpaces(string(\"Quad      Core\"))\n * string(\"Quad Core\")\n * > removeMultipleSpaces(string(\"ChromeCast      Built-in\"))\n * string(\"ChromeCast Built-in\")\n */\nstring removeMultipleSpaces(string text1) {\nstd::regex multipleSpaces(\"s+\");\n    return std::regex_replace(text1, multipleSpaces, \" \");", "entry_point": "removeMultipleSpaces", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/694", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract unique values from the given dictionary values.\n * > extractUnique(unordered_map<string, vector<int>>{{string(\"msm\"), {5, 6, 7, 8}}, {string(\"is\"), {10, 11, 7, 5}}, {string(\"best\"), {6, 12, 10, 8}}, {string(\"for\"), {1, 2, 5}}})\n * {1, 2, 5, 6, 7, 8, 10, 11, 12}\n * > extractUnique(unordered_map<string, vector<int>>{{string(\"Built\"), {7, 1, 9, 4}}, {string(\"for\"), {11, 21, 36, 14, 9}}, {string(\"ISP\"), {4, 1, 21, 39, 47}}, {string(\"TV\"), {1, 32, 38}}})\n * {1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47}\n * > extractUnique(unordered_map<string, vector<int>>{{string(\"F\"), {11, 13, 14, 17}}, {string(\"A\"), {12, 11, 15, 18}}, {string(\"N\"), {19, 21, 15, 36}}, {string(\"G\"), {37, 36, 35}}})\n * {11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37}\n */\nvector<int> extractUnique(unordered_map<string, vector<int>> testDict) {\nstd::set<int> unique_elements;\nfor (auto const& [key, val] : testDict) {\nfor (int x : val) {\nunique_elements.insert(x);\n}\n}\nstd::vector<int> result(unique_elements.begin(), unique_elements.end());\nreturn result;", "entry_point": "extractUnique", "result": "passed", "passed": true}
{"task_id": "MBCPP/695", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n * > checkGreater(vector<int>{10, 4, 5}, vector<int>{13, 5, 18})\n * true\n * > checkGreater(vector<int>{1, 2, 3}, vector<int>{2, 1, 4})\n * false\n * > checkGreater(vector<int>{4, 5, 6}, vector<int>{5, 6, 7})\n * true\n */\nbool checkGreater(vector<int> testTup1, vector<int> testTup2) {\nfor (int i = 0; i < testTup1.size(); i++) {\n        if (testTup1[i] >= testTup2[i]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkGreater", "result": "passed", "passed": true}
{"task_id": "MBCPP/697", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of even elements in the given list using lambda function.\n * > countEven(vector<int>{1, 2, 3, 5, 7, 8, 9, 10})\n * 3\n * > countEven(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * 5\n * > countEven(vector<int>{1, 2, 4, 8, 9})\n * 3\n */\nint countEven(vector<int> arrayNums) {\nreturn std::count_if(arrayNums.begin(), arrayNums.end(), [](int n){\n        return n % 2 == 0;\n    });", "entry_point": "countEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/701", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the equilibrium index of the given array.\n * > equilibriumIndex(vector<int>{1, 2, 3, 4, 1, 2, 3})\n * 3\n * > equilibriumIndex(vector<int>{-7, 1, 5, 2, -4, 3, 0})\n * 3\n * > equilibriumIndex(vector<int>{1, 2, 3})\n * -1\n */\nint equilibriumIndex(vector<int> arr) {\nint n = arr.size();\n    if (n == 0) {\n        return -1; // Or handle as per problem statement, often -1 for no such index\n    }\n\n    long long totalSum = 0;\n    for (int x : arr) {\n        totalSum += x;\n    }\n\n    long long leftSum = 0;\n    for (int i = 0; i < n; ++i) {\n        // The sum of elements to the right of current index i\n        // is totalSum - leftSum - arr[i]\n        if (leftSum == (totalSum - leftSum - arr[i])) {\n            return i;\n        }\n        leftSum += arr[i];\n    }\n\n    return -1;", "entry_point": "equilibriumIndex", "result": "passed", "passed": true}
{"task_id": "MBCPP/702", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n * > removals(vector<int>{1, 3, 4, 9, 10, 11, 12, 17, 20}, 9, 4)\n * 5\n * > removals(vector<int>{1, 5, 6, 2, 8}, 5, 2)\n * 3\n * > removals(vector<int>{1, 2, 3, 4, 5, 6}, 6, 3)\n * 2\n */\nint removals(vector<int> arr, int n, int k) {\nsort(arr.begin(), arr.end());\n    int minRemovals = n; \n\n    for (int i = 0; i < n; ++i) {\n        // For each element arr[i] as the minimum in the remaining subarray\n        // find the largest j such that arr[j] - arr[i] <= k\n        // We can use binary search (upper_bound) to find this j efficiently.\n        auto it = upper_bound(arr.begin() + i, arr.end(), arr[i] + k);\n        int j = distance(arr.begin(), it) - 1; // j is the index of the last element <= arr[i] + k\n\n        // The number of elements in the valid subarray arr[i...j] is (j - i + 1)\n        // The number of elements to remove is n - (j - i + 1)\n        minRemovals = min(minRemovals, n - (j - i + 1));\n    }\n    return minRemovals;", "entry_point": "removals", "result": "passed", "passed": true}
{"task_id": "MBCPP/703", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given key is present in the dictionary or not.\n * > isKeyPresent(unordered_map<int, int>{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 5)\n * true\n * > isKeyPresent(unordered_map<int, int>{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 6)\n * true\n * > isKeyPresent(unordered_map<int, int>{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 10)\n * false\n */\nbool isKeyPresent(unordered_map<int, int> d, int x) {\nreturn d.count(x) > 0;", "entry_point": "isKeyPresent", "result": "passed", "passed": true}
{"task_id": "MBCPP/704", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the harmonic sum of n-1.\n * > harmonicSum(10)\n * 2.9289682539682538\n * > harmonicSum(4)\n * 2.083333333333333\n * > harmonicSum(7)\n * 2.5928571428571425\n */\ndouble harmonicSum(int n) {\ndouble sum = 0.0;\n    for (int i = 1; i <= n; ++i) {\n        sum += 1.0 / i;\n    }\n    return sum;", "entry_point": "harmonicSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/706", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether an array is subset of another array.\n * > isSubset(vector<int>{11, 1, 13, 21, 3, 7}, 6, vector<int>{11, 3, 7, 1}, 4)\n * true\n * > isSubset(vector<int>{1, 2, 3, 4, 5, 6}, 6, vector<int>{1, 2, 4}, 3)\n * true\n * > isSubset(vector<int>{10, 5, 2, 23, 19}, 5, vector<int>{19, 5, 3}, 3)\n * false\n */\nbool isSubset(vector<int> arr1, int m, vector<int> arr2, int n) {\nunordered_set<int> s;\nfor (int i = 0; i < m; i++) {\ns.insert(arr1[i]);\n}\nfor (int i = 0; i < n; i++) {\nif (s.find(arr2[i]) == s.end()) {\nreturn false;\n}\n}\nreturn true;", "entry_point": "isSubset", "result": "passed", "passed": true}
{"task_id": "MBCPP/707", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the total set bits from 1 to n.\n * > countSetBits(16)\n * 33\n * > countSetBits(2)\n * 2\n * > countSetBits(14)\n * 28\n */\nint countSetBits(int n) {\nif (n == 0)\n        return 0;\n    int x = log2(n);\n    int ans = x * (1 << (x - 1)) + (n - (1 << x) + 1) + countSetBits(n - (1 << x));\n    return ans;", "entry_point": "countSetBits", "result": "passed", "passed": true}
{"task_id": "MBCPP/708", "code": "vector<string> result;\nstringstream ss(str);\nstring word;\nwhile (ss >> word) {\nresult.push_back(word);\n}\nreturn result;", "entry_point": "convert", "result": "Compilation failed: /tmp/tmpbqfy7aci/temp.cpp:2:1: error: \u2018vector\u2019 does not name a type\n    2 | vector<string> result;\n      | ^~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:3:1: error: \u2018stringstream\u2019 does not name a type\n    3 | stringstream ss(str);\n      | ^~~~~~~~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:4:1: error: \u2018string\u2019 does not name a type; did you mean \u2018stdin\u2019?\n    4 | string word;\n      | ^~~~~~\n      | stdin\n/tmp/tmpbqfy7aci/temp.cpp:5:1: error: expected unqualified-id before \u2018while\u2019\n    5 | while (ss >> word) {\n      | ^~~~~\n/tmp/tmpbqfy7aci/temp.cpp:8:1: error: expected unqualified-id before \u2018return\u2019\n    8 | return result;\n      | ^~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:9:1: error: expected declaration before \u2018}\u2019 token\n    9 | }\n      | ^\n/tmp/tmpbqfy7aci/temp.cpp: In function \u2018int main(int, char**)\u2019:\n/tmp/tmpbqfy7aci/temp.cpp:16:5: error: \u2018vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019?\n   16 |     vector<string> x0 = convert(string(\"python program\"));\n      |     ^~~~~~\n      |     std::vector\nIn file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n                 from /tmp/tmpbqfy7aci/temp.cpp:1:\n/usr/include/c++/9/bits/stl_vector.h:386:11: note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:16:12: error: \u2018string\u2019 was not declared in this scope; did you mean \u2018std::string\u2019?\n   16 |     vector<string> x0 = convert(string(\"python program\"));\n      |            ^~~~~~\n      |            std::string\nIn file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpbqfy7aci/temp.cpp:1:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>    string;\n      |                                 ^~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:16:20: error: \u2018x0\u2019 was not declared in this scope; did you mean \u2018y0\u2019?\n   16 |     vector<string> x0 = convert(string(\"python program\"));\n      |                    ^~\n      |                    y0\n/tmp/tmpbqfy7aci/temp.cpp:16:25: error: \u2018convert\u2019 was not declared in this scope\n   16 |     vector<string> x0 = convert(string(\"python program\"));\n      |                         ^~~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:18:15: error: \u2018runtime_error\u2019 was not declared in this scope; did you mean \u2018std::runtime_error\u2019?\n   18 |         throw runtime_error(\"Exception -- test case 0 did not pass.\");\n      |               ^~~~~~~~~~~~~\n      |               std::runtime_error\nIn file included from /usr/include/c++/9/system_error:41,\n                 from /usr/include/c++/9/bits/ios_base.h:46,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpbqfy7aci/temp.cpp:1:\n/usr/include/c++/9/stdexcept:219:9: note: \u2018std::runtime_error\u2019 declared here\n  219 |   class runtime_error : public exception\n      |         ^~~~~~~~~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:21:20: error: \u2018x1\u2019 was not declared in this scope; did you mean \u2018y1\u2019?\n   21 |     vector<string> x1 = convert(string(\"Data Analysis\"));\n      |                    ^~\n      |                    y1\n/tmp/tmpbqfy7aci/temp.cpp:23:15: error: \u2018runtime_error\u2019 was not declared in this scope; did you mean \u2018std::runtime_error\u2019?\n   23 |         throw runtime_error(\"Exception -- test case 1 did not pass.\");\n      |               ^~~~~~~~~~~~~\n      |               std::runtime_error\nIn file included from /usr/include/c++/9/system_error:41,\n                 from /usr/include/c++/9/bits/ios_base.h:46,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpbqfy7aci/temp.cpp:1:\n/usr/include/c++/9/stdexcept:219:9: note: \u2018std::runtime_error\u2019 declared here\n  219 |   class runtime_error : public exception\n      |         ^~~~~~~~~~~~~\n/tmp/tmpbqfy7aci/temp.cpp:26:20: error: \u2018x2\u2019 was not declared in this scope\n   26 |     vector<string> x2 = convert(string(\"Hadoop Training\"));\n      |                    ^~\n/tmp/tmpbqfy7aci/temp.cpp:28:15: error: \u2018runtime_error\u2019 was not declared in this scope; did you mean \u2018std::runtime_error\u2019?\n   28 |         throw runtime_error(\"Exception -- test case 2 did not pass.\");\n      |               ^~~~~~~~~~~~~\n      |               std::runtime_error\nIn file included from /usr/include/c++/9/system_error:41,\n                 from /usr/include/c++/9/bits/ios_base.h:46,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpbqfy7aci/temp.cpp:1:\n/usr/include/c++/9/stdexcept:219:9: note: \u2018std::runtime_error\u2019 declared here\n  219 |   class runtime_error : public exception\n      |         ^~~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/709", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count unique keys for each value present in the tuple.\n * > getUnique(vector<vector<int>>{{3, 4}, {1, 2}, {2, 4}, {8, 2}, {7, 2}, {8, 1}, {9, 1}, {8, 4}, {10, 4}})\n * string(\"{4: 4, 2: 3, 1: 2}\")\n * > getUnique(vector<vector<int>>{{4, 5}, {2, 3}, {3, 5}, {9, 3}, {8, 3}, {9, 2}, {10, 2}, {9, 5}, {11, 5}})\n * string(\"{5: 4, 3: 3, 2: 2}\")\n * > getUnique(vector<vector<int>>{{6, 5}, {3, 4}, {2, 6}, {11, 1}, {8, 22}, {8, 11}, {4, 3}, {14, 3}, {11, 6}})\n * string(\"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\")\n */\nstring getUnique(vector<vector<int>> testList) {\nmap<int, sett<int>> value_to_keys;\n\n\nfor (const auto& p : testList) {\n    value_to_keys[p[1]].insert(p[0]);\n}\n\nstringstream ss;\nss << \"{\";\nbool first_value = true;\nfor (const auto& pair : value_to_keys) {\n    if (!first_value) {\n        ss << \", \";\n    }\n    ss << pair.first << \": \" << pair.second.size();\n    first_value = false;\n}\nss << \"}\";\n\nreturn ss.str();", "entry_point": "getUnique", "result": "Compilation failed: /tmp/tmpxebe1870/temp.cpp: In function \u2018std::string getUnique(std::vector<std::vector<int> >)\u2019:\n/tmp/tmpxebe1870/temp.cpp:16:10: error: \u2018sett\u2019 was not declared in this scope\n   16 | map<int, sett<int>> value_to_keys;\n      |          ^~~~\n/tmp/tmpxebe1870/temp.cpp:16:18: error: template argument 2 is invalid\n   16 | map<int, sett<int>> value_to_keys;\n      |                  ^~\n/tmp/tmpxebe1870/temp.cpp:16:18: error: template argument 4 is invalid\n/tmp/tmpxebe1870/temp.cpp:20:23: error: invalid types \u2018int[const value_type {aka const int}]\u2019 for array subscript\n   20 |     value_to_keys[p[1]].insert(p[0]);\n      |                       ^\n/tmp/tmpxebe1870/temp.cpp:26:25: error: \u2018begin\u2019 was not declared in this scope; did you mean \u2018std::begin\u2019?\n   26 | for (const auto& pair : value_to_keys) {\n      |                         ^~~~~~~~~~~~~\n      |                         std::begin\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from /tmp/tmpxebe1870/temp.cpp:1:\n/usr/include/c++/9/valarray:1224:5: note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>& __va)\n      |     ^~~~~\n/tmp/tmpxebe1870/temp.cpp:26:25: error: \u2018end\u2019 was not declared in this scope; did you mean \u2018std::end\u2019?\n   26 | for (const auto& pair : value_to_keys) {\n      |                         ^~~~~~~~~~~~~\n      |                         std::end\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from /tmp/tmpxebe1870/temp.cpp:1:\n/usr/include/c++/9/valarray:1244:5: note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>& __va)\n      |     ^~~\n", "passed": false}
{"task_id": "MBCPP/710", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to access the initial and last data of the given tuple record.\n * > frontAndRear(vector<int>{10, 4, 5, 6, 7})\n * {10, 7}\n * > frontAndRear(vector<int>{1, 2, 3, 4, 5})\n * {1, 5}\n * > frontAndRear(vector<int>{6, 7, 8, 9, 10})\n * {6, 10}\n */\nvector<int> frontAndRear(vector<int> testTup) {\nvector<int> result;\nresult.push_back(testTup.front());\nresult.push_back(testTup.back());\nreturn result;", "entry_point": "frontAndRear", "result": "passed", "passed": true}
{"task_id": "MBCPP/711", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the product of digits of a number at even and odd places is equal or not.\n * > productEqual(2841)\n * true\n * > productEqual(1234)\n * false\n * > productEqual(1212)\n * false\n */\nbool productEqual(int n) {\nif (n < 10)\n        return false;\n\n    long long prodOdd = 1;\n    long long prodEven = 1;\n    bool isOddPosition = true; // True for odd positions (right-to-left, 1st, 3rd, ...)\n\n    while (n > 0) {\n        int digit = n % 10;\n        if (isOddPosition) {\n            prodOdd *= digit;\n        } else {\n            prodEven *= digit;\n        }\n        n /= 10;\n        isOddPosition = !isOddPosition;\n    }\n\n    return prodEven == prodOdd;", "entry_point": "productEqual", "result": "passed", "passed": true}
{"task_id": "MBCPP/713", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple contains all valid values or not.\n * > checkValid(vector<bool>{true, true, true, true})\n * true\n * > checkValid(vector<bool>{true, false, true, true})\n * false\n * > checkValid(vector<bool>{true, true, true, true})\n * true\n */\nbool checkValid(vector<bool> testTup) {\nfor (bool val : testTup) {\n        if (!val) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkValid", "result": "passed", "passed": true}
{"task_id": "MBCPP/714", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of distinct power of prime factor of given number.\n * > countFac(24)\n * 3\n * > countFac(12)\n * 2\n * > countFac(4)\n * 1\n */\nint countFac(int n) {\nint m = n;\n    int count = 0;\n\n    // Count powers of 2\n    int total_2 = 0;\n    while (n % 2 == 0) {\n        n /= 2;\n        total_2++;\n    }\n    int temp_2 = 0;\n    for (int j = 1; (temp_2 + j) <= total_2; ++j) {\n        temp_2 += j;\n        ++count;\n    }\n\n    // Count powers of odd prime factors\n    for (int i = 3; (i * i) <= n; i = i + 2) {\n        int total_i = 0;\n        while (n % i == 0) {\n            n /= i;\n            ++total_i;\n        }\n        int temp_i = 0;\n        for (int j = 1; (temp_i + j) <= total_i; ++j) {\n            temp_i += j;\n            ++count;\n        }\n    }\n\n    // If n is still greater than 1, it must be a prime number itself\n    if (n > 1)\n        ++count;\n\n    return count;", "entry_point": "countFac", "result": "passed", "passed": true}
{"task_id": "MBCPP/715", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given string of integers into a tuple.\n * > strToTuple(string(\"1, -5, 4, 6, 7\"))\n * {1, -5, 4, 6, 7}\n * > strToTuple(string(\"1, 2, 3, 4, 5\"))\n * {1, 2, 3, 4, 5}\n * > strToTuple(string(\"4, 6, 9, 11, 13, 14\"))\n * {4, 6, 9, 11, 13, 14}\n */\nvector<int> strToTuple(string testStr) {\nvector<int> result;\nstringstream ss(testStr);\nstring segment;\nwhile(getline(ss, segment, ',')) {\nresult.push_back(stoi(segment));\n}\nreturn result;", "entry_point": "strToTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/716", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a rombus.\n * > rombusPerimeter(10)\n * 40\n * > rombusPerimeter(5)\n * 20\n * > rombusPerimeter(4)\n * 16\n */\nint rombusPerimeter(int a) {\nreturn 4 * a;", "entry_point": "rombusPerimeter", "result": "passed", "passed": true}
{"task_id": "MBCPP/717", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the standard deviation.\n * > sdCalc(vector<int>{4, 2, 5, 8, 6})\n * 2.23606797749979\n * > sdCalc(vector<int>{1, 2, 3, 4, 5, 6, 7})\n * 2.160246899469287\n * > sdCalc(vector<int>{5, 9, 10, 15, 6, 4})\n * 4.070217029430577\n */\ndouble sdCalc(vector<int> data) {\ndouble sum = 0.0;\n    for (int i : data) {\n        sum += i;\n    }\n    double mean = sum / data.size();\n    double varianceSum = 0.0;\n    for (int i : data) {\n        varianceSum += pow(i - mean, 2);\n    }\n    double variance = varianceSum / data.size();\n    return sqrt(variance);", "entry_point": "sdCalc", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/719", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by zero or more b's.\n * > textMatch(string(\"ac\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"abba\"))\n * string(\"Found a match!\")\n */\nstring textMatch(string text) {\nregex rx(\"ab*\");\n    if (regex_search(text, rx)) {\n        return string(\"Found a match!\");\n    } else {\n        return string(\"Not matched!\");\n    }", "entry_point": "textMatch", "result": "Compilation failed: /tmp/tmppoeqn8kx/temp.cpp: In function \u2018std::string textMatch(std::string)\u2019:\n/tmp/tmppoeqn8kx/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmppoeqn8kx/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmppoeqn8kx/temp.cpp:15:31: note: to match this \u2018{\u2019\n   15 | string textMatch(string text) {\n      |                               ^\n", "passed": false}
{"task_id": "MBCPP/721", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n * > maxaverageofpath(vector<vector<int>>{{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}, 3)\n * 5.2\n * > maxaverageofpath(vector<vector<int>>{{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}, 3)\n * 6.2\n * > maxaverageofpath(vector<vector<int>>{{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}, 3)\n * 7.2\n */\ndouble maxaverageofpath(vector<vector<int>> cost, int n) {\n// Create a DP table to store the maximum sum to reach each cell\n    // dp[i][j] will store the maximum sum to reach cell (i, j) from (0, 0)\nvector<vector<int>> dp(n, vector<int>(n));\n\n\n// Initialize the top-left cell\ndp[0][0] = cost[0][0];\n\n// Initialize the first column\nfor (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n}\n\n// Initialize the first row\nfor (int j = 1; j < n; j++) {\n    dp[0][j] = dp[0][j - 1] + cost[0][j];\n}\n\n// Fill the rest of the DP table\nfor (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n        // To reach (i,j), we can come from (i-1,j) (down) or (i,j-1) (right)\n        // We choose the path that gives the maximum sum\n        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n}\n\n// The length of any path from (0,0) to (n-1, n-1) in a square matrix\n// moving only right or down is (n-1) moves right + (n-1) moves down + 1 (starting cell)\n// which is (n-1) + (n-1) + 1 = 2*n - 1 cells.\nint path_length = 2 * n - 1;\n\n// The maximum average is the maximum sum path divided by the fixed path length\nreturn (double)dp[n - 1][n - 1] / path_length;", "entry_point": "maxaverageofpath", "result": "passed", "passed": true}
{"task_id": "MBCPP/723", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in two given lists using map function.\n * > countSamePair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9})\n * 4\n * > countSamePair(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 11\n * > countSamePair(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17}, vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 1\n */\nint countSamePair(vector<int> nums1, vector<int> nums2) {\nmap<int, int> freq1;\n    for (int num : nums1) {\n        freq1[num]++;\n    }\n\n    int count = 0;\n    for (int num : nums2) {\n        if (freq1[num] > 0) {\n            count++;\n            freq1[num]--;\n        }\n    }\n    return count;", "entry_point": "countSamePair", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/724", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of all digits of the base to the specified power.\n * > powerBaseSum(2, 100)\n * 115\n * > powerBaseSum(8, 10)\n * 37\n * > powerBaseSum(8, 15)\n * 62\n */\nint powerBaseSum(int base, int power) {\n    std::vector<int> digits;\n    digits.push_back(1); // Initialize with 1, as base^0 = 1\n\n    for (int i = 0; i < power; ++i) {\n        int carry = 0;\n        for (size_t j = 0; j < digits.size(); ++j) {\n            long long product = (long long)digits[j] * base + carry;\n            digits[j] = product % 10;\n            carry = product / 10;\n        }\n        while (carry > 0) {\n            digits.push_back(carry % 10);\n            carry /= 10;\n        }\n    }\n\n    int sum = 0;\n    for (int digit : digits) {\n        sum += digit;\n    }\n    return sum;", "entry_point": "powerBaseSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/725", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract values between quotation marks of the given string by using regex.\n * > extractQuotation(string(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\"))\n * {string(\"A53\"), string(\"multi\"), string(\"Processor\")}\n * > extractQuotation(string(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\"))\n * {string(\"favorite\"), string(\"apps\")}\n * > extractQuotation(string(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\"))\n * {string(\"4k Ultra HD\"), string(\"HDR 10\")}\n */\nvector<string> extractQuotation(string text1) {\nvector<string> result;\nregex pattern(\"\"([^\"]*)\"\"); // Regex to match anything inside double quotes\nsregex_iterator currentMatch(text1.begin(), text1.end(), pattern);\nsregex_iterator lastMatch;\n\n\nwhile (currentMatch != lastMatch) {\n    smatch match = *currentMatch;\n    result.push_back(match[1].str()); // match[1] refers to the first capturing group\n    currentMatch++;\n}\nreturn result;", "entry_point": "extractQuotation", "result": "Compilation failed: /tmp/tmpf_wkhlto/temp.cpp:17:25: warning: missing terminating \" character\n   17 | regex pattern(\"\"([^\"]*)\"\"); // Regex to match anything inside double quotes\n      |                         ^\n/tmp/tmpf_wkhlto/temp.cpp:17:25: error: missing terminating \" character\n   17 | regex pattern(\"\"([^\"]*)\"\"); // Regex to match anything inside double quotes\n      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf_wkhlto/temp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char> > extractQuotation(std::string)\u2019:\n/tmp/tmpf_wkhlto/temp.cpp:17:19: error: expected identifier before \u2018^\u2019 token\n   17 | regex pattern(\"\"([^\"]*)\"\"); // Regex to match anything inside double quotes\n      |                   ^\n/tmp/tmpf_wkhlto/temp.cpp:18:66: error: expected \u2018]\u2019 before \u2018;\u2019 token\n   18 | sregex_iterator currentMatch(text1.begin(), text1.end(), pattern);\n      |                                                                  ^\n      |                                                                  ]\n/tmp/tmpf_wkhlto/temp.cpp: In lambda function:\n/tmp/tmpf_wkhlto/temp.cpp:18:66: error: expected \u2018{\u2019 before \u2018;\u2019 token\n/tmp/tmpf_wkhlto/temp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char> > extractQuotation(std::string)\u2019:\n/tmp/tmpf_wkhlto/temp.cpp:18:66: error: expected \u2018)\u2019 before \u2018;\u2019 token\n   18 | sregex_iterator currentMatch(text1.begin(), text1.end(), pattern);\n      |                                                                  ^\n      |                                                                  )\n/tmp/tmpf_wkhlto/temp.cpp:17:17: note: to match this \u2018(\u2019\n   17 | regex pattern(\"\"([^\"]*)\"\"); // Regex to match anything inside double quotes\n      |                 ^\n/tmp/tmpf_wkhlto/temp.cpp:22:8: error: \u2018currentMatch\u2019 was not declared in this scope\n   22 | while (currentMatch != lastMatch) {\n      |        ^~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/726", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply the adjacent elements of the given tuple.\n * > multiplyElements(vector<int>{1, 5, 7, 8, 10})\n * {5, 35, 56, 80}\n * > multiplyElements(vector<int>{2, 4, 5, 6, 7})\n * {8, 20, 30, 42}\n * > multiplyElements(vector<int>{12, 13, 14, 9, 15})\n * {156, 182, 126, 135}\n */\nvector<int> multiplyElements(vector<int> testTup) {\nvector<int> result;\nfor (int i = 0; i < testTup.size() - 1; i++) {\nresult.push_back(testTup[i] * testTup[i+1]);\n}\nreturn result;", "entry_point": "multiplyElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/727", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all characters except letters and numbers using regex\n * > removeChar(string(\"123abcjw:, .@! eiw\"))\n * string(\"123abcjweiw\")\n * > removeChar(string(\"Hello1234:, ! Howare33u\"))\n * string(\"Hello1234Howare33u\")\n * > removeChar(string(\"Cool543Triks@:, Make@987Trips\"))\n * string(\"Cool543TriksMake987Trips\")\n */\nstring removeChar(string s) {\nstd::regex reg(\"[^a-zA-Z0-9]\");\n    return std::regex_replace(s, reg, \"\");", "entry_point": "removeChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/728", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum elements in two lists.\n * > sumList(vector<int>{10, 20, 30}, vector<int>{15, 25, 35})\n * {25, 45, 65}\n * > sumList(vector<int>{1, 2, 3}, vector<int>{5, 6, 7})\n * {6, 8, 10}\n * > sumList(vector<int>{15, 20, 30}, vector<int>{15, 45, 75})\n * {30, 65, 105}\n */\nvector<int> sumList(vector<int> lst1, vector<int> lst2) {\nvector<int> result;\n// Assuming both lists have the same size as per the examples.\n// If sizes can differ, you'd need to decide how to handle the shorter list (e.g., pad with zeros, stop at the shorter length).\nfor (size_t i = 0; i < lst1.size(); ++i) {\nresult.push_back(lst1[i] + lst2[i]);\n}\nreturn result;", "entry_point": "sumList", "result": "passed", "passed": true}
{"task_id": "MBCPP/729", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two lists using map and lambda function.\n * > addList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {5, 7, 9}\n * > addList(vector<int>{1, 2}, vector<int>{3, 4})\n * {4, 6}\n * > addList(vector<int>{10, 20}, vector<int>{50, 70})\n * {60, 90}\n */\nvector<int> addList(vector<int> nums1, vector<int> nums2) {\nvector<int> result;\nresult.reserve(nums1.size()); // Pre-allocate memory for efficiency\n\n\nstd::transform(nums1.begin(), nums1.end(), nums2.begin(), \n               std::back_inserter(result), \n               [](int a, int b) { \n                   return a + b; \n               });\nreturn result;", "entry_point": "addList", "result": "passed", "passed": true}
{"task_id": "MBCPP/731", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cone.\n * > lateralsurfaceCone(5, 12)\n * 204.20352248333654\n * > lateralsurfaceCone(10, 15)\n * 566.3586699569488\n * > lateralsurfaceCone(19, 17)\n * 1521.8090132193388\n */\ndouble lateralsurfaceCone(int r, int h) {\ndouble l = sqrt(r * r + h * h);\n    return M_PI * r * l;", "entry_point": "lateralsurfaceCone", "result": "passed", "passed": true}
{"task_id": "MBCPP/732", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n * > replaceSpecialchar(string(\"Python language, Programming language.\"))\n * string(\"Python:language::Programming:language:\")\n * > replaceSpecialchar(string(\"a b c,d e f\"))\n * string(\"a:b:c:d:e:f\")\n * > replaceSpecialchar(string(\"ram reshma,ram rahim\"))\n * string(\"ram:reshma:ram:rahim\")\n */\nstring replaceSpecialchar(string text) {\nfor (char &c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n        }\n    }\n    return text;", "entry_point": "replaceSpecialchar", "result": "passed", "passed": true}
{"task_id": "MBCPP/733", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the first occurrence of a given number in a sorted array.\n * > findFirstOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 1\n * > findFirstOccurrence(vector<int>{2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 2\n * > findFirstOccurrence(vector<int>{2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6)\n * 4\n */\nint findFirstOccurrence(vector<int> a, int x) {\nint low = 0;\n    int high = a.size() - 1;\n    int result = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            high = mid - 1; // Look for the first occurrence in the left half\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;", "entry_point": "findFirstOccurrence", "result": "passed", "passed": true}
{"task_id": "MBCPP/734", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of products of all possible subarrays.\n * > sumOfSubarrayProd(vector<int>{1, 2, 3}, 3)\n * 20\n * > sumOfSubarrayProd(vector<int>{1, 2}, 2)\n * 5\n * > sumOfSubarrayProd(vector<int>{1, 2, 3, 4}, 4)\n * 84\n */\nint sumOfSubarrayProd(vector<int> arr, int n) {\nint ans = 0;\n    int res = 0; \n    for(int i = n - 1; i >= 0; i--) {\n        ans += arr[i] * (1 + res);\n        res = arr[i] * (1 + res);\n    }\n    return ans;", "entry_point": "sumOfSubarrayProd", "result": "passed", "passed": true}
{"task_id": "MBCPP/735", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle bits of the number except the first and the last bit.\n * > toggleMiddleBits(9)\n * 15\n * > toggleMiddleBits(10)\n * 12\n * > toggleMiddleBits(11)\n * 13\n */\nint toggleMiddleBits(int n) {\nif (n == 0 || n == 1) {\n        return n;\n    }\n    int temp = n;\n    int count = 0;\n    while (temp > 0) {\n        temp >>= 1;\n        count++;\n    }\n    for (int i = 1; i < count - 1; i++) {\n        n = n ^ (1 << i);\n    }\n    return n;", "entry_point": "toggleMiddleBits", "result": "passed", "passed": true}
{"task_id": "MBCPP/736", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to locate the left insertion point for a specified value in sorted order.\n * > leftInsertion(vector<int>{1, 2, 4, 5}, 6)\n * 4\n * > leftInsertion(vector<int>{1, 2, 4, 5}, 3)\n * 2\n * > leftInsertion(vector<int>{1, 2, 4, 5}, 7)\n * 4\n */\nint leftInsertion(vector<int> a, int x) {\nint low = 0;\n    int high = a.size(); \n\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;", "entry_point": "leftInsertion", "result": "passed", "passed": true}
{"task_id": "MBCPP/737", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string is starting with a vowel or not using regex.\n * > checkStr(string(\"annie\"))\n * string(\"Valid\")\n * > checkStr(string(\"dawood\"))\n * string(\"Invalid\")\n * > checkStr(string(\"Else\"))\n * string(\"Valid\")\n */\nstring checkStr(string str) {\nregex pattern(\"^[aeiouAEIOU].*\");\n    if (regex_match(str, pattern)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }", "entry_point": "checkStr", "result": "Compilation failed: /tmp/tmpnh2zj9_f/temp.cpp: In function \u2018std::string checkStr(std::string)\u2019:\n/tmp/tmpnh2zj9_f/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpnh2zj9_f/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpnh2zj9_f/temp.cpp:15:29: note: to match this \u2018{\u2019\n   15 | string checkStr(string str) {\n      |                             ^\n", "passed": false}
{"task_id": "MBCPP/738", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the geometric sum of n-1.\n * > geometricSum(7)\n * 1.9921875\n * > geometricSum(4)\n * 1.9375\n * > geometricSum(8)\n * 1.99609375\n */\ndouble geometricSum(int n) {\ndouble sum = 0.0;\n    for (int i = 0; i <= n; ++i) {\n        sum += 1.0 / pow(2, i);\n    }\n    return sum;", "entry_point": "geometricSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/739", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the index of smallest triangular number with n digits.\n * > findIndex(2)\n * 4\n * > findIndex(3)\n * 14\n * > findIndex(4)\n * 45\n */\nint findIndex(int n) {\ndouble lower_bound = pow(10, n - 1);\n    // The nth triangular number is T_k = k * (k + 1) / 2.\n    // We want to find the smallest k such that T_k >= 10^(n-1).\n    // So, k * (k + 1) / 2 >= 10^(n-1)\n    // k^2 + k >= 2 * 10^(n-1)\n    // k^2 + k - 2 * 10^(n-1) >= 0\n    // Using the quadratic formula for k^2 + k - C = 0, where C = 2 * 10^(n-1):\n    // k = (-1 + sqrt(1 - 4 * 1 * (-C))) / 2\n    // k = (-1 + sqrt(1 + 8 * 10^(n-1))) / 2\n    // Since k must be an integer and T_k needs to be at least 10^(n-1), we take the ceiling.\n    return ceil((-1 + sqrt(1 + 8 * lower_bound)) / 2);", "entry_point": "findIndex", "result": "passed", "passed": true}
{"task_id": "MBCPP/740", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n * > tupleToDict(vector<int>{1, 5, 7, 10, 13, 5})\n * {{1, 5}, {7, 10}, {13, 5}}\n * > tupleToDict(vector<int>{1, 2, 3, 4, 5, 6})\n * {{1, 2}, {3, 4}, {5, 6}}\n * > tupleToDict(vector<int>{7, 8, 9, 10, 11, 12})\n * {{7, 8}, {9, 10}, {11, 12}}\n */\nunordered_map<int, int> tupleToDict(vector<int> testTup) {\nunordered_map<int, int> dict;\n    for (int i = 0; i < testTup.size(); i += 2) {\n        dict[testTup[i]] = testTup[i + 1];\n    }\n    return dict;", "entry_point": "tupleToDict", "result": "passed", "passed": true}
{"task_id": "MBCPP/741", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters are same or not.\n * > allCharactersSame(string(\"python\"))\n * false\n * > allCharactersSame(string(\"aaa\"))\n * true\n * > allCharactersSame(string(\"data\"))\n * false\n */\nbool allCharactersSame(string s) {\nif (s.length() == 0)\n        return true;\n    for (int i = 1; i < s.length(); i++) {\n        if (s[i] != s[0])\n            return false;\n    }\n    return true;", "entry_point": "allCharactersSame", "result": "passed", "passed": true}
{"task_id": "MBCPP/742", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate the area of a tetrahedron.\n * > areaTetrahedron(3)\n * 15.588457268119894\n * > areaTetrahedron(20)\n * 692.8203230275509\n * > areaTetrahedron(10)\n * 173.20508075688772\n */\ndouble areaTetrahedron(int side) {\nreturn sqrt(3) * side * side;", "entry_point": "areaTetrahedron", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/743", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the right direction.\n * > rotateRight(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4)\n * {8, 9, 10, 1, 2, 3, 4, 5, 6}\n * > rotateRight(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2)\n * {9, 10, 1, 2, 3, 4, 5, 6, 7, 8}\n * > rotateRight(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2)\n * {6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8}\n */\nvector<int> rotateRight(vector<int> list1, int m, int n) {\nint n_elements = list1.size();\n    if (n_elements == 0) {\n        return {};\n    }\n    // Adjust m to be within the bounds of the list size\n    m %= n_elements;\n\n    // The std::rotate function performs a left rotation.\n    // To achieve a right rotation by 'm' positions, we can perform a left rotation\n    // such that the element at `n_elements - m` becomes the new first element.\n    std::rotate(list1.begin(), list1.begin() + (n_elements - m), list1.end());\n    \n    return list1;", "entry_point": "rotateRight", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/744", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple has any -1 or not.\n * > checkNone(vector<int>{7, 8, 9, 11, 14})\n * false\n */\nbool checkNone(vector<int> testTup) {\nfor (int num : testTup) {\n        if (num == -1) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "checkNone", "result": "passed", "passed": true}
{"task_id": "MBCPP/745", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n * > divisibleByDigits(1, 22)\n * {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\n * > divisibleByDigits(1, 15)\n * {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15}\n * > divisibleByDigits(20, 25)\n * {22, 24}\n */\nvector<int> divisibleByDigits(int startnum, int endnum) {\nvector<int> result;\nfor (int i = startnum; i <= endnum; ++i) {\nint temp = i;\nbool divisible = true;\nif (temp == 0) { // Handle the case for 0 if it was in range, although range starts from 1\ncontinue;\n}\nwhile (temp > 0) {\nint digit = temp % 10;\nif (digit == 0 || i % digit != 0) {\ndivisible = false;\nbreak;\n}\ntemp /= 10;\n}\nif (divisible) {\nresult.push_back(i);\n}\n}\nreturn result;", "entry_point": "divisibleByDigits", "result": "passed", "passed": true}
{"task_id": "MBCPP/747", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given three string sequence.\n * > lcsOfThree(string(\"AGGT12\"), string(\"12TXAYB\"), string(\"12XBA\"), 6, 7, 5)\n * 2\n * > lcsOfThree(string(\"Reels\"), string(\"Reelsfor\"), string(\"ReelsforReels\"), 5, 8, 13)\n * 5\n * > lcsOfThree(string(\"abcd1e2\"), string(\"bc12ea\"), string(\"bd1ea\"), 7, 6, 5)\n * 3\n */\nint lcsOfThree(string x, string y, string z, int m, int n, int o) {\nint dp[m + 1][n + 1][o + 1];\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            for (int k = 0; k <= o; k++) {\n                if (i == 0 || j == 0 || k == 0)\n                    dp[i][j][k] = 0;\n                else if (x[i - 1] == y[j - 1] && y[j - 1] == z[k - 1])\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                else\n                    dp[i][j][k] = max({dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]});\n            }\n        }\n    }\n    return dp[m][n][o];", "entry_point": "lcsOfThree", "result": "passed", "passed": true}
{"task_id": "MBCPP/748", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n * > capitalWordsSpaces(string(\"Python\"))\n * string(\"Python\")\n * > capitalWordsSpaces(string(\"PythonProgrammingExamples\"))\n * string(\"Python Programming Examples\")\n * > capitalWordsSpaces(string(\"GetReadyToBeCodingFreak\"))\n * string(\"Get Ready To Be Coding Freak\")\n */\nstring capitalWordsSpaces(string str1) {\nstd::regex r(\"([a-z])([A-Z])\");\n    return std::regex_replace(str1, r, \"$1 $2\");", "entry_point": "capitalWordsSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/749", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of strings of numbers numerically.\n * > sortNumericStrings(vector<string>{string(\"4\"), string(\"12\"), string(\"45\"), string(\"7\"), string(\"0\"), string(\"100\"), string(\"200\"), string(\"-12\"), string(\"-500\")})\n * {-500, -12, 0, 4, 7, 12, 45, 100, 200}\n * > sortNumericStrings(vector<string>{string(\"2\"), string(\"3\"), string(\"8\"), string(\"4\"), string(\"7\"), string(\"9\"), string(\"8\"), string(\"2\"), string(\"6\"), string(\"5\"), string(\"1\"), string(\"6\"), string(\"1\"), string(\"2\"), string(\"3\"), string(\"4\"), string(\"6\"), string(\"9\"), string(\"1\"), string(\"2\")})\n * {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9}\n * > sortNumericStrings(vector<string>{string(\"1\"), string(\"3\"), string(\"5\"), string(\"7\"), string(\"1\"), string(\"3\"), string(\"13\"), string(\"15\"), string(\"17\"), string(\"5\"), string(\"7 \"), string(\"9\"), string(\"1\"), string(\"11\")})\n * {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17}\n */\nvector<int> sortNumericStrings(vector<string> numsStr) {\nvector<int> nums;\nfor (string s : numsStr) {\nnums.push_back(stoi(s));\n}\nsort(nums.begin(), nums.end());\nreturn nums;", "entry_point": "sortNumericStrings", "result": "passed", "passed": true}
{"task_id": "MBCPP/750", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given tuple to the given list.\n * > addTuple(vector<int>{5, 6, 7}, vector<int>{9, 10})\n * {5, 6, 7, 9, 10}\n * > addTuple(vector<int>{6, 7, 8}, vector<int>{10, 11})\n * {6, 7, 8, 10, 11}\n * > addTuple(vector<int>{7, 8, 9}, vector<int>{11, 12})\n * {7, 8, 9, 11, 12}\n */\nvector<int> addTuple(vector<int> testList, vector<int> testTup) {\ntestList.insert(testList.end(), testTup.begin(), testTup.end());\n    return testList;", "entry_point": "addTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/751", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given array represents min heap or not.\n * > checkMinHeap(vector<int>{1, 2, 3, 4, 5, 6}, 0)\n * true\n * > checkMinHeap(vector<int>{2, 3, 4, 5, 10, 15}, 0)\n * true\n * > checkMinHeap(vector<int>{2, 10, 4, 5, 3, 15}, 0)\n * false\n */\nbool checkMinHeap(vector<int> arr, int i) {\n// If i is a leaf node or beyond the array bounds, it's a valid heap segment.\n    if (i >= arr.size()) {\n        return true;\n    }\n\n    int leftChildIdx = 2 * i + 1;\n    int rightChildIdx = 2 * i + 2;\n\n    // Check if left child exists and violates min-heap property\n    if (leftChildIdx < arr.size() && arr[i] > arr[leftChildIdx]) {\n        return false;\n    }\n\n    // Check if right child exists and violates min-heap property\n    if (rightChildIdx < arr.size() && arr[i] > arr[rightChildIdx]) {\n        return false;\n    }\n\n    // Recursively check left and right subtrees\n    return checkMinHeap(arr, leftChildIdx) && checkMinHeap(arr, rightChildIdx);", "entry_point": "checkMinHeap", "result": "passed", "passed": true}
{"task_id": "MBCPP/752", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth jacobsthal number.\n * > jacobsthalNum(5)\n * 11\n * > jacobsthalNum(2)\n * 1\n * > jacobsthalNum(4)\n * 5\n */\nint jacobsthalNum(int n) {\nif (n == 0) return 0;\n    if (n == 1) return 1;\n    return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2);", "entry_point": "jacobsthalNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/754", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common index elements from three lists.\n * > extractIndexList(vector<int>{1, 1, 3, 4, 5, 6, 7}, vector<int>{0, 1, 2, 3, 4, 5, 7}, vector<int>{0, 1, 2, 3, 4, 5, 7})\n * {1, 7}\n * > extractIndexList(vector<int>{1, 1, 3, 4, 5, 6, 7}, vector<int>{0, 1, 2, 3, 4, 6, 5}, vector<int>{0, 1, 2, 3, 4, 6, 7})\n * {1, 6}\n * > extractIndexList(vector<int>{1, 1, 3, 4, 6, 5, 6}, vector<int>{0, 1, 2, 3, 4, 5, 7}, vector<int>{0, 1, 2, 3, 4, 5, 7})\n * {1, 5}\n */\nvector<int> extractIndexList(vector<int> l1, vector<int> l2, vector<int> l3) {\nvector<int> result;\nint n1 = l1.size();\nint n2 = l2.size();\nint n3 = l3.size();\n\n\n// The problem statement implies we are looking for common elements at the *same index*\n// across the three lists, assuming they might have different lengths.\n// We should iterate up to the minimum length of the three lists.\n\nint min_len = min({n1, n2, n3});\n\nfor (int i = 0; i < min_len; ++i) {\n    if (l1[i] == l2[i] && l2[i] == l3[i]) {\n        result.push_back(l1[i]);\n    }\n}\nreturn result;", "entry_point": "extractIndexList", "result": "passed", "passed": true}
{"task_id": "MBCPP/756", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by zero or one 'b'.\n * > textMatchZeroOne(string(\"ac\"))\n * string(\"Found a match!\")\n * > textMatchZeroOne(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchZeroOne(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchZeroOne(string text) {\nregex re(\"ab?\");\n    if (regex_search(text, re)) {\n        return string(\"Found a match!\");\n    } else {\n        return string(\"Not matched!\");\n    }", "entry_point": "textMatchZeroOne", "result": "Compilation failed: /tmp/tmpnm2ztl21/temp.cpp: In function \u2018std::string textMatchZeroOne(std::string)\u2019:\n/tmp/tmpnm2ztl21/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpnm2ztl21/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpnm2ztl21/temp.cpp:15:38: note: to match this \u2018{\u2019\n   15 | string textMatchZeroOne(string text) {\n      |                                      ^\n", "passed": false}
{"task_id": "MBCPP/757", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the pairs of reverse strings in the given string list.\n * > countReversePairs(vector<string>{string(\"julia\"), string(\"best\"), string(\"tseb\"), string(\"for\"), string(\"ailuj\")})\n * string(\"2\")\n * > countReversePairs(vector<string>{string(\"geeks\"), string(\"best\"), string(\"for\"), string(\"skeeg\")})\n * string(\"1\")\n * > countReversePairs(vector<string>{string(\"makes\"), string(\"best\"), string(\"sekam\"), string(\"for\"), string(\"rof\")})\n * string(\"2\")\n */\nstring countReversePairs(vector<string> testList) {\nint count = 0;\n    unordered_settring> seen_strings;\n\n\nfor (const string& s : testList) {\n    string reversed_s = s;\n    reverse(reversed_s.begin(), reversed_s.end());\n\n    if (seen_strings.count(reversed_s)) {\n        count++;\n        seen_strings.erase(reversed_s); // Remove the pair to avoid recounting\n    } else {\n        seen_strings.insert(s);\n    }\n}\nreturn to_string(count);", "entry_point": "countReversePairs", "result": "Compilation failed: /tmp/tmpif275cpg/temp.cpp: In function \u2018std::string countReversePairs(std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpif275cpg/temp.cpp:17:5: error: \u2018unordered_settring\u2019 was not declared in this scope\n   17 |     unordered_settring> seen_strings;\n      |     ^~~~~~~~~~~~~~~~~~\n/tmp/tmpif275cpg/temp.cpp:17:25: error: \u2018seen_strings\u2019 was not declared in this scope\n   17 |     unordered_settring> seen_strings;\n      |                         ^~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/759", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check a decimal with a precision of 2.\n * > isDecimal(string(\"123.11\"))\n * true\n * > isDecimal(string(\"e666.86\"))\n * false\n * > isDecimal(string(\"3.124587\"))\n * false\n */\nbool isDecimal(string num) {\nint dotPos = -1;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (dotPos != -1) return false;\n            dotPos = i;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n    }\n    if (dotPos != -1) {\n        if (num.length() - dotPos - 1 != 2) return false;\n    }\n    return true;", "entry_point": "isDecimal", "result": "passed", "passed": true}
{"task_id": "MBCPP/760", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array contains only one distinct element or not.\n * > uniqueElement(vector<int>{1, 1, 1}, 3)\n * string(\"YES\")\n * > uniqueElement(vector<int>{1, 2, 1, 2}, 4)\n * string(\"NO\")\n * > uniqueElement(vector<int>{1, 2, 3, 4, 5}, 5)\n * string(\"NO\")\n */\nstring uniqueElement(vector<int> arr, int n) {\n    if (n == 0) {\n        return \"YES\";\n    }\n    int firstElement = arr[0];\n    for (int i = 1; i < n; ++i) {\n        if (arr[i] != firstElement) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";", "entry_point": "uniqueElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/762", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 30 days or not.\n * > checkMonthnumberNumber(6)\n * true\n * > checkMonthnumberNumber(2)\n * false\n * > checkMonthnumberNumber(12)\n * false\n */\nbool checkMonthnumberNumber(int monthnum3) {\nif (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11) {\n        return true;\n    } else {\n        return false;\n    }", "entry_point": "checkMonthnumberNumber", "result": "Compilation failed: /tmp/tmpj4ox24p0/temp.cpp: In function \u2018bool checkMonthnumberNumber(int)\u2019:\n/tmp/tmpj4ox24p0/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpj4ox24p0/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmpj4ox24p0/temp.cpp:15:44: note: to match this \u2018{\u2019\n   15 | bool checkMonthnumberNumber(int monthnum3) {\n      |                                            ^\n", "passed": false}
{"task_id": "MBCPP/763", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum difference between any two elements in a given array.\n * > findMinDiff(vector<int>{1, 5, 3, 19, 18, 25}, 6)\n * 1\n * > findMinDiff(vector<int>{4, 3, 2, 6}, 4)\n * 1\n * > findMinDiff(vector<int>{30, 5, 20, 9}, 4)\n * 4\n */\nint findMinDiff(vector<int> arr, int n) {\nif (n < 2) {\n        return 0; // Or handle as an error/special case, as minimum difference requires at least two elements.\n    }\n\n    sort(arr.begin(), arr.end());\n\n    int minDiff = INT_MAX;\n\n    for (int i = 0; i < n - 1; ++i) {\n        minDiff = min(minDiff, arr[i + 1] - arr[i]);\n    }\n\n    return minDiff;", "entry_point": "findMinDiff", "result": "passed", "passed": true}
{"task_id": "MBCPP/764", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numeric values in a given string.\n * > numberCtr(string(\"program2bedone\"))\n * 1\n * > numberCtr(string(\"3wonders\"))\n * 1\n * > numberCtr(string(\"123\"))\n * 3\n */\nint numberCtr(string str) {\nint count = 0;\n    for (char c : str) {\n        if (isdigit(c)) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "numberCtr", "result": "passed", "passed": true}
{"task_id": "MBCPP/765", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth polite number.\n * > isPolite(7)\n * 11\n * > isPolite(4)\n * 7\n * > isPolite(9)\n * 13\n */\nint isPolite(int n) {\nint count = 0;\n    for (int i = 1; ; ++i) {\n        if (i % 2 != 0) { // Check if the number is odd\n            count++;\n            if (count == n) {\n                return i;\n            }\n        }\n    }", "entry_point": "isPolite", "result": "Compilation failed: /tmp/tmpykmraf3o/temp.cpp: In function \u2018int isPolite(int)\u2019:\n/tmp/tmpykmraf3o/temp.cpp:26:1: error: a template declaration cannot appear at block scope\n   26 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpykmraf3o/temp.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpykmraf3o/temp.cpp:15:21: note: to match this \u2018{\u2019\n   15 | int isPolite(int n) {\n      |                     ^\n", "passed": false}
{"task_id": "MBCPP/766", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to iterate over all pairs of consecutive items in a given list.\n * > pairWise(vector<int>{1, 1, 2, 3, 3, 4, 4, 5})\n * {{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}}\n * > pairWise(vector<int>{1, 5, 7, 9, 10})\n * {{1, 5}, {5, 7}, {7, 9}, {9, 10}}\n * > pairWise(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}}\n */\nvector<vector<int>> pairWise(vector<int> l1) {\nvector<vector<int>> result;\nfor (size_t i = 0; i < l1.size() - 1; ++i) {\nresult.push_back({l1[i], l1[i+1]});\n}\nreturn result;", "entry_point": "pairWise", "result": "passed", "passed": true}
{"task_id": "MBCPP/767", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n * > getPairsCount(vector<int>{1, 1, 1, 1}, 4, 2)\n * 6\n * > getPairsCount(vector<int>{1, 5, 7, -1, 5}, 5, 6)\n * 3\n * > getPairsCount(vector<int>{1, -2, 3}, 3, 1)\n * 1\n */\nint getPairsCount(vector<int> arr, int n, int sum) {\nunordered_map<int, int> freq;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.count(complement)) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    return count;", "entry_point": "getPairsCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/768", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check for odd parity of a given number.\n * > checkOddParity(13)\n * true\n * > checkOddParity(21)\n * true\n * > checkOddParity(18)\n * false\n */\nbool checkOddParity(int x) {\nint count = 0;\n    while (x > 0) {\n        x &= (x - 1);\n        count++;\n    }\n    return (count % 2 != 0);", "entry_point": "checkOddParity", "result": "passed", "passed": true}
{"task_id": "MBCPP/769", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the difference between two lists.\n * > diff(vector<int>{10, 15, 20, 25, 30, 35, 40}, vector<int>{25, 40, 35})\n * {10, 20, 30, 15}\n * > diff(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 1})\n * {2, 3, 4, 5, 6, 7}\n * > diff(vector<int>{1, 2, 3}, vector<int>{6, 7, 1})\n * {2, 3, 6, 7}\n */\nvector<int> diff(vector<int> li1, vector<int> li2) {\nvector<int> result;\nunordered_set<int> set1(li1.begin(), li1.end());\nunordered_set<int> set2(li2.begin(), li2.end());\n\n\nfor (int x : li1) {\n    if (set2.find(x) == set2.end()) {\n        result.push_back(x);\n    }\n}\n\nfor (int x : li2) {\n    if (set1.find(x) == set1.end()) {\n        result.push_back(x);\n    }\n}\nreturn result;", "entry_point": "diff", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/770", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of first n odd natural numbers.\n * > oddNumSum(2)\n * 82\n * > oddNumSum(3)\n * 707\n * > oddNumSum(4)\n * 3108\n */\nint oddNumSum(int n) {\nlong long sum = 0;\n    for (int i = 1; i <= n; i++) {\n        long long odd_num = 2 * i - 1;\n        sum += odd_num * odd_num * odd_num * odd_num;\n    }\n    return sum;", "entry_point": "oddNumSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/771", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given expression is balanced or not.\n * > checkExpression(string(\"{()}[{}]\"))\n * true\n * > checkExpression(string(\"{()}[{]\"))\n * false\n * > checkExpression(string(\"{()}[{}][]({})\"))\n * true\n */\nbool checkExpression(string exp) {\nstack<char> s;\nfor (char c : exp) {\nif (c == '(' || c == '{' || c == '[') {\ns.push(c);\n} else if (c == ')' || c == '}' || c == ']') {\nif (s.empty()) {\nreturn false;\n}\nchar top = s.top();\ns.pop();\nif ((c == ')' && top != '(') ||\n(c == '}' && top != '{') ||\n(c == ']' && top != '[')) {\nreturn false;\n}\n}\n}\nreturn s.empty();", "entry_point": "checkExpression", "result": "passed", "passed": true}
{"task_id": "MBCPP/772", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the words with k length in the given string.\n * > removeLength(string(\"The person is most value tet\"), 3)\n * string(\"person is most value\")\n * > removeLength(string(\"If you told me about this ok\"), 4)\n * string(\"If you me about ok\")\n * > removeLength(string(\"Forces of darkeness is come into the play\"), 4)\n * string(\"Forces of darkeness is the\")\n */\nstring removeLength(string testStr, int k) {\nstringstream ss(testStr);\n    string word;\n    string result = \"\";\n\n    while (ss >> word) {\n        if (word.length() != k) {\n            result += word + \" \";\n        }\n    }\n\n    // Remove trailing space if any\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;", "entry_point": "removeLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/774", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the string is a valid email address or not using regex.\n * > checkEmail(string(\"ankitrai326@gmail.com\"))\n * string(\"Valid Email\")\n * > checkEmail(string(\"my.ownsite@ourearth.org\"))\n * string(\"Valid Email\")\n * > checkEmail(string(\"ankitaoie326.com\"))\n * string(\"Invalid Email\")\n */\nstring checkEmail(string email) {\nconst regex pattern(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$\");\n    if (regex_match(email, pattern)) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }", "entry_point": "checkEmail", "result": "Compilation failed: /tmp/tmpg92yfl3n/temp.cpp: In function \u2018std::string checkEmail(std::string)\u2019:\n/tmp/tmpg92yfl3n/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpg92yfl3n/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpg92yfl3n/temp.cpp:15:33: note: to match this \u2018{\u2019\n   15 | string checkEmail(string email) {\n      |                                 ^\n", "passed": false}
{"task_id": "MBCPP/775", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether every odd index contains odd numbers of a given list.\n * > oddPosition(vector<int>{2, 1, 4, 3, 6, 7, 6, 3})\n * true\n * > oddPosition(vector<int>{4, 1, 2})\n * true\n * > oddPosition(vector<int>{1, 2, 3})\n * false\n */\nbool oddPosition(vector<int> nums) {\nfor (int i = 1; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "oddPosition", "result": "passed", "passed": true}
{"task_id": "MBCPP/776", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count those characters which have vowels as their neighbors in the given string.\n * > countVowels(string(\"bestinstareels\"))\n * 7\n * > countVowels(string(\"partofthejourneyistheend\"))\n * 12\n * > countVowels(string(\"amazonprime\"))\n * 5\n */\nint countVowels(string testStr) {\nauto isVowel = [](char c) {\n        c = tolower(c);\n        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    };\n\n    int count = 0;\n    int n = testStr.length();\n\n    if (n < 2) {\n        return 0; // Need at least two characters for neighbors\n    }\n\n    for (int i = 0; i < n; ++i) {\n        bool hasVowelNeighbor = false;\n        // Check left neighbor\n        if (i > 0 && isVowel(testStr[i - 1])) {\n            hasVowelNeighbor = true;\n        }\n        // Check right neighbor\n        if (i < n - 1 && isVowel(testStr[i + 1])) {\n            hasVowelNeighbor = true;\n        }\n\n        if (hasVowelNeighbor) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countVowels", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/777", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of non-repeated elements in a given array.\n * > findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8)\n * 21\n * > findSum(vector<int>{1, 10, 9, 4, 2, 10, 10, 45, 4}, 9)\n * 71\n * > findSum(vector<int>{12, 10, 9, 45, 2, 10, 10, 45, 10}, 9)\n * 78\n */\nint findSum(vector<int> arr, int n) {\nunordered_map<int, int> counts;\n    for (int x : arr) {\n        counts[x]++;\n    }\n\n    int sum = 0;\n    for (auto const& [val, count] : counts) {\n        if (count == 1) {\n            sum += val;\n        }\n    }\n    return sum;", "entry_point": "findSum", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/780", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the combinations of sums with tuples in the given tuple list.\n * > findCombinations(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}})\n * {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}}\n * > findCombinations(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}})\n * {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}}\n * > findCombinations(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}})\n * {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}}\n */\nvector<vector<int>> findCombinations(vector<vector<int>> testList) {\nvector<vector<int>> result;\nfor (size_t i = 0; i < testList.size(); ++i) {\nfor (size_t j = i + 1; j < testList.size(); ++j) {\nvector<int> combination;\ncombination.push_back(testList[i][0] + testList[j][0]);\ncombination.push_back(testList[i][1] + testList[j][1]);\nresult.push_back(combination);\n}\n}\nreturn result;", "entry_point": "findCombinations", "result": "passed", "passed": true}
{"task_id": "MBCPP/781", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of divisors is even or odd.\n * > countDivisors(10)\n * string(\"Even\")\n * > countDivisors(100)\n * string(\"Odd\")\n * > countDivisors(125)\n * string(\"Even\")\n */\nstring countDivisors(int n) {\nint root = round(sqrt(n));\n    if (root * root == n) {\n        return \"Odd\";\n    } else {\n        return \"Even\";\n    }", "entry_point": "countDivisors", "result": "Compilation failed: /tmp/tmp9xl2dbd8/temp.cpp: In function \u2018std::string countDivisors(int)\u2019:\n/tmp/tmp9xl2dbd8/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp9xl2dbd8/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmp9xl2dbd8/temp.cpp:15:29: note: to match this \u2018{\u2019\n   15 | string countDivisors(int n) {\n      |                             ^\n", "passed": false}
{"task_id": "MBCPP/782", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of all odd length subarrays.\n * > oddLengthSum(vector<int>{1, 2, 4})\n * 14\n * > oddLengthSum(vector<int>{1, 2, 1, 2})\n * 15\n * > oddLengthSum(vector<int>{1, 7})\n * 8\n */\nint oddLengthSum(vector<int> arr) {\nint totalSum = 0;\n    int n = arr.size();\n\n    for (int i = 0; i < n; ++i) {\n        // Calculate the number of times arr[i] appears in odd-length subarrays.\n        // For each element arr[i], it can be the start of (i + 1) subarrays.\n        // It can be the end of (n - i) subarrays.\n        // So, it appears in (i + 1) * (n - i) total subarrays.\n        // Among these, approximately half will be odd length and half even length.\n        // More precisely, the number of odd-length subarrays containing arr[i]\n        // is ((i + 1) * (n - i) + 1) / 2.\n        totalSum += arr[i] * (((i + 1) * (n - i) + 1) / 2);\n    }\n\n    return totalSum;", "entry_point": "oddLengthSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/784", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the product of first even and odd number of a given list.\n * > mulEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > mulEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > mulEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint mulEvenOdd(vector<int> list1) {\nint firstEven = -1;\n    int firstOdd = -1;\n\n    for (int num : list1) {\n        if (num % 2 == 0) {\n            if (firstEven == -1) {\n                firstEven = num;\n            }\n        } else {\n            if (firstOdd == -1) {\n                firstOdd = num;\n            }\n        }\n        if (firstEven != -1 && firstOdd != -1) {\n            break; \n        }\n    }\n\n    if (firstEven != -1 && firstOdd != -1) {\n        return firstEven * firstOdd;\n    } else {\n        return 0; \n    }", "entry_point": "mulEvenOdd", "result": "Compilation failed: /tmp/tmpy9k208x7/temp.cpp: In function \u2018int mulEvenOdd(std::vector<int>)\u2019:\n/tmp/tmpy9k208x7/temp.cpp:40:1: error: a template declaration cannot appear at block scope\n   40 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpy9k208x7/temp.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmpy9k208x7/temp.cpp:15:35: note: to match this \u2018{\u2019\n   15 | int mulEvenOdd(vector<int> list1) {\n      |                                   ^\n", "passed": false}
{"task_id": "MBCPP/785", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple string to integer tuple.\n * > tupleStrInt(string(\"(7, 8, 9)\"))\n * {7, 8, 9}\n * > tupleStrInt(string(\"(1, 2, 3)\"))\n * {1, 2, 3}\n * > tupleStrInt(string(\"(4, 5, 6)\"))\n * {4, 5, 6}\n */\nvector<int> tupleStrInt(string testStr) {\nvector<int> result;\nstring num_str;\nfor (char c : testStr) {\nif (isdigit(c)) {\nnum_str += c;\n} else {\nif (!num_str.empty()) {\nresult.push_back(stoi(num_str));\nnum_str.clear();\n}\n}\n}\nreturn result;", "entry_point": "tupleStrInt", "result": "passed", "passed": true}
{"task_id": "MBCPP/786", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to locate the right insertion point for a specified value in sorted order.\n * > rightInsertion(vector<int>{1, 2, 4, 5}, 6)\n * 4\n * > rightInsertion(vector<int>{1, 2, 4, 5}, 3)\n * 2\n * > rightInsertion(vector<int>{1, 2, 4, 5}, 7)\n * 4\n */\nint rightInsertion(vector<int> a, int x) {\nreturn upper_bound(a.begin(), a.end(), x) - a.begin();", "entry_point": "rightInsertion", "result": "passed", "passed": true}
{"task_id": "MBCPP/787", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by three 'b'.\n * > textMatchThree(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchThree(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchThree(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchThree(string text) {\nregex reg(\"ab{3}\");\n    if (regex_search(text, reg)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatchThree", "result": "Compilation failed: /tmp/tmp8spf89g0/temp.cpp: In function \u2018std::string textMatchThree(std::string)\u2019:\n/tmp/tmp8spf89g0/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp8spf89g0/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmp8spf89g0/temp.cpp:15:36: note: to match this \u2018{\u2019\n   15 | string textMatchThree(string text) {\n      |                                    ^\n", "passed": false}
{"task_id": "MBCPP/788", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to create a new tuple from the given string and list.\n * > newTuple(vector<string>{string(\"WEB\"), string(\"is\")}, string(\"best\"))\n * {string(\"WEB\"), string(\"is\"), string(\"best\")}\n * > newTuple(vector<string>{string(\"We\"), string(\"are\")}, string(\"Developers\"))\n * {string(\"We\"), string(\"are\"), string(\"Developers\")}\n * > newTuple(vector<string>{string(\"Part\"), string(\"is\")}, string(\"Wrong\"))\n * {string(\"Part\"), string(\"is\"), string(\"Wrong\")}\n */\nvector<string> newTuple(vector<string> testList, string testStr) {\ntestList.push_back(testStr);\n    return testList;", "entry_point": "newTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/789", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the perimeter of a regular polygon.\n * > perimeterPolygon(4, 20)\n * 80\n * > perimeterPolygon(10, 15)\n * 150\n * > perimeterPolygon(9, 7)\n * 63\n */\nint perimeterPolygon(int s, int l) {\nreturn s * l;", "entry_point": "perimeterPolygon", "result": "passed", "passed": true}
{"task_id": "MBCPP/790", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether every even index contains even numbers of a given list.\n * > evenPosition(vector<int>{3, 2, 1})\n * false\n * > evenPosition(vector<int>{1, 2, 3})\n * false\n * > evenPosition(vector<int>{2, 1, 4})\n * true\n */\nbool evenPosition(vector<int> nums) {\nfor (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "evenPosition", "result": "passed", "passed": true}
{"task_id": "MBCPP/792", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of lists in a given number of lists.\n * > countList(vector<vector<int>>{{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}})\n * 4\n * > countList(vector<vector<int>>{{1, 2}, {2, 3}, {4, 5}})\n * 3\n * > countList(vector<vector<int>>{{1, 0}, {2, 0}})\n * 2\n */\nint countList(vector<vector<int>> inputList) {\nreturn inputList.size();", "entry_point": "countList", "result": "passed", "passed": true}
{"task_id": "MBCPP/793", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last position of an element in a sorted array.\n * > last(vector<int>{1, 2, 3}, 1, 3)\n * 0\n * > last(vector<int>{1, 1, 1, 2, 3, 4}, 1, 6)\n * 2\n * > last(vector<int>{2, 3, 2, 3, 6, 8, 9}, 3, 8)\n * 3\n */\nint last(vector<int> arr, int x, int n) {\nint low = 0, high = n - 1;\n    int result = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            low = mid + 1; // Try to find a further occurrence in the right half\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;", "entry_point": "last", "result": "passed", "passed": true}
{"task_id": "MBCPP/794", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n * > textStartaEndb(string(\"aabbbb\"))\n * string(\"Found a match!\")\n * > textStartaEndb(string(\"aabAbbbc\"))\n * string(\"Not matched!\")\n * > textStartaEndb(string(\"accddbbjjj\"))\n * string(\"Not matched!\")\n */\nstring textStartaEndb(string text) {\nregex r(\"a.*b$\");\n    if (regex_search(text, r)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textStartaEndb", "result": "Compilation failed: /tmp/tmp6nk2lyrl/temp.cpp: In function \u2018std::string textStartaEndb(std::string)\u2019:\n/tmp/tmp6nk2lyrl/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp6nk2lyrl/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmp6nk2lyrl/temp.cpp:15:36: note: to match this \u2018{\u2019\n   15 | string textStartaEndb(string text) {\n      |                                    ^\n", "passed": false}
{"task_id": "MBCPP/796", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write function to find the sum of all items in the given dictionary.\n * > returnSum(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}, {string(\"c\"), 300}})\n * 600\n * > returnSum(unordered_map<string, int>{{string(\"a\"), 25}, {string(\"b\"), 18}, {string(\"c\"), 45}})\n * 88\n * > returnSum(unordered_map<string, int>{{string(\"a\"), 36}, {string(\"b\"), 39}, {string(\"c\"), 49}})\n * 124\n */\nint returnSum(unordered_map<string, int> dict) {\nint sum = 0;\n    for (auto const& [key, val] : dict) {\n        sum += val;\n    }\n    return sum;", "entry_point": "returnSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/797", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of all odd natural numbers within the range l and r.\n * > sumInRange(2, 5)\n * 8\n * > sumInRange(5, 7)\n * 12\n * > sumInRange(7, 13)\n * 40\n */\nint sumInRange(int l, int r) {\nint sum = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;", "entry_point": "sumInRange", "result": "passed", "passed": true}
{"task_id": "MBCPP/798", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of an array.\n * > Sum(vector<int>{1, 2, 3})\n * 6\n * > Sum(vector<int>{15, 12, 13, 10})\n * 50\n * > Sum(vector<int>{0, 1, 2})\n * 3\n */\nint Sum(vector<int> arr) {\nint sum = 0;\n    for (int x : arr) {\n        sum += x;\n    }\n    return sum;", "entry_point": "Sum", "result": "passed", "passed": true}
{"task_id": "MBCPP/799", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to left rotate the bits of a given number.\n * > leftRotate(16, 2)\n * 64\n * > leftRotate(10, 2)\n * 40\n * > leftRotate(99, 3)\n * 792\n */\nint leftRotate(int n, int d) {\nconst int INT_BITS = sizeof(int) * 8;\n    return (n << d) | (n >> (INT_BITS - d));", "entry_point": "leftRotate", "result": "passed", "passed": true}
{"task_id": "MBCPP/800", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from a string.\n * > removeAllSpaces(string(\"python  program\"))\n * string(\"pythonprogram\")\n * > removeAllSpaces(string(\"python   programming    language\"))\n * string(\"pythonprogramminglanguage\")\n * > removeAllSpaces(string(\"python                     program\"))\n * string(\"pythonprogram\")\n */\nstring removeAllSpaces(string text) {\nstring result = \"\";\n    for (char c : text) {\n        if (c != ' ') {\n            result += c;\n        }\n    }\n    return result;", "entry_point": "removeAllSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/801", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of equal numbers from three given integers.\n * > testThreeEqual(1, 1, 1)\n * 3\n * > testThreeEqual(-1, -2, -3)\n * 0\n * > testThreeEqual(1, 2, 2)\n * 2\n */\nint testThreeEqual(int x, int y, int z) {\nint count = 0;\n    if (x == y && y == z) {\n        count = 3;\n    } else if (x == y || y == z || x == z) {\n        count = 2;\n    }\n    return count;", "entry_point": "testThreeEqual", "result": "passed", "passed": true}
{"task_id": "MBCPP/802", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rotations required to generate a sorted array.\n * > countRotation(vector<int>{3, 2, 1}, 3)\n * 1\n * > countRotation(vector<int>{4, 5, 1, 2, 3}, 5)\n * 2\n * > countRotation(vector<int>{7, 8, 9, 1, 2, 3}, 6)\n * 3\n */\nint countRotation(vector<int> arr, int n) {\nint min_val = arr[0];\n    int min_index = 0;\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;", "entry_point": "countRotation", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/803", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is a perfect square or not.\n * > isPerfectSquare(10)\n * false\n * > isPerfectSquare(36)\n * true\n * > isPerfectSquare(14)\n * false\n */\nbool isPerfectSquare(int n) {\nif (n < 0)\n        return false;\n    int root = round(sqrt(n));\n    return (root * root == n);", "entry_point": "isPerfectSquare", "result": "passed", "passed": true}
{"task_id": "MBCPP/804", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the product of numbers is even or not.\n * > isProductEven(vector<int>{1, 2, 3}, 3)\n * true\n * > isProductEven(vector<int>{1, 2, 1, 4}, 4)\n * true\n * > isProductEven(vector<int>{1, 1}, 2)\n * false\n */\nbool isProductEven(vector<int> arr, int n) {\nfor (int i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "isProductEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/805", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the list in a list of lists whose sum of elements is the highest.\n * > maxSumList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * {10, 11, 12}\n * > maxSumList(vector<vector<int>>{{3, 2, 1}, {6, 5, 4}, {12, 11, 10}})\n * {12, 11, 10}\n * > maxSumList(vector<vector<int>>{{2, 3, 1}})\n * {2, 3, 1}\n */\nvector<int> maxSumList(vector<vector<int>> lists) {\nvector<int> maxSumList;\nlong long currentMaxSum = -1; // Use long long to handle potentially large sums\n\n\nfor (const auto& list : lists) {\n    long long currentSum = 0;\n    for (int x : list) {\n        currentSum += x;\n    }\n\n    if (maxSumList.empty() || currentSum > currentMaxSum) {\n        currentMaxSum = currentSum;\n        maxSumList = list;\n    }\n}\nreturn maxSumList;", "entry_point": "maxSumList", "result": "passed", "passed": true}
{"task_id": "MBCPP/806", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum run of uppercase characters in the given string.\n * > maxRunUppercase(string(\"GeMKSForGERksISBESt\"))\n * 5\n * > maxRunUppercase(string(\"PrECIOusMOVemENTSYT\"))\n * 6\n * > maxRunUppercase(string(\"GooGLEFluTTER\"))\n * 4\n */\nint maxRunUppercase(string testStr) {\nint maxRun = 0;\n    int currentRun = 0;\n    for (char c : testStr) {\n        if (isupper(c)) {\n            currentRun++;\n        } else {\n            maxRun = max(maxRun, currentRun);\n            currentRun = 0;\n        }\n    }\n    maxRun = max(maxRun, currentRun); // Check one last time after the loop\n    return maxRun;", "entry_point": "maxRunUppercase", "result": "passed", "passed": true}
{"task_id": "MBCPP/807", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first odd number in a given list of numbers.\n * > firstOdd(vector<int>{1, 3, 5})\n * 1\n * > firstOdd(vector<int>{2, 4, 1, 3})\n * 1\n */\nint firstOdd(vector<int> nums) {\nfor (int num : nums) {\n        if (num % 2 != 0) {\n            return num;\n        }\n    }\n    return -1; // Or throw an exception if no odd number is found", "entry_point": "firstOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/808", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuples contain the k or not.\n * > checkK(vector<int>{10, 4, 5, 6, 8}, 6)\n * true\n * > checkK(vector<int>{1, 2, 3, 4, 5, 6}, 7)\n * false\n * > checkK(vector<int>{7, 8, 9, 44, 11, 12}, 11)\n * true\n */\nbool checkK(vector<int> testTup, int k) {\nfor (int i = 0; i < testTup.size(); i++) {\n        if (testTup[i] == k) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "checkK", "result": "passed", "passed": true}
{"task_id": "MBCPP/809", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n * > checkSmaller(vector<int>{1, 2, 3}, vector<int>{2, 3, 4})\n * false\n * > checkSmaller(vector<int>{4, 5, 6}, vector<int>{3, 4, 5})\n * true\n * > checkSmaller(vector<int>{11, 12, 13}, vector<int>{10, 11, 12})\n * true\n */\nbool checkSmaller(vector<int> testTup1, vector<int> testTup2) {\nfor (int i = 0; i < testTup1.size(); i++) {\n        if (testTup2[i] >= testTup1[i]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "checkSmaller", "result": "passed", "passed": true}
{"task_id": "MBCPP/810", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to iterate over elements repeating each as many times as its count.\n * > countVariable(4, 2, 0, -2)\n * {string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"q\"), string(\"q\")}\n * > countVariable(0, 1, 2, 3)\n * {string(\"q\"), string(\"r\"), string(\"r\"), string(\"s\"), string(\"s\"), string(\"s\")}\n * > countVariable(11, 15, 12, 23)\n * {string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\")}\n */\nvector<string> countVariable(int a, int b, int c, int d) {\nvector<string> result;\nfor (int i = 0; i < a; ++i) {\nresult.push_back(\"p\");\n}\nfor (int i = 0; i < b; ++i) {\nresult.push_back(\"q\");\n}\nfor (int i = 0; i < c; ++i) {\nresult.push_back(\"r\");\n}\nfor (int i = 0; i < d; ++i) {\nresult.push_back(\"s\");\n}\nreturn result;", "entry_point": "countVariable", "result": "passed", "passed": true}
{"task_id": "MBCPP/811", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if two lists of tuples are identical or not.\n * > checkIdentical(vector<vector<int>>{{10, 4}, {2, 5}}, vector<vector<int>>{{10, 4}, {2, 5}})\n * true\n * > checkIdentical(vector<vector<int>>{{1, 2}, {3, 7}}, vector<vector<int>>{{12, 14}, {12, 45}})\n * false\n * > checkIdentical(vector<vector<int>>{{2, 14}, {12, 25}}, vector<vector<int>>{{2, 14}, {12, 25}})\n * true\n */\nbool checkIdentical(vector<vector<int>> testList1, vector<vector<int>> testList2) {\nif (testList1.size() != testList2.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < testList1.size(); ++i) {\n        if (testList1[i].size() != testList2[i].size()) {\n            return false;\n        }\n        for (size_t j = 0; j < testList1[i].size(); ++j) {\n            if (testList1[i][j] != testList2[i][j]) {\n                return false;\n            }\n        }\n    }\n    return true;", "entry_point": "checkIdentical", "result": "passed", "passed": true}
{"task_id": "MBCPP/812", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to abbreviate 'road' as 'rd.' in a given string.\n * > roadRd(string(\"ravipadu Road\"))\n * string(\"ravipadu Rd.\")\n * > roadRd(string(\"palnadu Road\"))\n * string(\"palnadu Rd.\")\n * > roadRd(string(\"eshwar enclave Road\"))\n * string(\"eshwar enclave Rd.\")\n */\nstring roadRd(string street) {\nstring result = street;\n    string::size_type pos = result.find(\"Road\");\n    while (pos != string::npos) {\n        result.replace(pos, 4, \"Rd.\");\n        pos = result.find(\"Road\", pos + 3); \n    }\n    return result;", "entry_point": "roadRd", "result": "passed", "passed": true}
{"task_id": "MBCPP/813", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find length of the string.\n * > stringLength(string(\"python\"))\n * 6\n * > stringLength(string(\"program\"))\n * 7\n * > stringLength(string(\"language\"))\n * 8\n */\nint stringLength(string str1) {\nint length = 0;\n    for (char c : str1) {\n        length++;\n    }\n    return length;", "entry_point": "stringLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/814", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rombus.\n * > rombusArea(10, 20)\n * 100\n * > rombusArea(10, 5)\n * 25\n * > rombusArea(4, 2)\n * 4\n */\nint rombusArea(int p, int q) {\nreturn (p * q) / 2;", "entry_point": "rombusArea", "result": "passed", "passed": true}
{"task_id": "MBCPP/815", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n * > sortByDnf(vector<int>{1, 2, 0, 1, 0, 1, 2, 1, 1}, 9)\n * {0, 0, 1, 1, 1, 1, 1, 2, 2}\n * > sortByDnf(vector<int>{1, 0, 0, 1, 2, 1, 2, 2, 1, 0}, 10)\n * {0, 0, 0, 1, 1, 1, 1, 2, 2, 2}\n * > sortByDnf(vector<int>{2, 2, 1, 0, 0, 0, 1, 1, 2, 1}, 10)\n * {0, 0, 0, 1, 1, 1, 1, 2, 2, 2}\n */\nvector<int> sortByDnf(vector<int> arr, int n) {\nint low = 0;\n    int mid = 0;\n    int high = n - 1;\n\n    while (mid <= high) {\n        if (arr[mid] == 0) {\n            swap(arr[low], arr[mid]);\n            low++;\n            mid++;\n        } else if (arr[mid] == 1) {\n            mid++;\n        } else {\n            swap(arr[mid], arr[high]);\n            high--;\n        }\n    }\n    return arr;", "entry_point": "sortByDnf", "result": "passed", "passed": true}
{"task_id": "MBCPP/817", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n * > divOfNums(vector<int>{19, 65, 57, 39, 152, 639, 121, 44, 90, 190}, 19, 13)\n * {19, 65, 57, 39, 152, 190}\n * > divOfNums(vector<int>{1, 2, 3, 5, 7, 8, 10}, 2, 5)\n * {2, 5, 8, 10}\n * > divOfNums(vector<int>{10, 15, 14, 13, 18, 12, 20}, 10, 5)\n * {10, 15, 20}\n */\nvector<int> divOfNums(vector<int> nums, int m, int n) {\nvector<int> result;\nauto lambda_func = [&](int num) {\nreturn (num % m == 0) || (num % n == 0);\n};\nfor (int num : nums) {\nif (lambda_func(num)) {\nresult.push_back(num);\n}\n}\nreturn result;", "entry_point": "divOfNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/818", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count lower case letters in a given string.\n * > lowerCtr(string(\"abc\"))\n * 3\n * > lowerCtr(string(\"string\"))\n * 6\n * > lowerCtr(string(\"Python\"))\n * 5\n */\nint lowerCtr(string str) {\nint count = 0;\n    for (char c : str) {\n        if (islower(c)) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "lowerCtr", "result": "passed", "passed": true}
{"task_id": "MBCPP/819", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n * > countDuplic(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {{1, 2, 4, 5}, {1, 3, 3, 4}}\n * > countDuplic(vector<int>{2, 2, 3, 1, 2, 6, 7, 9})\n * {{2, 3, 1, 2, 6, 7, 9}, {2, 1, 1, 1, 1, 1, 1}}\n * > countDuplic(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}\n */\nvector<vector<int>> countDuplic(vector<int> lists) {\nif (lists.empty()) {\n        return {{}, {}};\n    }\n\n    vector<int> elements;\n    vector<int> frequencies;\n\n    elements.push_back(lists[0]);\n    int current_frequency = 1;\n\n    for (size_t i = 1; i < lists.size(); ++i) {\n        if (lists[i] == lists[i - 1]) {\n            current_frequency++;\n        } else {\n            frequencies.push_back(current_frequency);\n            elements.push_back(lists[i]);\n            current_frequency = 1;\n        }\n    }\n    frequencies.push_back(current_frequency);\n\n    return {elements, frequencies};", "entry_point": "countDuplic", "result": "passed", "passed": true}
{"task_id": "MBCPP/820", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 28 days or not.\n * > checkMonthnumNumber(2)\n * true\n * > checkMonthnumNumber(1)\n * false\n * > checkMonthnumNumber(3)\n * false\n */\nbool checkMonthnumNumber(int monthnum1) {\nif (monthnum1 == 2) {\n        return true;\n    } else {\n        return false;\n    }", "entry_point": "checkMonthnumNumber", "result": "Compilation failed: /tmp/tmpa019j0kz/temp.cpp: In function \u2018bool checkMonthnumNumber(int)\u2019:\n/tmp/tmpa019j0kz/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpa019j0kz/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmpa019j0kz/temp.cpp:15:41: note: to match this \u2018{\u2019\n   15 | bool checkMonthnumNumber(int monthnum1) {\n      |                                         ^\n", "passed": false}
{"task_id": "MBCPP/821", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries into a single expression.\n * > mergeDictionaries(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}\n * > mergeDictionaries(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"O\"), string(\"Orange\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\")}, {string(\"W\"), string(\"White\")}, {string(\"R\"), string(\"Red\")}}\n * > mergeDictionaries(unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}, {string(\"G\"), string(\"Green\")}, {string(\"B\"), string(\"Black\")}}\n */\nunordered_map<string, string> mergeDictionaries(unordered_map<string, string> dict1, unordered_map<string, string> dict2) {\nunordered_map<string, string> mergedDict = dict1;\n    for (auto const& [key, val] : dict2) {\n        mergedDict[key] = val;\n    }\n    return mergedDict;", "entry_point": "mergeDictionaries", "result": "passed", "passed": true}
{"task_id": "MBCPP/822", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return true if the password is valid.\n * > passValidity(string(\"password\"))\n * false\n * > passValidity(string(\"Password@10\"))\n * true\n * > passValidity(string(\"password@10\"))\n * false\n */\nbool passValidity(string p) {\nbool hasUpper = false;\n    bool hasLower = false;\n    bool hasDigit = false;\n    bool hasSpecial = false;\n\n    if (p.length() < 8) {\n        return false;\n    }\n\n    for (char c : p) {\n        if (isupper(c)) {\n            hasUpper = true;\n        } else if (islower(c)) {\n            hasLower = true;\n        } else if (isdigit(c)) {\n            hasDigit = true;\n        } else if (ispunct(c)) {\n            hasSpecial = true;\n        }\n    }\n\n    return hasUpper && hasLower && hasDigit && hasSpecial;", "entry_point": "passValidity", "result": "passed", "passed": true}
{"task_id": "MBCPP/823", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given string starts with a substring using regex.\n * > checkSubstring(string(\"dreams for dreams makes life fun\"), string(\"makes\"))\n * string(\"string doesnt start with the given substring\")\n * > checkSubstring(string(\"Hi there how are you Hi alex\"), string(\"Hi\"))\n * string(\"string starts with the given substring\")\n * > checkSubstring(string(\"Its been a long day\"), string(\"been\"))\n * string(\"string doesnt start with the given substring\")\n */\nstring checkSubstring(string str, string sample) {\nstd::regex pattern(\"^\" + sample);\n    if (std::regex_search(str, pattern)) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }", "entry_point": "checkSubstring", "result": "Compilation failed: /tmp/tmpt23j2iae/temp.cpp: In function \u2018std::string checkSubstring(std::string, std::string)\u2019:\n/tmp/tmpt23j2iae/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpt23j2iae/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpt23j2iae/temp.cpp:15:50: note: to match this \u2018{\u2019\n   15 | string checkSubstring(string str, string sample) {\n      |                                                  ^\n", "passed": false}
{"task_id": "MBCPP/824", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove even numbers from a given list.\n * > removeEven(vector<int>{1, 3, 5, 2})\n * {1, 3, 5}\n * > removeEven(vector<int>{5, 6, 7})\n * {5, 7}\n * > removeEven(vector<int>{1, 2, 3, 4})\n * {1, 3}\n */\nvector<int> removeEven(vector<int> l) {\nvector<int> result;\nfor (int x : l) {\nif (x % 2 != 0) {\nresult.push_back(x);\n}\n}\nreturn result;", "entry_point": "removeEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/825", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to access multiple elements of specified index from a given list.\n * > accessElements(vector<int>{2, 3, 8, 4, 7, 9}, vector<int>{0, 3, 5})\n * {2, 4, 9}\n * > accessElements(vector<int>{1, 2, 3, 4, 5}, vector<int>{1, 2})\n * {2, 3}\n * > accessElements(vector<int>{1, 0, 2, 3}, vector<int>{0, 1})\n * {1, 0}\n */\nvector<int> accessElements(vector<int> nums, vector<int> listIndex) {\nvector<int> result;\nfor (int index : listIndex) {\nresult.push_back(nums[index]);\n}\nreturn result;", "entry_point": "accessElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/826", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the type of triangle from the given sides.\n * > checkTypeOfTriangle(1, 2, 3)\n * string(\"Obtuse-angled Triangle\")\n * > checkTypeOfTriangle(2, 2, 2)\n * string(\"Acute-angled Triangle\")\n * > checkTypeOfTriangle(1, 0, 1)\n * string(\"Right-angled Triangle\")\n */\nstring checkTypeOfTriangle(int a, int b, int c) {\nint arr[3] = {a, b, c};\n    sort(arr, arr + 3);\n    a = arr[0];\n    b = arr[1];\n    c = arr[2];\n\n    if (a + b <= c) {\n        return \"Invalid Triangle\";\n    }\n\n    if (a * a + b * b == c * c) {\n        return \"Right-angled Triangle\";\n    } else if (a * a + b * b < c * c) {\n        return \"Obtuse-angled Triangle\";\n    } else {\n        return \"Acute-angled Triangle\";\n    }", "entry_point": "checkTypeOfTriangle", "result": "Compilation failed: /tmp/tmpab3jg4b6/temp.cpp: In function \u2018std::string checkTypeOfTriangle(int, int, int)\u2019:\n/tmp/tmpab3jg4b6/temp.cpp:34:1: error: a template declaration cannot appear at block scope\n   34 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpab3jg4b6/temp.cpp:55:1: error: expected \u2018}\u2019 at end of input\n   55 | }\n      | ^\n/tmp/tmpab3jg4b6/temp.cpp:15:49: note: to match this \u2018{\u2019\n   15 | string checkTypeOfTriangle(int a, int b, int c) {\n      |                                                 ^\n", "passed": false}
{"task_id": "MBCPP/827", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum a specific column of a list in a given list of lists.\n * > sumColumn(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}, 0)\n * 12\n * > sumColumn(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}, 1)\n * 15\n * > sumColumn(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}, 3)\n * 9\n */\nint sumColumn(vector<vector<int>> list1, int c) {\nint sum = 0;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (c < list1[i].size()) { // Check if the column index is valid for the current row\n            sum += list1[i][c];\n        }\n    }\n    return sum;", "entry_point": "sumColumn", "result": "passed", "passed": true}
{"task_id": "MBCPP/828", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count alphabets,digits and special charactes in a given string.\n * > countAlphaDigSpl(string(\"abc!@#123\"))\n * {3, 3, 3}\n * > countAlphaDigSpl(string(\"dgsuy@#$%&1255\"))\n * {5, 4, 5}\n * > countAlphaDigSpl(string(\"fjdsif627348#%$^&\"))\n * {6, 6, 5}\n */\nvector<int> countAlphaDigSpl(string str) {\nint alphabets = 0;\n    int digits = 0;\n    int specials = 0;\n\n    for (char ch : str) {\n        if (isalpha(ch)) {\n            alphabets++;\n        } else if (isdigit(ch)) {\n            digits++;\n        } else {\n            specials++;\n        }\n    }\n\n    return {alphabets, digits, specials};", "entry_point": "countAlphaDigSpl", "result": "passed", "passed": true}
{"task_id": "MBCPP/829", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the second most repeated (or frequent) string in the given sequence.\n * > secondFrequent(vector<string>{string(\"aaa\"), string(\"bbb\"), string(\"ccc\"), string(\"bbb\"), string(\"aaa\"), string(\"aaa\")})\n * string(\"bbb\")\n * > secondFrequent(vector<string>{string(\"abc\"), string(\"bcd\"), string(\"abc\"), string(\"bcd\"), string(\"bcd\"), string(\"bcd\")})\n * string(\"abc\")\n * > secondFrequent(vector<string>{string(\"cdma\"), string(\"gsm\"), string(\"hspa\"), string(\"gsm\"), string(\"cdma\"), string(\"cdma\")})\n * string(\"gsm\")\n */\nstring secondFrequent(vector<string> input) {\nmap<string, int> freq;\n    for (string s : input) {\n        freq[s]++;\n    }\n\n    int maxFreq1 = 0, maxFreq2 = 0;\n    string res1 = \"\", res2 = \"\";\n\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > maxFreq1) {\n            maxFreq2 = maxFreq1;\n            res2 = res1;\n            maxFreq1 = it->second;\n            res1 = it->first;\n        } else if (it->second > maxFreq2 && it->second != maxFreq1) {\n            maxFreq2 = it->second;\n            res2 = it->first;\n        }\n    }\n    return res2;", "entry_point": "secondFrequent", "result": "passed", "passed": true}
{"task_id": "MBCPP/831", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count equal element pairs from the given array.\n * > countPairs(vector<int>{1, 1, 1, 1}, 4)\n * 6\n * > countPairs(vector<int>{1, 5, 1}, 3)\n * 1\n * > countPairs(vector<int>{3, 2, 1, 7, 8, 9}, 6)\n * 0\n */\nint countPairs(vector<int> arr, int n) {\nint count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;", "entry_point": "countPairs", "result": "passed", "passed": true}
{"task_id": "MBCPP/832", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the maximum numeric value from a string by using regex.\n * > extractMax(string(\"100klh564abc365bg\"))\n * 564\n * > extractMax(string(\"hello300how546mer231\"))\n * 546\n * > extractMax(string(\"its233beenalong343journey234\"))\n * 343\n */\nint extractMax(string input) {\nstd::regex num_regex(\"d+\");\n    std::sregex_iterator it(input.begin(), input.end(), num_regex);\n    std::sregex_iterator end;\n\n    int max_val = 0; // Initialize with 0 as numbers are non-negative\n\n    while (it != end) {\n        int current_num = std::stoi(it->str());\n        if (current_num > max_val) {\n            max_val = current_num;\n        }\n        ++it;\n    }\n    return max_val;", "entry_point": "extractMax", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/833", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get dictionary keys as a list.\n * > getKey(unordered_map<int, string>{{1, string(\"python\")}, {2, string(\"java\")}})\n * {1, 2}\n * > getKey(unordered_map<int, string>{{10, string(\"red\")}, {20, string(\"blue\")}, {30, string(\"black\")}})\n * {10, 20, 30}\n * > getKey(unordered_map<int, string>{{27, string(\"language\")}, {39, string(\"java\")}, {44, string(\"little\")}})\n * {27, 39, 44}\n */\nvector<int> getKey(unordered_map<int, string> dict) {\nvector<int> keys;\nfor (auto const& [key, val] : dict) {\nkeys.push_back(key);\n}\nreturn keys;", "entry_point": "getKey", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/834", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n * > generateMatrix(3)\n * {{1, 2, 3}, {8, 9, 4}, {7, 6, 5}}\n * > generateMatrix(2)\n * {{1, 2}, {4, 3}}\n * > generateMatrix(7)\n * {{1, 2, 3, 4, 5, 6, 7}, {24, 25, 26, 27, 28, 29, 8}, {23, 40, 41, 42, 43, 30, 9}, {22, 39, 48, 49, 44, 31, 10}, {21, 38, 47, 46, 45, 32, 11}, {20, 37, 36, 35, 34, 33, 12}, {19, 18, 17, 16, 15, 14, 13}}\n */\nvector<vector<int>> generateMatrix(int n) {\nvector<vector<int>> matrix(n, vector<int>(n));\nint top = 0, bottom = n - 1;\nint left = 0, right = n - 1;\nint num = 1;\n\n\nwhile (top <= bottom && left <= right) {\n    // Fill top row\n    for (int i = left; i <= right; ++i) {\n        matrix[top][i] = num++;\n    }\n    top++;\n\n    // Fill right column\n    for (int i = top; i <= bottom; ++i) {\n        matrix[i][right] = num++;\n    }\n    right--;\n\n    // Fill bottom row\n    if (top <= bottom) {\n        for (int i = right; i >= left; --i) {\n            matrix[bottom][i] = num++;\n        }\n        bottom--;\n    }\n\n    // Fill left column\n    if (left <= right) {\n        for (int i = bottom; i >= top; --i) {\n            matrix[i][left] = num++;\n        }\n        left++;\n    }\n}\nreturn matrix;", "entry_point": "generateMatrix", "result": "passed", "passed": true}
{"task_id": "MBCPP/836", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find length of the subarray having maximum sum.\n * > maxSubArraySum(vector<int>{-2, -3, 4, -1, -2, 1, 5, -3}, 8)\n * 5\n * > maxSubArraySum(vector<int>{1, -2, 1, 1, -2, 1}, 6)\n * 2\n * > maxSubArraySum(vector<int>{-1, -2, 3, 4, 5}, 5)\n * 3\n */\nint maxSubArraySum(vector<int> a, int size) {\nint max_so_far = INT_MIN;\n    int max_ending_here = 0;\n    int start = 0;\n    int end = 0;\n    int s = 0;\n\n    for (int i = 0; i < size; i++) {\n        max_ending_here += a[i];\n\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    return (end - start + 1);", "entry_point": "maxSubArraySum", "result": "passed", "passed": true}
{"task_id": "MBCPP/837", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n odd natural numbers.\n * > cubeSum(2)\n * 28\n * > cubeSum(3)\n * 153\n * > cubeSum(4)\n * 496\n */\nint cubeSum(int n) {\nreturn n * n * (2 * n * n - 1);", "entry_point": "cubeSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/838", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum number swaps required to make two binary strings equal.\n * > minSwaps(string(\"0011\"), string(\"1111\"))\n * 1\n * > minSwaps(string(\"00011\"), string(\"01001\"))\n * 2\n * > minSwaps(string(\"111\"), string(\"111\"))\n * 0\n */\nint minSwaps(string s1, string s2) {\nint n = s1.length();\n    int zeroOne = 0; // s1 has 0, s2 has 1\n    int oneZero = 0; // s1 has 1, s2 has 0\n\n    for (int i = 0; i < n; i++) {\n        if (s1[i] == '0' && s2[i] == '1') {\n            zeroOne++;\n        } else if (s1[i] == '1' && s2[i] == '0') {\n            oneZero++;\n        }\n    }\n\n    return (zeroOne + 1) / 2 + (oneZero + 1) / 2;", "entry_point": "minSwaps", "result": "passed", "passed": true}
{"task_id": "MBCPP/840", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n * > checkSolution(2, 0, -1)\n * string(\"Yes\")\n * > checkSolution(1, -5, 6)\n * string(\"No\")\n * > checkSolution(2, 0, 2)\n * string(\"Yes\")\n */\nstring checkSolution(int a, int b, int c) {\nif (b == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }", "entry_point": "checkSolution", "result": "Compilation failed: /tmp/tmpjcpjopz3/temp.cpp: In function \u2018std::string checkSolution(int, int, int)\u2019:\n/tmp/tmpjcpjopz3/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpjcpjopz3/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmpjcpjopz3/temp.cpp:15:43: note: to match this \u2018{\u2019\n   15 | string checkSolution(int a, int b, int c) {\n      |                                           ^\n", "passed": false}
{"task_id": "MBCPP/841", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the number of inversions in the given array.\n * > getInvCount(vector<int>{1, 20, 6, 4, 5}, 5)\n * 5\n * > getInvCount(vector<int>{8, 4, 2, 1}, 4)\n * 6\n * > getInvCount(vector<int>{3, 1, 2}, 3)\n * 2\n */\nint getInvCount(vector<int> arr, int n) {\nint inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;", "entry_point": "getInvCount", "result": "passed", "passed": true}
{"task_id": "MBCPP/842", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number which occurs for odd number of times in the given array.\n * > getOddOccurence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n * > getOddOccurence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurence(vector<int>{5, 7, 2, 7, 5, 2, 5}, 7)\n * 5\n */\nint getOddOccurence(vector<int> arr, int arrSize) {\nint result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;", "entry_point": "getOddOccurence", "result": "passed", "passed": true}
{"task_id": "MBCPP/843", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n * > nthSuperUglyNumber(12, vector<int>{2, 7, 13, 19})\n * 32\n * > nthSuperUglyNumber(10, vector<int>{2, 7, 13, 19})\n * 26\n * > nthSuperUglyNumber(100, vector<int>{2, 7, 13, 19})\n * 5408\n */\nint nthSuperUglyNumber(int n, vector<int> primes) {\npriority_queue<long long, vector<long long>, greater<long long>> pq;\npq.push(1);\n\nlong long current_ugly_number = 0;\nfor (int i = 0; i < n; ++i) {\n    current_ugly_number = pq.top();\n    pq.pop();\n\n    while (!pq.empty() && pq.top() == current_ugly_number) {\n        pq.pop();\n    }\n\n    for (int prime : primes) {\n        if (current_ugly_number > LLONG_MAX / prime) {\n            continue;\n        }\n        pq.push(current_ugly_number * prime);\n    }\n}\nreturn static_cast<int>(current_ugly_number);", "entry_point": "nthSuperUglyNumber", "result": "passed", "passed": true}
{"task_id": "MBCPP/844", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the kth element in an array containing odd elements first and then even elements.\n * > getNumber(8, 5)\n * 2\n * > getNumber(7, 2)\n * 3\n * > getNumber(5, 2)\n * 3\n */\nint getNumber(int n, int k) {\nint oddCount = (n + 1) / 2;\n\n    if (k <= oddCount) {\n        // kth element is an odd number\n        return 2 * k - 1;\n    } else {\n        // kth element is an even number\n        // Adjust k to find its position among even numbers\n        k -= oddCount;\n        return 2 * k;\n    }", "entry_point": "getNumber", "result": "Compilation failed: /tmp/tmprvlta9s5/temp.cpp: In function \u2018int getNumber(int, int)\u2019:\n/tmp/tmprvlta9s5/temp.cpp:28:1: error: a template declaration cannot appear at block scope\n   28 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmprvlta9s5/temp.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmprvlta9s5/temp.cpp:15:29: note: to match this \u2018{\u2019\n   15 | int getNumber(int n, int k) {\n      |                             ^\n", "passed": false}
{"task_id": "MBCPP/845", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits in factorial of a given number.\n * > findDigits(7)\n * 4\n * > findDigits(5)\n * 3\n * > findDigits(4)\n * 2\n */\nint findDigits(int n) {\nif (n < 0) return 0;\n    if (n <= 1) return 1;\n\n    double digits = 0;\n    for (int i = 2; i <= n; i++) {\n        digits += log10(i);\n    }\n    return floor(digits) + 1;", "entry_point": "findDigits", "result": "passed", "passed": true}
{"task_id": "MBCPP/846", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum number of platforms required for a railway/bus station.\n * > findPlatform(vector<int>{900, 940, 950, 1100, 1500, 1800}, vector<int>{910, 1200, 1120, 1130, 1900, 2000}, 6)\n * 3\n * > findPlatform(vector<int>{100, 200, 300, 400}, vector<int>{700, 800, 900, 1000}, 4)\n * 4\n * > findPlatform(vector<int>{5, 6, 7, 8}, vector<int>{4, 3, 2, 1}, 4)\n * 1\n */\nint findPlatform(vector<int> arr, vector<int> dep, int n) {\nsort(arr.begin(), arr.end());\n    sort(dep.begin(), dep.end());\n\n    int platforms_needed = 0;\n    int max_platforms = 0;\n    int i = 0, j = 0;\n\n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            platforms_needed++;\n            i++;\n        } else {\n            platforms_needed--;\n            j++;\n        }\n        max_platforms = max(max_platforms, platforms_needed);\n    }\n    return max_platforms;", "entry_point": "findPlatform", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 2 did not pass.\n", "passed": false}
{"task_id": "MBCPP/847", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to copy a list from a singleton tuple.\n * > lcopy(vector<int>{1, 2, 3})\n * {1, 2, 3}\n * > lcopy(vector<int>{4, 8, 2, 10, 15, 18})\n * {4, 8, 2, 10, 15, 18}\n * > lcopy(vector<int>{4, 5, 6})\n * {4, 5, 6}\n */\nvector<int> lcopy(vector<int> xs) {\nreturn xs;", "entry_point": "lcopy", "result": "passed", "passed": true}
{"task_id": "MBCPP/848", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a trapezium.\n * > areaTrapezium(6, 9, 4)\n * 30\n * > areaTrapezium(10, 20, 30)\n * 450\n * > areaTrapezium(15, 25, 35)\n * 700\n */\nint areaTrapezium(int base1, int base2, int height) {\nreturn 0.5 * (base1 + base2) * height;", "entry_point": "areaTrapezium", "result": "passed", "passed": true}
{"task_id": "MBCPP/849", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of all prime divisors of a given number.\n * > sum(60)\n * 10\n * > sum(39)\n * 16\n * > sum(40)\n * 7\n */\nint sum(int n) {\nint totalSum = 0;\n\n    // Handle factor 2\n    if (n % 2 == 0) {\n        totalSum += 2;\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n    }\n\n    // Handle odd factors\n    for (int i = 3; i * i <= n; i = i + 2) {\n        if (n % i == 0) {\n            totalSum += i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n\n    // Handle the case where n is a prime number greater than 2\n    if (n > 2) {\n        totalSum += n;\n    }\n\n    return totalSum;", "entry_point": "sum", "result": "passed", "passed": true}
{"task_id": "MBCPP/850", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a triangle of positive area is possible with the given angles.\n * > isTriangleexists(50, 60, 70)\n * true\n * > isTriangleexists(90, 45, 45)\n * true\n * > isTriangleexists(150, 30, 70)\n * false\n */\nbool isTriangleexists(int a, int b, int c) {\nif (a > 0 && b > 0 && c > 0 && (a + b + c == 180)) {\n        return true;\n    } else {\n        return false;\n    }", "entry_point": "isTriangleexists", "result": "Compilation failed: /tmp/tmp4a3vxr9n/temp.cpp: In function \u2018bool isTriangleexists(int, int, int)\u2019:\n/tmp/tmp4a3vxr9n/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp4a3vxr9n/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp4a3vxr9n/temp.cpp:15:44: note: to match this \u2018{\u2019\n   15 | bool isTriangleexists(int a, int b, int c) {\n      |                                            ^\n", "passed": false}
{"task_id": "MBCPP/852", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove negative numbers from a list.\n * > removeNegs(vector<int>{1, -2, 3, -4})\n * {1, 3}\n * > removeNegs(vector<int>{1, 2, 3, -4})\n * {1, 2, 3}\n * > removeNegs(vector<int>{4, 5, -6, 7, -8})\n * {4, 5, 7}\n */\nvector<int> removeNegs(vector<int> numList) {\nvector<int> result;\nfor (int num : numList) {\nif (num >= 0) {\nresult.push_back(num);\n}\n}\nreturn result;", "entry_point": "removeNegs", "result": "passed", "passed": true}
{"task_id": "MBCPP/853", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of odd factors of a number.\n * > sumOfOddFactors(30)\n * 24\n * > sumOfOddFactors(18)\n * 13\n * > sumOfOddFactors(2)\n * 1\n */\nint sumOfOddFactors(int n) {\nint sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0 && i % 2 == 1) {\n            sum += i;\n        }\n    }\n    return sum;", "entry_point": "sumOfOddFactors", "result": "passed", "passed": true}
{"task_id": "MBCPP/854", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n * > rawHeap(vector<int>{25, 44, 68, 21, 39, 23, 89})\n * {21, 25, 23, 44, 39, 68, 89}\n * > rawHeap(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 25, 22, 25, 35, 65, 75, 85, 58}\n * > rawHeap(vector<int>{4, 5, 6, 2})\n * {2, 4, 6, 5}\n */\nvector<int> rawHeap(vector<int> rawheap) {\nstd::make_heap(rawheap.begin(), rawheap.end(), std::greater<int>());\nreturn rawheap;", "entry_point": "rawHeap", "result": "passed", "passed": true}
{"task_id": "MBCPP/855", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check for even parity of a given number.\n * > checkEvenParity(10)\n * true\n * > checkEvenParity(11)\n * false\n * > checkEvenParity(18)\n * true\n */\nbool checkEvenParity(int x) {\nreturn (x % 2 == 0);", "entry_point": "checkEvenParity", "result": "passed", "passed": true}
{"task_id": "MBCPP/856", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum adjacent swaps required to sort binary array.\n * > findMinSwaps(vector<int>{1, 0, 1, 0}, 4)\n * 3\n * > findMinSwaps(vector<int>{0, 1, 0}, 3)\n * 1\n * > findMinSwaps(vector<int>{0, 0, 1, 1, 0}, 5)\n * 2\n */\nint findMinSwaps(vector<int> arr, int n) {\nlong long swaps = 0;\n    int zeros_encountered = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 0) {\n            zeros_encountered++;\n        } else { // arr[i] == 1\n            swaps += zeros_encountered;\n        }\n    }\n    return swaps;", "entry_point": "findMinSwaps", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/857", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to list out the list of given strings individually using map function.\n * > listifyList(vector<string>{string(\"Red\"), string(\"Blue\"), string(\"Black\"), string(\"White\"), string(\"Pink\")})\n * {{string(\"R\"), string(\"e\"), string(\"d\")}, {string(\"B\"), string(\"l\"), string(\"u\"), string(\"e\")}, {string(\"B\"), string(\"l\"), string(\"a\"), string(\"c\"), string(\"k\")}, {string(\"W\"), string(\"h\"), string(\"i\"), string(\"t\"), string(\"e\")}, {string(\"P\"), string(\"i\"), string(\"n\"), string(\"k\")}}\n * > listifyList(vector<string>{string(\"python\")})\n * {{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}}\n * > listifyList(vector<string>{string(\" red \"), string(\"green\"), string(\" black\"), string(\"blue \"), string(\" orange\"), string(\"brown\")})\n * {{string(\" \"), string(\"r\"), string(\"e\"), string(\"d\"), string(\" \")}, {string(\"g\"), string(\"r\"), string(\"e\"), string(\"e\"), string(\"n\")}, {string(\" \"), string(\"b\"), string(\"l\"), string(\"a\"), string(\"c\"), string(\"k\")}, {string(\"b\"), string(\"l\"), string(\"u\"), string(\"e\"), string(\" \")}, {string(\" \"), string(\"o\"), string(\"r\"), string(\"a\"), string(\"n\"), string(\"g\"), string(\"e\")}, {string(\"b\"), string(\"r\"), string(\"o\"), string(\"w\"), string(\"n\")}}\n */\nvector<vector<string>> listifyList(vector<string> list1) {\nvector<vector<string>> result;\nfor (string s : list1) {\nvector<string> char_list;\nfor (char c : s) {\nchar_list.push_back(string(1, c));\n}\nresult.push_back(char_list);\n}\nreturn result;", "entry_point": "listifyList", "result": "passed", "passed": true}
{"task_id": "MBCPP/858", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count number of lists in a given list of lists and square the count.\n * > countList(vector<vector<int>>{{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}})\n * 25\n * > countList(vector<vector<int>>{{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}})\n * 16\n */\nint countList(vector<vector<int>> inputList) {\nint count = inputList.size();\n    return count * count;", "entry_point": "countList", "result": "passed", "passed": true}
{"task_id": "MBCPP/860", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n * > checkAlphanumeric(string(\"dawood@\"))\n * string(\"Discard\")\n * > checkAlpanumeric(string(\"skdmsam326\"))\n * string(\"Accept\")\n * > checkAlphanumeric(string(\"cooltricks@\"))\n * string(\"Discard\")\n */\nstring checkAlphanumeric(string str) {\nregex r(\".*[a-zA-Z0-9]$\");\n    if (regex_match(str, r)) {\n        return \"Accept\";\n    } else {\n        return \"Discard\";\n    }", "entry_point": "checkAlphanumeric", "result": "Compilation failed: /tmp/tmpy8bshq43/temp.cpp: In function \u2018std::string checkAlphanumeric(std::string)\u2019:\n/tmp/tmpy8bshq43/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpy8bshq43/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpy8bshq43/temp.cpp:15:38: note: to match this \u2018{\u2019\n   15 | string checkAlphanumeric(string str) {\n      |                                      ^\n", "passed": false}
{"task_id": "MBCPP/861", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n * > anagramLambda(vector<string>{string(\"bcda\"), string(\"abce\"), string(\"cbda\"), string(\"cbea\"), string(\"adcb\")}, string(\"abcd\"))\n * {string(\"bcda\"), string(\"cbda\"), string(\"adcb\")}\n * > anagramLambda(vector<string>{string(\"recitals\"), string(\" python\")}, string(\"articles\"))\n * {string(\"recitals\")}\n * > anagramLambda(vector<string>{string(\" keep\"), string(\" abcdef\"), string(\" xyz\")}, string(\" peek\"))\n * {string(\" keep\")}\n */\nvector<string> anagramLambda(vector<string> texts, string str) {\nvector<string> result;\nsort(str.begin(), str.end());\nfor_each(texts.begin(), texts.end(), [&](string s) {\nstring temp = s;\nsort(temp.begin(), temp.end());\nif (temp == str) {\nresult.push_back(s);\n}\n});\nreturn result;", "entry_point": "anagramLambda", "result": "passed", "passed": true}
{"task_id": "MBCPP/863", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n * > findLongestConseqSubseq(vector<int>{1, 2, 2, 3}, 4)\n * 3\n * > findLongestConseqSubseq(vector<int>{1, 9, 3, 10, 4, 20, 2}, 7)\n * 4\n * > findLongestConseqSubseq(vector<int>{36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42}, 11)\n * 5\n */\nint findLongestConseqSubseq(vector<int> arr, int n) {\nunordered_set<int> s;\nfor (int x : arr) {\ns.insert(x);\n}\n\n\nint longest_streak = 0;\n\nfor (int x : arr) {\n    // Check if the current element is the start of a sequence\n    // (i.e., x-1 is not in the set)\n    if (s.find(x - 1) == s.end()) {\n        int current_num = x;\n        int current_streak = 1;\n\n        // Count consecutive elements\n        while (s.find(current_num + 1) != s.end()) {\n            current_num++;\n            current_streak++;\n        }\n\n        longest_streak = max(longest_streak, current_streak);\n    }\n}\nreturn longest_streak;", "entry_point": "findLongestConseqSubseq", "result": "passed", "passed": true}
{"task_id": "MBCPP/864", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find palindromes in a given list of strings using lambda function.\n * > palindromeLambda(vector<string>{string(\"php\"), string(\"res\"), string(\"Python\"), string(\"abcd\"), string(\"Java\"), string(\"aaa\")})\n * {string(\"php\"), string(\"aaa\")}\n * > palindromeLambda(vector<string>{string(\"abcd\"), string(\"Python\"), string(\"abba\"), string(\"aba\")})\n * {string(\"abba\"), string(\"aba\")}\n * > palindromeLambda(vector<string>{string(\"abcd\"), string(\"abbccbba\"), string(\"abba\"), string(\"aba\")})\n * {string(\"abbccbba\"), string(\"abba\"), string(\"aba\")}\n */\nvector<string> palindromeLambda(vector<string> texts) {\nvector<string> result;\nauto isPalindrome = [](const string& s) {\nstring reversed_s = s;\nreverse(reversed_s.begin(), reversed_s.end());\nreturn s == reversed_s;\n};\nfor (const string& text : texts) {\nif (isPalindrome(text)) {\nresult.push_back(text);\n}\n}\nreturn result;", "entry_point": "palindromeLambda", "result": "passed", "passed": true}
{"task_id": "MBCPP/865", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print n-times a list using map function.\n * > ntimesList(vector<int>{1, 2, 3, 4, 5, 6, 7}, 3)\n * {3, 6, 9, 12, 15, 18, 21}\n * > ntimesList(vector<int>{1, 2, 3, 4, 5, 6, 7}, 4)\n * {4, 8, 12, 16, 20, 24, 28}\n * > ntimesList(vector<int>{1, 2, 3, 4, 5, 6, 7}, 10)\n * {10, 20, 30, 40, 50, 60, 70}\n */\nvector<int> ntimesList(vector<int> nums, int n) {\nvector<int> result;\nresult.reserve(nums.size()); // Pre-allocate memory for efficiency\n\n\nfor (int num : nums) {\n    result.push_back(num * n);\n}\nreturn result;", "entry_point": "ntimesList", "result": "passed", "passed": true}
{"task_id": "MBCPP/866", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 31 days or not.\n * > checkMonthnumb(string(\"February\"))\n * false\n * > checkMonthnumb(string(\"January\"))\n * true\n * > checkMonthnumb(string(\"March\"))\n * true\n */\nbool checkMonthnumb(string monthname2) {\nif (monthname2 == \"January\" || monthname2 == \"March\" || monthname2 == \"May\" || monthname2 == \"July\" || monthname2 == \"August\" || monthname2 == \"October\" || monthname2 == \"December\") {\n        return true;\n    } else {\n        return false;\n    }", "entry_point": "checkMonthnumb", "result": "Compilation failed: /tmp/tmp4ig4jpm1/temp.cpp: In function \u2018bool checkMonthnumb(std::string)\u2019:\n/tmp/tmp4ig4jpm1/temp.cpp:22:1: error: a template declaration cannot appear at block scope\n   22 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp4ig4jpm1/temp.cpp:43:1: error: expected \u2018}\u2019 at end of input\n   43 | }\n      | ^\n/tmp/tmp4ig4jpm1/temp.cpp:15:40: note: to match this \u2018{\u2019\n   15 | bool checkMonthnumb(string monthname2) {\n      |                                        ^\n", "passed": false}
{"task_id": "MBCPP/867", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to add a minimum number such that the sum of array becomes even.\n * > minNum(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 9)\n * 1\n * > minNum(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, 8)\n * 2\n * > minNum(vector<int>{1, 2, 3}, 3)\n * 2\n */\nint minNum(vector<int> arr, int n) {\nint sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n\n    if (sum % 2 == 0) {\n        return 2;\n    } else {\n        return 1;\n    }", "entry_point": "minNum", "result": "Compilation failed: /tmp/tmp574vdygv/temp.cpp: In function \u2018int minNum(std::vector<int>, int)\u2019:\n/tmp/tmp574vdygv/temp.cpp:27:1: error: a template declaration cannot appear at block scope\n   27 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp574vdygv/temp.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp574vdygv/temp.cpp:15:36: note: to match this \u2018{\u2019\n   15 | int minNum(vector<int> arr, int n) {\n      |                                    ^\n", "passed": false}
{"task_id": "MBCPP/868", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the last word in a given string.\n * > lengthOfLastWord(string(\"python language\"))\n * 8\n * > lengthOfLastWord(string(\"PHP\"))\n * 3\n * > lengthOfLastWord(string(\"\"))\n * 0\n */\nint lengthOfLastWord(string a) {\nint length = 0;\n    int i = a.length() - 1;\n\n    // Skip trailing spaces\n    while (i >= 0 && a[i] == ' ') {\n        i--;\n    }\n\n    // Count characters of the last word\n    while (i >= 0 && a[i] != ' ') {\n        length++;\n        i--;\n    }\n\n    return length;", "entry_point": "lengthOfLastWord", "result": "passed", "passed": true}
{"task_id": "MBCPP/869", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove sublists from a given list of lists, which are outside a given range.\n * > removeListRange(vector<vector<int>>{{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17}}, 13, 17)\n * {{13, 14, 15, 17}}\n * > removeListRange(vector<vector<int>>{{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17}}, 1, 3)\n * {{2}, {1, 2, 3}}\n * > removeListRange(vector<vector<int>>{{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17}}, 0, 7)\n * {{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}}\n */\nvector<vector<int>> removeListRange(vector<vector<int>> list1, int leftrange, int rigthrange) {\nvector<vector<int>> result;\nfor (const auto& sublist : list1) {\nbool all_in_range = true;\nfor (int val : sublist) {\nif (val < leftrange || val > rigthrange) {\nall_in_range = false;\nbreak;\n}\n}\nif (all_in_range) {\nresult.push_back(sublist);\n}\n}\nreturn result;", "entry_point": "removeListRange", "result": "passed", "passed": true}
{"task_id": "MBCPP/870", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n * > sumPositivenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 48\n * > sumPositivenum(vector<int>{10, 15, -14, 13, -18, 12, -20})\n * 50\n * > sumPositivenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n * 522\n */\nint sumPositivenum(vector<int> nums) {\nint sum = 0;\n    for_each(nums.begin(), nums.end(), [&](int n){\n        if (n > 0) {\n            sum += n;\n        }\n    });\n    return sum;", "entry_point": "sumPositivenum", "result": "passed", "passed": true}
{"task_id": "MBCPP/871", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given strings are rotations of each other or not.\n * > areRotations(string(\"abc\"), string(\"cba\"))\n * false\n * > areRotations(string(\"abcd\"), string(\"cdba\"))\n * false\n * > areRotations(string(\"abacd\"), string(\"cdaba\"))\n * true\n */\nbool areRotations(string string1, string string2) {\nif (string1.length() != string2.length()) {\n        return false;\n    }\n    string temp = string1 + string1;\n    return (temp.find(string2) != string::npos);", "entry_point": "areRotations", "result": "passed", "passed": true}
{"task_id": "MBCPP/873", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve the fibonacci sequence using recursion.\n * > fibonacci(7)\n * 13\n * > fibonacci(8)\n * 21\n * > fibonacci(9)\n * 34\n */\nint fibonacci(int n) {\nif (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);", "entry_point": "fibonacci", "result": "passed", "passed": true}
{"task_id": "MBCPP/874", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the string is a concatenation of another string.\n * > checkConcat(string(\"abcabcabc\"), string(\"abc\"))\n * true\n * > checkConcat(string(\"abcab\"), string(\"abc\"))\n * false\n * > checkConcat(string(\"aba\"), string(\"ab\"))\n * false\n */\nbool checkConcat(string str1, string str2) {\nif (str2.empty()) {\n        return false; \n    }\n    if (str1.length() % str2.length() != 0) {\n        return false;\n    }\n    int num_repeats = str1.length() / str2.length();\n    string expected_str = \"\";\n    for (int i = 0; i < num_repeats; ++i) {\n        expected_str += str2;\n    }\n    return str1 == expected_str;", "entry_point": "checkConcat", "result": "passed", "passed": true}
{"task_id": "MBCPP/875", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum difference in the tuple pairs of given tuples.\n * > minDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}})\n * 1\n * > minDifference(vector<vector<int>>{{4, 6}, {12, 8}, {11, 4}, {2, 13}})\n * 2\n * > minDifference(vector<vector<int>>{{5, 17}, {3, 9}, {12, 5}, {3, 24}})\n * 6\n */\nint minDifference(vector<vector<int>> testList) {\nint min_diff = INT_MAX;\n    for (const auto& p : testList) {\n        min_diff = min(min_diff, abs(p[0] - p[1]));\n    }\n    return min_diff;", "entry_point": "minDifference", "result": "passed", "passed": true}
{"task_id": "MBCPP/876", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find lcm of two positive integers.\n * > lcm(4, 6)\n * 12\n * > lcm(15, 17)\n * 255\n * > lcm(2, 6)\n * 6\n */\nint lcm(int x, int y) {\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n    return (x * y) / gcd(x, y);", "entry_point": "lcm", "result": "Compilation failed: /tmp/tmp0wrebjbv/temp.cpp: In function \u2018int lcm(int, int)\u2019:\n/tmp/tmp0wrebjbv/temp.cpp:16:23: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | int gcd(int a, int b) {\n      |                       ^\n/tmp/tmp0wrebjbv/temp.cpp:25:22: error: \u2018gcd\u2019 was not declared in this scope\n   25 |     return (x * y) / gcd(x, y);\n      |                      ^~~\n", "passed": false}
{"task_id": "MBCPP/877", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to sort the given string.\n * > sortString(string(\"cba\"))\n * string(\"abc\")\n * > sortString(string(\"data\"))\n * string(\"aadt\")\n * > sortString(string(\"zxy\"))\n * string(\"xyz\")\n */\nstring sortString(string str) {\nsort(str.begin(), str.end());\n    return str;", "entry_point": "sortString", "result": "passed", "passed": true}
{"task_id": "MBCPP/878", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple contains only k elements.\n * > checkTuples(vector<int>{3, 5, 6, 5, 3, 6}, vector<int>{3, 6, 5})\n * true\n * > checkTuples(vector<int>{4, 5, 6, 4, 6, 5}, vector<int>{4, 5, 6})\n * true\n * > checkTuples(vector<int>{9, 8, 7, 6, 8, 9}, vector<int>{9, 8, 1})\n * false\n */\nbool checkTuples(vector<int> testTuple, vector<int> k) {\nunordered_set<int> kElements(k.begin(), k.end());\nfor (int element : testTuple) {\nif (kElements.find(element) == kElements.end()) {\nreturn false;\n}\n}\nreturn true;", "entry_point": "checkTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/879", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n * > textMatch(string(\"aabbbbd\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"aabAbbbc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"accddbbjjjb\"))\n * string(\"Found a match!\")\n */\nstring textMatch(string text) {\nregex reg_obj(\"a.*b$\");\n    if (regex_search(text, reg_obj)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatch", "result": "Compilation failed: /tmp/tmpc_tkz3cz/temp.cpp: In function \u2018std::string textMatch(std::string)\u2019:\n/tmp/tmpc_tkz3cz/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpc_tkz3cz/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpc_tkz3cz/temp.cpp:15:31: note: to match this \u2018{\u2019\n   15 | string textMatch(string text) {\n      |                               ^\n", "passed": false}
{"task_id": "MBCPP/880", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of solutions in quadratic equation.\n * > checkSolution(2, 5, 2)\n * string(\"2 solutions\")\n * > checkSolution(1, 1, 1)\n * string(\"No solutions\")\n * > checkSolution(1, 2, 1)\n * string(\"1 solution\")\n */\nstring checkSolution(int a, int b, int c) {\nint delta = b * b - 4 * a * c;\n    if (delta > 0) {\n        return \"2 solutions\";\n    } else if (delta == 0) {\n        return \"1 solution\";\n    } else {\n        return \"No solutions\";\n    }", "entry_point": "checkSolution", "result": "Compilation failed: /tmp/tmpn9mpimsl/temp.cpp: In function \u2018std::string checkSolution(int, int, int)\u2019:\n/tmp/tmpn9mpimsl/temp.cpp:25:1: error: a template declaration cannot appear at block scope\n   25 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpn9mpimsl/temp.cpp:46:1: error: expected \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmpn9mpimsl/temp.cpp:15:43: note: to match this \u2018{\u2019\n   15 | string checkSolution(int a, int b, int c) {\n      |                                           ^\n", "passed": false}
{"task_id": "MBCPP/881", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of first even and odd number of a given list.\n * > sumEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 5\n * > sumEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 3\n * > sumEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 11\n */\nint sumEvenOdd(vector<int> list1) {\nint firstEven = -1;\n    int firstOdd = -1;\n\n    for (int num : list1) {\n        if (num % 2 == 0) { // Check for even\n            if (firstEven == -1) {\n                firstEven = num;\n            }\n        } else { // Odd number\n            if (firstOdd == -1) {\n                firstOdd = num;\n            }\n        }\n\n        // If both first even and first odd are found, we can stop\n        if (firstEven != -1 && firstOdd != -1) {\n            break;\n        }\n    }\n\n    return firstEven + firstOdd;", "entry_point": "sumEvenOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/882", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate perimeter of a parallelogram.\n * > parallelogramPerimeter(10, 20)\n * 400\n * > parallelogramPerimeter(15, 20)\n * 600\n * > parallelogramPerimeter(8, 9)\n * 144\n */\nint parallelogramPerimeter(int b, int h) {\nreturn 2 * (b + h);", "entry_point": "parallelogramPerimeter", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/883", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n * > divOfNums(vector<int>{19, 65, 57, 39, 152, 639, 121, 44, 90, 190}, 2, 4)\n * {152, 44}\n * > divOfNums(vector<int>{1, 2, 3, 5, 7, 8, 10}, 2, 5)\n * {10}\n * > divOfNums(vector<int>{10, 15, 14, 13, 18, 12, 20}, 10, 5)\n * {10, 20}\n */\nvector<int> divOfNums(vector<int> nums, int m, int n) {\nvector<int> result;\nauto isDivisible = [&](int num) {\nreturn num % m == 0 && num % n == 0;\n};\nfor (int num : nums) {\nif (isDivisible(num)) {\nresult.push_back(num);\n}\n}\nreturn result;", "entry_point": "divOfNums", "result": "passed", "passed": true}
{"task_id": "MBCPP/884", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are within a given range or not.\n * > allBitsSetInTheGivenRange(10, 2, 1)\n * true\n * > allBitsSetInTheGivenRange(5, 2, 4)\n * false\n * > allBitsSetInTheGivenRange(22, 2, 3)\n * true\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n// Create a mask with bits set from l to r\n    // (1 << r) creates a number with only the r-th bit set.\n    // (1 << r) - 1 creates a number with bits from 0 to r-1 set.\n    // So, ((1 << r) - 1) gives a mask with the first 'r' bits set.\n    // ((1 << (l - 1)) - 1) gives a mask with the first 'l-1' bits set.\n    // XORing them gives a mask with bits from l-1 to r-1 set.\n    // Since l and r are 1-indexed, we use l-1 and r to align with 0-indexed bit positions.\n    // The range is inclusive [l, r].\n    // Example: l=2, r=4 means bits at positions 1, 2, 3 (0-indexed)\n    // For 0-indexed bits from (l-1) to (r-1):\n    // Mask for bits from 0 to r-1: (1ULL << r) - 1\n    // Mask for bits from 0 to l-2: (1ULL << (l - 1)) - 1\n    // Mask for range [l-1, r-1]: ((1ULL << r) - 1) ^ ((1ULL << (l - 1)) - 1)\n\n    unsigned int mask = ((1U << r) - 1) ^ ((1U << (l - 1)) - 1);\n\n    // Apply the mask to n and check if the result is equal to the mask itself.\n    // If n & mask == mask, it means all the bits in n that correspond to the set bits in the mask are also set.\n    return (n & mask) == mask;", "entry_point": "allBitsSetInTheGivenRange", "result": "passed", "passed": true}
{"task_id": "MBCPP/885", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two given strings are isomorphic to each other or not.\n * > isIsomorphic(string(\"paper\"), string(\"title\"))\n * true\n * > isIsomorphic(string(\"ab\"), string(\"ba\"))\n * true\n * > isIsomorphic(string(\"ab\"), string(\"aa\"))\n * false\n */\nbool isIsomorphic(string str1, string str2) {\nif (str1.length() != str2.length()) {\n        return false;\n    }\n\n    // Using two maps (arrays for ASCII characters) to store mappings\n    // map1: maps characters from str1 to str2\n    // map2: maps characters from str2 to str1 (to ensure one-to-one mapping)\n    char map1[256] = {0}; // Initialize with 0 (null character)\n    char map2[256] = {0}; // Initialize with 0 (null character)\n\n    for (int i = 0; i < str1.length(); ++i) {\n        char c1 = str1[i];\n        char c2 = str2[i];\n\n        // Case 1: c1 is seen for the first time\n        if (map1[c1] == 0) {\n            // Check if c2 is already mapped to another character from str1\n            if (map2[c2] != 0) {\n                return false; // c2 is already taken by another character\n            }\n            // Establish the mapping\n            map1[c1] = c2;\n            map2[c2] = c1;\n        }\n        // Case 2: c1 has been seen before\n        else {\n            // Check if the current mapping of c1 is consistent with c2\n            if (map1[c1] != c2) {\n                return false; // Inconsistent mapping\n            }\n        }\n    }\n\n    return true;", "entry_point": "isIsomorphic", "result": "passed", "passed": true}
{"task_id": "MBCPP/886", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add all the numbers in a list and divide it with the length of the list.\n * > sumNum(vector<int>{8, 2, 3, 0, 7})\n * 4.0\n * > sumNum(vector<int>{-10, -20, -30})\n * -20.0\n * > sumNum(vector<int>{19, 15, 18})\n * 17.333333333333332\n */\ndouble sumNum(vector<int> numbers) {\ndouble sum = 0;\n    for (int number : numbers) {\n        sum += number;\n    }\n    return sum / numbers.size();", "entry_point": "sumNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/887", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is odd or not using bitwise operator.\n * > isOdd(5)\n * true\n * > isOdd(6)\n * false\n * > isOdd(7)\n * true\n */\nbool isOdd(int n) {\nreturn (n & 1);", "entry_point": "isOdd", "result": "passed", "passed": true}
{"task_id": "MBCPP/888", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the elements of the given nested tuples.\n * > substractElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{-5, -4}, {1, -4}, {1, 8}, {-6, 7}}\n * > substractElements(vector<vector<int>>{{13, 4}, {14, 6}, {13, 10}, {12, 11}}, vector<vector<int>>{{19, 8}, {14, 10}, {12, 2}, {18, 4}})\n * {{-6, -4}, {0, -4}, {1, 8}, {-6, 7}}\n * > substractElements(vector<vector<int>>{{19, 5}, {18, 7}, {19, 11}, {17, 12}}, vector<vector<int>>{{12, 9}, {17, 11}, {13, 3}, {19, 5}})\n * {{7, -4}, {1, -4}, {6, 8}, {-2, 7}}\n */\nvector<vector<int>> substractElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\nvector<vector<int>> result;\nfor (size_t i = 0; i < testTup1.size(); ++i) {\nvector<int> temp;\nfor (size_t j = 0; j < testTup1[i].size(); ++j) {\ntemp.push_back(testTup1[i][j] - testTup2[i][j]);\n}\nresult.push_back(temp);\n}\nreturn result;", "entry_point": "substractElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/889", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse each list in a given list of lists.\n * > reverseListLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}})\n * {{4, 3, 2, 1}, {8, 7, 6, 5}, {12, 11, 10, 9}, {16, 15, 14, 13}}\n * > reverseListLists(vector<vector<int>>{{1, 2}, {2, 3}, {3, 4}})\n * {{2, 1}, {3, 2}, {4, 3}}\n * > reverseListLists(vector<vector<int>>{{10, 20}, {30, 40}})\n * {{20, 10}, {40, 30}}\n */\nvector<vector<int>> reverseListLists(vector<vector<int>> lists) {\nfor (auto& list : lists) {\n        std::reverse(list.begin(), list.end());\n    }\n    return lists;", "entry_point": "reverseListLists", "result": "passed", "passed": true}
{"task_id": "MBCPP/890", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the index of an extra element present in one sorted array.\n * > findExtra(vector<int>{1, 2, 3, 4}, vector<int>{1, 2, 3}, 3)\n * 3\n * > findExtra(vector<int>{2, 4, 6, 8, 10}, vector<int>{2, 4, 6, 8}, 4)\n * 4\n * > findExtra(vector<int>{1, 3, 5, 7, 9, 11}, vector<int>{1, 3, 5, 7, 9}, 5)\n * 5\n */\nint findExtra(vector<int> arr1, vector<int> arr2, int n) {\nint low = 0, high = n - 1;\n    int ans = n; // Initialize with n, in case the extra element is at the end\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        // If elements at mid are equal, the extra element must be on the right\n        if (arr1[mid] == arr2[mid]) {\n            low = mid + 1;\n        }\n        // If elements at mid are different, mid could be the extra element's index\n        // or the extra element is to the left\n        else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;", "entry_point": "findExtra", "result": "passed", "passed": true}
{"task_id": "MBCPP/891", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two numbers have same number of digits or not.\n * > sameLength(12, 1)\n * false\n * > sameLength(2, 2)\n * true\n * > sameLength(10, 20)\n * true\n */\nbool sameLength(int a, int b) {\nstring s_a = to_string(a);\n    string s_b = to_string(b);\n    return s_a.length() == s_b.length();", "entry_point": "sameLength", "result": "passed", "passed": true}
{"task_id": "MBCPP/892", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove multiple spaces in a string.\n * > removeSpaces(string(\"python  program\"))\n * string(\"python program\")\n * > removeSpaces(string(\"python   programming    language\"))\n * string(\"python programming language\")\n * > removeSpaces(string(\"python                     program\"))\n * string(\"python program\")\n */\nstring removeSpaces(string text) {\nstring result = \"\";\n    bool space_seen = false;\n    for (char c : text) {\n        if (c == ' ') {\n            if (!space_seen) {\n                result += c;\n                space_seen = true;\n            }\n        } else {\n            result += c;\n            space_seen = false;\n        }\n    }\n    return result;", "entry_point": "removeSpaces", "result": "passed", "passed": true}
{"task_id": "MBCPP/894", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given string of float type into tuple.\n * > floatToTuple(string(\"1.2, 1.3, 2.3, 2.4, 6.5\"))\n * {1.2, 1.3, 2.3, 2.4, 6.5}\n * > floatToTuple(string(\"2.3, 2.4, 5.6, 5.4, 8.9\"))\n * {2.3, 2.4, 5.6, 5.4, 8.9}\n * > floatToTuple(string(\"0.3, 0.5, 7.8, 9.4\"))\n * {0.3, 0.5, 7.8, 9.4}\n */\nvector<double> floatToTuple(string testStr) {\nvector<double> result;\nstringstream ss(testStr);\nstring segment;\nwhile(getline(ss, segment, ',')) {\nresult.push_back(stod(segment));\n}\nreturn result;", "entry_point": "floatToTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/895", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n * > maxSumSubseq(vector<int>{1, 2, 9, 4, 5, 0, 4, 11, 6})\n * 26\n * > maxSumSubseq(vector<int>{1, 2, 9, 5, 6, 0, 5, 12, 7})\n * 28\n * > maxSumSubseq(vector<int>{1, 3, 10, 5, 6, 0, 6, 14, 21})\n * 44\n */\nint maxSumSubseq(vector<int> a) {\nint n = a.size();\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return a[0];\n    }\n\n    // dp[i] will store the maximum sum of a subsequence\n    // with no adjacent elements up to index i.\n    vector<int> dp(n);\n\n    // Base cases\n    dp[0] = a[0];\n    dp[1] = max(a[0], a[1]);\n\n    // Fill dp[] for remaining elements\n    for (int i = 2; i < n; ++i) {\n        // Option 1: Include current element a[i]\n        // In this case, we cannot include a[i-1], so we add a[i] to dp[i-2]\n        int pick = a[i] + dp[i-2];\n\n        // Option 2: Exclude current element a[i]\n        // In this case, the maximum sum is the same as dp[i-1]\n        int nonPick = dp[i-1];\n\n        dp[i] = max(pick, nonPick);\n    }\n\n    return dp[n-1];", "entry_point": "maxSumSubseq", "result": "passed", "passed": true}
{"task_id": "MBCPP/896", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n * > sortListLast(vector<vector<int>>{{2, 5}, {1, 2}, {4, 4}, {2, 3}, {2, 1}})\n * {{2, 1}, {1, 2}, {2, 3}, {4, 4}, {2, 5}}\n * > sortListLast(vector<vector<int>>{{9, 8}, {4, 7}, {3, 5}, {7, 9}, {1, 2}})\n * {{1, 2}, {3, 5}, {4, 7}, {9, 8}, {7, 9}}\n * > sortListLast(vector<vector<int>>{{20, 50}, {10, 20}, {40, 40}})\n * {{10, 20}, {40, 40}, {20, 50}}\n */\nvector<vector<int>> sortListLast(vector<vector<int>> tuples) {\nsort(tuples.begin(), tuples.end(), [](const vector<int>& a, const vector<int>& b) {\nreturn a.back() < b.back();\n});\nreturn tuples;", "entry_point": "sortListLast", "result": "passed", "passed": true}
{"task_id": "MBCPP/897", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the word is present in a given sentence or not.\n * > isWordPresent(string(\"machine learning\"), string(\"machine\"))\n * true\n * > isWordPresent(string(\"easy\"), string(\"fun\"))\n * false\n * > isWordPresent(string(\"python language\"), string(\"code\"))\n * false\n */\nbool isWordPresent(string sentence, string word) {\nstringstream ss(sentence);\n    string token;\n    while (ss >> token) {\n        if (token == word) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "isWordPresent", "result": "passed", "passed": true}
{"task_id": "MBCPP/898", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n * > extractElements(vector<int>{1, 1, 3, 4, 4, 5, 6, 7}, 2)\n * {1, 4}\n * > extractElements(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7}, 4)\n * {4}\n * > extractElements(vector<int>{0, 0, 0, 0, 0}, 5)\n * {0}\n */\nvector<int> extractElements(vector<int> numbers, int n) {\nvector<int> result;\nif (numbers.empty() || n <= 0) {\nreturn result;\n}\n\n\nif (n == 1) {\n    for (int num : numbers) {\n        result.push_back(num);\n    }\n    return result;\n}\n\nint count = 1;\nfor (int i = 1; i < numbers.size(); ++i) {\n    if (numbers[i] == numbers[i-1]) {\n        count++;\n    } else {\n        count = 1;\n    }\n\n    if (count == n) {\n        result.push_back(numbers[i]);\n        count = 0; // Reset count to avoid overlapping sequences for the same number\n                   // e.g., if n=2 and numbers = {0,0,0}, we want {0} not {0,0}\n    }\n}\nreturn result;", "entry_point": "extractElements", "result": "passed", "passed": true}
{"task_id": "MBCPP/899", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array can be sorted or not by picking only the corner elements.\n * > check(vector<int>{3, 2, 1, 2, 3, 4}, 6)\n * true\n * > check(vector<int>{2, 1, 4, 5, 1}, 5)\n * true\n * > check(vector<int>{1, 2, 2, 1, 2, 3}, 6)\n * true\n */\nbool check(vector<int> arr, int n) {\nvector<int> sorted_arr = arr;\nsort(sorted_arr.begin(), sorted_arr.end());\n\nint left = 0;\nint right = n - 1;\nint k = 0; // Pointer for the sorted array\n\nwhile (left <= right) {\nif (arr[left] == sorted_arr[k]) {\nleft++;\nk++;\n} else if (arr[right] == sorted_arr[k]) {\nright--;\nk++;\n} else {\nreturn false; // Neither corner matches the next expected sorted element\n}\n}\nreturn true;", "entry_point": "check", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/900", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function where a string will start with a specific number.\n * > matchNum(string(\"5-2345861\"))\n * true\n * > matchNum(string(\"6-2345861\"))\n * false\n * > matchNum(string(\"78910\"))\n * false\n */\nbool matchNum(string str) {\nreturn str.at(0) == '5';", "entry_point": "matchNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/901", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest multiple of the first n numbers.\n * > smallestMultiple(13)\n * 360360\n * > smallestMultiple(2)\n * 2\n * > smallestMultiple(1)\n * 1\n */\nint smallestMultiple(int n) {\nlong long gcd(long long a, long long b) {\n    while (b) {\n        a %= b;\n        swap(a, b);\n    }\n    return a;\n}\n\nlong long lcm(long long a, long long b) {\n    if (a == 0 || b == 0) return 0;\n    return abs(a * b) / gcd(a, b);\n}\n\n    long long ans = 1;\n    for (int i = 1; i <= n; ++i) {\n        ans = lcm(ans, i);\n    }\n    return ans;", "entry_point": "smallestMultiple", "result": "Compilation failed: /tmp/tmp5m_gzmuu/temp.cpp: In function \u2018int smallestMultiple(int)\u2019:\n/tmp/tmp5m_gzmuu/temp.cpp:16:41: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long gcd(long long a, long long b) {\n      |                                         ^\n/tmp/tmp5m_gzmuu/temp.cpp:24:41: error: a function-definition is not allowed here before \u2018{\u2019 token\n   24 | long long lcm(long long a, long long b) {\n      |                                         ^\n/tmp/tmp5m_gzmuu/temp.cpp:31:15: error: \u2018lcm\u2019 was not declared in this scope\n   31 |         ans = lcm(ans, i);\n      |               ^~~\n", "passed": false}
{"task_id": "MBCPP/902", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to combine two dictionaries by adding values for common keys.\n * > addDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}, {string(\"c\"), 300}}, unordered_map<string, int>{{string(\"a\"), 300}, {string(\"b\"), 200}, {string(\"d\"), 400}})\n * {{string(\"b\"), 400}, {string(\"d\"), 400}, {string(\"a\"), 400}, {string(\"c\"), 300}}\n * > addDict(unordered_map<string, int>{{string(\"a\"), 500}, {string(\"b\"), 700}, {string(\"c\"), 900}}, unordered_map<string, int>{{string(\"a\"), 500}, {string(\"b\"), 600}, {string(\"d\"), 900}})\n * {{string(\"b\"), 1300}, {string(\"d\"), 900}, {string(\"a\"), 1000}, {string(\"c\"), 900}}\n * > addDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}})\n * {{string(\"b\"), 1800}, {string(\"d\"), 1800}, {string(\"a\"), 1800}}\n */\nunordered_map<string, int> addDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\nunordered_map<string, int> result = d1;\n    for (auto const& [key, val] : d2) {\n        if (result.count(key)) {\n            result[key] += val;\n        } else {\n            result[key] = val;\n        }\n    }\n    return result;", "entry_point": "addDict", "result": "passed", "passed": true}
{"task_id": "MBCPP/903", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the total unset bits from 1 to n.\n * > countUnsetBits(2)\n * 1\n * > countUnsetBits(5)\n * 4\n * > countUnsetBits(14)\n * 17\n */\nint countUnsetBits(int n) {\nint totalUnsetBits = 0;\n    for (int i = 1; i <= n; ++i) {\n        int temp = i;\n        while (temp > 0) {\n            if ((temp & 1) == 0) { // Check if the least significant bit is 0 (unset)\n                totalUnsetBits++;\n            }\n            temp >>= 1; // Right shift to check the next bit\n        }\n    }\n    return totalUnsetBits;", "entry_point": "countUnsetBits", "result": "passed", "passed": true}
{"task_id": "MBCPP/905", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of binomial co-efficients.\n * > sumOfSquare(4)\n * 70\n * > sumOfSquare(5)\n * 252\n * > sumOfSquare(2)\n * 6\n */\nint sumOfSquare(int n) {\nlong long nCr(int n, int r) {\n    if (r < 0 || r > n) return 0;\n    if (r == 0 || r == n) return 1;\n    if (r > n / 2) r = n - r; // Take advantage of symmetry nCr = nC(n-r)\n\n    long long res = 1;\n    for (int i = 1; i <= r; ++i) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n\nint sumOfSquare(int n) {\n    // The sum of squares of binomial coefficients is given by the identity:\n    // sum_{k=0 to n} (nCk)^2 = (2nCn)\n    return nCr(2 * n, n);", "entry_point": "sumOfSquare", "result": "Compilation failed: /tmp/tmpqocoiky3/temp.cpp: In function \u2018int sumOfSquare(int)\u2019:\n/tmp/tmpqocoiky3/temp.cpp:16:29: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long nCr(int n, int r) {\n      |                             ^\n/tmp/tmpqocoiky3/temp.cpp:28:24: error: a function-definition is not allowed here before \u2018{\u2019 token\n   28 | int sumOfSquare(int n) {\n      |                        ^\n/tmp/tmpqocoiky3/temp.cpp:34:1: error: a template declaration cannot appear at block scope\n   34 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpqocoiky3/temp.cpp:55:1: error: expected \u2018}\u2019 at end of input\n   55 | }\n      | ^\n/tmp/tmpqocoiky3/temp.cpp:15:24: note: to match this \u2018{\u2019\n   15 | int sumOfSquare(int n) {\n      |                        ^\n/tmp/tmpqocoiky3/temp.cpp:55:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   55 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/906", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract year, month and date from a url by using regex.\n * > extractDate(string(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"))\n * {{string(\"2016\"), string(\"09\"), string(\"02\")}}\n * > extractDate(string(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"))\n * {{string(\"2020\"), string(\"11\"), string(\"03\")}}\n * > extractDate(string(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"))\n * {{string(\"2020\"), string(\"12\"), string(\"29\")}}\n */\nvector<vector<string>> extractDate(string url) {\nvector<vector<string>> result;\n// Regex to find patterns like /YYYY/MM/DD/ in the URL\n// (d{4}) captures the year (4 digits)\n// (d{2}) captures the month (2 digits)\n// (d{2}) captures the day (2 digits)\nregex date_regex(\"/(20d{2})/(d{2})/(d{2})/\");\nsmatch matches;\n\n\nif (regex_search(url, matches, date_regex)) {\n    // matches[0] is the whole matched string (e.g., \"/2016/09/02/\")\n    // matches[1] is the first capture group (year)\n    // matches[2] is the second capture group (month)\n    // matches[3] is the third capture group (day)\n    result.push_back({matches[1].str(), matches[2].str(), matches[3].str()});\n}\n\nreturn result;", "entry_point": "extractDate", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/907", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the first n lucky numbers.\n * > luckyNum(10)\n * {1, 3, 7, 9, 13, 15, 21, 25, 31, 33}\n * > luckyNum(5)\n * {1, 3, 7, 9, 13}\n * > luckyNum(8)\n * {1, 3, 7, 9, 13, 15, 21, 25}\n */\nvector<int> luckyNum(int n) {\nif (n == 0) {\n        return {};\n    }\n\n    std::vector<int> numbers;\n    for (int i = 1; i <= 35000; i += 2) { // Generate a sufficiently large list of odd numbers\n        numbers.push_back(i);\n    }\n\n    int current_lucky_index = 1; // Start with 3 (index 1 in 0-indexed vector of odd numbers)\n    while (current_lucky_index < numbers.size()) {\n        int remove_step = numbers[current_lucky_index];\n        if (remove_step > numbers.size()) { // Optimization: if the step is larger than remaining numbers, no more removals.\n            break;\n        }\n\n        std::vector<int> next_numbers;\n        for (int i = 0; i < numbers.size(); ++i) {\n            if ((i + 1) % remove_step != 0) {\n                next_numbers.push_back(numbers[i]);\n            }\n        }\n        numbers = next_numbers;\n\n        // Find the next lucky number's position in the new 'numbers' list\n        // This is crucial: the \"remove_step\" is based on the *value* of the lucky number,\n        // and the count is based on the *position* in the *remaining* list.\n        // We've already processed numbers up to `current_lucky_index`\n        // so the next lucky number will be at `current_lucky_index` in the new list.\n        current_lucky_index++;\n    }\n\n    if (n > numbers.size()) {\n        n = numbers.size(); // Return all generated lucky numbers if n is too large\n    }\n\n    std::vector<int> result(numbers.begin(), numbers.begin() + n);\n    return result;", "entry_point": "luckyNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/908", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the fixed point in the given array.\n * > findFixedPoint(vector<int>{-10, -1, 0, 3, 10, 11, 30, 50, 100}, 9)\n * 3\n * > findFixedPoint(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, 8)\n * -1\n * > findFixedPoint(vector<int>{0, 2, 5, 8, 17}, 5)\n * 0\n */\nint findFixedPoint(vector<int> arr, int n) {\nint low = 0;\n    int high = n - 1;\n\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == mid) {\n            return mid;\n        } else if (arr[mid] < mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;", "entry_point": "findFixedPoint", "result": "passed", "passed": true}
{"task_id": "MBCPP/909", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the previous palindrome of a specified number.\n * > previousPalindrome(99)\n * 88\n * > previousPalindrome(1221)\n * 1111\n * > previousPalindrome(120)\n * 111\n */\nint previousPalindrome(int num) {\nbool isPalindrome(int n) {\n    string s = to_string(n);\n    int len = s.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (s[i] != s[len - i - 1])\n            return false;\n    }\n    return true;\n}\n\nint previousPalindrome(int num) {\n    num--;\n    while (num > 0) {\n        if (isPalindrome(num)) {\n            return num;\n        }\n        num--;\n    }\n    return -1; // Or throw an exception if no previous palindrome is found", "entry_point": "previousPalindrome", "result": "Compilation failed: /tmp/tmpjdgmh9u7/temp.cpp: In function \u2018int previousPalindrome(int)\u2019:\n/tmp/tmpjdgmh9u7/temp.cpp:16:26: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | bool isPalindrome(int n) {\n      |                          ^\n/tmp/tmpjdgmh9u7/temp.cpp:26:33: error: a function-definition is not allowed here before \u2018{\u2019 token\n   26 | int previousPalindrome(int num) {\n      |                                 ^\n/tmp/tmpjdgmh9u7/temp.cpp:37:1: error: a template declaration cannot appear at block scope\n   37 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpjdgmh9u7/temp.cpp:58:1: error: expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpjdgmh9u7/temp.cpp:15:33: note: to match this \u2018{\u2019\n   15 | int previousPalindrome(int num) {\n      |                                 ^\n/tmp/tmpjdgmh9u7/temp.cpp:58:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   58 | }\n      | ^\n", "passed": false}
{"task_id": "MBCPP/911", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n * > maximumProduct(vector<int>{12, 74, 9, 50, 61, 41})\n * 225700\n * > maximumProduct(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * 414375\n * > maximumProduct(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1})\n * 2520\n */\nint maximumProduct(vector<int> nums) {\n// The maximum product can either be the product of the three largest numbers,\n    // or the product of the two smallest (most negative) numbers and the largest number.\n\n    // Min-heap to store the two smallest numbers\n    // In C++, priority_queue is a max-heap by default.\n    // To make it a min-heap, we use std::greater<int>.\n    priority_queue<int, vector<int>, greater<int>> min_heap;\n    // Max-heap to store the three largest numbers\n    priority_queue<int> max_heap;\n\n    for (int num : nums) {\n        // Keep track of the two smallest numbers\n        min_heap.push(num);\n        if (min_heap.size() > 2) {\n            min_heap.pop();\n        }\n\n        // Keep track of the three largest numbers\n        max_heap.push(num);\n        if (max_heap.size() > 3) {\n            max_heap.pop();\n        }\n    }\n\n    long long product1 = 1;\n    vector<int> largest_three;\n    while (!max_heap.empty()) {\n        largest_three.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    // product of the three largest numbers\n    product1 = (long long)largest_three[0] * largest_three[1] * largest_three[2];\n\n    long long product2 = 1;\n    vector<int> smallest_two;\n    while (!min_heap.empty()) {\n        smallest_two.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    // product of the two smallest numbers and the largest number\n    // The largest number is largest_three[0] as it was the largest among the top three.\n    product2 = (long long)smallest_two[0] * smallest_two[1] * largest_three[0];\n\n    return max(product1, product2);", "entry_point": "maximumProduct", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/912", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find ln, m lobb number.\n * > lobbNum(5, 3)\n * 35\n * > lobbNum(3, 2)\n * 5\n * > lobbNum(4, 2)\n * 20\n */\nint lobbNum(int n, int m) {\nlong long binomialCoeff(int n, int k) {\n    long long C[n + 1][k + 1];\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0 || j == i)\n                C[i][j] = 1;\n            else\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j];\n        }\n    }\n    return C[n][k];\n}\n\n    return ((2 * m + 1) * binomialCoeff(2 * n, m + n)) / (m + n + 1);", "entry_point": "lobbNum", "result": "Compilation failed: /tmp/tmp5cugh3lr/temp.cpp: In function \u2018int lobbNum(int, int)\u2019:\n/tmp/tmp5cugh3lr/temp.cpp:16:39: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long binomialCoeff(int n, int k) {\n      |                                       ^\n/tmp/tmp5cugh3lr/temp.cpp:29:27: error: \u2018binomialCoeff\u2019 was not declared in this scope\n   29 |     return ((2 * m + 1) * binomialCoeff(2 * n, m + n)) / (m + n + 1);\n      |                           ^~~~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/913", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for a number at the end of a string.\n * > endNum(string(\"abcdef\"))\n * false\n * > endNum(string(\"abcdef7\"))\n * true\n * > endNum(string(\"abc\"))\n * false\n */\nbool endNum(string str) {\nif (str.empty()) {\n        return false;\n    }\n    return isdigit(str.back());", "entry_point": "endNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/914", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is made up of two alternating characters or not.\n * > isTwoAlter(string(\"abab\"))\n * true\n * > isTwoAlter(string(\"aaaa\"))\n * false\n * > isTwoAlter(string(\"xyz\"))\n * false\n */\nbool isTwoAlter(string s) {\nif (s.length() < 2) {\n        return false;\n    }\n    char char1 = s[0];\n    char char2 = '0';\n    for (int i = 1; i < s.length(); ++i) {\n        if (s[i] != char1) {\n            if (char2 == '0') {\n                char2 = s[i];\n            } else if (s[i] != char2) {\n                return false;\n            }\n        }\n    }\n    if (char2 == '0') { // All characters are the same\n        return false;\n    }\n    for (int i = 0; i < s.length(); ++i) {\n        if (i % 2 == 0) {\n            if (s[i] != char1) {\n                return false;\n            }\n        } else {\n            if (s[i] != char2) {\n                return false;\n            }\n        }\n    }\n    return true;", "entry_point": "isTwoAlter", "result": "passed", "passed": true}
{"task_id": "MBCPP/915", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n * > rearrangeNumbs(vector<int>{-1, 2, -3, 5, 7, 8, 9, -10})\n * {2, 5, 7, 8, 9, -10, -3, -1}\n * > rearrangeNumbs(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * {10, 12, 13, 14, 15, -20, -18}\n * > rearrangeNumbs(vector<int>{-20, 20, -10, 10, -30, 30})\n * {10, 20, 30, -30, -20, -10}\n */\nvector<int> rearrangeNumbs(vector<int> arrayNums) {\nsort(arrayNums.begin(), arrayNums.end(), [](int a, int b) {\n        return a > 0 && b < 0;\n    });\n    return arrayNums;", "entry_point": "rearrangeNumbs", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/916", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n * > findTripletArray(vector<int>{1, 4, 45, 6, 10, 8}, 6, 22)\n * {4, 10, 8}\n * > findTripletArray(vector<int>{12, 3, 5, 2, 6, 9}, 6, 24)\n * {12, 3, 9}\n * > findTripletArray(vector<int>{1, 2, 3, 4, 5}, 5, 9)\n * {1, 3, 5}\n */\nvector<int> findTripletArray(vector<int> a, int arrSize, int sum) {\nsort(a.begin(), a.end());\n    for (int i = 0; i < arrSize - 2; i++) {\n        int left = i + 1;\n        int right = arrSize - 1;\n        while (left < right) {\n            int currentSum = a[i] + a[left] + a[right];\n            if (currentSum == sum) {\n                return {a[i], a[left], a[right]};\n            } else if (currentSum < sum) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return {}; // No triplet found", "entry_point": "findTripletArray", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/917", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sequences of one upper case letter followed by lower case letters.\n * > textUppercaseLowercase(string(\"AaBbGg\"))\n * string(\"Found a match!\")\n * > textUppercaseLowercase(string(\"aA\"))\n * string(\"Not matched!\")\n * > textUppercaseLowercase(string(\"PYTHON\"))\n * string(\"Not matched!\")\n */\nstring textUppercaseLowercase(string text) {\nregex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textUppercaseLowercase", "result": "Compilation failed: /tmp/tmpiboyc0w2/temp.cpp: In function \u2018std::string textUppercaseLowercase(std::string)\u2019:\n/tmp/tmpiboyc0w2/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpiboyc0w2/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmpiboyc0w2/temp.cpp:15:44: note: to match this \u2018{\u2019\n   15 | string textUppercaseLowercase(string text) {\n      |                                            ^\n", "passed": false}
{"task_id": "MBCPP/918", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count coin change.\n * > coinChange(vector<int>{1, 2, 3}, 3, 4)\n * 4\n * > coinChange(vector<int>{4, 5, 6, 7, 8, 9}, 6, 9)\n * 2\n * > coinChange(vector<int>{4, 5, 6, 7, 8, 9}, 6, 4)\n * 1\n */\nint coinChange(vector<int> s, int m, int n) {\n// Create a DP table to store results of subproblems\n    // dp[i] will be storing the number of solutions for\n    // value i. We need n+1 rows and m columns<long long> dp(n + 1, 0);\n\n\n// Base case: If the target sum is 0, there is one way\n// to make change (by using no coins).\ndp[0] = 1;\n\n// Iterate through all coins\nfor (int i = 0; i < m; i++) {\n    // For each coin, update the dp table for all amounts\n    // from the coin's value up to the target amount.\n    for (int j = s[i]; j <= n; j++) {\n        dp[j] += dp[j - s[i]];\n    }\n}\n\nreturn dp[n];", "entry_point": "coinChange", "result": "Compilation failed: /tmp/tmpuoi3ox6_/temp.cpp: In function \u2018int coinChange(std::vector<int>, int, int)\u2019:\n/tmp/tmpuoi3ox6_/temp.cpp:23:1: error: \u2018dp\u2019 was not declared in this scope\n   23 | dp[0] = 1;\n      | ^~\n", "passed": false}
{"task_id": "MBCPP/919", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to multiply all items in the list.\n * > multiplyList(vector<int>{1, -2, 3})\n * -6\n * > multiplyList(vector<int>{1, 2, 3, 4})\n * 24\n * > multiplyList(vector<int>{3, 1, 2, 3})\n * 18\n */\nint multiplyList(vector<int> items) {\nint product = 1;\n    for (int item : items) {\n        product *= item;\n    }\n    return product;", "entry_point": "multiplyList", "result": "passed", "passed": true}
{"task_id": "MBCPP/921", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform chunking of tuples each of size n.\n * > chunkTuples(vector<int>{10, 4, 5, 6, 7, 6, 8, 3, 4}, 3)\n * {{10, 4, 5}, {6, 7, 6}, {8, 3, 4}}\n * > chunkTuples(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2)\n * {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9}}\n * > chunkTuples(vector<int>{11, 14, 16, 17, 19, 21, 22, 25}, 4)\n * {{11, 14, 16, 17}, {19, 21, 22, 25}}\n */\nvector<vector<int>> chunkTuples(vector<int> testTup, int n) {\nvector<vector<int>> result;\nfor (int i = 0; i < testTup.size(); i += n) {\nvector<int> chunk;\nfor (int j = 0; j < n && (i + j) < testTup.size(); ++j) {\nchunk.push_back(testTup[i + j]);\n}\nresult.push_back(chunk);\n}\nreturn result;", "entry_point": "chunkTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/922", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find a pair with the highest product from a given array of integers.\n * > maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4})\n * {7, 8}\n * > maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6})\n * {-4, -6}\n * > maxProduct(vector<int>{1, 3, 5, 6, 8, 9})\n * {8, 9}\n */\nvector<int> maxProduct(vector<int> arr) {\nif (arr.size() < 2) {\n        return {};\n    }\n    int n = arr.size();\n    int max1 = INT_MIN, max2 = INT_MIN;\n    int min1 = INT_MAX, min2 = INT_MAX;\n\n    for (int num : arr) {\n        if (num > max1) {\n            max2 = max1;\n            max1 = num;\n        } else if (num > max2) {\n            max2 = num;\n        }\n\n        if (num < min1) {\n            min2 = min1;\n            min1 = num;\n        } else if (num < min2) {\n            min2 = num;\n        }\n    }\n\n    if ((long long)max1 * max2 > (long long)min1 * min2) {\n        return {max2, max1};\n    } else {\n        return {min1, min2};\n    }", "entry_point": "maxProduct", "result": "Compilation failed: /tmp/tmpcbhu3_wy/temp.cpp: In function \u2018std::vector<int> maxProduct(std::vector<int>)\u2019:\n/tmp/tmpcbhu3_wy/temp.cpp:45:1: error: a template declaration cannot appear at block scope\n   45 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpcbhu3_wy/temp.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpcbhu3_wy/temp.cpp:15:41: note: to match this \u2018{\u2019\n   15 | vector<int> maxProduct(vector<int> arr) {\n      |                                         ^\n", "passed": false}
{"task_id": "MBCPP/923", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n * > superSeq(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7)\n * 9\n * > superSeq(string(\"feek\"), string(\"eke\"), 4, 3)\n * 5\n * > superSeq(string(\"PARRT\"), string(\"RTA\"), 5, 3)\n * 6\n */\nint superSeq(string x, string y, int m, int n) {\nint dp[m + 1][n + 1];\n\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0) {\n                dp[i][j] = j;\n            } else if (j == 0) {\n                dp[i][j] = i;\n            } else if (x[i - 1] == y[j - 1]) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];", "entry_point": "superSeq", "result": "passed", "passed": true}
{"task_id": "MBCPP/924", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum of two numbers.\n * > maxOfTwo(10, 20)\n * 20\n * > maxOfTwo(19, 15)\n * 19\n * > maxOfTwo(-10, -20)\n * -10\n */\nint maxOfTwo(int x, int y) {\nreturn (x > y) ? x : y;", "entry_point": "maxOfTwo", "result": "passed", "passed": true}
{"task_id": "MBCPP/925", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the product of all the numbers of a given tuple.\n * > mutipleTuple(vector<int>{4, 3, 2, 2, -1, 18})\n * -864\n * > mutipleTuple(vector<int>{1, 2, 3})\n * 6\n * > mutipleTuple(vector<int>{-2, -4, -6})\n * -48\n */\nint mutipleTuple(vector<int> nums) {\nint product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;", "entry_point": "mutipleTuple", "result": "passed", "passed": true}
{"task_id": "MBCPP/926", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n-th rencontres number.\n * > rencontresNumber(7, 2)\n * 924\n * > rencontresNumber(3, 0)\n * 2\n * > rencontresNumber(3, 1)\n * 3\n */\nint rencontresNumber(int n, int m) {\nlong long nCr(int n, int r) {\n    if (r < 0 || r > n) return 0;\n    if (r == 0 || r == n) return 1;\n    if (r > n / 2) r = n - r; // Optimization\n    \n    long long res = 1;\n    for (int i = 1; i <= r; ++i) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n\nlong long derangement(int n) {\n    if (n == 0) return 1;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n\n    // Use dynamic programming for derangements (D_n = (n-1) * (D_{n-1} + D_{n-2}))\n    vector<long long> dp(n + 1);\n    dp[0] = 1;\n    dp[1] = 0;\n    dp[2] = 1;\n    for (int i = 3; i <= n; ++i) {\n        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]);\n    }\n    return dp[n];\n}\n\n    // Rencontres number D(n, m) = C(n, m) * D(n-m, 0)\n    // where D(k, 0) is the k-th derangement number\n    return nCr(n, m) * derangement(n - m);", "entry_point": "rencontresNumber", "result": "Compilation failed: /tmp/tmp9dnihza2/temp.cpp: In function \u2018int rencontresNumber(int, int)\u2019:\n/tmp/tmp9dnihza2/temp.cpp:16:29: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | long long nCr(int n, int r) {\n      |                             ^\n/tmp/tmp9dnihza2/temp.cpp:28:30: error: a function-definition is not allowed here before \u2018{\u2019 token\n   28 | long long derangement(int n) {\n      |                              ^\n/tmp/tmp9dnihza2/temp.cpp:46:12: error: \u2018nCr\u2019 was not declared in this scope\n   46 |     return nCr(n, m) * derangement(n - m);\n      |            ^~~\n/tmp/tmp9dnihza2/temp.cpp:46:24: error: \u2018derangement\u2019 was not declared in this scope\n   46 |     return nCr(n, m) * derangement(n - m);\n      |                        ^~~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/928", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of\u6717\u666e-mm-dd format to dd-mm-yyyy format.\n * > changeDateFormat(string(\"2026-01-02\"))\n * string(\"02-01-2026\")\n * > changeDateFormat(string(\"2021-01-04\"))\n * string(\"04-01-2021\")\n * > changeDateFormat(string(\"2030-06-06\"))\n * string(\"06-06-2030\")\n */\nstring changeDateFormat(string dt) {\nstring year = dt.substr(0, 4);\n    string month = dt.substr(5, 2);\n    string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;", "entry_point": "changeDateFormat", "result": "passed", "passed": true}
{"task_id": "MBCPP/929", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count repeated items of a tuple.\n * > countTuplex(vector<int>{2, 4, 5, 6, 2, 3, 4, 4, 7}, 4)\n * 3\n * > countTuplex(vector<int>{2, 4, 5, 6, 2, 3, 4, 4, 7}, 2)\n * 2\n * > countTuplex(vector<int>{2, 4, 7, 7, 7, 3, 4, 4, 7}, 7)\n * 4\n */\nint countTuplex(vector<int> tuplex, int value) {\nint count = 0;\n    for (int item : tuplex) {\n        if (item == value) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "countTuplex", "result": "passed", "passed": true}
{"task_id": "MBCPP/930", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n * > textMatch(string(\"msb\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"a0c\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"abbc\"))\n * string(\"Found a match!\")\n */\nstring textMatch(string text) {\nregex pattern(\"ab*\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }", "entry_point": "textMatch", "result": "Compilation failed: /tmp/tmp5ikgogcz/temp.cpp: In function \u2018std::string textMatch(std::string)\u2019:\n/tmp/tmp5ikgogcz/temp.cpp:23:1: error: a template declaration cannot appear at block scope\n   23 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmp5ikgogcz/temp.cpp:44:1: error: expected \u2018}\u2019 at end of input\n   44 | }\n      | ^\n/tmp/tmp5ikgogcz/temp.cpp:15:31: note: to match this \u2018{\u2019\n   15 | string textMatch(string text) {\n      |                               ^\n", "passed": false}
{"task_id": "MBCPP/931", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n * > sumSeries(7)\n * 784\n * > sumSeries(5)\n * 225\n * > sumSeries(15)\n * 14400\n */\nint sumSeries(int number) {\nlong long sum = (long long)number * (number + 1) / 2;\n    return sum * sum;", "entry_point": "sumSeries", "result": "passed", "passed": true}
{"task_id": "MBCPP/932", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove duplicate words from a given list of strings.\n * > removeDuplicList(vector<string>{string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Exercises\")})\n * {string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\")}\n * > removeDuplicList(vector<string>{string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Exercises\"), string(\"Java\")})\n * {string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Java\")}\n * > removeDuplicList(vector<string>{string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Exercises\"), string(\"C++\"), string(\"C\"), string(\"C++\")})\n * {string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"C++\"), string(\"C\")}\n */\nvector<string> removeDuplicList(vector<string> l) {\nstd::vector<std::string> result;\nstd::unordered_set<std::string> seen_words;\n\n\nfor (const std::string& word : l) {\n    if (seen_words.find(word) == seen_words.end()) {\n        result.push_back(word);\n        seen_words.insert(word);\n    }\n}\nreturn result;", "entry_point": "removeDuplicList", "result": "passed", "passed": true}
{"task_id": "MBCPP/933", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert camel case string to snake case string by using regex.\n * > camelToSnake(string(\"GoogleAssistant\"))\n * string(\"google_assistant\")\n * > camelToSnake(string(\"ChromeCast\"))\n * string(\"chrome_cast\")\n * > camelToSnake(string(\"QuadCore\"))\n * string(\"quad_core\")\n */\nstring camelToSnake(string text) {\nstd::string result = \"\";\n    if (text.empty()) {\n        return result;\n    }\n\n    result += tolower(text[0]);\n\n    for (size_t i = 1; i < text.length(); ++i) {\n        if (isupper(text[i])) {\n            result += '_';\n            result += tolower(text[i]);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;", "entry_point": "camelToSnake", "result": "passed", "passed": true}
{"task_id": "MBCPP/934", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth delannoy number.\n * > dealnnoyNum(3, 4)\n * 129\n * > dealnnoyNum(3, 3)\n * 63\n * > dealnnoyNum(4, 5)\n * 681\n */\nint dealnnoyNum(int n, int m) {\nint dp[n + 1][m + 1];\n\n    // Base cases\n    for (int i = 0; i <= n; i++) {\n        dp[i][0] = 1;\n    }\n    for (int j = 0; j <= m; j++) {\n        dp[0][j] = 1;\n    }\n\n    // Fill the DP table\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1];\n        }\n    }\n    return dp[n][m];", "entry_point": "dealnnoyNum", "result": "passed", "passed": true}
{"task_id": "MBCPP/935", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n * > seriesSum(6)\n * 91\n * > seriesSum(7)\n * 140\n * > seriesSum(12)\n * 650\n */\nint seriesSum(int number) {\nreturn number * (number + 1) * (2 * number + 1) / 6;", "entry_point": "seriesSum", "result": "passed", "passed": true}
{"task_id": "MBCPP/936", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given tuples based on the given ordered list.\n * > reArrangeTuples(vector<vector<int>>{{4, 3}, {1, 9}, {2, 10}, {3, 2}}, vector<int>{1, 4, 2, 3})\n * {{1, 9}, {4, 3}, {2, 10}, {3, 2}}\n * > reArrangeTuples(vector<vector<int>>{{5, 4}, {2, 10}, {3, 11}, {4, 3}}, vector<int>{3, 4, 2, 3})\n * {{3, 11}, {4, 3}, {2, 10}, {3, 11}}\n * > reArrangeTuples(vector<vector<int>>{{6, 3}, {3, 8}, {5, 7}, {2, 4}}, vector<int>{2, 5, 3, 6})\n * {{2, 4}, {5, 7}, {3, 8}, {6, 3}}\n */\nvector<vector<int>> reArrangeTuples(vector<vector<int>> testList, vector<int> ordList) {\nvector<vector<int>> result;\nfor (int order_val : ordList) {\nfor (const auto& tuple : testList) {\nif (tuple[0] == order_val) {\nresult.push_back(tuple);\nbreak;\n}\n}\n}\nreturn result;", "entry_point": "reArrangeTuples", "result": "passed", "passed": true}
{"task_id": "MBCPP/937", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the most common character in a given string.\n * > maxChar(string(\"hello world\"))\n * string(\"l\")\n * > maxChar(string(\"hello \"))\n * string(\"l\")\n * > maxChar(string(\"python pr\"))\n * string(\"p\")\n */\nstring maxChar(string str1) {\nint count[256] = {0};\n    int max = 0;\n    char result = ' ';\n    for (int i = 0; i < str1.length(); i++) {\n        count[str1[i]]++;\n        if (max < count[str1[i]]) {\n            max = count[str1[i]];\n            result = str1[i];\n        }\n    }\n    return string(1, result);", "entry_point": "maxChar", "result": "passed", "passed": true}
{"task_id": "MBCPP/938", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find three closest elements from three sorted arrays.\n * > findCloset(vector<int>{1, 4, 10}, vector<int>{2, 15, 20}, vector<int>{10, 12}, 3, 3, 2)\n * {10, 15, 10}\n * > findCloset(vector<int>{20, 24, 100}, vector<int>{2, 19, 22, 79, 800}, vector<int>{10, 12, 23, 24, 119}, 3, 5, 5)\n * {24, 22, 23}\n * > findCloset(vector<int>{2, 5, 11}, vector<int>{3, 16, 21}, vector<int>{11, 13}, 3, 3, 2)\n * {11, 16, 11}\n */\nvector<int> findCloset(vector<int> a, vector<int> b, vector<int> c, int p, int q, int r) {\nint i = 0, j = 0, k = 0;\n    int diff = INT_MAX;\n    int res_i = 0, res_j = 0, res_k = 0;\n    while (i < p && j < q && k < r) {\n        int maximum = max({a[i], b[j], c[k]});\n        int minimum = min({a[i], b[j], c[k]});\n        if (maximum - minimum < diff) {\n            diff = maximum - minimum;\n            res_i = a[i];\n            res_j = b[j];\n            res_k = c[k];\n        }\n        if (diff == 0)\n            break;\n        if (a[i] == minimum)\n            i++;\n        else if (b[j] == minimum)\n            j++;\n        else\n            k++;\n    }\n    return {res_i, res_j, res_k};", "entry_point": "findCloset", "result": "passed", "passed": true}
{"task_id": "MBCPP/940", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using heap sort.\n * > heapSort(vector<int>{12, 2, 4, 5, 2, 3})\n * {2, 2, 3, 4, 5, 12}\n * > heapSort(vector<int>{32, 14, 5, 6, 7, 19})\n * {5, 6, 7, 14, 19, 32}\n * > heapSort(vector<int>{21, 15, 29, 78, 65})\n * {15, 21, 29, 65, 78}\n */\nvector<int> heapSort(vector<int> arr) {\nvoid heapify(vector<intt>& arr, int n, int i) {\nint largest = i;\nint left = 2 * i + 1;\nint right = 2 * i + 2;\n\n\nif (left < n && arr[left] > arr[largest])\n    largest = left;\n\nif (right < n && arr[right] > arr[largest])\n    largest = right;\n\nif (largest != i) {\n    swap(arr[i], arr[largest]);\n    heapify(arr, n, largest);\n}\n\n\n}\n\n\nint n = arr.size();\n\n// Build max heap\nfor (int i = n / 2 - 1; i >= 0; i--) {\n    heapify(arr, n, i);\n}\n\n// One by one extract an element from heap\nfor (int i = n - 1; i > 0; i--) {\n    // Move current root to end\n    swap(arr[0], arr[i]);\n\n    // Call max heapify on the reduced heap\n    heapify(arr, i, 0);\n}\nreturn arr;", "entry_point": "heapSort", "result": "Compilation failed: /tmp/tmpevqb0d4e/temp.cpp: In function \u2018std::vector<int> heapSort(std::vector<int>)\u2019:\n/tmp/tmpevqb0d4e/temp.cpp:16:21: error: \u2018intt\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n   16 | void heapify(vector<intt>& arr, int n, int i) {\n      |                     ^~~~\n      |                     int\n/tmp/tmpevqb0d4e/temp.cpp:16:25: error: template argument 1 is invalid\n   16 | void heapify(vector<intt>& arr, int n, int i) {\n      |                         ^\n/tmp/tmpevqb0d4e/temp.cpp:16:25: error: template argument 2 is invalid\n/tmp/tmpevqb0d4e/temp.cpp:16:47: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | void heapify(vector<intt>& arr, int n, int i) {\n      |                                               ^\n/tmp/tmpevqb0d4e/temp.cpp:41:5: error: \u2018heapify\u2019 was not declared in this scope\n   41 |     heapify(arr, n, i);\n      |     ^~~~~~~\n/tmp/tmpevqb0d4e/temp.cpp:50:5: error: \u2018heapify\u2019 was not declared in this scope\n   50 |     heapify(arr, i, 0);\n      |     ^~~~~~~\n", "passed": false}
{"task_id": "MBCPP/942", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if any list element is present in the given list.\n * > checkElement(vector<int>{4, 5, 7, 9, 3}, vector<int>{6, 7, 10, 11})\n * true\n * > checkElement(vector<int>{1, 2, 3, 4}, vector<int>{4, 6, 7, 8, 9})\n * true\n * > checkElement(vector<int>{3, 2, 1, 4, 5}, vector<int>{9, 8, 7, 6})\n * false\n */\nbool checkElement(vector<int> testTup, vector<int> checkList) {\nfor (int i = 0; i < testTup.size(); i++) {\n        for (int j = 0; j < checkList.size(); j++) {\n            if (testTup[i] == checkList[j]) {\n                return true;\n            }\n        }\n    }\n    return false;", "entry_point": "checkElement", "result": "passed", "passed": true}
{"task_id": "MBCPP/943", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to combine two given sorted lists using heapq module.\n * > combineLists(vector<int>{1, 3, 5, 7, 9, 11}, vector<int>{0, 2, 4, 6, 8, 10})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}\n * > combineLists(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11})\n * {1, 2, 3, 5, 5, 6, 7, 8, 9, 11}\n * > combineLists(vector<int>{1, 3, 7}, vector<int>{2, 4, 6})\n * {1, 2, 3, 4, 6, 7}\n */\nvector<int> combineLists(vector<int> num1, vector<int> num2) {\npriority_queue<intnt, vector<int>, greater<int>> pq;\nfor (int num : num1) {\npq.push(num);\n}\nfor (int num : num2) {\npq.push(num);\n}\nvector<int> result;\nwhile (!pq.empty()) {\nresult.push_back(pq.top());\npq.pop();\n}\nreturn result;", "entry_point": "combineLists", "result": "Compilation failed: /tmp/tmp51rfykb3/temp.cpp: In function \u2018std::vector<int> combineLists(std::vector<int>, std::vector<int>)\u2019:\n/tmp/tmp51rfykb3/temp.cpp:16:16: error: \u2018intnt\u2019 was not declared in this scope; did you mean \u2018wint_t\u2019?\n   16 | priority_queue<intnt, vector<int>, greater<int>> pq;\n      |                ^~~~~\n      |                wint_t\n/tmp/tmp51rfykb3/temp.cpp:16:47: error: template argument 1 is invalid\n   16 | priority_queue<intnt, vector<int>, greater<int>> pq;\n      |                                               ^~\n/tmp/tmp51rfykb3/temp.cpp:18:4: error: request for member \u2018push\u2019 in \u2018pq\u2019, which is of non-class type \u2018int\u2019\n   18 | pq.push(num);\n      |    ^~~~\n/tmp/tmp51rfykb3/temp.cpp:21:4: error: request for member \u2018push\u2019 in \u2018pq\u2019, which is of non-class type \u2018int\u2019\n   21 | pq.push(num);\n      |    ^~~~\n/tmp/tmp51rfykb3/temp.cpp:24:12: error: request for member \u2018empty\u2019 in \u2018pq\u2019, which is of non-class type \u2018int\u2019\n   24 | while (!pq.empty()) {\n      |            ^~~~~\n/tmp/tmp51rfykb3/temp.cpp:25:21: error: request for member \u2018top\u2019 in \u2018pq\u2019, which is of non-class type \u2018int\u2019\n   25 | result.push_back(pq.top());\n      |                     ^~~\n/tmp/tmp51rfykb3/temp.cpp:26:4: error: request for member \u2018pop\u2019 in \u2018pq\u2019, which is of non-class type \u2018int\u2019\n   26 | pq.pop();\n      |    ^~~\n", "passed": false}
{"task_id": "MBCPP/944", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to separate and print the numbers and their position of a given string.\n * > numPosition(string(\"there are 70 flats in this apartment\"))\n * 10\n * > numPosition(string(\"every adult have 32 teeth\"))\n * 17\n * > numPosition(string(\"isha has 79 chocolates in her bag\"))\n * 9\n */\nint numPosition(string text) {\nint count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (isdigit(text[i])) {\n            cout << text[i] << \" \" << i << endl;\n            count++;\n        }\n    }\n    return count;", "entry_point": "numPosition", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/945", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuples into set.\n * > tupleToSet(vector<string>{string(\"x\"), string(\"y\"), string(\"z\")})\n * {string(\"y\"), string(\"z\"), string(\"x\")}\n * > tupleToSet(vector<string>{string(\"a\"), string(\"b\"), string(\"c\")})\n * {string(\"b\"), string(\"c\"), string(\"a\")}\n * > tupleToSet(vector<string>{string(\"z\"), string(\"d\"), string(\"e\")})\n * {string(\"e\"), string(\"d\"), string(\"z\")}\n */\nunordered_set<string> tupleToSet(vector<string> t) {\nunordered_set<string> s(t.begin(), t.end());\nreturn s;", "entry_point": "tupleToSet", "result": "passed", "passed": true}
{"task_id": "MBCPP/947", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the shortest word.\n * > lenLog(vector<string>{string(\"win\"), string(\"lose\"), string(\"great\")})\n * 3\n * > lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")})\n * 1\n * > lenLog(vector<string>{string(\"12\"), string(\"12\"), string(\"1234\")})\n * 2\n */\nint lenLog(vector<string> list1) {\nif (list1.empty()) {\n        return 0; \n    }\n\n    int minLength = list1[0].length(); \n\n    for (size_t i = 1; i < list1.size(); ++i) {\n        if (list1[i].length() < minLength) {\n            minLength = list1[i].length();\n        }\n    }\n    return minLength;", "entry_point": "lenLog", "result": "passed", "passed": true}
{"task_id": "MBCPP/949", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given tuple list basis the total digits in tuple.\n * > sortList(vector<vector<int>>{{3, 4, 6, 723}, {1, 2}, {12345}, {134, 234, 34}})\n * string(\"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\")\n * > sortList(vector<vector<int>>{{3, 4, 8}, {1, 2}, {1234335}, {1345, 234, 334}})\n * string(\"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\")\n * > sortList(vector<vector<int>>{{34, 4, 61, 723}, {1, 2}, {145}, {134, 23}})\n * string(\"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\")\n */\nstring sortList(vector<vector<int>> testList) {\nauto countDigits = [](int n) {\n        if (n == 0) return 1;\n        int count = 0;\n        if (n < 0) n = -n; // Handle negative numbers\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    };\n\n    sort(testList.begin(), testList.end(), [&](const vector<int>& a, const vector<int>& b) {\n        int totalDigitsA = 0;\n        for (int x : a) {\n            totalDigitsA += countDigits(x);\n        }\n        int totalDigitsB = 0;\n        for (int x : b) {\n            totalDigitsB += countDigits(x);\n        }\n        return totalDigitsA < totalDigitsB;\n    });\n\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            result += to_string(testList[i][j]);\n            if (j < testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (testList[i].size() == 1) { // Add comma for single-element tuples for given format\n             result += \",\";\n        }\n        if (i < testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;", "entry_point": "sortList", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/950", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to display sign of the chinese zodiac for given year.\n * > chineseZodiac(1997)\n * string(\"Ox\")\n * > chineseZodiac(1998)\n * string(\"Tiger\")\n * > chineseZodiac(1994)\n * string(\"Dog\")\n */\nstring chineseZodiac(int year) {\nint remainder = year % 12;\n    if (remainder == 0) {\n        return \"Monkey\";\n    } else if (remainder == 1) {\n        return \"Rooster\";\n    } else if (remainder == 2) {\n        return \"Dog\";\n    } else if (remainder == 3) {\n        return \"Pig\";\n    } else if (remainder == 4) {\n        return \"Rat\";\n    } else if (remainder == 5) {\n        return \"Ox\";\n    } else if (remainder == 6) {\n        return \"Tiger\";\n    } else if (remainder == 7) {\n        return \"Rabbit\";\n    } else if (remainder == 8) {\n        return \"Dragon\";\n    } else if (remainder == 9) {\n        return \"Snake\";\n    } else if (remainder == 10) {\n        return \"Horse\";\n    } else {\n        return \"Goat\";\n    }", "entry_point": "chineseZodiac", "result": "Compilation failed: /tmp/tmpd6_g0nz5/temp.cpp: In function \u2018std::string chineseZodiac(int)\u2019:\n/tmp/tmpd6_g0nz5/temp.cpp:43:1: error: a template declaration cannot appear at block scope\n   43 | template <typename T> bool compare(T a, T b){\n      | ^~~~~~~~\n/tmp/tmpd6_g0nz5/temp.cpp:64:1: error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpd6_g0nz5/temp.cpp:15:32: note: to match this \u2018{\u2019\n   15 | string chineseZodiac(int year) {\n      |                                ^\n", "passed": false}
{"task_id": "MBCPP/951", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum of similar indices in two lists of tuples.\n * > maxSimilarIndices(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}}, vector<vector<int>>{{5, 4}, {8, 10}, {8, 14}})\n * {{5, 4}, {8, 10}, {8, 14}}\n * > maxSimilarIndices(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}}, vector<vector<int>>{{6, 5}, {9, 11}, {9, 15}})\n * {{6, 5}, {9, 11}, {9, 15}}\n * > maxSimilarIndices(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}}, vector<vector<int>>{{7, 6}, {10, 12}, {10, 16}})\n * {{7, 6}, {10, 12}, {10, 16}}\n */\nvector<vector<int>> maxSimilarIndices(vector<vector<int>> testList1, vector<vector<int>> testList2) {\nvector<vector<int>> result;\nfor (size_t i = 0; i < testList1.size(); ++i) {\nvector<int> current_max_tuple;\ncurrent_max_tuple.push_back(max(testList1[i][0], testList2[i][0]));\ncurrent_max_tuple.push_back(max(testList1[i][1], testList2[i][1]));\nresult.push_back(current_max_tuple);\n}\nreturn result;", "entry_point": "maxSimilarIndices", "result": "passed", "passed": true}
{"task_id": "MBCPP/952", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr mod p.\n * > ncrModP(10, 2, 13)\n * 6\n * > ncrModP(11, 3, 14)\n * 11\n * > ncrModP(18, 14, 19)\n * 1\n */\nint ncrModP(int n, int r, int p) {\nint power(int base, int exp, int mod) {\n    long long res = 1;\n    base %= mod;\n    while (exp > 0) {\n        if (exp % 2 == 1) res = (res * base) % mod;\n        base = (1LL * base * base) % mod;\n        exp /= 2;\n    }\n    return res;\n}\n\nint modInverse(int n, int mod) {\n    return power(n, mod - 2, mod);\n}\n\n    if (r < 0 || r > n) return 0;\n    if (r == 0 || r == n) return 1;\n    if (r > n / 2) r = n - r; // Optimization: C(n, k) = C(n, n-k)\n\n    // fac[i] stores factorial of i % p\n    vector<long long> fac(n + 1);\n    fac[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        fac[i] = (fac[i - 1] * i) % p;\n    }\n\n    // nCr = n! / (r! * (n-r)!)\n    // nCr % p = (n! % p * (r!)^(-1) % p * ((n-r)!)^(-1) % p) % p\n    long long numerator = fac[n];\n    long long denominator = (fac[r] * fac[n - r]) % p;\n    \n    return (numerator * modInverse(denominator, p)) % p;", "entry_point": "ncrModP", "result": "Compilation failed: /tmp/tmpa1os3ea7/temp.cpp: In function \u2018int ncrModP(int, int, int)\u2019:\n/tmp/tmpa1os3ea7/temp.cpp:16:39: error: a function-definition is not allowed here before \u2018{\u2019 token\n   16 | int power(int base, int exp, int mod) {\n      |                                       ^\n/tmp/tmpa1os3ea7/temp.cpp:27:32: error: a function-definition is not allowed here before \u2018{\u2019 token\n   27 | int modInverse(int n, int mod) {\n      |                                ^\n/tmp/tmpa1os3ea7/temp.cpp:47:25: error: \u2018modInverse\u2019 was not declared in this scope\n   47 |     return (numerator * modInverse(denominator, p)) % p;\n      |                         ^~~~~~~~~~\n", "passed": false}
{"task_id": "MBCPP/953", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimun number of subsets with distinct elements.\n * > subset(vector<int>{1, 2, 3, 4}, 4)\n * 1\n * > subset(vector<int>{5, 6, 9, 3, 4, 3, 4}, 7)\n * 2\n * > subset(vector<int>{1, 2, 3}, 3)\n * 1\n */\nint subset(vector<int> ar, int n) {\nmap<int, int> freq;\n    for (int i = 0; i < n; i++)\n        freq[ar[i]]++;\n    int res = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++)\n        res = max(res, it->second);\n    return res;", "entry_point": "subset", "result": "passed", "passed": true}
{"task_id": "MBCPP/955", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out, if the given number is abundant.\n * > isAbundant(12)\n * true\n * > isAbundant(13)\n * false\n * > isAbundant(9)\n * false\n */\nbool isAbundant(int n) {\nint sumDivisors = 1; // Start with 1, as every number is divisible by 1\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n            sumDivisors += i;\n            if (i * i != n) {\n                sumDivisors += n / i;\n            }\n        }\n    }\n    return sumDivisors > n;", "entry_point": "isAbundant", "result": "passed", "passed": true}
{"task_id": "MBCPP/956", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string at uppercase letters by using regex.\n * > splitList(string(\"LearnToBuildAnythingWithGoogle\"))\n * {string(\"Learn\"), string(\"To\"), string(\"Build\"), string(\"Anything\"), string(\"With\"), string(\"Google\")}\n * > splitList(string(\"ApmlifyingTheBlack+DeveloperCommunity\"))\n * {string(\"Apmlifying\"), string(\"The\"), string(\"Black+\"), string(\"Developer\"), string(\"Community\")}\n * > splitList(string(\"UpdateInTheGoEcoSystem\"))\n * {string(\"Update\"), string(\"In\"), string(\"The\"), string(\"Go\"), string(\"Eco\"), string(\"System\")}\n */\nvector<string> splitList(string text) {\nstd::vector<std::string> result;\nstd::regex re(\"(?=[A-Z])\"); // Regex to match positions just before an uppercase letter\nstd::sregex_token_iterator it(text.begin(), text.end(), re, -1);\nstd::sregex_token_iterator end;\n\n\nwhile (it != end) {\n    std::string token = *it++;\n    if (!token.empty()) {\n        result.push_back(token);\n    }\n}\nreturn result;", "entry_point": "splitList", "result": "passed", "passed": true}
{"task_id": "MBCPP/957", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the position of rightmost set bit.\n * > getFirstSetBitPos(12)\n * 3\n * > getFirstSetBitPos(18)\n * 2\n * > getFirstSetBitPos(16)\n * 5\n */\nint getFirstSetBitPos(int n) {\nif (n == 0)\n        return 0;\n    return log2(n & -n) + 1;", "entry_point": "getFirstSetBitPos", "result": "passed", "passed": true}
{"task_id": "MBCPP/958", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert an integer into a roman numeral.\n * > intToRoman(1)\n * string(\"I\")\n * > intToRoman(50)\n * string(\"L\")\n * > intToRoman(4)\n * string(\"IV\")\n */\nstring intToRoman(int num) {\nstd::string result = \"\";\n    std::vector<std::pair<int, std::string>> romanMap = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"}, {100, \"C\"},\n        {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"}, {10, \"X\"}, {9, \"IX\"},\n        {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n\n    for (const auto& pair : romanMap) {\n        while (num >= pair.first) {\n            result += pair.second;\n            num -= pair.first;\n        }\n    }\n    return result;", "entry_point": "intToRoman", "result": "passed", "passed": true}
{"task_id": "MBCPP/960", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve tiling problem.\n * > getNoofways(4)\n * 3\n * > getNoofways(3)\n * 2\n * > getNoofways(5)\n * 5\n */\nint getNoofways(int n) {\nif (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    return getNoofways(n - 1) + getNoofways(n - 2);", "entry_point": "getNoofways", "result": "Program failed: terminate called after throwing an instance of 'std::runtime_error'\n  what():  Exception -- test case 0 did not pass.\n", "passed": false}
{"task_id": "MBCPP/961", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a roman numeral to an integer.\n * > romanToInt(string(\"MMMCMLXXXVI\"))\n * 3986\n * > romanToInt(string(\"MMMM\"))\n * 4000\n * > romanToInt(string(\"C\"))\n * 100\n */\nint romanToInt(string s) {\nunordered_map<char, int> romanMap = {\n        {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50},\n        {'C', 100}, {'D', 500}, {'M', 1000}\n    };\n\n    int result = 0;\n    int n = s.length();\n\n    for (int i = 0; i < n; ++i) {\n        if (i + 1 < n && romanMap[s[i]] < romanMap[s[i+1]]) {\n            result -= romanMap[s[i]];\n        } else {\n            result += romanMap[s[i]];\n        }\n    }\n    return result;", "entry_point": "romanToInt", "result": "passed", "passed": true}
{"task_id": "MBCPP/962", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of all even natural numbers within the range l and r.\n * > sumEven(2, 5)\n * 6\n * > sumEven(3, 8)\n * 18\n * > sumEven(4, 6)\n * 10\n */\nint sumEven(int l, int r) {\nint sum = 0;\n    for (int i = l; i <= r; ++i) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;", "entry_point": "sumEven", "result": "passed", "passed": true}
{"task_id": "MBCPP/964", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is even or not.\n * > wordLen(string(\"program\"))\n * false\n * > wordLen(string(\"solution\"))\n * true\n * > wordLen(string(\"data\"))\n * true\n */\nbool wordLen(string s) {\nreturn s.length() % 2 == 0;", "entry_point": "wordLen", "result": "passed", "passed": true}
{"task_id": "MBCPP/965", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert camel case string to snake case string.\n * > camelToSnake(string(\"PythonProgram\"))\n * string(\"python_program\")\n * > camelToSnake(string(\"pythonLanguage\"))\n * string(\"python_language\")\n * > camelToSnake(string(\"ProgrammingLanguage\"))\n * string(\"programming_language\")\n */\nstring camelToSnake(string text) {\nstring res = \"\";\n    for (char c : text) {\n        if (isupper(c)) {\n            if (!res.empty()) {\n                res += \"_\";\n            }\n            res += tolower(c);\n        } else {\n            res += c;\n        }\n    }\n    return res;", "entry_point": "camelToSnake", "result": "passed", "passed": true}
{"task_id": "MBCPP/967", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to accept the strings which contains all vowels.\n * > check(string(\"SEEquoiaL\"))\n * string(\"accepted\")\n * > check(string(\"program\"))\n * string(\"not accepted\")\n * > check(string(\"fine\"))\n * string(\"not accepted\")\n */\nstring check(string str) {\nstd::transform(str.begin(), str.end(), str.begin(), ::tolower);\n    bool a = false, e = false, i = false, o = false, u = false;\n    for (char c : str) {\n        if (c == 'a')\n            a = true;\n        else if (c == 'e')\n            e = true;\n        else if (c == 'i')\n            i = true;\n        else if (c == 'o')\n            o = true;\n        else if (c == 'u')\n            u = true;\n    }\n    if (a && e && i && o && u)\n        return \"accepted\";\n    else\n        return \"not accepted\";", "entry_point": "check", "result": "passed", "passed": true}
{"task_id": "MBCPP/968", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find maximum possible value for the given periodic function.\n * > floorMax(11, 10, 9)\n * 9\n * > floorMax(5, 7, 4)\n * 2\n * > floorMax(2, 2, 1)\n * 1\n */\nint floorMax(int a, int b, int n) {\nint x = min(b - 1, n);\n    return (a * x) / b;", "entry_point": "floorMax", "result": "passed", "passed": true}
{"task_id": "MBCPP/969", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to join the tuples if they have similar initial elements.\n * > joinTuples(vector<vector<int>>{{5, 6}, {5, 7}, {6, 8}, {6, 10}, {7, 13}})\n * {{5, 6, 7}, {6, 8, 10}, {7, 13}}\n * > joinTuples(vector<vector<int>>{{6, 7}, {6, 8}, {7, 9}, {7, 11}, {8, 14}})\n * {{6, 7, 8}, {7, 9, 11}, {8, 14}}\n * > joinTuples(vector<vector<int>>{{7, 8}, {7, 9}, {8, 10}, {8, 12}, {9, 15}})\n * {{7, 8, 9}, {8, 10, 12}, {9, 15}}\n */\nvector<vector<int>> joinTuples(vector<vector<int>> testList) {\nmap<int, vector<intnt>> grouped_tuples;\nfor (const auto& vec : testList) {\nif (!vec.empty()) {\nint initial_element = vec[0];\nfor (size_t i = 1; i < vec.size(); ++i) {\ngrouped_tuples[initial_element].push_back(vec[i]);\n}\n}\n}\n\n\nvector<vector<int>> result;\nfor (const auto& pair : grouped_tuples) {\n    vector<int> joined_tuple;\n    joined_tuple.push_back(pair.first);\n    for (int val : pair.second) {\n        joined_tuple.push_back(val);\n    }\n    result.push_back(joined_tuple);\n}\nreturn result;", "entry_point": "joinTuples", "result": "Compilation failed: /tmp/tmp9j2a7vc2/temp.cpp: In function \u2018std::vector<std::vector<int> > joinTuples(std::vector<std::vector<int> >)\u2019:\n/tmp/tmp9j2a7vc2/temp.cpp:16:17: error: \u2018intnt\u2019 was not declared in this scope; did you mean \u2018wint_t\u2019?\n   16 | map<int, vector<intnt>> grouped_tuples;\n      |                 ^~~~~\n      |                 wint_t\n/tmp/tmp9j2a7vc2/temp.cpp:16:17: error: template argument 1 is invalid\n/tmp/tmp9j2a7vc2/temp.cpp:16:17: error: template argument 2 is invalid\n/tmp/tmp9j2a7vc2/temp.cpp:16:22: error: template argument 2 is invalid\n   16 | map<int, vector<intnt>> grouped_tuples;\n      |                      ^~\n/tmp/tmp9j2a7vc2/temp.cpp:16:22: error: template argument 4 is invalid\n/tmp/tmp9j2a7vc2/temp.cpp:21:31: error: invalid types \u2018int[int]\u2019 for array subscript\n   21 | grouped_tuples[initial_element].push_back(vec[i]);\n      |                               ^\n/tmp/tmp9j2a7vc2/temp.cpp:28:25: error: \u2018begin\u2019 was not declared in this scope; did you mean \u2018std::begin\u2019?\n   28 | for (const auto& pair : grouped_tuples) {\n      |                         ^~~~~~~~~~~~~~\n      |                         std::begin\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from /tmp/tmp9j2a7vc2/temp.cpp:1:\n/usr/include/c++/9/valarray:1224:5: note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>& __va)\n      |     ^~~~~\n/tmp/tmp9j2a7vc2/temp.cpp:28:25: error: \u2018end\u2019 was not declared in this scope; did you mean \u2018std::end\u2019?\n   28 | for (const auto& pair : grouped_tuples) {\n      |                         ^~~~~~~~~~~~~~\n      |                         std::end\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from /tmp/tmp9j2a7vc2/temp.cpp:1:\n/usr/include/c++/9/valarray:1244:5: note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>& __va)\n      |     ^~~\n", "passed": false}
{"task_id": "MBCPP/970", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of two numbers.\n * > minOfTwo(10, 20)\n * 10\n * > minOfTwo(19, 15)\n * 15\n * > minOfTwo(-10, -20)\n * -20\n */\nint minOfTwo(int x, int y) {\nif (x < y)\n        return x;\n    else\n        return y;", "entry_point": "minOfTwo", "result": "passed", "passed": true}
{"task_id": "MBCPP/971", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n * > maximumSegments(7, 5, 2, 5)\n * 2\n * > maximumSegments(17, 2, 1, 3)\n * 17\n * > maximumSegments(18, 16, 3, 6)\n * 6\n */\nint maximumSegments(int n, int a, int b, int c) {\nint dp[n + 1];\n    memset(dp, -1, sizeof(dp));\n    dp[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i - a >= 0 && dp[i - a] != -1)\n            dp[i] = max(dp[i], dp[i - a] + 1);\n        if (i - b >= 0 && dp[i - b] != -1)\n            dp[i] = max(dp[i], dp[i - b] + 1);\n        if (i - c >= 0 && dp[i - c] != -1)\n            dp[i] = max(dp[i], dp[i - c] + 1);\n    }\n    return dp[n];", "entry_point": "maximumSegments", "result": "passed", "passed": true}
{"task_id": "MBCPP/972", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate the given two tuples to a nested tuple.\n * > concatenateNested(vector<int>{3, 4}, vector<int>{5, 6})\n * {3, 4, 5, 6}\n * > concatenateNested(vector<int>{1, 2}, vector<int>{3, 4})\n * {1, 2, 3, 4}\n * > concatenateNested(vector<int>{4, 5}, vector<int>{6, 8})\n * {4, 5, 6, 8}\n */\nvector<int> concatenateNested(vector<int> testTup1, vector<int> testTup2) {\nvector<int> result = testTup1;\nresult.insert(result.end(), testTup2.begin(), testTup2.end());\nreturn result;", "entry_point": "concatenateNested", "result": "passed", "passed": true}
{"task_id": "MBCPP/973", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to left rotate the string.\n * > leftRotate(string(\"python\"), 2)\n * string(\"thonpy\")\n * > leftRotate(string(\"bigdata\"), 3)\n * string(\"databig\")\n * > leftRotate(string(\"hadoop\"), 1)\n * string(\"adooph\")\n */\nstring leftRotate(string s, int d) {\nint n = s.length();\n    d = d % n; // Handle cases where d is greater than string length\n    return s.substr(d) + s.substr(0, d);", "entry_point": "leftRotate", "result": "passed", "passed": true}
{"task_id": "MBCPP/974", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum total path sum in the given triangle.\n * > minSumPath(vector<vector<int>>{{2}, {3, 9}, {1, 6, 7}})\n * 6\n * > minSumPath(vector<vector<int>>{{2}, {3, 7}, {8, 5, 6}})\n * 10\n * > minSumPath(vector<vector<int>>{{3}, {6, 4}, {5, 2, 7}})\n * 9\n */\nint minSumPath(vector<vector<int>> a) {\nint n = a.size();\n    if (n == 0) return 0;\n\n    // Start from the second to last row and move upwards\n    for (int i = n - 2; i >= 0; --i) {\n        // Iterate through each element in the current row\n        for (int j = 0; j < a[i].size(); ++j) {\n            // Update the current element with the sum of itself and the minimum\n            // of its two adjacent elements in the row below\n            a[i][j] += min(a[i + 1][j], a[i + 1][j + 1]);\n        }\n    }\n\n    // The minimum total path sum will be at the top of the triangle\n    return a[0][0];", "entry_point": "minSumPath", "result": "passed", "passed": true}
