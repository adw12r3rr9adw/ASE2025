{"task_id": "MBCPP/1", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n * > minCost(vector<vector<int>>{{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}, 2, 2)\n * 8\n * > minCost(vector<vector<int>>{{2, 3, 4}, {5, 9, 3}, {2, 6, 4}}, 2, 2)\n * 12\n * > minCost(vector<vector<int>>{{3, 4, 5}, {6, 10, 4}, {3, 7, 5}}, 2, 2)\n * 16\n */\nint minCost(vector<vector<int>> cost, int m, int n) {\n    int dp[m+1][n+1];\n    dp[0][0] = cost[0][0];\n    \n    for (int i = 1; i <= m; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    \n    for (int j = 1; j <= n; j++)\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + cost[i][j];\n        }\n    }\n    \n    return dp[m][n];\n}", "entry_point": "minCost"}
{"task_id": "MBCPP/2", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the similar elements from the given two tuple lists.\n * > similarElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {4, 5}\n * > similarElements(vector<int>{1, 2, 3, 4}, vector<int>{5, 4, 3, 7})\n * {3, 4}\n * > similarElements(vector<int>{11, 12, 14, 13}, vector<int>{17, 15, 14, 13})\n * {13, 14}\n */\nvector<int> similarElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    sort(testTup1.begin(), testTup1.end());\n    sort(testTup2.begin(), testTup2.end());\n    set_intersection(testTup1.begin(), testTup1.end(), testTup2.begin(), testTup2.end(), back_inserter(result));\n    return result;\n}", "entry_point": "similarElements"}
{"task_id": "MBCPP/3", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to identify non-prime numbers.\n * > isNotPrime(2)\n * false\n * > isNotPrime(10)\n * true\n * > isNotPrime(35)\n * true\n */\nbool isNotPrime(int n) {\n    if (n <= 1)\n        return true;\n    if (n <= 3)\n        return false;\n    if (n % 2 == 0 || n % 3 == 0)\n        return true;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return true;\n    }\n    return false;\n}", "entry_point": "isNotPrime"}
{"task_id": "MBCPP/4", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3)\n * {85, 75, 65}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2)\n * {85, 75}\n * > heapQueueLargest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {85, 75, 65, 58, 35}\n */\nvector<int> heapQueueLargest(vector<int> nums, int n) {\n    priority_queue<int> pq(nums.begin(), nums.end());\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n}", "entry_point": "heapQueueLargest"}
{"task_id": "MBCPP/5", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n * > countWays(2)\n * 3\n * > countWays(8)\n * 153\n * > countWays(12)\n * 2131\n */\nint countWays(int n) {\n    if (n % 2 != 0)\n        return 0;\n    \n    int dp[n + 1];\n    dp[0] = 1;\n    dp[1] = 0;\n    dp[2] = 3;\n    \n    for (int i = 4; i <= n; i += 2) {\n        dp[i] = 4 * dp[i - 2] - dp[i - 4];\n    }\n    \n    return dp[n];\n}", "entry_point": "countWays"}
{"task_id": "MBCPP/6", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two numbers differ at one bit position only or not.\n * > differAtOneBitPos(13, 9)\n * true\n * > differAtOneBitPos(15, 8)\n * false\n * > differAtOneBitPos(2, 4)\n * false\n */\nbool differAtOneBitPos(int a, int b) {\n    int xorResult = a ^ b;\n    if (xorResult == 0)\n        return false;\n    return (xorResult & (xorResult - 1)) == 0;\n}", "entry_point": "differAtOneBitPos"}
{"task_id": "MBCPP/7", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\n * > findCharLong(string(\"Please move back to stream\"))\n * {string(\"Please\"), string(\"move\"), string(\"back\"), string(\"stream\")}\n * > findCharLong(string(\"Jing Eco and Tech\"))\n * {string(\"Jing\"), string(\"Tech\")}\n * > findCharLong(string(\"Jhingai wulu road Zone 3\"))\n * {string(\"Jhingai\"), string(\"wulu\"), string(\"road\"), string(\"Zone\")}\n */\nvector<string> findCharLong(string text) {\n    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{4,}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "entry_point": "findCharLong"}
{"task_id": "MBCPP/8", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find squares of individual elements in a list using lambda function.\n * > squareNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n * > squareNums(vector<int>{10, 20, 30})\n * {100, 400, 900}\n * > squareNums(vector<int>{12, 15})\n * {144, 225}\n */\nvector<int> squareNums(vector<int> nums) {\n    transform(nums.begin(), nums.end(), nums.begin(), [](int x) { return x * x; });\n    return nums;\n}", "entry_point": "squareNums"}
{"task_id": "MBCPP/9", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of rotations required to get the same string.\n * > findRotations(string(\"aaaa\"))\n * 1\n * > findRotations(string(\"ab\"))\n * 2\n * > findRotations(string(\"abc\"))\n * 3\n */\nint findRotations(string str) {\n    string temp = str + str;\n    int n = str.length();\n    for (int i = 1; i <= n; i++) {\n        if (str == temp.substr(i, n))\n            return i;\n    }\n    return n;\n}", "entry_point": "findRotations"}
{"task_id": "MBCPP/10", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n smallest items from a dataset.\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {10, 20}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {10, 20, 20, 40, 50}\n * > smallNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {10, 20, 20}\n */\nvector<int> smallNnum(vector<int> list1, int n) {\n    sort(list1.begin(), list1.end());\n    vector<int> result(list1.begin(), list1.begin() + min(n, (int)list1.size()));\n    return result;\n}", "entry_point": "smallNnum"}
{"task_id": "MBCPP/11", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove first and last occurrence of a given character from the string.\n * > removeOcc(string(\"hello\"), string(\"l\"))\n * string(\"heo\")\n * > removeOcc(string(\"abcda\"), string(\"a\"))\n * string(\"bcd\")\n * > removeOcc(string(\"PHP\"), string(\"P\"))\n * string(\"H\")\n */\nstring removeOcc(string s, string ch) {\n    size_t first = s.find(ch);\n    if (first != string::npos) {\n        s.erase(first, ch.length());\n    }\n    size_t last = s.rfind(ch);\n    if (last != string::npos) {\n        s.erase(last, ch.length());\n    }\n    return s;\n}", "entry_point": "removeOcc"}
{"task_id": "MBCPP/12", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}})\n * {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\n * > sortMatrix(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}})\n * {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}\n * > sortMatrix(vector<vector<int>>{{5, 8, 9}, {6, 4, 3}, {2, 1, 4}})\n * {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}\n */\nvector<vector<int>> sortMatrix(vector<vector<int>> m) {\n    auto rowSum = [](const vector<int>& row) {\n        return accumulate(row.begin(), row.end(), 0);\n    };\n\n    sort(m.begin(), m.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return rowSum(a) < rowSum(b);\n    });\n\n    return m;\n}", "entry_point": "sortMatrix"}
{"task_id": "MBCPP/14", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the volume of a triangular prism.\n * > findVolume(10, 8, 6)\n * 240\n * > findVolume(3, 2, 2)\n * 6\n * > findVolume(1, 2, 1)\n * 1\n */\nint findVolume(int l, int b, int h) {\n    return (b * h * l) / 2;\n}", "entry_point": "findVolume"}
{"task_id": "MBCPP/15", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at lowercase letters.\n * > splitLowerstring(string(\"AbCd\"))\n * {string(\"bC\"), string(\"d\")}\n * > splitLowerstring(string(\"Python\"))\n * {string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > splitLowerstring(string(\"Programming\"))\n * {string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\"), string(\"m\"), string(\"i\"), string(\"n\"), string(\"g\")}\n */\nvector<string> splitLowerstring(string text) {\n    vector<string> result;\n    string current;\n    for (char ch : text) {\n        if (islower(ch)) {\n            if (!current.empty()) {\n                result.push_back(current);\n                current.clear();\n            }\n            current += ch;\n        } else {\n            current += ch;\n        }\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "entry_point": "splitLowerstring"}
{"task_id": "MBCPP/16", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore.\n * > textLowercaseUnderscore(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textLowercaseUnderscore(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textLowercaseUnderscore(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textLowercaseUnderscore(string text) {\n    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textLowercaseUnderscore"}
{"task_id": "MBCPP/17", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a square.\n * > squarePerimeter(10)\n * 40\n * > squarePerimeter(5)\n * 20\n * > squarePerimeter(4)\n * 16\n */\nint squarePerimeter(int a) {\n    return 4 * a;\n}", "entry_point": "squarePerimeter"}
{"task_id": "MBCPP/18", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove characters from the first string which are present in the second string.\n * > removeDirtyChars(string(\"probasscurve\"), string(\"pros\"))\n * string(\"bacuve\")\n * > removeDirtyChars(string(\"digitalindia\"), string(\"talent\"))\n * string(\"digiidi\")\n * > removeDirtyChars(string(\"exoticmiles\"), string(\"toxic\"))\n * string(\"emles\")\n */\nstring removeDirtyChars(string str, string secondString) {\n    unordered_set<char> charsToRemove;\n    for (char c : secondString) {\n        charsToRemove.insert(c);\n    }\n    \n    string result;\n    for (char c : str) {\n        if (charsToRemove.find(c) == charsToRemove.end()) {\n            result += c;\n        }\n    }\n    \n    return result;\n}", "entry_point": "removeDirtyChars"}
{"task_id": "MBCPP/19", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether a given array of integers contains any duplicate element.\n * > testDuplicate(vector<int>{1, 2, 3, 4, 5})\n * false\n * > testDuplicate(vector<int>{1, 2, 3, 4, 4})\n * true\n * > testDuplicate(vector<int>{1, 1, 2, 2, 3, 3, 4, 4, 5})\n * true\n */\nbool testDuplicate(vector<int> arraynums) {\n    unordered_set<int> seen;\n    for (int num : arraynums) {\n        if (seen.find(num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "entry_point": "testDuplicate"}
{"task_id": "MBCPP/20", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given number is woodball or not.\n * > isWoodall(383)\n * true\n * > isWoodall(254)\n * false\n * > isWoodall(200)\n * false\n */\nbool isWoodall(int x) {\n    if (x < 1)\n        return false;\n    \n    int n = 1;\n    while (true) {\n        int woodall = n * (1 << n) - 1;\n        if (woodall == x)\n            return true;\n        if (woodall > x)\n            return false;\n        n++;\n    }\n}", "entry_point": "isWoodall"}
{"task_id": "MBCPP/21", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find m number of multiples of n.\n * > multiplesOfNum(4, 3)\n * {3, 6, 9, 12}\n * > multiplesOfNum(2, 5)\n * {5, 10}\n * > multiplesOfNum(9, 2)\n * {2, 4, 6, 8, 10, 12, 14, 16, 18}\n */\nvector<int> multiplesOfNum(int m, int n) {\n    vector<int> result;\n    for (int i = 1; i <= m; i++) {\n        result.push_back(n * i);\n    }\n    return result;\n}", "entry_point": "multiplesOfNum"}
{"task_id": "MBCPP/22", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4, 4, 5})\n * 4\n * > findFirstDuplicate(vector<int>{1, 2, 3, 4})\n * -1\n * > findFirstDuplicate(vector<int>{1, 1, 2, 3, 3, 2, 2})\n * 1\n */\nint findFirstDuplicate(vector<int> nums) {\n    unordered_set<int> seen;\n    for (int num : nums) {\n        if (seen.find(num) != seen.end()) {\n            return num;\n        }\n        seen.insert(num);\n    }\n    return -1;\n}", "entry_point": "findFirstDuplicate"}
{"task_id": "MBCPP/23", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum sum of elements of list in a list of lists.\n * > maximumSum(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * 33\n * > maximumSum(vector<vector<int>>{{0, 1, 1}, {1, 1, 2}, {3, 2, 1}})\n * 6\n * > maximumSum(vector<vector<int>>{{0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8}})\n * 19\n */\nint maximumSum(vector<vector<int>> list1) {\n    int maxSum = INT_MIN;\n    for (const auto& sublist : list1) {\n        int currentSum = 0;\n        for (int num : sublist) {\n            currentSum += num;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n    }\n    return maxSum;\n}", "entry_point": "maximumSum"}
{"task_id": "MBCPP/24", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * > binaryToDecimal(100)\n * 4\n * > binaryToDecimal(1011)\n * 11\n * > binaryToDecimal(1101101)\n * 109\n */\nint binaryToDecimal(int binary) {\n    int decimal = 0, base = 1;\n    while (binary > 0) {\n        int lastDigit = binary % 10;\n        decimal += lastDigit * base;\n        base *= 2;\n        binary /= 10;\n    }\n    return decimal;\n}", "entry_point": "binaryToDecimal"}
{"task_id": "MBCPP/25", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the product of non-repeated elements in a given array.\n * > findProduct(vector<int>{1, 1, 2, 3}, 4)\n * 6\n * > findProduct(vector<int>{1, 2, 3, 1, 1}, 5)\n * 6\n * > findProduct(vector<int>{1, 1, 4, 5, 6}, 5)\n * 120\n */\nint findProduct(vector<int> arr, int n) {\n    unordered_map<int, int> freq;\n    for (int num : arr) {\n        freq[num]++;\n    }\n    int product = 1;\n    for (auto& pair : freq) {\n        if (pair.second == 1) {\n            product *= pair.first;\n        }\n    }\n    return product;\n}", "entry_point": "findProduct"}
{"task_id": "MBCPP/26", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple list has all k elements.\n * > checkKElements(vector<vector<int>>{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4)\n * true\n * > checkKElements(vector<vector<int>>{{7, 7, 7}, {7, 7}}, 7)\n * true\n * > checkKElements(vector<vector<int>>{{9, 9}, {9, 9, 9, 9}}, 7)\n * false\n */\nbool checkKElements(vector<vector<int>> testList, int k) {\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            if (num != k) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "entry_point": "checkKElements"}
{"task_id": "MBCPP/27", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all digits from a list of strings.\n * > remove(vector<string>{string(\"4words\"), string(\"3letters\"), string(\"4digits\")})\n * {string(\"words\"), string(\"letters\"), string(\"digits\")}\n * > remove(vector<string>{string(\"28Jan\"), string(\"12Jan\"), string(\"11Jan\")})\n * {string(\"Jan\"), string(\"Jan\"), string(\"Jan\")}\n * > remove(vector<string>{string(\"wonder1\"), string(\"wonder2\"), string(\"wonder3\")})\n * {string(\"wonder\"), string(\"wonder\"), string(\"wonder\")}\n */\nvector<string> remove(vector<string> list) {\n    for (auto& str : list) {\n        str.erase(remove_if(str.begin(), str.end(), ::isdigit), str.end());\n    }\n    return list;\n}", "entry_point": "remove"}
{"task_id": "MBCPP/28", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find binomial co-efficient.\n * > binomialCoeff(5, 2)\n * 10\n * > binomialCoeff(4, 3)\n * 4\n * > binomialCoeff(3, 2)\n * 3\n */\nint binomialCoeff(int n, int k) {\n    if (k > n)\n        return 0;\n    if (k == 0 || k == n)\n        return 1;\n    return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);\n}", "entry_point": "binomialCoeff"}
{"task_id": "MBCPP/29", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element occurring odd number of times.\n * > getOddOccurrence(vector<int>{1, 2, 3, 1, 2, 3, 1}, 7)\n * 1\n * > getOddOccurrence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurrence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n */\nint getOddOccurrence(vector<int> arr, int arrSize) {\n    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "entry_point": "getOddOccurrence"}
{"task_id": "MBCPP/30", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count all the substrings starting and ending with same characters.\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n * > countSubstringWithEqualEnds(string(\"abcda\"))\n * 6\n * > countSubstringWithEqualEnds(string(\"ab\"))\n * 2\n */\nint countSubstringWithEqualEnds(string s) {\n    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "countSubstringWithEqualEnds"}
{"task_id": "MBCPP/31", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 3)\n * {5, 7, 1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}}, 1)\n * {1}\n * > func(vector<vector<int>>{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, \u67817, 8, 12}}, 5)\n * {6, 5, 7, 8, 1}\n */\nvector<int> func(vector<vector<int>> nums, int k) {\n    unordered_map<int, int> freqMap;\n    for (const auto& list : nums) {\n        for (int num : list) {\n            freqMap[num]++;\n        }\n    }\n\n    priority_queue<pair<int, int>> maxHeap;\n    for (const auto& pair : freqMap) {\n        maxHeap.push({pair.second, pair.first});\n    }\n\n    vector<int> result;\n    for (int i = 0; i < k && !maxHeap.empty(); ++i) {\n        result.push_back(maxHeap.top().second);\n        maxHeap.pop();\n    }\n\n    return result;\n}", "entry_point": "func"}
{"task_id": "MBCPP/32", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest prime factor of a given number.\n * > maxPrimeFactors(15)\n * 5\n * > maxPrimeFactors(6)\n * 3\n * > maxPrimeFactors(2)\n * 2\n */\nint maxPrimeFactors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        maxPrime = n;\n    return maxPrime;\n}", "entry_point": "maxPrimeFactors"}
{"task_id": "MBCPP/33", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a decimal number to binary number.\n * > decimalToBinary(10)\n * 1010\n * > decimalToBinary(1)\n * 1\n * > decimalToBinary(20)\n * 10100\n */\nint decimalToBinary(int n) {\n    int binary = 0, remainder, i = 1;\n    while (n != 0) {\n        remainder = n % 2;\n        n /= 2;\n        binary += remainder * i;\n        i *= 10;\n    }\n    return binary;\n}", "entry_point": "decimalToBinary"}
{"task_id": "MBCPP/34", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the missing number in a sorted array.\n * > findMissing(vector<int>{1, 2, 3, 5}, 4)\n * 4\n * > findMissing(vector<int>{1, 3, 4, 5}, 4)\n * 2\n * > findMissing(vector<int>{1, 2, 3, 5, 6, 7}, 5)\n * 4\n */\nint findMissing(vector<int> ar, int n) {\n    int low = 0, high = ar.size() - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (ar[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}", "entry_point": "findMissing"}
{"task_id": "MBCPP/35", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th rectangular number.\n * > findRectNum(4)\n * 20\n * > findRectNum(5)\n * 30\n * > findRectNum(6)\n * 42\n */\nint findRectNum(int n) {\n    return n * (n + 1);\n}", "entry_point": "findRectNum"}
{"task_id": "MBCPP/36", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the nth digit in the proper fraction of two given numbers.\n * > findNthDigit(1, 2, 1)\n * 5\n * > findNthDigit(3, 5, 1)\n * 6\n * > findNthDigit(5, 6, 5)\n * 3\n */\nint findNthDigit(int p, int q, int n) {\n    if (q == 0) return -1;\n    int remainder = p % q;\n    for (int i = 0; i < n; ++i) {\n        remainder *= 10;\n        int digit = remainder / q;\n        remainder %= q;\n        if (i == n - 1) {\n            return digit;\n        }\n    }\n    return -1;\n}", "entry_point": "findNthDigit"}
{"task_id": "MBCPP/38", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the division of first even and odd number of a given list.\n * > divEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > divEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > divEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint divEvenOdd(vector<int> list1) {\n    int even = 0, odd = 0;\n    for (int num : list1) {\n        if (even == 0 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == 0 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != 0 && odd != 0) {\n            break;\n        }\n    }\n    if (odd == 0) {\n        return 0;\n    }\n    return even / odd;\n}", "entry_point": "divEvenOdd"}
{"task_id": "MBCPP/39", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n * > rearangeString(string(\"aab\"))\n * string(\"aba\")\n * > rearangeString(string(\"aabb\"))\n * string(\"abab\")\n * > rearangeString(string(\"abccdd\"))\n * string(\"cdabcd\")\n */\nstring rearangeString(string s) {\n    unordered_map<char, int> freq;\n    for (char c : s) {\n        freq[c]++;\n    }\n\n    priority_queue<pair<int, char>> maxHeap;\n    for (auto& [c, count] : freq) {\n        maxHeap.push({count, c});\n    }\n\n    string result;\n    pair<int, char> prev = {-1, '#'};\n\n    while (!maxHeap.empty()) {\n        auto curr = maxHeap.top();\n        maxHeap.pop();\n        result += curr.second;\n\n        if (prev.first > 0) {\n            maxHeap.push(prev);\n        }\n\n        curr.first--;\n        prev = curr;\n    }\n\n    if (result.size() != s.size()) {\n        return \"\";\n    }\n\n    return result;\n}", "entry_point": "rearangeString"}
{"task_id": "MBCPP/40", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency of the elements in a given list of lists using collections module.\n * > freqElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}})\n * {{2, 3}, {1, 2}, {5, 2}, {3, 1}, {4, 1}, {6, 1}, {7, 1}, {9, 1}}\n * > freqElement(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > freqElement(vector<vector<int>>{{15, 20, 30, 40}, {80, 90, 100, \u6781\u597d\u7684\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u7ee7\u7eed\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002\u6211\u5c06\u5206\u6790\u8fd9\u4e9b\u54cd\u5e94\u5e76\u9009\u62e9\u6700\u4e00\u81f4\u7684\u4ee3\u7801\u3002\n\n\u9996\u5148\uff0c\u6211\u6ce8\u610f\u5230\u6240\u670910\u4e2a\u54cd\u5e94\u5728\u529f\u80fd\u4e0a\u662f\u5b8c\u5168\u76f8\u540c\u7684\u2014\u2014\u5b83\u4eec\u90fd\u6b63\u786e\u5730\u5b9e\u73b0\u4e86\u8ba1\u7b97\u5d4c\u5957vector\u4e2d\u5143\u7d20\u9891\u7387\u7684\u529f\u80fd\u3002\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u53d8\u91cf\u547d\u540d\uff08`row` vs `innerVec` vs `vec`\uff09\u548c\u4ee3\u7801\u683c\u5f0f\uff08\u6bd4\u5982\u7a7a\u683c\u548c\u6362\u884c\uff09\u3002\n\n\u7edf\u8ba1\u53d8\u91cf\u547d\u540d\u4f7f\u7528\u60c5\u51b5\uff1a\n- `row` \u88ab\u4f7f\u7528\u4e865\u6b21\uff08\u54cd\u5e941,2,4,6,10\uff09\n- `innerVec` \u88ab\u4f7f\u7528\u4e864\u6b21\uff08\u54cd\u5e943,5,8,9\uff09\n- `vec` \u88ab\u4f7f\u7528\u4e861\u6b21\uff08\u54cd\u5e947\uff09\n\n\u56e0\u6b64\uff0c`row`\u662f\u6700\u5e38\u7528\u7684\u53d8\u91cf\u540d\uff0c\u67095\u4e2a\u54cd\u5e94\u4f7f\u7528\u5b83\uff0c\u5176\u6b21\u662f`innerVec`\u67094\u4e2a\u54cd\u5e94\u3002`vec`\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\n\u57fa\u4e8e\u591a\u6570\u5171\u8bc6\uff0c\u6211\u4f1a\u9009\u62e9\u4f7f\u7528`row`\u7684\u7248\u672c\u3002\u54cd\u5e941\u30012\u30014\u30016\u300110\u90fd\u4f7f\u7528\u4e86`row`\uff0c\u5b83\u4eec\u4e4b\u95f4\u6ca1\u6709\u529f\u80fd\u5dee\u5f02\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\n\n\u6700\u7ec8\u9009\u62e9\uff08\u4f8b\u5982\u54cd\u5e941\uff09\uff1a", "entry_point": "freqElement"}
{"task_id": "MBCPP/41", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter even numbers using lambda function.\n * > filterEvennumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 4, 6, 8, 10}\n * > filterEvennumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {10, 20, 84}\n * > filterEvennumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {8, 6, 4}\n */\nvector<int> filterEvennumbers(vector<int> nums) {\n    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int n) { return n % 2 == 0; });\n    return result;\n}", "entry_point": "filterEvennumbers"}
{"task_id": "MBCPP/42", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of repeated elements in a given array.\n * > findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8)\n * 3\n * > findSum(vector<int>{1, 2, 3, 1, 1}, 5)\n * 3\n * > findSum(vector<int>{1, 1, 2}, 3)\n * 2\n */\nint findSum(vector<int> arr, int n) {\n    unordered_map<int, int> freq;\n    int sum = 0;\n    \n    for(int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    \n    for(auto it : freq) {\n        if(it.second > 1) {\n            sum += it.first * (it.second - 1);\n        }\n    }\n    \n    return sum;\n}", "entry_point": "findSum"}
{"task_id": "MBCPP/43", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n * > textMatch(string(\"aab_cbbbc\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"aab_Abbbc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"Aaab_abbbc\"))\n * string(\"Not matched!\")\n */\nstring textMatch(string text) {\n    regex pattern(\"[a-z]+_[a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatch"}
{"task_id": "MBCPP/44", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the beginning of a string.\n * > textMatchString(string(\" python\"))\n * string(\"Not matched!\")\n * > textMatchString(string(\"python\"))\n * string(\"Found a match!\")\n * > textMatchString(string(\"  lang\"))\n * string(\"Not matched!\")\n */\nstring textMatchString(string text) {\n    if (text.empty())\n        return \"Not matched!\";\n        \n    size_t firstNonSpace = text.find_first_not_of(' ');\n    if (firstNonSpace == string::npos || firstNonSpace != 0)\n        return \"Not matched!\";\n        \n    if (text.substr(0, 6) == \"python\")\n        return \"Found a match!\";\n        \n    return \"Not matched!\";\n}", "entry_point": "textMatchString"}
{"task_id": "MBCPP/45", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the gcd of the given array elements.\n * > getGcd(vector<int>{2, 4, 6, 8, 16})\n * 2\n * > getGcd(vector<int>{1, 2, 3})\n * 1\n * > getGcd(vector<int>{2, 4, 6, 8})\n * 2\n */\nint getGcd(vector<int> l) {\n    if (l.empty()) return 0;\n    int result = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        result = __gcd(result, l[i]);\n        if (result == 1) {\n            return 1;\n        }\n    }\n    return result;\n}", "entry_point": "getGcd"}
{"task_id": "MBCPP/46", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to determine whether all the numbers are different from each other are not.\n * > testDistinct(vector<int>{1, 5, 7, 9})\n * true\n * > testDistinct(vector<int>{2, 4, 5, 5, 7, 9})\n * false\n * > testDistinct(vector<int>{1, 2, 3})\n * true\n */\nbool testDistinct(vector<int> data) {\n    unordered_set<int> seen;\n    for (int num : data) {\n        if (seen.count(num)) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "entry_point": "testDistinct"}
{"task_id": "MBCPP/47", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit when factorial of a divides factorial of b.\n * > computeLastDigit(2, 4)\n * 2\n * > computeLastDigit(6, 8)\n * 6\n * > computeLastDigit(1, 2)\n * 2\n */\nint computeLastDigit(int a, int b) {\n    if (a > b) return 0;\n    int lastDigit = 1;\n    for (int i = a + 1; i <= b; ++i) {\n        lastDigit = (lastDigit * (i % 10)) % 10;\n        if (lastDigit == 0) break;\n    }\n    return lastDigit;\n}", "entry_point": "computeLastDigit"}
{"task_id": "MBCPP/48", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all odd bits of a given number.\n * > oddBitSetNumber(10)\n * 15\n * > oddBitSetNumber(20)\n * 21\n * > oddBitSetNumber(30)\n * 31\n */\nint oddBitSetNumber(int n) {\n    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n | mask;\n}", "entry_point": "oddBitSetNumber"}
{"task_id": "MBCPP/49", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every first or specified element from a given two-dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1)\n * {2, 5, 1}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "entry_point": "specifiedElement"}
{"task_id": "MBCPP/51", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is equilateral or not.\n * > checkEquilateral(6, 8, 12)\n * false\n * > checkEquilateral(6, 6, 12)\n * false\n * > checkEquilateral(6, 6, 6)\n * true\n */\nbool checkEquilateral(int x, int y, int z) {\n    if (x <= 0 || y <= 0 || z <= 0)\n        return false;\n    return x == y && y == z;\n}", "entry_point": "checkEquilateral"}
{"task_id": "MBCPP/52", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate area of a parallelogram.\n * > parallelogramArea(10, 20)\n * 200\n * > parallelogramArea(15, 20)\n * 300\n * > parallelogramArea(8, 9)\n * 72\n */\nint parallelogramArea(int b, int h) {\n    return b * h;\n}", "entry_point": "parallelogramArea"}
{"task_id": "MBCPP/53", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the first and last characters of a given string are equal or not.\n * > checkEquality(string(\"abcda\"))\n * string(\"Equal\")\n * > checkEquality(string(\"ab\"))\n * string(\"Not Equal\")\n * > checkEquality(string(\"mad\"))\n * string(\"Not Equal\")\n */\nstring checkEquality(string str) {\n    if (str.empty())\n        return \"Not Equal\";\n    if (str[0] == str[str.length() - 1])\n        return \"Equal\";\n    else\n        return \"Not Equal\";\n}", "entry_point": "checkEquality"}
{"task_id": "MBCPP/54", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using counting sort.\n * > countingSort(vector<int>{1, 23, 4, 5, 6, 7, 8})\n * {1, 4, 5, 6, 7, 8, 23}\n * > countingSort(vector<int>{12, 9, 28, 33, 69, 45})\n * {9, 12, 28, 33, 45, 69}\n * > countingSort(vector<int>{8, 4, 14, 3, 2, 1})\n * {1, 2, 3, 4, 8, 14}\n */\nvector<int> countingSort(vector<int> myList) {\n    if (myList.empty()) return myList;\n\n    int max_val = *max_element(myList.begin(), myList.end());\n    vector<int> count(max_val + 1, 0);\n    vector<int> output(myList.size());\n\n    for (int num : myList) {\n        count[num]++;\n    }\n\n    for (int i = 1; i <= max_val; i++) {\n        count[i] += count[i - 1];\n    }\n\n    for (int i = myList.size() - 1; i >= 0; i--) {\n        output[count[myList[i]] - 1] = myList[i];\n        count[myList[i]]--;\n    }\n\n    return output;\n}", "entry_point": "countingSort"}
{"task_id": "MBCPP/55", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of geometric series.\n * > tnGp(1, 5, 2)\n * 16\n * > tnGp(1, 5, 4)\n * 256\n * > tnGp(2, 6, 3)\n * 486\n */\nint tnGp(int a, int n, int r) {\n    return a * pow(r, n - 1);\n}", "entry_point": "tnGp"}
{"task_id": "MBCPP/56", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if a given number is one less than twice its reverse.\n * > check(70)\n * false\n * > check(23)\n * false\n * > check(73)\n * true\n */\nbool check(int n) {\n    int reversed = 0;\n    int original = n;\n    while (n != 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    return (original == 2 * reversed - 1);\n}", "entry_point": "check"}
{"task_id": "MBCPP/57", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest number that can be formed with the given digits.\n * > findMaxNum(vector<int>{1, 2, 3}, 3)\n * 321\n * > findMaxNum(vector<int>{4, 5, 6, 1}, 4)\n * 6541\n * > findMaxNum(vector<int>{1, 2, 3, 9}, 4)\n * 9321\n */\nint findMaxNum(vector<int> arr, int n) {\n    sort(arr.begin(), arr.end(), greater<int>());\n    int num = 0;\n    for (int i = 0; i < n; i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;\n}", "entry_point": "findMaxNum"}
{"task_id": "MBCPP/58", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two integers have opposite sign or not.\n * > oppositeSigns(1, -2)\n * true\n * > oppositeSigns(3, 2)\n * false\n * > oppositeSigns(-10, -10)\n * false\n */\nbool oppositeSigns(int x, int y) {\n    return (x ^ y) < 0;\n}", "entry_point": "oppositeSigns"}
{"task_id": "MBCPP/59", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth octagonal number.\n * > isOctagonal(5)\n * 65\n * > isOctagonal(10)\n * 280\n * > isOctagonal(15)\n * 645\n */\nint isOctagonal(int n) {\n    return n * (3 * n - 2);\n}", "entry_point": "isOctagonal"}
{"task_id": "MBCPP/60", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n * > maxLenSub(vector<int>{2, 5, 6, 3, 7, 6, 5, 8}, 8)\n * 5\n * > maxLenSub(vector<int>{-2, -1, 5, -1, 4, 0, 3}, 7)\n * 4\n * > maxLenSub(vector<int>{9, 11, 13, 15, 18}, 5)\n * 1\n */\nint maxLenSub(vector<int> arr, int n) {\n    if (n == 0) return 0;\n    \n    vector<int> dp(n, 1);\n    int maxLen = 1;\n    \n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (abs(arr[i] - arr[j]) == 1) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLen = max(maxLen, dp[i]);\n    }\n    \n    return maxLen;\n}", "entry_point": "maxLenSub"}
{"task_id": "MBCPP/61", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of substrings with the sum of digits equal to their length.\n * > countSubstrings(string(\"112112\"), 6)\n * 6\n * > countSubstrings(string(\"111\"), 3)\n * 6\n * > countSubstrings(string(\"1101112\"), 7)\n * 12\n */\nint countSubstrings(string s, int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "countSubstrings"}
{"task_id": "MBCPP/62", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest number in a list.\n * > smallestNum(vector<int>{10, 20, 1, 45, 99})\n * 1\n * > smallestNum(vector<int>{1, 2, 3})\n * 1\n * > smallestNum(vector<int>{45, 46, 50, 60})\n * 45\n */\nint smallestNum(vector<int> xs) {\n    if (xs.empty()) return INT_MAX;\n    int min_val = xs[0];\n    for (int x : xs) {\n        if (x < min_val) {\n            min_val = x;\n        }\n    }\n    return min_val;\n}", "entry_point": "smallestNum"}
{"task_id": "MBCPP/63", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between available pairs in the given tuple list.\n * > maxDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}})\n * 7\n * > maxDifference(vector<vector<int>>{{4, 6}, {2, 17}, {9, 13}, {11, 12}})\n * 15\n * > maxDifference(vector<vector<int>>{{12, 35}, {21, 27}, {13, 23}, {41, 22}})\n * 23\n */\nint maxDifference(vector<vector<int>> testList) {\n    int maxDiff = 0;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n    }\n    return maxDiff;\n}", "entry_point": "maxDifference"}
{"task_id": "MBCPP/66", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count positive numbers in a list.\n * > posCount(vector<int>{1, -2, 3, -4})\n * 2\n * > posCount(vector<int>{3, 4, 5, -1})\n * 3\n * > posCount(vector<int>{1, 2, 3, 4})\n * 4\n */\nint posCount(vector<int> list) {\n    int count = 0;\n    for (int num : list) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "posCount"}
{"task_id": "MBCPP/68", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given array is monotonic or not.\n * > isMonotonic(vector<int>{6, 5, 4, 4})\n * true\n * > isMonotonic(vector<int>{1, 2, 2, 3})\n * true\n * > isMonotonic(vector<int>{1, 3, 2})\n * false\n */\nbool isMonotonic(vector<int> a) {\n    if (a.size() <= 1)\n        return true;\n    \n    bool increasing = true;\n    bool decreasing = true;\n    \n    for (int i = 1; i < a.size(); ++i) {\n        if (a[i] > a[i - 1])\n            decreasing = false;\n        if (a[i] < a[i - 1])\n            increasing = false;\n    }\n    \n    return increasing || decreasing;\n}", "entry_point": "isMonotonic"}
{"task_id": "MBCPP/69", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a list contains the given sublist or not.\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{3, 7})\n * false\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{4, 3})\n * true\n * > isSublist(vector<int>{2, 4, 3, 5, 7}, vector<int>{1, 6})\n * false\n */\nbool isSublist(vector<int> l, vector<int> s) {\n    if (s.empty()) return true;\n    int n = l.size(), m = s.size();\n    for (int i = 0; i <= n - m; ++i) {\n        bool match = true;\n        for (int j = 0; j < m; ++j) {\n            if (l[i + j] != s[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) return true;\n    }\n    return false;\n}", "entry_point": "isSublist"}
{"task_id": "MBCPP/70", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether all the given tuples have equal length or not.\n * > getEqual(vector<vector<int>>{{11, 22, 33}, {44, 55, 66}}, 3)\n * string(\"All tuples have same length\")\n * > getEqual(vector<vector<int>>{{1, 2, 3}, {4, 5, 6, 7}}, 3)\n * string(\"All tuples do not have same length\")\n * > getEqual(vector<vector<int>>{{1, 2}, {3, 4}}, 2)\n * string(\"All tuples have same length\")\n */\nstring getEqual(vector<vector<int>> input, int k) {\n    for (const auto& vec : input) {\n        if (vec.size() != k) {\n            return \"All tuples do not have same length\";\n        }\n    }\n    return \"All tuples have same length\";\n}", "entry_point": "getEqual"}
{"task_id": "MBCPP/71", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using comb sort.\n * > combSort(vector<int>{5, 15, 37, 25, 79})\n * {5, 15, 25, 37, 79}\n * > combSort(vector<int>{41, 32, 15, 19, 22})\n * {15, 19, 22, 32, 41}\n * > combSort(vector<int>{99, 15, 13, 47})\n * {13, 15, 47, 99}\n */\nvector<int> combSort(vector<int> nums) {\n    int n = nums.size();\n    int gap = n;\n    bool swapped = true;\n    while (gap != 1 || swapped == true) {\n        gap = (gap * 10) / 13;\n        if (gap < 1)\n            gap = 1;\n        swapped = false;\n        for (int i = 0; i < n - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums[i], nums[i + gap]);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}", "entry_point": "combSort"}
{"task_id": "MBCPP/72", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as difference of two squares or not.\n * > difSquare(5)\n * true\n * > difSquare(10)\n * false\n * > difSquare(15)\n * true\n */\nbool difSquare(int n) {\n    if (n <= 0)\n        return false;\n    // If n is odd or divisible by 4, it can be represented as difference of squares\n    return (n % 2 != 0 || n % 4 == 0);\n}", "entry_point": "difSquare"}
{"task_id": "MBCPP/73", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string with multiple delimiters by using regex.\n * > multipleSplit(string(\"Forces of the \\ndarkness*are coming into the play.\"))\n * {string(\"Forces of the \"), string(\"darkness\"), string(\"are coming into the play.\")}\n * > multipleSplit(string(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\"))\n * {string(\"Mi Box runs on the \"), string(\" Latest android\"), string(\"which has google assistance and chromecast.\")}\n * > multipleSplit(string(\"Certain services\\nare subjected to change*over the seperate subscriptions.\"))\n * {string(\"Certain services\"), string(\"are subjected to change\"), string(\"over the seperate subscriptions.\")}\n */\nvector<string> multipleSplit(string text) {\n    regex pattern(\"[\\n*]\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), pattern, -1);\n    sregex_token_iterator end;\n    while (iter != end) {\n        result.push_back(*iter);\n        ++iter;\n    }\n    return result;\n}", "entry_point": "multipleSplit"}
{"task_id": "MBCPP/74", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether it follows the sequence given in the patterns array.\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"green\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * true\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\"), string(\"b\")})\n * false\n * > isSamepatterns(vector<string>{string(\"red\"), string(\"green\"), string(\"greenn\")}, vector<string>{string(\"a\"), string(\"b\")})\n * false\n */\nbool isSamepatterns(vector<string> colors, vector<string> patterns) {\n    if (colors.size() != patterns.size())\n        return false;\n\n    unordered_map<string, char> colorToPattern;\n    unordered_map<char, string> patternToColor;\n\n    for (size_t i = 0; i < colors.size(); ++i) {\n        string color = colors[i];\n        char pattern = patterns[i][0];\n\n        if (colorToPattern.find(color) == colorToPattern.end()) {\n            if (patternToColor.find(pattern) != patternToColor.end())\n                return false;\n            colorToPattern[color] = pattern;\n            patternToColor[pattern] = color;\n        } else {\n            if (colorToPattern[color] != pattern)\n                return false;\n        }\n    }\n\n    return true;\n}", "entry_point": "isSamepatterns"}
{"task_id": "MBCPP/75", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n * > findTuples(vector<vector<int>>{{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6)\n * string(\"[(6, 24, 12)]\")\n * > findTuples(vector<vector<int>>{{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5)\n * string(\"[(5, 25, 30)]\")\n * > findTuples(vector<vector<int>>{{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4)\n * string(\"[(8, 16, 4)]\")\n */\nstring findTuples(vector<vector<int>> testList, int k) {\n    string result = \"[\";\n    bool first = true;\n    for (const auto& tuple : testList) {\n        bool allDivisible = true;\n        for (int num : tuple) {\n            if (num % k != 0) {\n                allDivisible = false;\n                break;\n            }\n        }\n        if (allDivisible) {\n            if (!first) {\n                result += \", \";\n            }\n            result += \"(\";\n            for (size_t i = 0; i < tuple.size(); ++i) {\n                if (i != 0) {\n                    result += \", \";\n                }\n                result += to_string(tuple[i]);\n            }\n            result += \")\";\n            first = false;\n        }\n    }\n    result += \"]\";\n    return result;\n}", "entry_point": "findTuples"}
{"task_id": "MBCPP/76", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(2, 2)\n * 5\n * > countSquares(1, 1)\n * 1\n */\nint countSquares(int m, int n) {\n    int count = 0;\n    while (m > 0 && n > 0) {\n        count += m * n;\n        m--;\n        n--;\n    }\n    return count;\n}", "entry_point": "countSquares"}
{"task_id": "MBCPP/77", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of even and odd digits.\n * > isDiff(1212112)\n * true\n * > isDiff(1212)\n * false\n */\nbool isDiff(int n) {\n    int evenSum = 0, oddSum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 0)\n            evenSum += digit;\n        else\n            oddSum += digit;\n        n /= 10;\n    }\n    return evenSum != oddSum;\n}", "entry_point": "isDiff"}
{"task_id": "MBCPP/78", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of integers with odd number of set bits.\n * > countWithOddSetbits(5)\n * 3\n * > countWithOddSetbits(10)\n * 5\n * > countWithOddSetbits(15)\n * 8\n */\nint countWithOddSetbits(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; ++i) {\n        int bits = __builtin_popcount(i);\n        if (bits % 2 != 0) {\n            ++count;\n        }\n    }\n    return count;\n}", "entry_point": "countWithOddSetbits"}
{"task_id": "MBCPP/79", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is odd or not.\n * > wordLen(string(\"Hadoop\"))\n * false\n * > wordLen(string(\"great\"))\n * true\n * > wordLen(string(\"structure\"))\n * true\n */\nbool wordLen(string s) {\n    return s.length() % 2 != 0;\n}", "entry_point": "wordLen"}
{"task_id": "MBCPP/80", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth tetrahedral number.\n * > tetrahedralNumber(5)\n * 35.0\n * > tetrahedralNumber(6)\n * 56.0\n * > tetrahedralNumber(7)\n * 84.0\n */\ndouble tetrahedralNumber(int n) {\n    return (n * (n + 1) * (n + 2)) / 6.0;\n}", "entry_point": "tetrahedralNumber"}
{"task_id": "MBCPP/81", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to zip the two given tuples.\n * > zipTuples(vector<int>{7, 8, 4, 5, 9, 10}, vector<int>{1, 5, 6})\n * {{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}\n * > zipTuples(vector<int>{8, 9, 5, 6, 10, 11}, vector<int>{2, 6, 7})\n * {{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}\n * > zipTuples(vector<int>{9, 10, 6, 7, 11, 12}, vector<int>{3, 7, 8})\n * {{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}\n */\nvector<vector<int>> zipTuples(vector<int> testTup1, vector<int> testTup2) {\n    vector<vector<int>> result;\n    int size1 = testTup1.size();\n    int size2 = testTup2.size();\n    for (int i = 0; i < size1; ++i) {\n        vector<int> temp;\n        temp.push_back(testTup1[i]);\n        temp.push_back(testTup2[i % size2]);\n        result.push_back(temp);\n    }\n    return result;\n}", "entry_point": "zipTuples"}
{"task_id": "MBCPP/82", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a sphere.\n * > volumeSphere(10)\n * 4188.790204786391\n * > volumeSphere(25)\n * 65449.84694978735\n * > volumeSphere(20)\n * 33510.32163829113\n */\ndouble volumeSphere(int r) {\n    return (4.0 / 3.0) * M_PI * pow(r, 3);\n}", "entry_point": "volumeSphere"}
{"task_id": "MBCPP/83", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the character made by adding all the characters of the given string.\n * > getChar(string(\"abc\"))\n * string(\"f\")\n * > getChar(string(\"gfg\"))\n * string(\"t\")\n * > getChar(string(\"ab\"))\n * string(\"c\")\n */\nstring getChar(string strr) {\n    int sum = 0;\n    for (char c : strr) {\n        sum += c;\n    }\n    return string(1, static_cast<char>(sum));\n}", "entry_point": "getChar"}
{"task_id": "MBCPP/84", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th number in newman conway sequence.\n * > sequence(10)\n * 6\n * > sequence(2)\n * 1\n * > sequence(3)\n * 2\n */\nint sequence(int n) {\n    if (n == 1 || n == 2)\n        return 1;\n    int dp[n + 1];\n    dp[1] = 1;\n    dp[2] = 1;\n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]];\n    }\n    return dp[n];\n}", "entry_point": "sequence"}
{"task_id": "MBCPP/85", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a sphere.\n * > surfaceareaSphere(10)\n * 1256.6370614359173\n * > surfaceareaSphere(15)\n * 2827.4333882308138\n * > surfaceareaSphere(20)\n * 5026.548245743669\n */\ndouble surfaceareaSphere(int r) {\n    return 4 * M_PI * r * r;\n}", "entry_point": "surfaceareaSphere"}
{"task_id": "MBCPP/86", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth centered hexagonal number.\n * > centeredHexagonalNumber(10)\n * 271\n * > centeredHexagonalNumber(2)\n * 7\n * > centeredHexagonalNumber(9)\n * 217\n */\nint centeredHexagonalNumber(int n) {\n    return 3 * n * (n - 1) + 1;\n}", "entry_point": "centeredHexagonalNumber"}
{"task_id": "MBCPP/87", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge three dictionaries into a single expression.\n * > mergeDictionariesThree(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5", "entry_point": "mergeDictionariesThree"}
{"task_id": "MBCPP/88", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the frequency of the elements in a list.\n * > freqCount(vector<int>{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30})\n * {{10, 4}, {20, 4}, {40, 2}, {50, 2}, {30, 1}}\n * > freqCount(vector<int>{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4})\n * {{1, 3}, {2, 2}, {3, 3}, {4, 3}}\n * > freqCount(vector<int>{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5})\n * {{10, 1}, {5, 3}, {6, 2}, {7, 2}, {4, 2}, {9, 2}}\n */\nunordered_map<int, int> freqCount(vector<int> list1) {\n    unordered_map<int, int> freqMap;\n    for (int num : list1) {\n        freqMap[num]++;\n    }\n    return freqMap;\n}", "entry_point": "freqCount"}
{"task_id": "MBCPP/89", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the closest smaller number than n.\n * > closestNum(11)\n * 10\n * > closestNum(7)\n * 6\n * > closestNum(12)\n * 11\n */\nint closestNum(int n) {\n    if (n <= 0)\n        return -1; // No valid smaller number for non-positive input\n    return n - 1;\n}", "entry_point": "closestNum"}
{"task_id": "MBCPP/90", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the longest word.\n * > lenLog(vector<string>{string(\"python\"), string(\"PHP\"), string(\"bigdata\")})\n * 7\n * > lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")})\n * 3\n * > lenLog(vector<string>{string(\"small\"), string(\"big\"), string(\"tall\")})\n * 5\n */\nint lenLog(vector<string> list1) {\n    int max_len = 0;\n    for (const auto& word : list1) {\n        if (word.length() > max_len) {\n            max_len = word.length();\n        }\n    }\n    return max_len;\n}", "entry_point": "lenLog"}
{"task_id": "MBCPP/91", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a substring is present in a given list of string values.\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ack\"))\n * true\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"abc\"))\n * false\n * > findSubstring(vector<string>{string(\"red\"), string(\"black\"), string(\"white\"), string(\"green\"), string(\"orange\")}, string(\"ange\"))\n * true\n */\nbool findSubstring(vector<string> str1, string subStr) {\n    for (const string& str : str1) {\n        if (str.find(subStr) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "findSubstring"}
{"task_id": "MBCPP/92", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is undulating or not.\n * > isUndulating(string(\"1212121\"))\n * true\n * > isUndulating(string(\"1991\"))\n * false\n * > isUndulating(string(\"121\"))\n * true\n */\nbool isUndulating(string n) {\n    if (n.length() < 2)\n        return false;\n    \n    char first = n[0];\n    char second = n[1];\n    \n    if (first == second)\n        return false;\n    \n    for (int i = 2; i < n.length(); i++) {\n        if (i % 2 == 0) {\n            if (n[i] != first)\n                return false;\n        } else {\n            if (n[i] != second)\n                return false;\n        }\n    }\n    \n    return true;\n}", "entry_point": "isUndulating"}
{"task_id": "MBCPP/93", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the value of 'a' to the power 'b'.\n * > power(3, 4)\n * 81\n * > power(2, 3)\n * 8\n * > power(5, 5)\n * 3125\n */\nint power(int a, int b) {\n    if (b == 0)\n        return 1;\n    int result = 1;\n    while (b > 0) {\n        if (b % 2 == 1)\n            result *= a;\n        a *= a;\n        b /= 2;\n    }\n    return result;\n}", "entry_point": "power"}
{"task_id": "MBCPP/95", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum length of sublist.\n * > findMinLength(vector<vector<int>>{{1}, {1, 2}})\n * 1\n * > findMinLength(vector<vector<int>>{{1, 2}, {1, 2, 3}, {1, 2, 3, 4}})\n * 2\n * > findMinLength(vector<vector<int>>{{3, 3, 3}, {4, 4, 4, 4}})\n * 3\n */\nint findMinLength(vector<vector<int>> lst) {\n    int min_length = INT_MAX;\n    for (const auto& sublist : lst) {\n        if (sublist.size() < min_length) {\n            min_length = sublist.size();\n        }\n    }\n    return min_length;\n}", "entry_point": "findMinLength"}
{"task_id": "MBCPP/96", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the number of divisors of a given integer.\n * > divisor(15)\n * 4\n * > divisor(12)\n * 6\n * > divisor(9)\n * 3\n */\nint divisor(int n) {\n    int count = 0;\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (n / i == i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return count;\n}", "entry_point": "divisor"}
{"task_id": "MBCPP/97", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find frequency count of list of lists.\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}})\n * {{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}\n * > frequencyLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}})\n * {{\u6781\u5ba2\u65f6\u95f4\u8fd4\u73b0 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}\n * > frequencyLists(vector<vector<int>>{{20, 30, 40\u6781\u5ba2\u65f6\u95f4\u8fd4\u73b0, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}})\n * {{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}\n */\nunordered_map<int, int> frequencyLists(vector<vector<int>> list1) {\n    unordered_map<int, int> freqMap;\n    for (const auto& sublist : list1) {\n        for (int num : sublist) {\n            freqMap[num]++;\n        }\n    }\n    return freqMap;\n}", "entry_point": "frequencyLists"}
{"task_id": "MBCPP/98", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply all the numbers in a list and divide with the length of the list.\n * > multiplyNum(vector<int>{8, 2, 3, -1, 7})\n * -67.2\n * > multiplyNum(vector<int>{-10, -20, -30})\n * -2000.0\n * > multiplyNum(vector<int>{19, 15, 18})\n * 1710.0\n */\ndouble multiplyNum(vector<int> numbers) {\n    if (numbers.empty()) return 0.0;\n    double product = 1;\n    for (int num : numbers) {\n        product *= num;\n    }\n    return product / numbers.size();\n}", "entry_point": "multiplyNum"}
{"task_id": "MBCPP/99", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given decimal number to its binary equivalent.\n * > decimalToBinary(8)\n * string(\"1000\")\n * > decimalToBinary(18)\n * string(\"10010\")\n * > decimalToBinary(7)\n * string(\"111\")\n */\nstring decimalToBinary(int n) {\n    if (n == 0)\n        return \"0\";\n    \n    string binary = \"\";\n    while (n > 0) {\n        binary = to_string(n % 2) + binary;\n        n /= 2;\n    }\n    return binary;\n}", "entry_point": "decimalToBinary"}
{"task_id": "MBCPP/100", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the next smallest palindrome of a specified number.\n * > nextSmallestPalindrome(99)\n * 101\n * > nextSmallestPalindrome(1221)\n * 1331\n * > nextSmallestPalindrome(120)\n * 121\n */\nint nextSmallestPalindrome(int num) {\n    num++;\n    while (true) {\n        int n = num;\n        int reversed = 0;\n        while (n != 0) {\n            reversed = reversed * 10 + n % 10;\n            n /= 10;\n        }\n        if (reversed == num)\n            return num;\n        num++;\n    }\n}", "entry_point": "nextSmallestPalindrome"}
{"task_id": "MBCPP/101", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the kth element in the given array.\n * > kthElement(vector<int>{12, 3, 5, 7, 19}, 5, 2)\n * 3\n * > kthElement(vector<int>{17, 24, 8, 23}, 4, 3)\n * 8\n * > kthElement(vector<int>{16, 21, 25, 36, 4}, 5, 4)\n * 36\n */\nint kthElement(vector<int> arr, int n, int k) {\n    sort(arr.begin(), arr.end());\n    return arr[k - 1];\n}", "entry_point": "kthElement"}
{"task_id": "MBCPP/102", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert snake case string to camel case string.\n * > snakeToCamel(string(\"python_program\"))\n * string(\"PythonProgram\")\n * > snakeToCamel(string(\"python_language\"))\n * string(\"PythonLanguage\")\n * > snakeToCamel(string(\"programming_language\"))\n * string(\"ProgrammingLanguage\")\n */\nstring snakeToCamel(string word) {\n    string result;\n    bool capitalizeNext = true;\n    for (char ch : word) {\n        if (ch == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                result += toupper(ch);\n                capitalizeNext = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "entry_point": "snakeToCamel"}
{"task_id": "MBCPP/103", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find eulerian number a(n, m).\n * > eulerianNum(3, 1)\n * 4\n * > eulerianNum(4, 1)\n * 11\n * > eulerianNum(5, 3)\n * 26\n */\nint eulerianNum(int n, int m) {\n    if (m >= n || n == 0)\n        return 0;\n    if (m == 0)\n        return 1;\n    return (n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m);\n}", "entry_point": "eulerianNum"}
{"task_id": "MBCPP/104", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\" red \"), string(\"green\")}, {string(\"blue \"), string(\" black\")}, {string(\" orange\"), string(\"brown\")}})\n * {{string(\" red \"), string(\"green\")}, {string(\" black\"), string(\"blue \")}, {string(\" orange\"), string(\"brown\")}}\n * > sortSublists(vector<vector<string>>{{string(\"zilver\"), string(\"gold\")}, {string(\"magnesium\"), string(\"aluminium\")}, {string(\"steel\"), string(\"bronze\")}})\n * {{string(\"gold\"), string(\"zilver\")}, {string(\"aluminium\"), string(\"magnesium\")}, {string(\"bronze\"), string(\"steel\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> inputList) {\n    for (auto& sublist : inputList) {\n        sort(sublist.begin(), sublist.end(), [](const string& a, const string& b) {\n            return a < b;\n        });\n    }\n    return inputList;\n}", "entry_point": "sortSublists"}
{"task_id": "MBCPP/105", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count true booleans in the given list.\n * > count(vector<bool>{true, false, true})\n * 2\n * > count(vector<bool>{false, false})\n * 0\n * > count(vector<bool>{true, true, true})\n * 3\n */\nint count(vector<bool> lst) {\n    int cnt = 0;\n    for(bool b : lst) {\n        if(b) cnt++;\n    }\n    return cnt;\n}", "entry_point": "count"}
{"task_id": "MBCPP/106", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given list to the given tuples.\n * > addLists(vector<int>{5, 6, 7}, vector<int>{9, 10})\n * {9, 10, 5, 6, 7}\n * > addLists(vector<int>{6, 7, 8}, vector<int>{10, 11})\n * {10, 11, 6, 7, 8}\n * > addLists(vector<int>{7, 8, 9}, vector<int>{11, 12})\n * {11, 12, 7, 8, 9}\n */\nvector<int> addLists(vector<int> testList, vector<int> testTup) {\n    testTup.insert(testTup.end(), testList.begin(), testList.end());\n    return testTup;\n}", "entry_point": "addLists"}
{"task_id": "MBCPP/107", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count hexadecimal numbers for a given range.\n * > countHexadecimal(10, 15)\n * 6\n * > countHexadecimal(2, 4)\n * 0\n * > countHexadecimal(15, 16)\n * 1\n */\nint countHexadecimal(int l, int r) {\n    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i >= 10 && i <= 15) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countHexadecimal"}
{"task_id": "MBCPP/108", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n * > mergeSortedList(vector<int>{25, 24, 15, 4, 5, 29, 110}, vector<int>{19, 20, 11, 56, 25, 233, 154}, vector<int>{24, 26, 54, 48})\n * {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}\n * > mergeSortedList(vector<int>{1, 3, 5, 6, 8, \u6781\u597d\u7684\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u7ee7\u7eed\u5b8c\u5584\u8fd9\u4e2a\u51fd\u6570\u3002\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5b83\u80fd\u591f\u6b63\u786e\u5904\u7406\u8f93\u5165\u7684\u5411\u91cf\uff0c\u5e76\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u7ed3\u679c\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u7684\u5b9e\u73b0\uff1a", "entry_point": "mergeSortedList"}
{"task_id": "MBCPP/109", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the count of rotations of a binary string with odd value.\n * > oddEquivalent(string(\"011001\"), 6)\n * 3\n * > oddEquivalent(string(\"11011\"), 5)\n * 4\n * > oddEquivalent(string(\"1010\"), 4)\n * 2\n */\nint oddEquivalent(string s, int n) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(s[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "oddEquivalent"}
{"task_id": "MBCPP/110", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n * > extractMissing(vector<vector<int>>{{6, 9}, {15, 34}, {48, 70}}, 2, 100)\n * {{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 5, 60)\n * {{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}}\n * > extractMissing(vector<vector<int>>{{7, 2}, {15, 19}, {38, 50}}, 1, 52)\n * {{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}}\n */\nvector<vector<int>> extractMissing(vector<vector<int>> testList, int strtVal, int stopVal) {\n    vector<vector<int>> result;\n    if (testList.empty()) {\n        result.push_back({strtVal, stopVal});\n        return result;\n    }\n    \n    // Sort the intervals based on start value\n    sort(testList.begin(), testList.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n    \n    // Check the gap before the first interval\n    if (strtVal < testList[0][0]) {\n        result.push_back({strtVal, testList[0][0]});\n    }\n    \n    // Check the gaps between intervals\n    for (size_t i = 1; i < testList.size(); ++i) {\n        if (testList[i-1][1] < testList[i][0]) {\n            result.push_back({testList[i-1][1], testList[i][0]});\n        }\n    }\n    \n    // Check the gap after the last interval\n    if (testList.back()[1] < stopVal) {\n        result.push_back({testList.back()[1], stopVal});\n    }\n    \n    return result;\n}", "entry_point": "extractMissing"}
{"task_id": "MBCPP/111", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n * > commonInNestedLists(vector<vector<int>>{{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}})\n * {18, 12}\n * > commonInNestedLists(vector<vector<int>>{{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}})\n * {5, 23}\n * > commonInNestedLists(vector<vector<int>>{{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}})\n * {4}\n */\nvector<int> commonInNestedLists(vector<vector<int>> nestedlist) {\n    if (nestedlist.empty()) return {};\n\n    unordered_set<int> commonElements(nestedlist[0].begin(), nestedlist[0].end());\n\n    for (size_t i = 1; i < nestedlist.size(); ++i) {\n        unordered_set<int> currentSet(nestedlist[i].begin(), nestedlist[i].end());\n        unordered_set<int> temp;\n        for (int num : commonElements) {\n            if (currentSet.find(num) != currentSet.end()) {\n                temp.insert(num);\n            }\n        }\n        commonElements = temp;\n        if (commonElements.empty()) break;\n    }\n\n    vector<int> result(commonElements.begin(), commonElements.end());\n    return result;\n}", "entry_point": "commonInNestedLists"}
{"task_id": "MBCPP/112", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the perimeter of a cylinder.\n * > perimeter(2, 4)\n * 12\n * > perimeter(1, 2)\n * 6\n * > perimeter(3, 1)\n * 8\n */\nint perimeter(int diameter, int height) {\n    return 2 * (diameter + height);\n}", "entry_point": "perimeter"}
{"task_id": "MBCPP/113", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a string represents an integer or not.\n * > checkInteger(string(\"python\"))\n * false\n * > checkInteger(string(\"1\"))\n * true\n * > checkInteger(string(\"12345\"))\n * true\n */\nbool checkInteger(string text) {\n    if (text.empty()) return false;\n    size_t i = 0;\n    if (text[0] == '+' || text[0] == '-') {\n        i++;\n        if (i == text.length()) return false;\n    }\n    for (; i < text.length(); i++) {\n        if (!isdigit(text[i])) return false;\n    }\n    return true;\n}", "entry_point": "checkInteger"}
{"task_id": "MBCPP/114", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to assign frequency to each tuple in the given tuple list.\n * > assignFreq(vector<vector<int>>{{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}})\n * string(\"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\")\n * > assignFreq(vector<vector<int>>{{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}})\n * string(\"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\")\n * > assignFreq(vector<vector<int>>{{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}})\n * string(\"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\")\n */\nstring assignFreq(vector<vector<int>> testList) {\n    map<vector<int>, int> freqMap;\n    for (const auto& tuple : testList) {\n        freqMap[tuple]++;\n    }\n    \n    string result = \"[\";\n    for (const auto& [tuple, freq] : freqMap) {\n        if (result.size() > 1) {\n            result += \", \";\n        }\n        result += \"(\";\n        for (size_t i = 0; i < tuple.size(); ++i) {\n            if (i > 0) {\n                result += \", \";\n            }\n            result += to_string(tuple[i]);\n        }\n        result += \", \" + to_string(freq) + \")\";\n    }\n    result += \"]\";\n    \n    return result;\n}", "entry_point": "assignFreq"}
{"task_id": "MBCPP/116", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given tuple of positive integers into an integer.\n * > tupleToInt(vector<int>{1, 2, 3})\n * 123\n * > tupleToInt(vector<int>{4, 5, 6})\n * 456\n * > tupleToInt(vector<int>{5, 6, 7})\n * 567\n */\nint tupleToInt(vector<int> nums) {\n    int result = 0;\n    for (int num : nums) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "entry_point": "tupleToInt"}
{"task_id": "MBCPP/117", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert all possible convertible elements in the list to float.\n * > listToFloat(vector<vector<string>>{{string(\"3\"), string(\"4\")}, {string(\"1\"), string(\"26.45\")}, {string(\"7.32\"), string(\"8\")}, {string(\"4\"), string(\"8\")}})\n * string(\"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\")\n * > listToFloat(vector<vector<string>>{{string(\"4\"), string(\"4\")}, {string(\"2\"), string(\"27\")}, {string(\"4.12\"), string(\"9\")}, {string(\"7\"), string(\"11\")}})\n * string(\"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\")\n * > listToFloat(vector<vector<string>>{{string(\"6\"), string(\"78\")}, {string(\"5\"), string(\"26.45\")}, {string(\"1.33\"), string(\"4\")}, {string(\"82\"), string(\"13\")}})\n * string(\"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\")\n */\nstring listToFloat(vector<vector<string>> testList) {\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            try {\n                float num = stof(testList[i][j]);\n                result += to_string(num);\n            } catch (const invalid_argument&) {\n                result += testList[i][j];\n            }\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "entry_point": "listToFloat"}
{"task_id": "MBCPP/118", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n * > stringToList(string(\"python programming\"))\n * {string(\"python\"), string(\"programming\")}\n * > stringToList(string(\"lists tuples strings\"))\n * {string(\"lists\"), string(\"tuples\"), string(\"strings\")}\n * > stringToList(string(\"write a program\"))\n * {string(\"write\"), string(\"a\"), string(\"program\")}\n */\nvector<string> stringToList(string str) {\n    vector<string> result;\n    string word;\n    for (char ch : str) {\n        if (ch == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += ch;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "entry_point": "stringToList"}
{"task_id": "MBCPP/119", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the element that appears only once in a sorted array.\n * > search(vector<int>{1, 1, 2, 2, 3}, 5)\n * 3\n * > search(vector<int>{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11)\n * 8\n * > search(vector<int>{1, 2, 2, 3, 3, 4, 4}, 7)\n * 1\n */\nint search(vector<int> arr, int n) {\n    int low = 0, high = n - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (mid % 2 == 1) {\n            mid--;\n        }\n        if (arr[mid] != arr[mid + 1]) {\n            high = mid;\n        } else {\n            low = mid + 2;\n        }\n    }\n    return arr[low];\n}", "entry_point": "search"}
{"task_id": "MBCPP/120", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product from the pairs of tuples within a given list.\n * > maxProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 36\n * > maxProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 200\n * > maxProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 484\n */\nint maxProductTuple(vector<vector<int>> list1) {\n    int maxProd = INT_MIN;\n    for (const auto& pair : list1) {\n        int currentProd = pair[0] * pair[1];\n        if (currentProd > maxProd) {\n            maxProd = currentProd;\n        }\n    }\n    return maxProd;\n}", "entry_point": "maxProductTuple"}
{"task_id": "MBCPP/121", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the triplet with sum of the given array\n * > checkTriplet(vector<int>{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0)\n * true\n * > checkTriplet(vector<int>{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0)\n * false\n * > checkTriplet(vector<int>{10, 4, 2, 3, 5}, 5, 15, 0)\n * true\n */\nbool checkTriplet(vector<int> a, int n, int sum, int count) {\n    if (count == 3 && sum == 0)\n        return true;\n    if (count == 3 || n == 0 || sum < 0)\n        return false;\n    return checkTriplet(a, n - 1, sum - a[n - 1], count + 1) || checkTriplet(a, n - 1, sum, count);\n}", "entry_point": "checkTriplet"}
{"task_id": "MBCPP/122", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n\u2019th smart number.\n * > smartnumber(1)\n * 30\n * > smartnumber(50)\n * 273\n * > smartnumber(1000)\n * 2664\n */\nint smartnumber(int n) {\n    vector<int> smartNumbers;\n    for (int i = 30; ; i++) {\n        int num = i;\n        int count = 0;\n        for (int p : {2, 3, 5}) {\n            while (num % p == 0) {\n                num /= p;\n                count++;\n            }\n        }\n        if (num == 1 && count >= 3) {\n            smartNumbers.push_back(i);\n            if (smartNumbers.size() == n) {\n                return smartNumbers.back();\n            }\n        }\n    }\n    return -1;\n}", "entry_point": "smartnumber"}
{"task_id": "MBCPP/123", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum all amicable numbers from 1 to a specified number.\n * > amicableNumbersSum(999)\n * 504\n * > amicableNumbersSum(9999)\n * 31626\n * > amicableNumbersSum(99)\n * 0\n */\nint amicableNumbersSum(int limit) {\n    int sum = 0;\n    for (int i = 1; i <= limit; ++i) {\n        int sumDivisors1 = 1;\n        for (int j = 2; j * j <= i; ++j) {\n            if (i % j == 0) {\n                sumDivisors1 += j;\n                if (j != i / j) {\n                    sumDivisors1 += i / j;\n                }\n            }\n        }\n        if (sumDivisors1 != i) {\n            int sumDivisors2 = 1;\n            for (int j = 2; j * j <= sumDivisors1; ++j) {\n                if (sumDivisors1 % j == 0) {\n                    sumDivisors2 += j;\n                    if (j != sumDivisors1 / j) {\n                        sumDivisors2 += sumDivisors1 / j;\n                    }\n                }\n            }\n            if (sumDivisors2 == i && i < sumDivisors1) {\n                sum += i + sumDivisors1;\n            }\n        }\n    }\n    return sum;\n}", "entry_point": "amicableNumbersSum"}
{"task_id": "MBCPP/125", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n * > findLength(string(\"11000010001\"), 11)\n * 6\n * > findLength(string(\"10111\"), 5)\n * 1\n * > findLength(string(\"11011101100101\"), 14)\n * 2\n */\nint findLength(string str, int n) {\n    int max_diff = -1;\n    int count_0 = 0, count_1 = 0;\n    for (int i = 0; i < n; i++) {\n        if (str[i] == '0')\n            count_0++;\n        else\n            count_1++;\n        int current_diff = count_0 - count_1;\n        if (current_diff > max_diff)\n            max_diff = current_diff;\n        if (current_diff < 0) {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    return max_diff;\n}", "entry_point": "findLength"}
{"task_id": "MBCPP/126", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of common divisors of two given numbers.\n * > sum(10, 15)\n * 6\n * > sum(100, 150)\n * 93\n * > sum(4, 6)\n * 3\n */\nint sum(int a, int b) {\n    int result = 0;\n    int min_num = min(a, b);\n    for (int i = 1; i <= min_num; ++i) {\n        if (a % i == 0 && b % i == 0) {\n            result += i;\n        }\n    }\n    return result;\n}", "entry_point": "sum"}
{"task_id": "MBCPP/127", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two integers without using the * operator in c++.\n * > multiplyInt(10, 20)\n * 200\n * > multiplyInt(5, 10)\n * 50\n * > multiplyInt(4, 8)\n * 32\n */\nint multiplyInt(int x, int y) {\n    int result = 0;\n    while (y > 0) {\n        if (y & 1)\n            result += x;\n        x = x << 1;\n        y = y >> 1;\n    }\n    return result;\n}", "entry_point": "multiplyInt"}
{"task_id": "MBCPP/128", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to shortlist words that are longer than n from a given list of words.\n * > longWords(3, string(\"python is a programming language\"))\n * {string(\"python\"), string(\"programming\"), string(\"language\")}\n * > longWords(2, string(\"writing a program\"))\n * {string(\"writing\"), string(\"program\")}\n * > longWords(5, string(\"sorting list\"))\n * {string(\"sorting\")}\n */\nvector<string> longWords(int n, string str) {\n    vector<string> result;\n    string word;\n    istringstream iss(str);\n    while (iss >> word) {\n        if (word.length() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "entry_point": "longWords"}
{"task_id": "MBCPP/129", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate magic square.\n * > magicSquareTest(vector<vector<int>>{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}})\n * true\n * > magicSquareTest(vector<vector<int>>{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}})\n * false\n */\nbool magicSquareTest(vector<vector<int>> myMatrix) {\n    int n = myMatrix.size();\n    if (n == 0) return false;\n    for (const auto& row : myMatrix) {\n        if (row.size() != n) return false;\n    }\n\n    int magicSum = n * (n * n + 1) / 2;\n\n    // Check rows\n    for (int i = 0; i < n; ++i) {\n        int sum = 0;\n        for (int j = 0; j < n; ++j) {\n            sum += myMatrix[i][j];\n        }\n        if (sum != magicSum) return false;\n    }\n\n    // Check columns\n    for (int j = 0; j < n; ++j) {\n        int sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += myMatrix[i][j];\n        }\n        if (sum != magicSum) return false;\n    }\n\n    // Check main diagonal\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += myMatrix[i][i];\n    }\n    if (sum != magicSum) return false;\n\n    // Check secondary diagonal\n    sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += myMatrix[i][n - i - 1];\n    }\n    if (sum != magicSum) return false;\n\n    return true;\n}", "entry_point": "magicSquareTest"}
{"task_id": "MBCPP/130", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum frequency in a given list.\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2})\n * {2, 5}\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18})\n * {8, 2}\n * > maxOccurrences(vector<int>{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10})\n * {20, 3}\n */\nvector<int> maxOccurrences(vector<int> nums) {\n    unordered_map<int, int> freqMap;\n    for (int num : nums) {\n        freqMap[num]++;\n    }\n\n    int maxFreq = 0;\n    int maxNum = 0;\n    for (auto& pair : freqMap) {\n        if (pair.second > maxFreq) {\n            maxFreq = pair.second;\n            maxNum = pair.first;\n        }\n    }\n\n    return {maxNum, maxFreq};\n}", "entry_point": "maxOccurrences"}
{"task_id": "MBCPP/131", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse only the vowels of a given string.\n * > reverseVowels(string(\"Python\"))\n * string(\"Python\")\n * > reverseVowels(string(\"USA\"))\n * string(\"ASU\")\n * > reverseVowels(string(\"ab\"))\n * string(\"ab\")\n */\nstring reverseVowels(string str1) {\n    string vowels = \"aeiouAEIOU\";\n    int left = 0, right = str1.length() - 1;\n    while (left < right) {\n        while (left < right && vowels.find(str1[left]) == string::npos) {\n            left++;\n        }\n        while (left < right && vowels.find(str1[right]) == string::npos) {\n            right--;\n        }\n        if (left < right) {\n            swap(str1[left], str1[right]);\n            left++;\n            right--;\n        }\n    }\n    return str1;\n}", "entry_point": "reverseVowels"}
{"task_id": "MBCPP/132", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple to a string.\n * > tupString(vector<string>{string(\"e\"), string(\"x\"), string(\"e\"), string(\"r\"), string(\"c\"), string(\"i\"), string(\"s\"), string(\"e\"), string(\"s\")})\n * string(\"exercises\")\n * > tupString(vector<string>{string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")})\n * string(\"python\")\n * > tupString(vector<string>{string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")})\n * string(\"program\")\n */\nstring tupString(vector<string> tup1) {\n    string result;\n    for (const auto& s : tup1) {\n        result += s;\n    }\n    return result;\n}", "entry_point": "tupString"}
{"task_id": "MBCPP/133", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n * > sumNegativenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * -32\n * > sumNegativenum(vector<int>{10, 15, -14, 13, -18, 12, -20})\n * -52\n * > sumNegativenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n * -894\n */\nint sumNegativenum(vector<int> nums) {\n    return accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {\n        return num < 0 ? sum + num : sum;\n    });\n}", "entry_point": "sumNegativenum"}
{"task_id": "MBCPP/134", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the last element of given array is even or odd after performing an operation p times.\n * > checkLast(vector<int>{5, 7, 10}, 3, 1)\n * string(\"ODD\")\n * > checkLast(vector<int>{2, 3}, 2, 3)\n * string(\"EVEN\")\n * > checkLast(vector<int>{1, 2, 3}, 3, 1)\n * string(\"ODD\")\n */\nstring checkLast(vector<int> arr, int n, int p) {\n    for (int i = 0; i < p; i++) {\n        for (int j = 0; j < n - 1; j++) {\n            arr[j] += arr[j + 1];\n        }\n    }\n    if (arr[n - 1] % 2 == 0) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }\n}", "entry_point": "checkLast"}
{"task_id": "MBCPP/135", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth hexagonal number.\n * > hexagonalNum(10)\n * 190\n * > hexagonalNum(5)\n * 45\n * > hexagonalNum(7)\n * 91\n */\nint hexagonalNum(int n) {\n    return n * (2 * n - 1);\n}", "entry_point": "hexagonalNum"}
{"task_id": "MBCPP/136", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate electricity bill.\n * > calElectbill(75)\n * 246.25\n * > calElectbill(265)\n * 1442.75\n * > calElectbill(100)\n * 327.5\n */\ndouble calElectbill(int units) {\n    double bill = 0;\n    if (units <= 50) {\n        bill = units * 1.75;\n    } else if (units <= 150) {\n        bill = 50 * 1.75 + (units - 50) * 2.25;\n    } else if (units <= 250) {\n        bill = 50 * 1.75 + 100 * 2.25 + (units - 150) * 3.0;\n    } else {\n        bill = 50 * 1.75 + 100 * 2.25 + 100 * 3.0 + (units - 250) * 3.5;\n    }\n    return bill;\n}", "entry_point": "calElectbill"}
{"task_id": "MBCPP/137", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of zeroes in an array of integers.\n * > zeroCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.15\n * > zeroCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.0\n * > zeroCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.0\n */\ndouble zeroCount(vector<int> nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num == 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "entry_point": "zeroCount"}
{"task_id": "MBCPP/138", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * > isSumOfPowersOfTwo(10)\n * true\n * > isSumOfPowersOfTwo(7)\n * false\n * > isSumOfPowersOfTwo(14)\n * true\n */\nbool isSumOfPowersOfTwo(int n) {\n    if (n == 0)\n        return false;\n    while (n > 0) {\n        if ((n & 1) == 0)\n            return false;\n        n >>= 1;\n    }\n    return true;\n}", "entry_point": "isSumOfPowersOfTwo"}
{"task_id": "MBCPP/139", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the circumference of a circle.\n * > circleCircumference(10)\n * 62.830000000000005\n * > circleCircumference(5)\n * 31.415000000000003\n * > circleCircumference(4)\n * 25.132\n */\ndouble circleCircumference(int r) {\n    return 2 * M_PI * r;\n}", "entry_point": "circleCircumference"}
{"task_id": "MBCPP/140", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract elements that occur singly in the given tuple list.\n * > extractSingly(vector<vector<int>>{{3, 4, 5}, {4, 5, 7}, {1, 4}})\n * {3, 4, 5, 7, 1}\n * > extractSingly(vector<vector<int>>{{1, 2, 3}, {4, 2, 3}, {7, 8}})\n * {1, 2, 3, 4, 7, 8}\n * > extractSingly(vector<vector<int>>{{7, 8, 9}, {10, 11, 12}, {10, 11}})\n * {7, 8, 9, 10, 11, 12}\n */\nvector<int> extractSingly(vector<vector<int>> testList) {\n    unordered_map<int, int> freqMap;\n    for (const auto& sublist : testList) {\n        for (int num : sublist) {\n            freqMap[num]++;\n        }\n    }\n    vector<int> result;\n    for (const auto& pair : freqMap) {\n        if (pair.second == 1) {\n            result.push_back(pair.first);\n        }\n    }\n    return result;\n}", "entry_point": "extractSingly"}
{"task_id": "MBCPP/141", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using pancake sort.\n * > pancakeSort(vector<int>{15, 79, 25, 38, 69})\n * {15, 25, 38, 69, 79}\n * > pancakeSort(vector<int>{98, 12, 54, 36, 85})\n * {12, 36, 54, 85, 98}\n * > pancakeSort(vector<int>{41, 42, 32, 12, 23})\n * {12, 23, 32, 41, 42}\n */\nvector<int> pancakeSort(vector<int> nums) {\n    int n = nums.size();\n    for (int curr_size = n; curr_size > 1; --curr_size) {\n        int max_idx = max_element(nums.begin(), nums.begin() + curr_size) - nums.begin();\n        if (max_idx != curr_size - 1) {\n            reverse(nums.begin(), nums.begin() + max_idx + 1);\n            reverse(nums.begin(), nums.begin() + curr_size);\n        }\n    }\n    return nums;\n}", "entry_point": "pancakeSort"}
{"task_id": "MBCPP/142", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in three given lists.\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9}, vector<int>{2, 1, 3, 1, 2, 6, 7, 9})\n * 3\n * > countSamepair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 4\n * > countSamepair(vector<int>{1, 2, 3, 4, 2, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 8}, vector<int>{2, 1, 3, 1, 2, 6, 7, 8})\n * 5\n */\nint countSamepair(vector<int> list1, vector<int> list2, vector<int> list3) {\n    int count = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countSamepair"}
{"task_id": "MBCPP/144", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of absolute differences in all pairs of the given array.\n * > sumPairs(vector<int>{1, 8, 9, 15, 16}, 5)\n * 74\n * > sumPairs(vector<int>{1, 2, 3, 4}, 4)\n * 10\n * > sumPairs(vector<int>{1, 2, 3, 4, 5, 7, 9, 11, 14}, 9)\n * 188\n */\nint sumPairs(vector<int> arr, int n) {\n    sort(arr.begin(), arr.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i] * i - arr[i] * (n - i - 1);\n    }\n    return sum;\n}", "entry_point": "sumPairs"}
{"task_id": "MBCPP/145", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum difference between any two elements in a given array.\n * > maxAbsDiff(vector<int>{2, 1, 5, 3}, 4)\n * 4\n * > maxAbsDiff(vector<int>{9, 3, 2, 5, 1}, 5)\n * 8\n * > maxAbsDiff(vector<int>{3, 2, 1}, 3)\n * 2\n */\nint maxAbsDiff(vector<int> arr, int n) {\n    if (n < 2)\n        return 0;\n    \n    int min_val = arr[0], max_val = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min_val)\n            min_val = arr[i];\n        if (arr[i] > max_val)\n            max_val = arr[i];\n    }\n    \n    return max_val - min_val;\n}", "entry_point": "maxAbsDiff"}
{"task_id": "MBCPP/146", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of total characters in a string.\n * > asciiValueString(string(\"python\"))\n * 112\n * > asciiValueString(string(\"Program\"))\n * 80\n * > asciiValueString(string(\"Language\"))\n * 76\n */\nint asciiValueString(string str1) {\n    int sum = 0;\n    for (char ch : str1) {\n        sum += ch;\n    }\n    return sum;\n}", "entry_point": "asciiValueString"}
{"task_id": "MBCPP/147", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum total path sum in the given triangle.\n * > maxPathSum(vector<vector<int>>{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2)\n * 14\n * > maxPathSum(vector<vector<int>>{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2)\n * 24\n * > maxPathSum(vector<vector<int>>{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2)\n * 53\n */\nint maxPathSum(vector<vector<int>> tri, int m, int n) {\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            if (i + 1 <= m) {\n                tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n            }\n        }\n    }\n    return tri[0][0];\n}", "entry_point": "maxPathSum"}
{"task_id": "MBCPP/148", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide a number into two parts such that the sum of digits is maximum.\n * > sumDigitsTwoparts(35)\n * 17\n * > sumDigitsTwoparts(7)\n * 7\n * > sumDigitsTwoparts(100)\n * 19\n */\nint sumDigitsTwoparts(int n) {\n    string s = to_string(n);\n    int maxSum = 0;\n    for (size_t i = 1; i < s.length(); ++i) {\n        int a = stoi(s.substr(0, i));\n        int b = stoi(s.substr(i));\n        maxSum = max(maxSum, a + b);\n    }\n    return max(maxSum, n);\n}", "entry_point": "sumDigitsTwoparts"}
{"task_id": "MBCPP/149", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 4, 5, 3, 2}, 7)\n * 6\n * > longestSubseqWithDiffOne(vector<int>{10, 9, 4, 5, 4, 8, 6}, 7)\n * 3\n * > longestSubseqWithDiffOne(vector<int>{1, 2, 3, 2, 3, 7, 2, 1}, 8)\n * 7\n */\nint longestSubseqWithDiffOne(vector<int> arr, int n) {\n    vector<int> dp(n, 1);\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (abs(arr[i] - arr[j]) == 1 && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "entry_point": "longestSubseqWithDiffOne"}
{"task_id": "MBCPP/150", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find whether the given number is present in the infinite sequence or not.\n * > doesContainB(1, 7, 3)\n * true\n * > doesContainB(1, -3, 5)\n * false\n * > doesContainB(3, 2, 5)\n * false\n */\nbool doesContainB(int a, int b, int c) {\n    if (c == 0) {\n        return a == b;\n    }\n    if ((b - a) % c != 0) {\n        return false;\n    }\n    int n = (b - a) / c;\n    return n >= 0;\n}", "entry_point": "doesContainB"}
{"task_id": "MBCPP/151", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is co-prime or not.\n * > isCoprime(17, 13)\n * true\n * > isCoprime(15, 21)\n * false\n * > isCoprime(25, 45)\n * false\n */\nbool isCoprime(int x, int y) {\n    if (x == 0 || y == 0)\n        return false;\n    int gcd = __gcd(x, y);\n    return gcd == 1;\n}", "entry_point": "isCoprime"}
{"task_id": "MBCPP/152", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using merge sort.\n * > mergeSort(vector<int>{3, 4, 2, 6, 5, 7, 1, 9})\n * {1, 2, 3, 4, 5, 6, 7, 9}\n * > mergeSort(vector<int>{7, 25, 45, 78, 11, 33, 19})\n * {7, 11, 19, 25, 33, 45, 78}\n * > mergeSort(vector<int>{3, 1, 4, 9, 8})\n * {1, 3, 4, 8, 9}\n */\nvector<int> mergeSort(vector<int> x) {\n    if (x.size() <= 1)\n        return x;\n\n    int mid = x.size() / 2;\n    vector<int> left(x.begin(), x.begin() + mid);\n    vector<int> right(x.begin() + mid, x.end());\n\n    left = mergeSort(left);\n    right = mergeSort(right);\n\n    vector<int> result;\n    int i = 0, j = 0;\n    while (i < left.size() && j < right.size()) {\n        if (left[i] < right[j]) {\n            result.push_back(left[i]);\n            i++;\n        } else {\n            result.push_back(right[j]);\n            j++;\n        }\n    }\n\n    while (i < left.size()) {\n        result.push_back(left[i]);\n        i++;\n    }\n\n    while (j < right.size()) {\n        result.push_back(right[j]);\n        j++;\n    }\n\n    return result;\n}", "entry_point": "mergeSort"}
{"task_id": "MBCPP/153", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the vertex of a parabola.\n * > parabolaVertex(5, 3, 2)\n * {-0.3, 1.55}\n * > parabolaVertex(9, 8, 4)\n * {-0.4444444444444444, 2.2222222222222223}\n * > parabolaVertex(2, 4, 6)\n * {-1.0, 4.0}\n */\nvector<double> parabolaVertex(int a, int b, int c) {\n    vector<double> vertex(2);\n    double x = -b / (2.0 * a);\n    double y = a * x * x + b * x + c;\n    vertex[0] = x;\n    vertex[1] = y;\n    return vertex;\n}", "entry_point": "parabolaVertex"}
{"task_id": "MBCPP/154", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract every specified element from a given two dimensional list.\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0)\n * {1, 4, 7}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2)\n * {3, 6, 9}\n * > specifiedElement(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 3)\n * {2, 2, 5}\n */\nvector<int> specifiedElement(vector<vector<int>> nums, int n) {\n    vector<int> result;\n    for (const auto& row : nums) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "entry_point": "specifiedElement"}
{"task_id": "MBCPP/155", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all even bits of a given number.\n * > evenBitToggleNumber(10)\n * 0\n * > evenBitToggleNumber(20)\n * 30\n * > evenBitToggleNumber(30)\n * 20\n */\nint evenBitToggleNumber(int n) {\n    int mask = 0xAAAAAAAA; // Binary: 10101010...1010 (all even bits set)\n    return n ^ mask; // XOR with mask to toggle even bits\n}", "entry_point": "evenBitToggleNumber"}
{"task_id": "MBCPP/156", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n * > tupleIntStr(vector<vector<string>>{{string(\"333\"), string(\"33\")}, {string(\"1416\"), string(\"55\")}})\n * {{333, 33}, {1416, 55}}\n * > tupleIntStr(vector<vector<string>>{{string(\"999\"), string(\"99\")}, {string(\"1000\"), string(\"500\")}})\n * {{999, 99}, {1000, 500}}\n * > tupleIntStr(vector<vector<string>>{{string(\"666\"), string(\"66\")}, {string(\"1500\"), string(\"555\")}})\n * {{666, 66}, {1500, 555}}\n */\nvector<vector<int>> tupleIntStr(vector<vector<string>> tupleStr) {\n    vector<vector<int>> result;\n    for (const auto& row : tupleStr) {\n        vector<int> intRow;\n        for (const auto& str : row) {\n            intRow.push_back(stoi(str));\n        }\n        result.push_back(intRow);\n    }\n    return result;\n}", "entry_point": "tupleIntStr"}
{"task_id": "MBCPP/158", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find k number of operations required to make all elements equal.\n * > minOps(vector<int>{2, 2, 2, 2}, 4, 3)\n * 0\n * > minOps(vector<int>{4, 2, 6, 8}, 4, 3)\n * -1\n * > minOps(vector<int>{21, 33, 9, 45, 63}, 5, 6)\n * 24\n */\nint minOps(vector<int> arr, int n, int k) {\n    if (n == 0)\n        return 0;\n    \n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    \n    if (sum % n != 0)\n        return -1;\n    \n    int target = sum / n;\n    int ops = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (abs(arr[i] - target) % k != 0)\n            return -1;\n        ops += abs(arr[i] - target) / k;\n    }\n    \n    return ops;\n}", "entry_point": "minOps"}
{"task_id": "MBCPP/159", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the season for the given month and day.\n * > monthSeason(string(\"January\"), 4)\n * string(\"winter\")\n * > monthSeason(string(\"October\"), 28)\n * string(\"autumn\")\n * > monthSeason(string(\"June\"), 6)\n * string(\"spring\")\n */\nstring monthSeason(string month, int days) {\n    if (month == \"December\" || month == \"January\" || month == \"February\") {\n        return \"winter\";\n    } else if (month == \"March\" || month == \"April\" || month == \"May\") {\n        return \"spring\";\n    } else if (month == \"June\" || month == \"July\" || month == \"August\") {\n        return \"summer\";\n    } else if (month == \"September\" || month == \"October\" || month == \"November\") {\n        return \"autumn\";\n    } else {\n        return \"unknown\";\n    }\n}", "entry_point": "monthSeason"}
{"task_id": "MBCPP/161", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all elements from a given list present in another list.\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{2, 4, 6, 8})\n * {1, 3, 5, 7, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{1, 3, 5, 7})\n * {2, 4, 6, 8, 9, 10}\n * > removeElements(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, vector<int>{5, 7})\n * {1, 2, 3, 4, 6, 8, 9, 10}\n */\nvector<int> removeElements(vector<int> list1, vector<int> list2) {\n    unordered_set<int> toRemove(list2.begin(), list2.end());\n    vector<int> result;\n    for (int num : list1) {\n        if (toRemove.find(num) == toRemove.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "removeElements"}
{"task_id": "MBCPP/162", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n * > sumSeries(6)\n * 12\n * > sumSeries(10)\n * 30\n * > sumSeries(9)\n * 25\n */\nint sumSeries(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n;\n        n -= 2;\n    }\n    return sum;\n}", "entry_point": "sumSeries"}
{"task_id": "MBCPP/163", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the area of a regular polygon.\n * > areaPolygon(4, 20)\n * 400.00000000000006\n * > areaPolygon(10, 15)\n * 1731.1969896610804\n * > areaPolygon(9, 7)\n * 302.90938549487214\n */\ndouble areaPolygon(int s, int l) {\n    double n = static_cast<double>(s);\n    double a = static_cast<double>(l);\n    return (n * a * a) / (4 * tan(M_PI / n));\n}", "entry_point": "areaPolygon"}
{"task_id": "MBCPP/164", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the sum of divisors are same or not.\n * > areequivalent(36, 57)\n * false\n * > areequivalent(2, 4)\n * false\n * > areequivalent(23, 47)\n * true\n */\nbool areequivalent(int num1, int num2) {\n    auto sumOfDivisors = [](int n) {\n        if (n == 1) return 1;\n        int sum = 1 + n;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                if (i == n / i)\n                    sum += i;\n                else\n                    sum += i + n / i;\n            }\n        }\n        return sum;\n    };\n    \n    return sumOfDivisors(num1) == sumOfDivisors(num2);\n}", "entry_point": "areequivalent"}
{"task_id": "MBCPP/165", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n * > countCharPosition(string(\"xbcefg\"))\n * 2\n * > countCharPosition(string(\"ABcED\"))\n * 3\n * > countCharPosition(string(\"AbgdeF\"))\n * 5\n */\nint countCharPosition(string str1) {\n    int count = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        char ch = str1[i];\n        if (isupper(ch) && (ch - 'A' == i)) {\n            count++;\n        } else if (islower(ch) && (ch - 'a' == i)) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countCharPosition"}
{"task_id": "MBCPP/166", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an even number.\n * > findEvenPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 4\n * > findEvenPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 9\n * > findEvenPair(vector<int>{1, 2, 3}, 3)\n * 1\n */\nint findEvenPair(vector<int> a, int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "findEvenPair"}
{"task_id": "MBCPP/167", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find smallest power of 2 greater than or equal to n.\n * > nextPowerOf2(0)\n * 1\n * > nextPowerOf2(5)\n * 8\n * > nextPowerOf2(17)\n * 32\n */\nint nextPowerOf2(int n) {\n    if (n == 0)\n        return 1;\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    n++;\n    return n;\n}", "entry_point": "nextPowerOf2"}
{"task_id": "MBCPP/168", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of a number in a given array.\n * > frequency(vector<int>{1, 2, 3}, 4)\n * 0\n * > frequency(vector<int>{1, 2, 2, 3, 3, 3, 4}, 3)\n * 3\n * > frequency(vector<int>{0, 1, 2, 3, 1, 2}, 1)\n * 2\n */\nint frequency(vector<int> a, int x) {\n    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "frequency"}
{"task_id": "MBCPP/169", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the nth pell number.\n * > getPell(4)\n * 12\n * > getPell(7)\n * 169\n * > getPell(8)\n * 408\n */\nint getPell(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int a = 0, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "entry_point": "getPell"}
{"task_id": "MBCPP/170", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sum of the numbers in a list between the indices of a specified range.\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10)\n * 29\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7)\n * 16\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10)\n * 38\n */\nint sumRangeList(vector<int> list1, int m, int n) {\n    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}", "entry_point": "sumRangeList"}
{"task_id": "MBCPP/171", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a pentagon.\n * > perimeterPentagon(5)\n * 25\n * > perimeterPentagon(10)\n * 50\n * > perimeterPentagon(15)\n * 75\n */\nint perimeterPentagon(int a) {\n    return 5 * a;\n}", "entry_point": "perimeterPentagon"}
{"task_id": "MBCPP/172", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n * > countOccurance(string(\"letstdlenstdporstd\"))\n * 3\n * > countOccurance(string(\"truststdsolensporsd\"))\n * 1\n * > countOccurance(string(\"makestdsostdworthit\"))\n * 2\n */\nint countOccurance(string s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countOccurance"}
{"task_id": "MBCPP/173", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from a string.\n * > removeSplchar(string(\"python  @#&^%$*program123\"))\n * string(\"pythonprogram123\")\n * > removeSplchar(string(\"python %^$@!^&*()  programming24%$^^()    language\"))\n * string(\"pythonprogramming24language\")\n * > removeSplchar(string(\"python   ^%&^()(+_)(_^&67)                  program\"))\n * string(\"python67program\")\n */\nstring removeSplchar(string text) {\n    string result;\n    for (char ch : text) {\n        if (isalnum(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}", "entry_point": "removeSplchar"}
{"task_id": "MBCPP/175", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to verify validity of a string of parentheses.\n * > isValidParenthese(string(\"(){}[]\"))\n * true\n * > isValidParenthese(string(\"()[{)}\"))\n * false\n * > isValidParenthese(string(\"()\"))\n * true\n */\nbool isValidParenthese(string str1) {\n    stack<char> s;\n    for (char c : str1) {\n        if (c == '(' || c == '{' || c == '[') {\n            s.push(c);\n        } else {\n            if (s.empty()) return false;\n            char top = s.top();\n            s.pop();\n            if ((c == ')' && top != '(') || \n                (c == '}' && top != '{') || \n                (c == ']' && top != '[')) {\n                return false;\n            }\n        }\n    }\n    return s.empty();\n}", "entry_point": "isValidParenthese"}
{"task_id": "MBCPP/176", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a triangle.\n * > perimeterTriangle(10, 20, 30)\n * 60\n * > perimeterTriangle(3, 4, 5)\n * 12\n * > perimeterTriangle(25, 35, 45)\n * 105\n */\nint perimeterTriangle(int a, int b, int c) {\n    return a + b + c;\n}", "entry_point": "perimeterTriangle"}
{"task_id": "MBCPP/177", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find two distinct numbers such that their lcm lies within the given range.\n * > answer(3, 8)\n * {3, 6}\n * > answer(2, 6)\n * {2, 4}\n * > answer(1, 3)\n * {1, 2}\n */\nvector<int> answer(int l, int r) {\n    vector<int> result;\n    for (int i = l; i <= r; ++i) {\n        for (int j = i + 1; j <= r; ++j) {\n            int lcm = (i * j) / __gcd(i, j);\n            if (lcm >= l && lcm <= r) {\n                result.push_back(i);\n                result.push_back(j);\n                return result;\n            }\n        }\n    }\n    return result;\n}", "entry_point": "answer"}
{"task_id": "MBCPP/178", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string.\n * > stringLiterals(vector<string>{string(\"language\")}, string(\"python language\"))\n * string(\"Matched!\")\n * > stringLiterals(vector<string>{string(\"program\")}, string(\"python language\"))\n * string(\"Not Matched!\")\n * > stringLiterals(vector<string>{string(\"python\")}, string(\"programming language\"))\n * string(\"Not Matched!\")\n */\nstring stringLiterals(vector<string> patterns, string text) {\n    for (const auto& pattern : patterns) {\n        if (text.find(pattern) != string::npos) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "entry_point": "stringLiterals"}
{"task_id": "MBCPP/179", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is a keith number or not.\n * > isNumKeith(14)\n * true\n * > isNumKeith(12)\n * false\n * > isNumKeith(197)\n * true\n */\nbool isNumKeith(int x) {\n    if (x < 10) return false;\n    \n    vector<int> sequence;\n    int temp = x;\n    while (temp > 0) {\n        sequence.insert(sequence.begin(), temp % 10);\n        temp /= 10;\n    }\n    \n    int n = sequence.size();\n    int sum = 0;\n    \n    while (sum < x) {\n        sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += sequence[sequence.size() - n + i];\n        }\n        sequence.push_back(sum);\n    }\n    \n    return sum == x;\n}", "entry_point": "isNumKeith"}
{"task_id": "MBCPP/181", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common prefix in the given set of strings.\n * > commonPrefix(vector<string>{string(\"tablets\"), string(\"tables\"), string(\"taxi\"), string(\"tamarind\")}, 4)\n * string(\"ta\")\n * > commonPrefix(vector<string>{string(\"apples\"), string(\"ape\"), string(\"april\")}, 3)\n * string(\"ap\")\n * > commonPrefix(vector<string>{string(\"teens\"), string(\"teenager\"), string(\"teenmar\")}, 3)\n * string(\"teen\")\n */\nstring commonPrefix(vector<string> arr, int n) {\n    if (n == 0)\n        return \"\";\n    string prefix = arr[0];\n    for (int i = 1; i < n; i++) {\n        while (arr[i].find(prefix) != 0) {\n            prefix = prefix.substr(0, prefix.length() - 1);\n            if (prefix.empty())\n                return \"\";\n        }\n    }\n    return prefix;\n}", "entry_point": "commonPrefix"}
{"task_id": "MBCPP/183", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count all the distinct pairs having a difference of k in any array.\n * > countPairs(vector<int>{1, 5, 3, 4, 2}, 5, 3)\n * 2\n * > countPairs(vector<int>{8, 12, 16, 4, 0, 20}, 6, 4)\n * 5\n * > countPairs(vector<int>{2, 4, 1, 3, 4}, 5, 2)\n * 3\n */\nint countPairs(vector<int> arr, int n, int k) {\n    sort(arr.begin(), arr.end());\n    int count = 0;\n    int left = 0, right = 1;\n    while (right < n) {\n        int diff = arr[right] - arr[left];\n        if (diff == k) {\n            count++;\n            left++;\n            right++;\n        } else if (diff < k) {\n            right++;\n        } else {\n            left++;\n        }\n        if (left == right) {\n            right++;\n        }\n    }\n    return count;\n}", "entry_point": "countPairs"}
{"task_id": "MBCPP/184", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all the values in a list that are greater than a specified number.\n * > greaterSpecificnum(vector<int>{220, 330, 500}, 200)\n * true\n * > greaterSpecificnum(vector<int>{12, 17, 21}, 20)\n * false\n * > greaterSpecificnum(vector<int>{1, 2, 3, 4}, 10)\n * false\n */\nbool greaterSpecificnum(vector<int> list, int num) {\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] > num) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "greaterSpecificnum"}
{"task_id": "MBCPP/185", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the focus of a parabola.\n * > parabolaFocus(5, 3, 2)\n * {-0.3, 1.6}\n * > parabolaFocus(9, 8, 4)\n * {-0.4444444444444444, 2.25}\n * > parabolaFocus(2, 4, 6)\n * {-1.0, 4.125}\n */\nvector<double> parabolaFocus(int a, int b, int c) {\n    double x = -b / (2.0 * a);\n    double y = c - (b * b) / (4.0 * a);\n    return {x, y};\n}", "entry_point": "parabolaFocus"}
{"task_id": "MBCPP/186", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search some literals strings in a string by using regex.\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"fox\")})\n * string(\"Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"horse\")})\n * string(\"Not Matched!\")\n * > checkLiterals(string(\"The quick brown fox jumps over the lazy dog.\"), vector<string>{string(\"lazy\")})\n * string(\"Matched!\")\n */\nstring checkLiterals(string text, vector<string> patterns) {\n    for (const auto& pattern : patterns) {\n        regex r(pattern);\n        if (regex_search(text, r)) {\n            return \"Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}", "entry_point": "checkLiterals"}
{"task_id": "MBCPP/187", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given two sequences.\n * > longestCommonSubsequence(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7)\n * 4\n * > longestCommonSubsequence(string(\"ABCDGH\"), string(\"AEDFHR\"), 6, 6)\n * 3\n * > longestCommonSubsequence(string(\"AXYT\"), string(\"AYZX\"), 4, 4)\n * 2\n */\nint longestCommonSubsequence(string x, string y, int m, int n) {\n    int dp[m + 1][n + 1];\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (x[i - 1] == y[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[m][n];\n}", "entry_point": "longestCommonSubsequence"}
{"task_id": "MBCPP/188", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by product of two squares or not.\n * > prodSquare(25)\n * false\n * > prodSquare(30)\n * false\n * > prodSquare(16)\n * true\n */\nbool prodSquare(int n) {\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            int j = n / i;\n            int sqrt_i = sqrt(i);\n            int sqrt_j = sqrt(j);\n            if (sqrt_i * sqrt_i == i && sqrt_j * sqrt_j == j) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "entry_point": "prodSquare"}
{"task_id": "MBCPP/189", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first missing positive number.\n * > firstMissingPositive(vector<int>{1, 2, 3, -1, 5}, 5)\n * 4\n * > firstMissingPositive(vector<int>{0, -1, -2, 1, 5, 8}, 6)\n * 2\n * > firstMissingPositive(vector<int>{0, 1, 2, 5, -8}, 5)\n * 3\n */\nint firstMissingPositive(vector<int> arr, int n) {\n    for (int i = 0; i < n; i++) {\n        while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {\n            swap(arr[i], arr[arr[i] - 1]);\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}", "entry_point": "firstMissingPositive"}
{"task_id": "MBCPP/190", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of integral co-ordinates that lie inside a square.\n * > countIntgralPoints(1, 1, 4, 4)\n * 4\n * > countIntgralPoints(1, 2, 1, 2)\n * 1\n * > countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nint countIntgralPoints(int x1, int y1, int x2, int y2) {\n    if (x1 > x2) swap(x1, x2);\n    if (y1 > y2) swap(y1, y2);\n    \n    int width = x2 - x1;\n    int height = y2 - y1;\n    \n    if (width == 0 || height == 0) return 0;\n    \n    return (width - 1) * (height - 1);\n}", "entry_point": "countIntgralPoints"}
{"task_id": "MBCPP/191", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n * > checkMonthnumber(string(\"February\"))\n * false\n * > checkMonthnumber(string(\"June\"))\n * true\n * > checkMonthnumber(string(\"April\"))\n * true\n */\nbool checkMonthnumber(string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\")\n        return true;\n    else\n        return false;\n}", "entry_point": "checkMonthnumber"}
{"task_id": "MBCPP/192", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a string has atleast one letter and one number.\n * > checkString(string(\"thishasboth29\"))\n * true\n * > checkString(string(\"python\"))\n * false\n */\nbool checkString(string str) {\n    bool hasLetter = false;\n    bool hasNumber = false;\n    for (char ch : str) {\n        if (isalpha(ch)) {\n            hasLetter = true;\n        } else if (isdigit(ch)) {\n            hasNumber = true;\n        }\n        if (hasLetter && hasNumber) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "checkString"}
{"task_id": "MBCPP/193", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the duplicates from the given tuple.\n * > removeTuple(vector<int>{1, 3, 5, 2, 3, 5, 1, 1, 3})\n * {1, 2, 3, 5}\n * > removeTuple(vector<int>{2, 3, 4, 4, 5, 6, 6, 7, 8, 8})\n * {2, 3, 4, 5, 6, 7, 8}\n * > removeTuple(vector<int>{11, 12, 13, 11, 11, 12, 14, 13})\n * {11, 12, 13, 14}\n */\nvector<int> removeTuple(vector<int> testTup) {\n    unordered_set<int> seen;\n    vector<int> result;\n    for (int num : testTup) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "removeTuple"}
{"task_id": "MBCPP/194", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert octal number to decimal number.\n * > octalToDecimal(25)\n * 21\n * > octalToDecimal(30)\n * 24\n * > octalToDecimal(40)\n * 32\n */\nint octalToDecimal(int n) {\n    int decimal = 0, i = 0;\n    while (n != 0) {\n        int remainder = n % 10;\n        decimal += remainder * pow(8, i);\n        n /= 10;\n        i++;\n    }\n    return decimal;\n}", "entry_point": "octalToDecimal"}
{"task_id": "MBCPP/195", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first position of an element in a sorted array.\n * > first(vector<int>{1, 2, 3, 4, 5, 6, 6}, 6, 6)\n * 5\n * > first(vector<int>{1, 2, 2, 2, 3, 2, 2, 4, 2}, 2, 9)\n * 1\n * > first(vector<int>{1, 2, 3}, 1, 3)\n * 0\n */\nint first(vector<int> arr, int x, int n) {\n    int low = 0, high = n - 1, res = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            res = mid;\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return res;\n}", "entry_point": "first"}
{"task_id": "MBCPP/196", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the tuples with length k.\n * > removeTuples(vector<vector<int>>{{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1)\n * {{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2)\n * {{1, 2, 3}, {3, 4, 6, 7}}\n * > removeTuples(vector<vector<int>>{{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3)\n * {{4, 3}, {1}}\n */\nvector<vector<int>> removeTuples(vector<vector<int>> testList, int k) {\n    vector<vector<int>> result;\n    for (const auto& tuple : testList) {\n        if (tuple.size() != k) {\n            result.push_back(tuple);\n        }\n    }\n    return result;\n}", "entry_point": "removeTuples"}
{"task_id": "MBCPP/197", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the exponentiation of the given two tuples.\n * > findExponentio(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5})\n * {100000, 4096, 78125, 7776}\n * > findExponentio(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6})\n * {1771561, 78125, 1679616, 117649}\n * > findExponentio(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7})\n * {35831808, 1679616, 40353607, 2097152}\n */\nvector<int> findExponentio(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(pow(testTup1[i], testTup2[i]));\n    }\n    return result;\n}", "entry_point": "findExponentio"}
{"task_id": "MBCPP/198", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest triangle that can be inscribed in an ellipse.\n * > largestTriangle(4, 2)\n * 10.392304845413264\n * > largestTriangle(5, 7)\n * 4.639421805988064\n * > largestTriangle(9, 1)\n * 105.2220865598093\n */\ndouble largestTriangle(int a, int b) {\n    double x = a * sqrt(3) / 2;\n    double y = b * 0.5;\n    return 3 * x * y;\n}", "entry_point": "largestTriangle"}
{"task_id": "MBCPP/199", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find highest power of 2 less than or equal to given number.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\n    if (n < 1)\n        return 0;\n    int res = 1;\n    while (res * 2 <= n) {\n        res *= 2;\n    }\n    return res;\n}", "entry_point": "highestPowerOf2"}
{"task_id": "MBCPP/200", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the maximum values in a given list.\n * > positionMax(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {7}\n * > positionMax(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {7, 8, 9, 10}\n * > positionMax(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {11}\n */\nvector<int> positionMax(vector<int> list1) {\n    vector<int> result;\n    if (list1.empty()) return result;\n    \n    int max_val = *max_element(list1.begin(), list1.end());\n    \n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n            result.push_back(i);\n        }\n    }\n    \n    return result;\n}", "entry_point": "positionMax"}
{"task_id": "MBCPP/201", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the elements in a list are same or not.\n * > chklist(vector<string>{string(\"one\"), string(\"one\"), string(\"one\")})\n * true\n * > chklist(vector<string>{string(\"one\"), string(\"Two\"), string(\"Three\")})\n * false\n * > chklist(vector<string>{string(\"bigdata\"), string(\"python\"), string(\"Django\")})\n * false\n */\nbool chklist(vector<string> lst) {\n    if (lst.empty())\n        return true;\n    \n    string first = lst[0];\n    for (const auto& item : lst) {\n        if (item != first)\n            return false;\n    }\n    return true;\n}", "entry_point": "chklist"}
{"task_id": "MBCPP/202", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove even characters in a string.\n * > removeEven(string(\"python\"))\n * string(\"pto\")\n * > removeEven(string(\"program\"))\n * string(\"porm\")\n * > removeEven(string(\"language\"))\n * string(\"lnug\")\n */\nstring removeEven(string str1) {\n    string result;\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (i % 2 == 0) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "entry_point": "removeEven"}
{"task_id": "MBCPP/203", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the hamming distance between given two integers.\n * > hammingDistance(4, 8)\n * 2\n * > hammingDistance(2, 4)\n * 2\n * > hammingDistance(1, 2)\n * 2\n */\nint hammingDistance(int n1, int n2) {\n    int x = n1 ^ n2;\n    int distance = 0;\n    while (x > 0) {\n        distance += x & 1;\n        x >>= 1;\n    }\n    return distance;\n}", "entry_point": "hammingDistance"}
{"task_id": "MBCPP/204", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occurrence of a given character in a string.\n * > count(string(\"abcc\"), string(\"c\"))\n * 2\n * > count(string(\"ababca\"), string(\"a\"))\n * 3\n * > count(string(\"mnmm0pm\"), string(\"m\"))\n * 4\n */\nint count(string s, string c) {\n    int cnt = 0;\n    for (char ch : s) {\n        if (ch == c[0]) {\n            cnt++;\n        }\n    }\n    return cnt;\n}", "entry_point": "count"}
{"task_id": "MBCPP/205", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the inversions of tuple elements in the given tuple list.\n * > inversionElements(vector<int>{7, 8, 9, 1, 10, 7})\n * {-8, -9, -10, -2, -11, -8}\n * > inversionElements(vector<int>{2, 4, 5, 6, 1, 7})\n * {-3, -5, -6, -7, -2, -8}\n * > inversionElements(vector<int>{8, 9, 11, 14, 12, 13})\n * {-9, -10, -12, -15, -13, -14}\n */\nvector<int> inversionElements(vector<int> testTup) {\n    vector<int> result;\n    for (int num : testTup) {\n        result.push_back(-(num + 1));\n    }\n    return result;\n}", "entry_point": "inversionElements"}
{"task_id": "MBCPP/206", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the adjacent element concatenation in the given tuples.\n * > concatenateElements(vector<string>{string(\"DSP \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"UTS\")})\n * {string(\"DSP IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL UTS\")}\n * > concatenateElements(vector<string>{string(\"RES \"), string(\"IS \"), string(\"BEST \"), string(\"FOR \"), string(\"ALL \"), string(\"QESR\")})\n * {string(\"RES IS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL QESR\")}\n * > concatenateElements(vector<string>{string(\"MSAM\"), string(\"IS \"), string(\"BEST \"), string(\"FOR \", string(\"ALL \"), string(\"SKD\")})\n * {string(\"MSAMIS \"), string(\"IS BEST \"), string(\"BEST FOR \"), string(\"FOR ALL \"), string(\"ALL SKD\")}\n */\nvector<string> concatenateElements(vector<string> testTup) {\n    vector<string> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "entry_point": "concatenateElements"}
{"task_id": "MBCPP/207", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n * > findLongestRepeatingSubseq(string(\"AABEBCDD\"))\n * 3\n * > findLongestRepeatingSubseq(string(\"aabb\"))\n * 2\n * > findLongestRepeatingSubseq(string(\"aab\"))\n * 1\n */\nint findLongestRepeatingSubseq(string str) {\n    int n = str.length();\n    int dp[n+1][n+1];\n    for (int i=0; i<=n; i++) {\n        for (int j=0; j<=n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (str[i-1] == str[j-1] && i != j)\n                dp[i][j] = dp[i-1][j-1] + 1;\n            else\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n][n];\n}", "entry_point": "findLongestRepeatingSubseq"}
{"task_id": "MBCPP/208", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check the given decimal with a precision of 2 by using regex.\n * > isDecimal(string(\"123.11\"))\n * true\n * > isDecimal(string(\"0.21\"))\n * true\n * > isDecimal(string(\"123.1214\"))\n * false\n */\nbool isDecimal(string num) {\n    regex pattern(R\"(^\\d+\\.\\d{2}$)\");\n    return regex_match(num, pattern);\n}", "entry_point": "isDecimal"}
{"task_id": "MBCPP/209", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to delete the smallest element from the given heap and then insert a new item.\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 21)\n * {21, 25, 23, 44, 39, 68, 89}\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 110)\n * {23, 25, 68, 44, 39, 110, 89}\n * > heapReplace(vector<int>{25, 44, 68, 21, 39, 23, 89}, 500)\n * {23, 25, 68, 44, 39, 500, 89}\n */\nvector<int> heapReplace(vector<int> heap, int a) {\n    auto min_it = min_element(heap.begin(), heap.end());\n    heap.erase(min_it);\n    heap.push_back(a);\n    make_heap(heap.begin(), heap.end(), greater<int>());\n    return heap;\n}", "entry_point": "heapReplace"}
{"task_id": "MBCPP/210", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n * > isAllowedSpecificChar(string(\"ABCDEFabcdef123450\"))\n * true\n * > isAllowedSpecificChar(string(\"*&%@#!}{\"))\n * false\n * > isAllowedSpecificChar(string(\"HELLOhowareyou98765\"))\n * true\n */\nbool isAllowedSpecificChar(string str) {\n    regex pattern(\"^[a-zA-Z0-9]*$\");\n    return regex_match(str, pattern);\n}", "entry_point": "isAllowedSpecificChar"}
{"task_id": "MBCPP/211", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numbers whose oth and nth bits are set.\n * > countNum(2)\n * 1\n * > countNum(3)\n * 2\n * > countNum(1)\n * 1\n */\nint countNum(int n) {\n    int count = 0;\n    for (int i = 0; i < (1 << (n + 1)); i++) {\n        if ((i & 1) && (i & (1 << n))) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countNum"}
{"task_id": "MBCPP/212", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of n natural numbers.\n * > fourthPowerSum(2)\n * 17\n * > fourthPowerSum(4)\n * 354\n * > fourthPowerSum(6)\n * 2275\n */\nint fourthPowerSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i * i;\n    }\n    return sum;\n}", "entry_point": "fourthPowerSum"}
{"task_id": "MBCPP/213", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the concatenation of two string tuples.\n * > concatenateStrings(vector<string>{string(\"Manjeet\"), string(\"Nikhil\"), string(\"Akshat\")}, vector<string>{string(\" Singh\"), string(\" Meherwal\"), string(\" Garg\")})\n * {string(\"Manjeet Singh\"), string(\"Nikhil Meherwal\"), string(\"Akshat Garg\")}\n * > concatenateStrings(vector<string>{string(\"Shaik\"), string(\"Ayesha\"), string(\"Sanya\")}, vector<string>{string(\" Dawood\"), string(\" Begum\"), string(\" Singh\")})\n * {string(\"Shaik Dawood\"), string(\"Ayesha Begum\"), string(\"Sanya Singh\")}\n * > concatenateStrings(vector<string>{string(\"Harpreet\"), string(\"Priyanka\"), string(\"Muskan\")}, vector<string>{string(\"Kour\"), string(\" Agarwal\"), string(\"Sethi\")})\n * {string(\"HarpreetKour\"), string(\"Priyanka Agarwal\"), string(\"MuskanSethi\")}\n */\nvector<string> concatenateStrings(vector<string> testTup1, vector<string> testTup2) {\n    vector<string> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] + testTup2[i]);\n    }\n    return result;\n}", "entry_point": "concatenateStrings"}
{"task_id": "MBCPP/214", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert radians to degrees.\n * > degreeRadian(90)\n * 5156.620156177409\n * > degreeRadian(60)\n * 3437.746770784939\n * > degreeRadian(120)\n * 6875.493541569878\n */\ndouble degreeRadian(int radian) {\n    return radian * (180.0 / M_PI);\n}", "entry_point": "degreeRadian"}
{"task_id": "MBCPP/217", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated character in a given string.\n * > firstRepeatedChar(string(\"Google\"))\n * string(\"o\")\n * > firstRepeatedChar(string(\"data\"))\n * string(\"a\")\n * > firstRepeatedChar(string(\"python\"))\n * string(\"\\x00\")\n */\nstring firstRepeatedChar(string str) {\n    unordered_set<char> seen;\n    for (char c : str) {\n        if (seen.find(c) != seen.end()) {\n            return string(1, c);\n        }\n        seen.insert(c);\n    }\n    return string(1, '\\0');\n}", "entry_point": "firstRepeatedChar"}
{"task_id": "MBCPP/218", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum operations required to make two numbers equal.\n * > minOperations(2, 4)\n * 1\n * > minOperations(4, 10)\n * 4\n * > minOperations(1, 4)\n * 3\n */\nint minOperations(int a, int b) {\n    if (a == b)\n        return 0;\n    if (a > b)\n        swap(a, b);\n    int operations = 0;\n    while (a != b) {\n        if (b % 2 == 0 && b / 2 >= a) {\n            b /= 2;\n        } else {\n            b -= 1;\n        }\n        operations++;\n    }\n    return operations;\n}", "entry_point": "minOperations"}
{"task_id": "MBCPP/219", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract maximum and minimum k elements in the given tuple.\n * > extractMinMax(vector<int>{5, 20, 3, 7, 6, 8}, 2)\n * {3, 5, 8, 20}\n * > extractMinMax(vector<int>{4, 5, 6, 1, 2, 7}, 3)\n * {1, 2, 4, 5, 6, 7}\n * > extractMinMax(vector<int>{2, 3, 4, 8, 9, 11, 7}, 4)\n * {2, 3, 4, 7, 8, 9, 11}\n */\nvector<int> extractMinMax(vector<int> testTup, int k) {\n    sort(testTup.begin(), testTup.end());\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(testTup[i]);\n    }\n    for (int i = testTup.size() - k; i < testTup.size(); i++) {\n        result.push_back(testTup[i]);\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "entry_point": "extractMinMax"}
{"task_id": "MBCPP/220", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n * > replaceMaxSpecialchar(string(\"Python language, Programming language.\"), 2)\n * string(\"Python:language: Programming language.\")\n * > replaceMaxSpecialchar(string(\"a b c,d e f\"), 3)\n * string(\"a:b:c:d e f\")\n * > replaceMaxSpecialchar(string(\"ram reshma,ram rahim\"), 1)\n * string(\"ram:reshma,ram rahim\")\n */\nstring replaceMaxSpecialchar(string text, int n) {\n    int count = 0;\n    for (char &c : text) {\n        if ((c == ' ' || c == ',' || c == '.') && count < n) {\n            c = ':';\n            count++;\n        }\n    }\n    return text;\n}", "entry_point": "replaceMaxSpecialchar"}
{"task_id": "MBCPP/221", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first even number in a given list of numbers.\n * > firstEven(vector<int>{2, 3, 4})\n * 2\n * > firstEven(vector<int>{5, 6, 7})\n * 6\n */\nint firstEven(vector<int> nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1; // Return -1 if no even number is found\n}", "entry_point": "firstEven"}
{"task_id": "MBCPP/222", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all the elements in tuple have same data type or not.\n * > checkType(vector<int>{5, 6, 7, 3, 5, 6})\n * true\n * > checkType(vector<int>{3, 2, 1, 4, 5})\n * true\n */\nbool checkType(vector<int> testTuple) {\n    if (testTuple.empty())\n        return true;\n\n    int firstType = typeid(testTuple[0]).hash_code();\n    for (const auto& element : testTuple) {\n        if (typeid(element).hash_code() != firstType)\n            return false;\n    }\n    return true;\n}", "entry_point": "checkType"}
{"task_id": "MBCPP/223", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for majority element in the given sorted array.\n * > isMajority(vector<int>{1, 2, 3, 3, 3, 3, 10}, 7, 3)\n * true\n * > isMajority(vector<int>{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4)\n * false\n * > isMajority(vector<int>{1, 1, 1, 2, 2}, 5, 1)\n * true\n */\nbool isMajority(vector<int> arr, int n, int x) {\n    int first = lower_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int last = upper_bound(arr.begin(), arr.end(), x) - arr.begin();\n    int count = last - first;\n    return count > n / 2;\n}", "entry_point": "isMajority"}
{"task_id": "MBCPP/224", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count set bits of a given number.\n * > countSetBits(2)\n * 1\n * > countSetBits(4)\n * 1\n * > countSetBits(6)\n * 2\n */\nint countSetBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}", "entry_point": "countSetBits"}
{"task_id": "MBCPP/225", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum element in a sorted and rotated array.\n * > findMin(vector<int>{1, 2, 3, 4, 5}, 0, 4)\n * 1\n * > findMin(vector<int>{4, 6, 8}, 0, 2)\n * 4\n * > findMin(vector<int>{2, 3, 5, 7, 9}, 0, 4)\n * 2\n */\nint findMin(vector<int> arr, int low, int high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[low];\n}", "entry_point": "findMin"}
{"task_id": "MBCPP/226", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the characters which have odd index values of a given string.\n * > oddValuesString(string(\"abcdef\"))\n * string(\"ace\")\n * > oddValuesString(string(\"python\"))\n * string(\"pto\")\n * > oddValuesString(string(\"data\"))\n * string(\"dt\")\n */\nstring oddValuesString(string str) {\n    string result;\n    for (int i = 0; i < str.length(); i += 2) {\n        result += str[i];\n    }\n    return result;\n}", "entry_point": "oddValuesString"}
{"task_id": "MBCPP/227", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of three numbers.\n * > minOfThree(10, 20, 0)\n * 0\n * > minOfThree(19, 15, 18)\n * 15\n * > minOfThree(-10, -20, -30)\n * -30\n */\nint minOfThree(int a, int b, int c) {\n    return min(a, min(b, c));\n}", "entry_point": "minOfThree"}
{"task_id": "MBCPP/228", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are unset in the given range or not.\n * > allBitsSetInTheGivenRange(4, 1, 2)\n * true\n * > allBitsSetInTheGivenRange(17, 2, 4)\n * true\n * > allBitsSetInTheGivenRange(39, 4, 6)\n * false\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n    int mask = (1 << (r - l + 1)) - 1;\n    mask = mask << l;\n    return (n & mask) == mask;\n}", "entry_point": "allBitsSetInTheGivenRange"}
{"task_id": "MBCPP/229", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n * > reArrangeArray(vector<int>{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9)\n * {-1, -3, -7, 4, 5, 6, 2, 8, 9}\n * > reArrangeArray(vector<int>{12, -14, -26, 13, 15}, 5)\n * {-14, -26, 12, 13, 15}\n * > reArrangeArray(vector<int>{10, 24, 36, -42, -39, -78, 85}, 7)\n * {-42, -39, -78, 10, 24, 36, 85}\n */\nvector<int> reArrangeArray(vector<int> arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            if (i != j)\n                swap(arr[i], arr[j]);\n            j++;\n        }\n    }\n    return arr;\n}", "entry_point": "reArrangeArray"}
{"task_id": "MBCPP/230", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace blank spaces with any character in a string.\n * > replaceBlank(string(\"hello people\"), string(\"@\"))\n * string(\"hello@people\")\n * > replaceBlank(string(\"python program language\"), string(\"$\"))\n * string(\"python$program$language\")\n * > replaceBlank(string(\"blank space\"), string(\"-\"))\n * string(\"blank-space\")\n */\nstring replaceBlank(string str1, string chr) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ' ') {\n            str1.replace(i, 1, chr);\n        }\n    }\n    return str1;\n}", "entry_point": "replaceBlank"}
{"task_id": "MBCPP/231", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n * > maxSum(vector<vector<int>>{{1}, {2, 1}, {3, 3, 2}}, 3)\n * 6\n * > maxSum(vector<vector<int>>{{1}, {1, 2}, {4, 1, 12}}, 3)\n * 15\n * > maxSum(vector<vector<int>>{{2}, {3, 2}, {13, 23, 12}}, 3)\n * 28\n */\nint maxSum(vector<vector<int>> tri, int n) {\n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = 0; j <= i; j++) {\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1]);\n        }\n    }\n    return tri[0][0];\n}", "entry_point": "maxSum"}
{"task_id": "MBCPP/232", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the n largest items from a dataset.\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2)\n * {100, 90}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5)\n * {100, 90, 80, 70, 60}\n * > largNnum(vector<int>{10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3)\n * {100, 90, 80}\n */\nvector<int> largNnum(vector<int> list1, int n) {\n    sort(list1.begin(), list1.end(), greater<int>());\n    vector<int> result(list1.begin(), list1.begin() + n);\n    return result;\n}", "entry_point": "largNnum"}
{"task_id": "MBCPP/233", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cylinder.\n * > lateralsufaceCylinder(10, 5)\n * 314.15000000000003\n * > lateralsufaceCylinder(4, 5)\n * 125.66000000000001\n * > lateralsufaceCylinder(4, 10)\n * 251.32000000000002\n */\ndouble lateralsufaceCylinder(int r, int h) {\n    return 2 * M_PI * r * h;\n}", "entry_point": "lateralsufaceCylinder"}
{"task_id": "MBCPP/234", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cube.\n * > volumeCube(3)\n * 27\n * > volumeCube(2)\n * 8\n * > volumeCube(5)\n * 125\n */\nint volumeCube(int l) {\n    return l * l * l;\n}", "entry_point": "volumeCube"}
{"task_id": "MBCPP/235", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set all even bits of a given number.\n * > evenBitSetNumber(10)\n * 10\n * > evenBitSetNumber(20)\n * 30\n * > evenBitSetNumber(30)\n * 30\n */\nint evenBitSetNumber(int n) {\n    int mask = 0xAAAAAAAA; // Binary: 10101010...1010 (sets all even bits)\n    return n | mask;\n}", "entry_point": "evenBitSetNumber"}
{"task_id": "MBCPP/236", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n * > noOfTriangle(4, 2)\n * 7\n * > noOfTriangle(4, 3)\n * 3\n * > noOfTriangle(1, 3)\n * -1\n */\nint noOfTriangle(int n, int k) {\n    if (k > n || n <= 0 || k <= 0)\n        return -1;\n    int count = 0;\n    for (int i = 1; i <= n - k + 1; ++i) {\n        count += i * i;\n    }\n    return count;\n}", "entry_point": "noOfTriangle"}
{"task_id": "MBCPP/238", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of non-empty substrings of a given string.\n * > numberOfSubstrings(string(\"abc\"))\n * 6\n * > numberOfSubstrings(string(\"abcd\"))\n * 10\n * > numberOfSubstrings(string(\"abcde\"))\n * 15\n */\nint numberOfSubstrings(string str) {\n    int n = str.length();\n    return n * (n + 1) / 2;\n}", "entry_point": "numberOfSubstrings"}
{"task_id": "MBCPP/239", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n * > getTotalNumberOfSequences(10, 4)\n * 4\n * > getTotalNumberOfSequences(5, 2)\n * 6\n * > getTotalNumberOfSequences(16, 3)\n * 84\n */\nint getTotalNumberOfSequences(int m, int n) {\n    int dp[m+1][n+1];\n    memset(dp, 0, sizeof(dp));\n    \n    for (int i = 1; i <= m; i++)\n        dp[i][1] = 1;\n        \n    for (int j = 2; j <= n; j++) {\n        for (int i = 1; i <= m; i++) {\n            for (int k = 1; k <= i/2; k++) {\n                dp[i][j] += dp[k][j-1];\n            }\n        }\n    }\n    \n    int result = 0;\n    for (int i = 1; i <= m; i++)\n        result += dp[i][n];\n        \n    return result;\n}", "entry_point": "getTotalNumberOfSequences"}
{"task_id": "MBCPP/241", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a 3d array having each element as '*'.\n * > array3d(6, 4, 3)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(5, 3, 4)\n * {{{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}, {{string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}, {string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\"), string(\"*\")}}}\n * > array3d(1, 2, 3)\n * {{{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}, {{string(\"*\")}, {string(\"*\")}}}\n */\nvector<vector<vector<string>>> array3d(int m, int n, int o) {\n    vector<vector<vector<string>>> result(o, vector<vector<string>>(n, vector<string>(m, \"*\")));\n    return result;\n}", "entry_point": "array3d"}
{"task_id": "MBCPP/242", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count total characters in a string.\n * > countCharac(string(\"python programming\"))\n * 18\n * > countCharac(string(\"language\"))\n * 8\n * > countCharac(string(\"words\"))\n * 5\n */\nint countCharac(string str1) {\n    return str1.length();\n}", "entry_point": "countCharac"}
{"task_id": "MBCPP/244", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the next perfect square greater than a given number.\n * > nextPerfectSquare(35)\n * 36\n * > nextPerfectSquare(6)\n * 9\n * > nextPerfectSquare(9)\n * 16\n */\nint nextPerfectSquare(int n) {\n    int sqrt_n = sqrt(n);\n    if (sqrt_n * sqrt_n == n) {\n        return (sqrt_n + 1) * (sqrt_n + 1);\n    } else {\n        return (sqrt_n + 1) * (sqrt_n + 1);\n    }\n}", "entry_point": "nextPerfectSquare"}
{"task_id": "MBCPP/245", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * > maxSum(vector<int>{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9)\n * 194\n * > maxSum(vector<int>{80, 60, 30, 40, 20, 10}, 6)\n * 210\n * > maxSum(vector<int>{2, 3, 14, 16, 21, 23, 29, 30}, 8)\n * 138\n */\nint maxSum(vector<int> arr, int n) {\n    vector<int> inc(n), dec(n);\n    for (int i = 0; i < n; i++) {\n        inc[i] = arr[i];\n        dec[i] = arr[i];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        for (int j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    int max_sum = INT_MIN;\n    for (int i = 0; i < n; i++) {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}", "entry_point": "maxSum"}
{"task_id": "MBCPP/246", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for computing square roots using the babylonian method.\n * > babylonianSquareroot(10)\n * 3.162277660168379\n * > babylonianSquareroot(2)\n * 1.414213562373095\n * > babylonianSquareroot(9)\n * 3.0\n */\ndouble babylonianSquareroot(int number) {\n    if (number == 0 || number == 1)\n        return number;\n\n    double guess = number / 2.0;\n    double epsilon = 0.000001; // Precision level\n\n    while (abs(guess * guess - number) > epsilon) {\n        guess = (guess + number / guess) / 2.0;\n    }\n\n    return guess;\n}", "entry_point": "babylonianSquareroot"}
{"task_id": "MBCPP/247", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest palindromic subsequence in the given string.\n * > lps(string(\"TENS FOR TENS\"))\n * 5\n * > lps(string(\"CARDIO FOR CARDS\"))\n * 7\n * > lps(string(\"PART OF THE JOURNEY IS PART\"))\n * 9\n */\nint lps(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    \n    for (int i = 0; i < n; i++)\n        dp[i][i] = 1;\n    \n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                dp[i][j] = 2;\n            else if (str[i] == str[j])\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            else\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);\n        }\n    }\n    \n    return dp[0][n - 1];\n}", "entry_point": "lps"}
{"task_id": "MBCPP/248", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the harmonic sum of n-1.\n * > harmonicSum(7)\n * 2.5928571428571425\n * > harmonicSum(4)\n * 2.083333333333333\n * > harmonicSum(19)\n * 3.547739657143682\n */\ndouble harmonicSum(int n) {\n    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "entry_point": "harmonicSum"}
{"task_id": "MBCPP/249", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the intersection of two arrays using lambda function.\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{1, 2, 4, 8, 9})\n * {1, 2, 8, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{3, 5, 7, 9})\n * {3, 5, 7, 9}\n * > intersectionArray(vector<int>{1, 2, 3, 5, 7, 8, 9, 10}, vector<int>{10, 20, 30, 40})\n * {10}\n */\nvector<int> intersectionArray(vector<int> arrayNums1, vector<int> arrayNums2) {\n    sort(arrayNums1.begin(), arrayNums1.end());\n    sort(arrayNums2.begin(), arrayNums2.end());\n    vector<int> result;\n    auto it1 = arrayNums1.begin();\n    auto it2 = arrayNums2.begin();\n    while (it1 != arrayNums1.end() && it2 != arrayNums2.end()) {\n        if (*it1 < *it2) {\n            ++it1;\n        } else if (*it1 > *it2) {\n            ++it2;\n        } else {\n            result.push_back(*it1);\n            ++it1;\n            ++it2;\n        }\n    }\n    return result;\n}", "entry_point": "intersectionArray"}
{"task_id": "MBCPP/250", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the occcurences of an element in a tuple.\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4)\n * 0\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10)\n * 3\n * > countX(vector<int>{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8)\n * 4\n */\nint countX(vector<int> tup, int x) {\n    int count = 0;\n    for (int num : tup) {\n        if (num == x) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countX"}
{"task_id": "MBCPP/251", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to insert an element before each element of a list.\n * > insertElement(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Black\")}, string(\"c\"))\n * {string(\"c\"), string(\"Red\"), string(\"c\"), string(\"Green\"), string(\"c\"), string(\"Black\")}\n * > insertElement(vector<string>{string(\"python\"), string(\"java\")}, string(\"program\"))\n * {string(\"program\"), string(\"python\"), string(\"program\"), string(\"java\")}\n * > insertElement(vector<string>{string(\"happy\"), string(\"sad\")}, string(\"laugh\"))\n * {string(\"laugh\"), string(\"happy\"), string(\"laugh\"), string(\"sad\")}\n */\nvector<string> insertElement(vector<string> list, string element) {\n    vector<string> result;\n    for (const auto& item : list) {\n        result.push_back(element);\n        result.push_back(item);\n    }\n    return result;\n}", "entry_point": "insertElement"}
{"task_id": "MBCPP/252", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert complex numbers to polar coordinates.\n * > convert(1)\n * {1.0, 0.0}\n * > convert(4)\n * {4.0, 0.0}\n * > convert(5)\n * {5.0, 0.0}\n */\nvector<double> convert(int numbers) {\n    vector<double> polar;\n    polar.push_back(static_cast<double>(numbers));\n    polar.push_back(0.0);\n    return polar;\n}", "entry_point": "convert"}
{"task_id": "MBCPP/253", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count integers from a given list.\n * > countInteger(vector<int>{1, 2, 3})\n * 3\n */\nint countInteger(vector<int> list1) {\n    return list1.size();\n}", "entry_point": "countInteger"}
{"task_id": "MBCPP/254", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all words starting with 'a' or 'e' in a given string.\n * > wordsAe(string(\"python programe\"))\n * {string(\"ame\")}\n * > wordsAe(string(\"python programe language\"))\n * {string(\"ame\"), string(\"anguage\")}\n * > wordsAe(string(\"assert statement\"))\n * {string(\"assert\"), string(\"atement\")}\n */\nvector<string> wordsAe(string text) {\n    vector<string> result;\n    string word;\n    for (char ch : text) {\n        if (isalpha(ch)) {\n            word += ch;\n        } else {\n            if (!word.empty() && (word[0] == 'a' || word[0] == 'e')) {\n                result.push_back(word);\n            }\n            word.clear();\n        }\n    }\n    if (!word.empty() && (word[0] == 'a' || word[0] == 'e')) {\n        result.push_back(word);\n    }\n    return result;\n}", "entry_point": "wordsAe"}
{"task_id": "MBCPP/255", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 1)\n * {{string(\"Red\")}, {string(\"Green\")}, {string(\"Blue\")}}\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 2)\n * {{string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\")}}\n * > combinationsColors(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\")}, 3)\n * {{string(\"Red\"), string(\"Red\"), string(\"Red\")}, {string(\"Red\"), string(\"Red\"), string(\"Green\")}, {string(\"Red\"), string(\"Red\"), string(\"Blue\")}, {string(\"Red\"), string(\"Green\"), string(\"Green\")}, {string(\"Red\"), string(\"Green\"), string(\"Blue\")}, {string(\"Red\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Green\"), string(\"Green\"), string(\"Green\")}, {string(\"Green\"), string(\"Green\"), string(\"Blue\")}, {string(\"Green\"), string(\"Blue\"), string(\"Blue\")}, {string(\"Blue\"), string(\"Blue\"), string(\"Blue\")}}\n */\nvector<vector<string>> combinationsColors(vector<string> l, int n) {\n    vector<vector<string>> result;\n    vector<string> current(n);\n    function<void(int)> backtrack = [&](int index) {\n        if (index == n) {\n            result.push_back(current);\n            return;\n        }\n        for (const string& color : l) {\n            current[index] = color;\n            backtrack(index + 1);\n        }\n    };\n    backtrack(0);\n    return result;\n}", "entry_point": "combinationsColors"}
{"task_id": "MBCPP/256", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of prime numbers less than a given non-negative number.\n * > countPrimesNums(5)\n * 2\n * > countPrimesNums(10)\n * 4\n * > countPrimesNums(100)\n * 25\n */\nint countPrimesNums(int n) {\n    if (n <= 2)\n        return 0;\n\n    vector<bool> isPrime(n, true);\n    isPrime[0] = isPrime[1] = false;\n\n    for (int i = 2; i * i < n; ++i) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n\n    int count = 0;\n    for (int i = 2; i < n; ++i) {\n        if (isPrime[i])\n            ++count;\n    }\n\n    return count;\n}", "entry_point": "countPrimesNums"}
{"task_id": "MBCPP/257", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to swap two numbers.\n * > swapNumbers(10, 20)\n * {20, 10}\n * > swapNumbers(15, 17)\n * {17, 15}\n * > swapNumbers(100, 200)\n * {200, 100}\n */\nvector<int> swapNumbers(int a, int b) {\n    vector<int> result;\n    result.push_back(b);\n    result.push_back(a);\n    return result;\n}", "entry_point": "swapNumbers"}
{"task_id": "MBCPP/258", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of odd elements in the given list using lambda function.\n * > countOdd(vector<int>{1, 2, 3, 5, 7, 8, 10})\n * 4\n * > countOdd(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * 2\n * > countOdd(vector<int>{1, 2, 4, 8, 9})\n * 2\n */\nint countOdd(vector<int> arrayNums) {\n    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 != 0; });\n}", "entry_point": "countOdd"}
{"task_id": "MBCPP/259", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to maximize the given two tuples.\n * > maximizeElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 7}, {4, 9}, {2, 9}, {7, 10}}\n * > maximizeElements(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{7, 8}, {5, 10}, {3, 10}, {8, 11}}\n * > maximizeElements(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{8, 9}, {6, 11}, {4, 11}, {9, 12}}\n */\nvector<vector<int>> maximizeElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        temp.push_back(max(testTup1[i][0], testTup2[i][0]));\n        temp.push_back(max(testTup1[i][1], testTup2[i][1]));\n        result.push_back(temp);\n    }\n    return result;\n}", "entry_point": "maximizeElements"}
{"task_id": "MBCPP/260", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n * > newmanPrime(3)\n * 7\n * > newmanPrime(4)\n * 17\n * > newmanPrime(5)\n * 41\n */\nint newmanPrime(int n) {\n    if (n == 0)\n        return 1;\n    if (n == 1)\n        return 1;\n    \n    int a = 1, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "entry_point": "newmanPrime"}
{"task_id": "MBCPP/261", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform mathematical division operation across the given tuples.\n * > divisionElements(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {2, 2, 2, 3}\n * > divisionElements(vector<int>{12, 6, 8, 16}, vector<int>{6, 3, 4, 4})\n * {2, 2, 2, 4}\n * > divisionElements(vector<int>{20, 14, 36, 18}, vector<int>{5, 7, 6, 9})\n * {4, 2, 6, 2}\n */\nvector<int> divisionElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] / testTup2[i]);\n    }\n    return result;\n}", "entry_point": "divisionElements"}
{"task_id": "MBCPP/263", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries.\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}}, unordered_map<string, int>{{string(\"x\"), 300}, {string(\"y\"), 200}})\n * {{string(\"x\"), 300}, {string(\"y\"), 200}, {string(\"a\"), 100}, {string(\"b\"), 200}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}, unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}})\n * {{string(\"a\"), 900}, {string(\"b\"), 900}, {string(\"d\"), 900}}\n * > mergeDict(unordered_map<string, int>{{string(\"a\"), 10}, {string(\"b\"), 20}}, unordered_map<string, int>{{string(\"x\"), 30}, {string(\"y\"), 40}})\n * {{string(\"x\"), 30}, {string(\"y\"), 40}, {string(\"a\"), 10}, {string(\"b\"), 20}}\n */\nunordered_map<string, int> mergeDict(unordered_map<string, int> d1, unordered_map<string, int> d2) {\n    for (const auto& pair : d2) {\n        d1[pair.first] = pair.second;\n    }\n    return d1;\n}", "entry_point": "mergeDict"}
{"task_id": "MBCPP/264", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a dog's age in dog's years.\n * > dogAge(12)\n * 61\n * > dogAge(15)\n * 73\n * > dogAge(24)\n * 109\n */\nint dogAge(int hAge) {\n    if (hAge <= 0)\n        return 0;\n    if (hAge == 1)\n        return 15;\n    if (hAge == 2)\n        return 24;\n    return 24 + (hAge - 2) * 5;\n}", "entry_point": "dogAge"}
{"task_id": "MBCPP/266", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cube.\n * > lateralsurfaceCube(5)\n * 100\n * > lateralsurfaceCube(9)\n * 324\n * > lateralsurfaceCube(10)\n * 400\n */\nint lateralsurfaceCube(int l) {\n    return 4 * l * l;\n}", "entry_point": "lateralsurfaceCube"}
{"task_id": "MBCPP/267", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n odd natural numbers.\n * > squareSum(2)\n * 10\n * > squareSum(3)\n * 35\n * > squareSum(4)\n * 84\n */\nint squareSum(int n) {\n    int sum = 0;\n    int count = 0;\n    int i = 1;\n    while (count < n) {\n        if (i % 2 != 0) {\n            sum += i * i;\n            count++;\n        }\n        i++;\n    }\n    return sum;\n}", "entry_point": "squareSum"}
{"task_id": "MBCPP/268", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th star number.\n * > findStarNum(3)\n * 37\n * > findStarNum(4)\n * 73\n * > findStarNum(5)\n * 121\n */\nint findStarNum(int n) {\n    return 6 * n * (n - 1) + 1;\n}", "entry_point": "findStarNum"}
{"task_id": "MBCPP/269", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ascii value of a character.\n * > asciiValue(string(\"A\"))\n * 65\n * > asciiValue(string(\"R\"))\n * 82\n * > asciiValue(string(\"S\"))\n * 83\n */\nint asciiValue(string k) {\n    if (k.empty())\n        return 0;\n    return static_cast<int>(k[0]);\n}", "entry_point": "asciiValue"}
{"task_id": "MBCPP/270", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even numbers at even positions.\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1, 18, 8}, 6)\n * 30\n * > sumEvenAndEvenIndex(vector<int>{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10)\n * 26\n * > sumEvenAndEvenIndex(vector<int>{5, 6, 12, 1}, 4)\n * 12\n */\nint sumEvenAndEvenIndex(vector<int> arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "entry_point": "sumEvenAndEvenIndex"}
{"task_id": "MBCPP/271", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n even natural numbers.\n * > evenPowerSum(2)\n * 1056\n * > evenPowerSum(3)\n * 8832\n * > evenPowerSum(1)\n * 32\n */\nint evenPowerSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += pow(evenNum, 5);\n    }\n    return sum;\n}", "entry_point": "evenPowerSum"}
{"task_id": "MBCPP/273", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n * > substractElements(vector<int>{10, 4, 5}, vector<int>{2, 5, 18})\n * {8, -1, -13}\n * > substractElements(vector<int>{11, 2, 3}, vector<int>{24, 45, 16})\n * {-13, -43, -13}\n * > substractElements(vector<int>{7, 18, 9}, vector<int>{10, 11, 12})\n * {-3, 7, -3}\n */\nvector<int> substractElements(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] - testTup2[i]);\n    }\n    return result;\n}", "entry_point": "substractElements"}
{"task_id": "MBCPP/274", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of even index binomial coefficients.\n * > evenBinomialCoeffSum(4)\n * 8\n * > evenBinomialCoeffSum(6)\n * 32\n * > evenBinomialCoeffSum(2)\n * 2\n */\nint evenBinomialCoeffSum(int n) {\n    int sum = 0;\n    for (int i = 0; i <= n; i += 2) {\n        sum += tgamma(n + 1) / (tgamma(i + 1) * tgamma(n - i + 1));\n    }\n    return sum;\n}", "entry_point": "evenBinomialCoeffSum"}
{"task_id": "MBCPP/275", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the position of the last removed element from the given array.\n * > getPosition(vector<int>{2, 5, 4}, 3, 2)\n * 2\n * > getPosition(vector<int>{4, 3}, 2, 2)\n * 2\n * > getPosition(vector<int>{1, 2, 3, 4}, 4, 1)\n * 4\n */\nint getPosition(vector<int> a, int n, int m) {\n    int pos = 0;\n    for (int i = 1; i <= n; i++) {\n        pos = (pos + m) % i;\n    }\n    return pos + 1;\n}", "entry_point": "getPosition"}
{"task_id": "MBCPP/276", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cylinder.\n * > volumeCylinder(10, 5)\n * 1570.7500000000002\n * > volumeCylinder(4, 5)\n * 251.32000000000002\n * > volumeCylinder(4, 10)\n * 502.64000000000004\n */\ndouble volumeCylinder(int r, int h) {\n    return M_PI * r * r * h;\n}", "entry_point": "volumeCylinder"}
{"task_id": "MBCPP/277", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter a dictionary based on values.\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 170)\n * {{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Pierre Cox\"), 190}}\n * > dictFilter(unordered_map<string, int>{{string(\"Cierra Vega\"), 175}, {string(\"Alden Cantrell\"), 180}, {string(\"Kierra Gentry\"), 165}, {string(\"Pierre Cox\"), 190}}, 180)\n * {{string(\"Alden Cantrell\"), \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51\u5386\u53f2\u8bb0\u5f55\u6781", "entry_point": "dictFilter"}
{"task_id": "MBCPP/279", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth decagonal number.\n * > isNumDecagonal(3)\n * 27\n * > isNumDecagonal(7)\n * 175\n * > isNumDecagonal(10)\n * 370\n */\nint isNumDecagonal(int n) {\n    return n * (4 * n - 3);\n}", "entry_point": "isNumDecagonal"}
{"task_id": "MBCPP/281", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the elements of a given list are unique or not.\n * > allUnique(vector<int>{1, 2, 3})\n * true\n * > allUnique(vector<int>{1, 2, 1, 2})\n * false\n * > allUnique(vector<int>{1, 2, 3, 4, 5})\n * true\n */\nbool allUnique(vector<int> testList) {\n    unordered_set<int> seen;\n    for (int num : testList) {\n        if (seen.count(num))\n            return false;\n        seen.insert(num);\n    }\n    return true;\n}", "entry_point": "allUnique"}
{"task_id": "MBCPP/282", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substaract two lists using map and lambda function.\n * > subList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {-3, -3, -3}\n * > subList(vector<int>{1, 2}, vector<int>{3, 4})\n * {-2, -2}\n * > subList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> subList(vector<int> nums1, vector<int> nums2) {\n    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a - b; });\n    return result;\n}", "entry_point": "subList"}
{"task_id": "MBCPP/283", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the frequency of each digit is less than or equal to the digit itself.\n * > validate(1234)\n * true\n * > validate(51241)\n * false\n * > validate(321)\n * true\n */\nbool validate(int n) {\n    unordered_map<int, int> freq;\n    while (n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (auto& pair : freq) {\n        if (pair.second > pair.first)\n            return false;\n    }\n    return true;\n}", "entry_point": "validate"}
{"task_id": "MBCPP/285", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by two to three 'b'.\n * > textMatchTwoThree(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchTwoThree(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchTwoThree(string text) {\n    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatchTwoThree"}
{"task_id": "MBCPP/286", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n * > maxSubArraySumRepeated(vector<int>{10, 20, -30, -1}, 4, 3)\n * 30\n * > maxSubArraySumRepeated(vector<int>{-1, 10, 20}, 3, 2)\n * 59\n * > maxSubArraySumRepeated(vector<int>{-1, -2, -3}, 3, 3)\n * -1\n */\nint maxSubArraySumRepeated(vector<int> a, int n, int k) {\n    int totalSum = 0;\n    for(int i = 0; i < n; i++) {\n        totalSum += a[i];\n    }\n    \n    int maxSum = INT_MIN;\n    int currentSum = 0;\n    \n    for(int i = 0; i < n * min(k, 2); i++) {\n        currentSum += a[i % n];\n        if(currentSum > maxSum) {\n            maxSum = currentSum;\n        }\n        if(currentSum < 0) {\n            currentSum = 0;\n        }\n    }\n    \n    if(k > 2 && totalSum > 0) {\n        maxSum += totalSum * (k - 2);\n    }\n    \n    return maxSum;\n}", "entry_point": "maxSubArraySumRepeated"}
{"task_id": "MBCPP/287", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of first n even natural numbers.\n * > squareSum(2)\n * 20\n * > squareSum(3)\n * 56\n * > squareSum(4)\n * 120\n */\nint squareSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNumber = 2 * i;\n        sum += evenNumber * evenNumber;\n    }\n    return sum;\n}", "entry_point": "squareSum"}
{"task_id": "MBCPP/288", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n * > modularInverse(vector<int>{1, 6, 4, 5}, 4, 7)\n * 2\n * > modularInverse(vector<int>{1, 3, 8, 12, 12}, 5, 13)\n * 3\n * > modularInverse(vector<int>{2, 3, 4, 5}, 4, 6)\n * 1\n */\nint modularInverse(vector<int> arr, int n, int p) {\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == 0) continue;\n        long long inverse = 1;\n        long long base = arr[i];\n        long long exponent = p - 2;\n        while(exponent > 0) {\n            if(exponent % 2 == 1) {\n                inverse = (inverse * base) % p;\n            }\n            base = (base * base) % p;\n            exponent /= 2;\n        }\n        if(inverse == arr[i]) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "modularInverse"}
{"task_id": "MBCPP/289", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the number of odd days in a given year.\n * > oddDays(100)\n * 5\n * > oddDays(50)\n * 6\n * > oddDays(75)\n * 2\n */\nint oddDays(int n) {\n    if (n % 400 == 0)\n        return 0;\n    else if (n % 100 == 0)\n        return 5;\n    else if (n % 4 == 0)\n        return 2;\n    else\n        return 1;\n}", "entry_point": "oddDays"}
{"task_id": "MBCPP/291", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n * > countNoOfWays(2, 4)\n * 16\n * > countNoOfWays(3, 2)\n * 6\n * > countNoOfWays(4, 4)\n * 228\n */\nint countNoOfWays(int n, int k) {\n    if (n == 0) return 0;\n    if (n == 1) return k;\n    \n    long same = k;\n    long diff = k * (k - 1);\n    long total = same + diff;\n    \n    for (int i = 3; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    \n    return total;\n}", "entry_point": "countNoOfWays"}
{"task_id": "MBCPP/292", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find quotient of two numbers.\n * > find(10, 3)\n * 3\n * > find(4, 2)\n * 2\n * > find(20, 5)\n * 4\n */\nint find(int n, int m) {\n    return n / m;\n}", "entry_point": "find"}
{"task_id": "MBCPP/295", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return the sum of all divisors of a number.\n * > sumDiv(8)\n * 7\n * > sumDiv(12)\n * 16\n * > sumDiv(7)\n * 1\n */\nint sumDiv(int number) {\n    int sum = 0;\n    for (int i = 1; i <= number; ++i) {\n        if (number % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "entry_point": "sumDiv"}
{"task_id": "MBCPP/296", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count inversions in an array.\n * > getInvCount(vector<int>{1, 20, 6, 4, 5}, 5)\n * 5\n * > getInvCount(vector<int>{1, 2, 1}, 3)\n * 1\n * > getInvCount(vector<int>{1, 2, 5, 6, 1}, 5)\n * 3\n */\nint getInvCount(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}", "entry_point": "getInvCount"}
{"task_id": "MBCPP/297", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten a given nested list structure.\n * > flattenList(vector<vector<int>>{{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}})\n * {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}\n * > flattenList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}\n */\nvector<int> flattenList(vector<vector<int>> list1) {\n    vector<int> result;\n    for (const auto& innerList : list1) {\n        for (int num : innerList) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "flattenList"}
{"task_id": "MBCPP/300", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n * > countBinarySeq(1)\n * 2.0\n * > countBinarySeq(2)\n * 6.0\n * > countBinarySeq(3)\n * 20.0\n */\ndouble countBinarySeq(int n) {\n    if (n == 0) return 1.0;\n    double result = 0.0;\n    for (int k = 0; k <= n; ++k) {\n        double c = 1.0;\n        for (int i = 1; i <= k; ++i) {\n            c *= (n - k + i) * 1.0 / i;\n        }\n        result += c * c;\n    }\n    return result;\n}", "entry_point": "countBinarySeq"}
{"task_id": "MBCPP/302", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the most significant bit number which is also a set bit.\n * > setBitNumber(6)\n * 4\n * > setBitNumber(10)\n * 8\n * > setBitNumber(18)\n * 16\n */\nint setBitNumber(int n) {\n    if (n == 0)\n        return 0;\n    \n    int msb = 0;\n    while (n != 0) {\n        n = n >> 1;\n        msb++;\n    }\n    \n    return (1 << (msb - 1));\n}", "entry_point": "setBitNumber"}
{"task_id": "MBCPP/303", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of inversion of two types are same or not.\n * > solve(vector<int>{1, 0, 2}, 3)\n * true\n * > solve(vector<int>{1, 2, 0}, 3)\n * false\n * > solve(vector<int>{1, 2, 1}, 3)\n * true\n */\nbool solve(vector<int> a, int n) {\n    int inv1 = 0, inv2 = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (a[i] > a[j]) {\n                inv1++;\n            }\n            if (a[i] < a[j]) {\n                inv2++;\n            }\n        }\n    }\n    return inv1 == inv2;\n}", "entry_point": "solve"}
{"task_id": "MBCPP/304", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find element at a given index after number of rotations.\n * > findElement(vector<int>{1, 2, 3, 4, 5}, vector<vector<int>>{{0, 2}, {0, 3}}, 2, 1)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 2)\n * 3\n * > findElement(vector<int>{1, 2, 3, 4, 5, 6}, vector<vector<int>>{{0, 1}, {0, 2}}, 1, 1)\n * 1\n */\nint findElement(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {\n    for (int i = rotations - 1; i >= 0; i--) {\n        int left = ranges[i][0];\n        int right = ranges[i][1];\n        if (index >= left && index <= right) {\n            if (index == left)\n                index = right;\n            else\n                index--;\n        }\n    }\n    return arr[index];\n}", "entry_point": "findElement"}
{"task_id": "MBCPP/305", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to match two words from a list of words starting with letter 'p'.\n * > startWithp(vector<string>{string(\"Python PHP\"), string(\"Java JavaScript\"), string(\"c c++\")})\n * {string(\"Python\"), string(\"PHP\")}\n * > startWithp(vector<string>{string(\"Python Programming\"), string(\"Java Programming\")})\n * {string(\"Python\"), string(\"Programming\")}\n * > startWithp(vector<string>{string(\"Pqrst Pqr\"), string(\"qrstuv\")})\n * {string(\"Pqrst\"), string(\"Pqr\")}\n */\nvector<string> startWithp(vector<string> words) {\n    vector<string> result;\n    for (const auto& word : words) {\n        stringstream ss(word);\n        string token;\n        while (ss >> token) {\n            if (!token.empty() && (token[0] == 'p' || token[0] == 'P')) {\n                result.push_back(token);\n            }\n        }\n    }\n    return result;\n}", "entry_point": "startWithp"}
{"task_id": "MBCPP/306", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n * > maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6)\n * 11\n * > maxSumIncreasingSubseq(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5)\n * 7\n * > maxSumIncreasingSubseq(vector<int>{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4)\n * 71\n */\nint maxSumIncreasingSubseq(vector<int> a, int n, int index, int k) {\n    vector<int> dp(n);\n    for (int i = 0; i <= index; i++) {\n        dp[i] = a[i];\n        for (int j = 0; j < i; j++) {\n            if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n                dp[i] = dp[j] + a[i];\n            }\n        }\n    }\n    int maxSum = dp[index];\n    for (int i = index + 1; i < k; i++) {\n        if (a[i] > a[index]) {\n            maxSum = max(maxSum, dp[index] + a[i]);\n        }\n    }\n    return maxSum;\n}", "entry_point": "maxSumIncreasingSubseq"}
{"task_id": "MBCPP/308", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the specified number of largest products from two given lists.\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 3)\n * {60, 54, 50}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 4)\n * {60, 54, 50, 48}\n * > largeProduct(vector<int>{1, 2, 3, 4, 5, 6}, vector<int>{3, 6, 8, 9, 10, 6}, 5)\n * {60, 54, 50, 48, 45}\n */\nvector<int> largeProduct(vector<int> nums1, vector<int> nums2, int n) {\n    vector<int> products;\n    for (int num1 : nums1) {\n        for (int num2 : nums2) {\n            products.push_back(num1 * num2);\n        }\n    }\n    sort(products.begin(), products.end(), greater<int>());\n    if (n > products.size()) {\n        n = products.size();\n    }\n    return vector<int>(products.begin(), products.begin() + n);\n}", "entry_point": "largeProduct"}
{"task_id": "MBCPP/309", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum of two numbers.\n * > maximum(5, 10)\n * 10\n * > maximum(-1, -2)\n * -1\n * > maximum(9, 7)\n * 9\n */\nint maximum(int a, int b) {\n    return (a > b) ? a : b;\n}", "entry_point": "maximum"}
{"task_id": "MBCPP/310", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a given string to a tuple.\n * > stringToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringToTuple(string(\"item1\"))\n * {string(\"i\"), string(\"t\"), string(\"e\"), string(\"m\"), string(\"1\")}\n * > stringToTuple(string(\"15.10\"))\n * {string(\"1\"), string(\"5\"), string(\".\"), string(\"1\"), string(\"0\")}\n */\nvector<string> stringToTuple(string str1) {\n    vector<string> result;\n    for (char ch : str1) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "entry_point": "stringToTuple"}
{"task_id": "MBCPP/311", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the left most unset bit.\n * > setLeftMostUnsetBit(10)\n * 14\n * > setLeftMostUnsetBit(12)\n * 14\n * > setLeftMostUnsetBit(15)\n * 15\n */\nint setLeftMostUnsetBit(int n) {\n    int mask = 1;\n    while (mask <= n) {\n        if ((n & mask) == 0) {\n            return n | mask;\n        }\n        mask <<= 1;\n    }\n    return n;\n}", "entry_point": "setLeftMostUnsetBit"}
{"task_id": "MBCPP/312", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cone.\n * > volumeCone(5, 12)\n * 314.15926535897927\n * > volumeCone(10, 15)\n * 1570.7963267948965\n * > volumeCone(19, 17)\n * 6426.651371693521\n */\ndouble volumeCone(int r, int h) {\n    return (1.0 / 3.0) * M_PI * r * r * h;\n}", "entry_point": "volumeCone"}
{"task_id": "MBCPP/314", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 4, 5}, {2, 0, 0}}, 3)\n * 7\n * > maxSumRectangularGrid(vector<vector<int>>{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}, 5)\n * 24\n * > maxSumRectangularGrid(vector<vector<int>>{{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}}, 5)\n * 81\n */\nint maxSumRectangularGrid(vector<vector<int>> grid, int n) {\n    if (n == 0) return 0;\n    if (n == 1) return max(grid[0][0], grid[1][0]);\n\n    int prev1 = max(grid[0][0], grid[1][0]);\n    int prev2 = 0;\n    int curr = 0;\n\n    for (int i = 1; i < n; i++) {\n        int option1 = prev2 + max(grid[0][i], grid[1][i]);\n        int option2 = prev1;\n        curr = max(option1, option2);\n        prev2 = prev1;\n        prev1 = curr;\n    }\n\n    return curr;\n}", "entry_point": "maxSumRectangularGrid"}
{"task_id": "MBCPP/315", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first maximum length of even word.\n * > findMaxLenEven(string(\"python language\"))\n * string(\"language\")\n * > findMaxLenEven(string(\"maximum even length\"))\n * string(\"length\")\n * > findMaxLenEven(string(\"eve\"))\n * string(\"-1\")\n */\nstring findMaxLenEven(string str) {\n    stringstream ss(str);\n    string word, result = \"-1\";\n    int maxLen = 0;\n    \n    while (ss >> word) {\n        if (word.length() % 2 == 0 && word.length() > maxLen) {\n            maxLen = word.length();\n            result = word;\n        }\n    }\n    \n    return result;\n}", "entry_point": "findMaxLenEven"}
{"task_id": "MBCPP/316", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the last occurrence of a given number in a sorted array.\n * > findLastOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 3\n * > findLastOccurrence(vector<int>{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9)\n * 9\n * > findLastOccurrence(vector<int>{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6)\n * 6\n */\nint findLastOccurrence(vector<int> a, int x) {\n    int low = 0, high = a.size() - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            result = mid;\n            low = mid + 1;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "entry_point": "findLastOccurrence"}
{"task_id": "MBCPP/318", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum volume of a cuboid with given sum of sides.\n * > maxVolume(8)\n * 18\n * > maxVolume(4)\n * 2\n * > maxVolume(1)\n * 0\n */\nint maxVolume(int s) {\n    if (s < 3)\n        return 0;\n    int a = s / 3;\n    int b = (s - a) / 2;\n    int c = s - a - b;\n    return a * b * c;\n}", "entry_point": "maxVolume"}
{"task_id": "MBCPP/319", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n * > findLongWord(string(\"Please move back to strem\"))\n * {string(\"strem\")}\n * > findLongWord(string(\"4K Ultra HD streaming player\"))\n * {string(\"Ultra\")}\n * > findLongWord(string(\"Streaming Media Player\"))\n * {string(\"Media\")}\n */\nvector<string> findLongWord(string text) {\n    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{5}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "entry_point": "findLongWord"}
{"task_id": "MBCPP/320", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n * > sumDifference(12)\n * 5434\n * > sumDifference(20)\n * 41230\n * > sumDifference(54)\n * 2151270\n */\nint sumDifference(int n) {\n    int sum = n * (n + 1) / 2;\n    int squaredSum = sum * sum;\n    int sumOfSquares = n * (n + 1) * (2 * n + 1) / 6;\n    return squaredSum - sumOfSquares;\n}", "entry_point": "sumDifference"}
{"task_id": "MBCPP/321", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the demlo number for the given number.\n * > findDemlo(string(\"111111\"))\n * string(\"12345654321\")\n * > findDemlo(string(\"1111\"))\n * string(\"1234321\")\n * > findDemlo(string(\"13333122222\"))\n * string(\"123456789101110987654321\")\n */\nstring findDemlo(string s) {\n    string result;\n    int n = s.length();\n    for(int i = 1; i <= n; i++) {\n        result += to_string(i);\n    }\n    for(int i = n - 1; i >= 1; i--) {\n        result += to_string(i);\n    }\n    return result;\n}", "entry_point": "findDemlo"}
{"task_id": "MBCPP/322", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all index positions of the minimum values in a given list.\n * > positionMin(vector<int>{12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54})\n * {3, 11}\n * > positionMin(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {0}\n * > positionMin(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {1}\n */\nvector<int> positionMin(vector<int> list1) {\n    if (list1.empty()) return {};\n\n    int min_val = *min_element(list1.begin(), list1.end());\n    vector<int> result;\n\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n            result.push_back(i);\n        }\n    }\n\n    return result;\n}", "entry_point": "positionMin"}
{"task_id": "MBCPP/323", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given array in alternating positive and negative items.\n * > reArrange(vector<int>{-5, -2, 5, 2, 4, 7, 1, 8, 0, -8}, 10)\n * {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}\n * > reArrange(vector<int>{1, 2, 3, -4, -1, 4}, 6)\n * {-4, 1, -1, 2, 3, 4}\n * > reArrange(vector<int>{4, 7, 9, 77, -4, 5, -3, -9}, 8)\n * {-4, 4, -3, 7, -9, 9, 77, 5}\n */\nvector<int> reArrange(vector<int> arr, int n) {\n    int pos = 0, neg = 1;\n    vector<int> result(n);\n    \n    for(int i = 0; i < n; i++) {\n        if(arr[i] < 0) {\n            result[neg] = arr[i];\n            neg += 2;\n        } else {\n            result[pos] = arr[i];\n            pos += 2;\n        }\n    }\n    \n    return result;\n}", "entry_point": "reArrange"}
{"task_id": "MBCPP/324", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the sum of alternate chains of tuples.\n * > sumOfAlternates(vector<int>{5, 6, 3, 6, 10, 34})\n * {46, 18}\n * > sumOfAlternates(vector<int>{1, 2, 3, 4, 5})\n * {6, 9}\n * > sumOfAlternates(vector<int>{6, 7, 8, 9, 4, 5})\n * {21, 18}\n */\nvector<int> sumOfAlternates(vector<int> testTuple) {\n    vector<int> result(2, 0);\n    for (size_t i = 0; i < testTuple.size(); ++i) {\n        if (i % 2 == 0) {\n            result[0] += testTuple[i];\n        } else {\n            result[1] += testTuple[i];\n        }\n    }\n    return result;\n}", "entry_point": "sumOfAlternates"}
{"task_id": "MBCPP/325", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum number of squares whose sum is equal to a given number.\n * > getMinSquares(6)\n * 3\n * > getMinSquares(2)\n * 2\n * > getMinSquares(4)\n * 1\n */\nint getMinSquares(int n) {\n    if (n <= 3)\n        return n;\n\n    int dp[n + 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n\n    for (int i = 4; i <= n; i++) {\n        dp[i] = i;\n        for (int x = 1; x * x <= i; x++) {\n            int temp = x * x;\n            if (temp > i)\n                break;\n            else\n                dp[i] = min(dp[i], 1 + dp[i - temp]);\n        }\n    }\n\n    return dp[n];\n}", "entry_point": "getMinSquares"}
{"task_id": "MBCPP/326", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the word with most number of occurrences in the given strings list.\n * > mostOccurrences(vector<string>{string(\"UTS is best for RTF\"), string(\"RTF love UTS\"), string(\"UTS is best\")})\n * string(\"UTS\")\n * > mostOccurrences(vector<string>{string(\"Its been a great year\"), string(\"this year is so worse\"), string(\"this year is okay\")})\n * string(\"year\")\n * > mostOccurrences(vector<string>{string(\"Families can be reunited\"), string(\"people can be reunited\"), string(\"Tasks can be achieved \")})\n * string(\"can\")\n */\nstring mostOccurrences(vector<string> testList) {\n    unordered_map<string, int> wordCount;\n    for (const auto& str : testList) {\n        stringstream ss(str);\n        string word;\n        while (ss >> word) {\n            wordCount[word]++;\n        }\n    }\n    \n    string result;\n    int maxCount = 0;\n    for (const auto& pair : wordCount) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "entry_point": "mostOccurrences"}
{"task_id": "MBCPP/327", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is isosceles or not.\n * > checkIsosceles(6, 8, 12)\n * false\n * > checkIsosceles(6, 6, 12)\n * true\n * > checkIsosceles(6, 16, 20)\n * false\n */\nbool checkIsosceles(int x, int y, int z) {\n    if (x == y || y == z || x == z) {\n        if (x + y > z && y + z > x && x + z > y) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "checkIsosceles"}
{"task_id": "MBCPP/328", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the left direction.\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4)\n * {4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2)\n * {3, 4, 5, 6, 7, 8, 9, 10, 1, 2}\n * > rotateLeft(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2)\n * {6, 7, 8, 9, 10, 1, 2}\n */\nvector<int> rotateLeft(vector<int> list1, int m, int n) {\n    vector<int> result;\n    for (int i = n; i < m + n; i++) {\n        result.push_back(list1[i % list1.size()]);\n    }\n    return result;\n}", "entry_point": "rotateLeft"}
{"task_id": "MBCPP/329", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count negative numbers in a list.\n * > negCount(vector<int>{-1, -2, 3, -4, -5})\n * 4\n * > negCount(vector<int>{1, 2, 3})\n * 0\n * > negCount(vector<int>{1, 2, -3, -10, 20})\n * 2\n */\nint negCount(vector<int> list) {\n    int count = 0;\n    for (int num : list) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "negCount"}
{"task_id": "MBCPP/330", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all three, four, five characters long words in the given string by using regex.\n * > findChar(string(\"For the four consumer complaints contact manager AKR reddy\"))\n * {string(\"For\"), string(\"the\"), string(\"four\"), string(\"AKR\"), string(\"reddy\")}\n * > findChar(string(\"Certain service are subject to change MSR\"))\n * {string(\"are\"), string(\"MSR\")}\n * > findChar(string(\"Third party legal desclaimers\"))\n * {string(\"Third\"), string(\"party\"), string(\"legal\")}\n */\nvector<string> findChar(string text) {\n    vector<string> result;\n    regex pattern(\"\\\\b\\\\w{3,5}\\\\b\");\n    smatch matches;\n    string::const_iterator searchStart(text.cbegin());\n    while (regex_search(searchStart, text.cend(), matches, pattern)) {\n        result.push_back(matches.str());\n        searchStart = matches.suffix().first;\n    }\n    return result;\n}", "entry_point": "findChar"}
{"task_id": "MBCPP/331", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unset bits of a given number.\n * > countUnsetBits(2)\n * 1\n * > countUnsetBits(4)\n * 2\n * > countUnsetBits(6)\n * 1\n */\nint countUnsetBits(int n) {\n    int count = 0;\n    while (n > 0) {\n        if ((n & 1) == 0)\n            count++;\n        n = n >> 1;\n    }\n    return count;\n}", "entry_point": "countUnsetBits"}
{"task_id": "MBCPP/332", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count character frequency of a given string.\n * > charFrequency(string(\"python\"))\n * {{string(\"p\"), 1}, {string(\"y\"), 1}, {string(\"t\"), 1}, {string(\"h\"), 1}, {string(\"o\"), 1}, {string(\"n\"), 1}}\n * > charFrequency(string(\"program\"))\n * {{string(\"p\"), 1}, {string(\"r\"), 2}, {string(\"o\"), 1}, {string(\"g\"), 1}, {string(\"a\"), 1}, {string(\"m\"), 1}}\n * > charFrequency(string(\"language\"))\n * {{string(\"l\"), 1}, {string(\"a\"), 2}, {string(\"n\"), 1}, {string(\"g\"), 2}, {string(\"u\"), 1}, {string(\"e\"), 1}}\n */\nunordered_map<string, int> charFrequency(string str1) {\n    unordered_map<string, int> freqMap;\n    for (char ch : str1) {\n        string s(1, ch);\n        freqMap[s]++;\n    }\n    return freqMap;\n}", "entry_point": "charFrequency"}
{"task_id": "MBCPP/334", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if sides are given.\n * > checkValidity(1, 2, 3)\n * false\n * > checkValidity(2, 3, 5)\n * false\n * > checkValidity(7, 10, 5)\n * true\n */\nbool checkValidity(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a)\n        return true;\n    else\n        return false;\n}", "entry_point": "checkValidity"}
{"task_id": "MBCPP/335", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of arithmetic progression.\n * > apSum(1, 5, 2)\n * 25\n * > apSum(2, 6, 4)\n * 72\n * > apSum(1, 4, 5)\n * 34\n */\nint apSum(int a, int n, int d) {\n    return (n * (2 * a + (n - 1) * d)) / 2;\n}", "entry_point": "apSum"}
{"task_id": "MBCPP/336", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n * > checkMonthnum(string(\"February\"))\n * true\n * > checkMonthnum(string(\"January\"))\n * false\n * > checkMonthnum(string(\"March\"))\n * false\n */\nbool checkMonthnum(string monthname1) {\n    return monthname1 == \"February\";\n}", "entry_point": "checkMonthnum"}
{"task_id": "MBCPP/337", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"python.\"))\n * string(\"Found a match!\")\n * > textMatchWord(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWord(string text) {\n    regex pattern(R\"(\\b\\w+\\b[[:punct:]]*\\s*$)\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatchWord"}
{"task_id": "MBCPP/338", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of substrings with same first and last characters.\n * > countSubstringWithEqualEnds(string(\"aba\"))\n * 4\n * > countSubstringWithEqualEnds(string(\"abcab\"))\n * 7\n * > countSubstringWithEqualEnds(string(\"abc\"))\n * 3\n */\nint countSubstringWithEqualEnds(string s) {\n    int count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (s[i] == s[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "countSubstringWithEqualEnds"}
{"task_id": "MBCPP/339", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occuring divisor in an interval.\n * > findDivisor(2, 2)\n * 2\n * > findDivisor(2, 5)\n * 2\n * > findDivisor(5, 10)\n * 2\n */\nint findDivisor(int x, int y) {\n    if (x > y) swap(x, y);\n    vector<int> count(y + 1, 0);\n    for (int i = 2; i <= y; ++i) {\n        for (int j = i; j <= y; j += i) {\n            if (j >= x) {\n                count[i]++;\n            }\n        }\n    }\n    int maxCount = 0, result = 2;\n    for (int i = 2; i <= y; ++i) {\n        if (count[i] > maxCount) {\n            maxCount = count[i];\n            result = i;\n        }\n    }\n    return result;\n}", "entry_point": "findDivisor"}
{"task_id": "MBCPP/340", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the three lowest positive numbers from a given list of numbers.\n * > sumThreeSmallestNums(vector<int>{10, 20, 30, 40, 50, 60, 7})\n * 37\n * > sumThreeSmallestNums(vector<int>{1, 2, 3, 4, 5})\n * 6\n * > sumThreeSmallestNums(vector<int>{0, 1, 2, 3, 4, 5})\n * 6\n */\nint sumThreeSmallestNums(vector<int> lst) {\n    vector<int> positiveNums;\n    for (int num : lst) {\n        if (num > 0) {\n            positiveNums.push_back(num);\n        }\n    }\n    if (positiveNums.size() < 3) {\n        return 0;\n    }\n    sort(positiveNums.begin(), positiveNums.end());\n    return positiveNums[0] + positiveNums[1] + positiveNums[2];\n}", "entry_point": "sumThreeSmallestNums"}
{"task_id": "MBCPP/341", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given set into tuples.\n * > setToTuple(unordered_set<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n * > setToTuple(unordered_set<int>{6, 7, 8, 9, 10, 11})\n * {6, 7, 8, 9, 10, 11}\n * > setToTuple(unordered_set<int>{12, 13, 14, 15, 16})\n * {12, 13, 14, 15, 16}\n */\nvector<int> setToTuple(unordered_set<int> s) {\n    vector<int> result(s.begin(), s.end());\n    sort(result.begin(), result.end());\n    return result;\n}", "entry_point": "setToTuple"}
{"task_id": "MBCPP/342", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n * > findMinimumRange(vector<vector<int>>{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}})\n * {4, 6}\n * > findMinimumRange(vector<vector<int>>{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}})\n * {4, 7}\n * > findMinimumRange(vector<vector<int>>{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}})\n * {5, 7}\n */\nvector<int> findMinimumRange(vector<vector<int>> list) {\n    int k = list.size();\n    vector<int> ptr(k, 0);\n    int minRange = INT_MAX;\n    vector<int> result(2);\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    int maxVal = INT_MIN;\n\n    for (int i = 0; i < k; ++i) {\n        pq.push({list[i][0], i});\n        maxVal = max(maxVal, list[i][0]);\n    }\n\n    while (true) {\n        auto top = pq.top();\n        pq.pop();\n        int minVal = top.first;\n        int listIdx = top.second;\n\n        if (maxVal - minVal < minRange) {\n            minRange = maxVal - minVal;\n            result[0] = minVal;\n            result[1] = maxVal;\n        }\n\n        ptr[listIdx]++;\n        if (ptr[listIdx] == list[listIdx].size()) {\n            break;\n        }\n\n        int nextVal = list[listIdx][ptr[listIdx]];\n        pq.push({nextVal, listIdx});\n        maxVal = max(maxVal, nextVal);\n    }\n\n    return result;\n}", "entry_point": "findMinimumRange"}
{"task_id": "MBCPP/343", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n * > digLet(string(\"python\"))\n * {6, 0}\n * > digLet(string(\"program\"))\n * {7, 0}\n * > digLet(string(\"python3.0\"))\n * {6, 2}\n */\nvector<int> digLet(string s) {\n    int letters = 0, digits = 0;\n    for (char c : s) {\n        if (isalpha(c))\n            letters++;\n        else if (isdigit(c))\n            digits++;\n    }\n    return {letters, digits};\n}", "entry_point": "digLet"}
{"task_id": "MBCPP/344", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of elements with odd factors in a given range.\n * > countOddSquares(5, 100)\n * 8\n * > countOddSquares(8, 65)\n * 6\n * > countOddSquares(2, 5)\n * 1\n */\nint countOddSquares(int n, int m) {\n    int count = 0;\n    int start = ceil(sqrt(n));\n    int end = floor(sqrt(m));\n    count = end - start + 1;\n    return count > 0 ? count : 0;\n}", "entry_point": "countOddSquares"}
{"task_id": "MBCPP/345", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference between two consecutive numbers in a given list.\n * > diffConsecutivenums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {0, 2, 1, 0, 1, 1, 1}\n * > diffConsecutivenums(vector<int>{4, 5, 8, 9, 6, 10})\n * {1, 3, 1, -3, 4}\n * > diffConsecutivenums(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7})\n * {1, 1, 1, 1, 0, 0, 0, 1, 2}\n */\nvector<int> diffConsecutivenums(vector<int> nums) {\n    vector<int> result;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        result.push_back(nums[i] - nums[i - 1]);\n    }\n    return result;\n}", "entry_point": "diffConsecutivenums"}
{"task_id": "MBCPP/346", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find entringer number e(n, k).\n * > zigzag(4, 3)\n * 5\n * > zigzag(4, 2)\n * 4\n * > zigzag(3, 1)\n * 1\n */\nint zigzag(int n, int k) {\n    if (n == 0 && k == 0)\n        return 1;\n    if (k == 0)\n        return 0;\n    if (k > n)\n        return 0;\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n}", "entry_point": "zigzag"}
{"task_id": "MBCPP/347", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of squares in a rectangle.\n * > countSquares(4, 3)\n * 20\n * > countSquares(1, 2)\n * 2\n * > countSquares(2, 2)\n * 5\n */\nint countSquares(int m, int n) {\n    int count = 0;\n    while (m > 0 && n > 0) {\n        count += m * n;\n        m--;\n        n--;\n    }\n    return count;\n}", "entry_point": "countSquares"}
{"task_id": "MBCPP/348", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n * > findWays(4)\n * 2\n * > findWays(6)\n * 5\n * > findWays(8)\n * 14\n */\nint findWays(int m) {\n    if (m % 2 != 0)\n        return 0;\n    \n    int n = m / 2;\n    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    \n    for (int i = 1; i <= n; ++i) {\n        dp[i] = 0;\n        for (int j = 0; j < i; ++j) {\n            dp[i] += dp[j] * dp[i - 1 - j];\n        }\n    }\n    \n    return dp[n];\n}", "entry_point": "findWays"}
{"task_id": "MBCPP/349", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is a binary string or not.\n * > check(string(\"01010101010\"))\n * string(\"Yes\")\n * > check(string(\"name0\"))\n * string(\"No\")\n * > check(string(\"101\"))\n * string(\"Yes\")\n */\nstring check(string str) {\n    for (char ch : str) {\n        if (ch != '0' && ch != '1')\n            return \"No\";\n    }\n    return \"Yes\";\n}", "entry_point": "check"}
{"task_id": "MBCPP/350", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to minimize the length of the string by removing occurrence of only one character.\n * > minimumLength(string(\"mnm\"))\n * 1\n * > minimumLength(string(\"abcda\"))\n * 3\n * > minimumLength(string(\"abcb\"))\n * 2\n */\nint minimumLength(string s) {\n    int left = 0, right = s.length() - 1;\n    while (left < right && s[left] == s[right]) {\n        char ch = s[left];\n        while (left <= right && s[left] == ch) {\n            left++;\n        }\n        while (left <= right && s[right] == ch) {\n            right--;\n        }\n    }\n    return right - left + 1;\n}", "entry_point": "minimumLength"}
{"task_id": "MBCPP/351", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first element occurring k times in a given array.\n * > firstElement(vector<int>{0, 1, 2, 3, 4, 5}, 6, 1)\n * 0\n * > firstElement(vector<int>{1, 2, 1, 3, 4}, 5, 2)\n * 1\n * > firstElement(vector<int>{2, 3, 4, 3, 5, 7, 1, 2, 3, 5}, 10, 2)\n * 2\n */\nint firstElement(vector<int> arr, int n, int k) {\n    unordered_map<int, int> freqMap;\n    for (int i = 0; i < n; i++) {\n        freqMap[arr[i]]++;\n        if (freqMap[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1; // If no element occurs k times\n}", "entry_point": "firstElement"}
{"task_id": "MBCPP/352", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters in a given string are unique.\n * > uniqueCharacters(string(\"aba\"))\n * false\n * > uniqueCharacters(string(\"abc\"))\n * true\n * > uniqueCharacters(string(\"abab\"))\n * false\n */\nbool uniqueCharacters(string str) {\n    unordered_set<char> charSet;\n    for (char c : str) {\n        if (charSet.find(c) != charSet.end()) {\n            return false;\n        }\n        charSet.insert(c);\n    }\n    return true;\n}", "entry_point": "uniqueCharacters"}
{"task_id": "MBCPP/353", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove a specified column from a given nested list.\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {{2, 3}, {4, 5}, {1, 1}}\n * > removeColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {{1, 2}, {-2, 4}, {1, -1}}\n * > removeColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {{3}, {7}, {3}, {15, 17}, {7}, {11}}\n */\nvector<vector<int>> removeColumn(vector<vector<int>> list1, int n) {\n    for (auto& row : list1) {\n        if (n < row.size()) {\n            row.erase(row.begin() + n);\n        }\n    }\n    return list1;\n}", "entry_point": "removeColumn"}
{"task_id": "MBCPP/354", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find t-nth term of arithemetic progression.\n * > tnAp(1, 5, 2)\n * 9\n * > tnAp(2, 6, 4)\n * 22\n * > tnAp(1, 4, 5)\n * 16\n */\nint tnAp(int a, int n, int d) {\n    return a + (n - 1) * d;\n}", "entry_point": "tnAp"}
{"task_id": "MBCPP/355", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rectangles in a circle of radius r.\n * > countRectangles(2)\n * 8\n * > countRectangles(1)\n * 1\n * > countRectangles(0)\n * 0\n */\nint countRectangles(int radius) {\n    if (radius <= 0)\n        return 0;\n    \n    int count = 0;\n    int limit = radius * radius;\n    \n    for (int i = 1; i <= radius; ++i) {\n        for (int j = 1; j <= radius; ++j) {\n            if (i * i + j * j <= limit) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}", "entry_point": "countRectangles"}
{"task_id": "MBCPP/356", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the third angle of a triangle using two angles.\n * > findAngle(47, 89)\n * 44\n * > findAngle(45, 95)\n * 40\n * > findAngle(50, 40)\n * 90\n */\nint findAngle(int a, int b) {\n    return 180 - (a + b);\n}", "entry_point": "findAngle"}
{"task_id": "MBCPP/357", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum element of all the given tuple records.\n * > findMax(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}})\n * 10\n * > findMax(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}})\n * 11\n * > findMax(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}})\n * 12\n */\nint findMax(vector<vector<int>> testList) {\n    int maxElement = INT_MIN;\n    for (const auto& row : testList) {\n        for (int element : row) {\n            if (element > maxElement) {\n                maxElement = element;\n            }\n        }\n    }\n    return maxElement;\n}", "entry_point": "findMax"}
{"task_id": "MBCPP/358", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find modulo division of two lists using map and lambda function.\n * > moddivList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3})\n * {0, 1, 0}\n * > moddivList(vector<int>{3, 2}, vector<int>{1, 4})\n * {0, 2}\n * > moddivList(vector<int>{90, 120}, vector<int>{50, 70})\n * {40, 50}\n */\nvector<int> moddivList(vector<int> nums1, vector<int> nums2) {\n    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) {\n        return a % b;\n    });\n    return result;\n}", "entry_point": "moddivList"}
{"task_id": "MBCPP/359", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether one root of the quadratic equation is twice of the other or not.\n * > checkSolution(1, 3, 2)\n * string(\"Yes\")\n * > checkSolution(1, 2, 3)\n * string(\"No\")\n * > checkSolution(1, -5, 6)\n * string(\"No\")\n */\nstring checkSolution(int a, int b, int c) {\n    int discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) {\n        return \"No\";\n    }\n    double root1 = (-b + sqrt(discriminant)) / (2 * a);\n    double root2 = (-b - sqrt(discriminant)) / (2 * a);\n    if ((root1 == 2 * root2) || (root2 == 2 * root1)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "entry_point": "checkSolution"}
{"task_id": "MBCPP/360", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n\u2019th carol number.\n * > getCarol(2)\n * 7\n * > getCarol(4)\n * 223\n * > getCarol(5)\n * 959\n */\nint getCarol(int n) {\n    return (pow(2, n) - 1) * (pow(2, n) - 1) - 2;\n}", "entry_point": "getCarol"}
{"task_id": "MBCPP/363", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the k elements to each element in the tuple.\n * > addKElement(vector<vector<int>>{{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4)\n * {{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}\n * > addKElement(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8)\n * {{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}\n * > addKElement(vector<vector<int>>{{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9)\n * {{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}\n */\nvector<vector<int>> addKElement(vector<vector<int>> testList, int k) {\n    for (auto& row : testList) {\n        for (auto& element : row) {\n            element += k;\n        }\n    }\n    return testList;\n}", "entry_point": "addKElement"}
{"task_id": "MBCPP/364", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n * > minFlipToMakeStringAlternate(string(\"0001010111\"))\n * 2\n * > minFlipToMakeStringAlternate(string(\"001\"))\n * 1\n * > minFlipToMakeStringAlternate(string(\"010111011\"))\n * 2\n */\nint minFlipToMakeStringAlternate(string str) {\n    int flip1 = 0, flip2 = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (i % 2 == 0) {\n            if (str[i] == '1') flip1++;\n            else flip2++;\n        } else {\n            if (str[i] == '0') flip1++;\n            else flip2++;\n        }\n    }\n    return min(flip1, flip2);\n}", "entry_point": "minFlipToMakeStringAlternate"}
{"task_id": "MBCPP/365", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits of a given number.\n * > countDigit(12345)\n * 5\n * > countDigit(11223305)\n * 8\n * > countDigit(4123459)\n * 7\n */\nint countDigit(int n) {\n    if (n == 0)\n        return 1;\n    int count = 0;\n    while (n != 0) {\n        n = n / 10;\n        ++count;\n    }\n    return count;\n}", "entry_point": "countDigit"}
{"task_id": "MBCPP/366", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest product of the pair of adjacent elements from a given list of integers.\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5, 6})\n * 30\n * > adjacentNumProduct(vector<int>{1, 2, 3, 4, 5})\n * 20\n * > adjacentNumProduct(vector<int>{2, 3})\n * 6\n */\nint adjacentNumProduct(vector<int> listNums) {\n    if (listNums.size() < 2)\n        return 0;\n    \n    int maxProduct = listNums[0] * listNums[1];\n    for (size_t i = 1; i < listNums.size() - 1; ++i) {\n        int currentProduct = listNums[i] * listNums[i + 1];\n        if (currentProduct > maxProduct) {\n            maxProduct = currentProduct;\n        }\n    }\n    return maxProduct;\n}", "entry_point": "adjacentNumProduct"}
{"task_id": "MBCPP/368", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to repeat the given tuple n times.\n * > repeatTuples(vector<int>{1, 3}, 4)\n * {{1, 3}, {1, 3}, {1, 3}, {1, 3}}\n * > repeatTuples(vector<int>{1, 2}, 3)\n * {{1, 2}, {1, 2}, {1, 2}}\n * > repeatTuples(vector<int>{3, 4}, 5)\n * {{3, 4}, {3, 4}, {3, 4}, {3, 4}, {3, 4}}\n */\nvector<vector<int>> repeatTuples(vector<int> testTup, int n) {\n    vector<vector<int>> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(testTup);\n    }\n    return result;\n}", "entry_point": "repeatTuples"}
{"task_id": "MBCPP/369", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of cuboid\n * > lateralsurfaceCuboid(8, 5, 6)\n * 156\n * > lateralsurfaceCuboid(7, 9, 10)\n * 320\n * > lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nint lateralsurfaceCuboid(int l, int w, int h) {\n    return 2 * h * (l + w);\n}", "entry_point": "lateralsurfaceCuboid"}
{"task_id": "MBCPP/370", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a tuple by its float element.\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"12.20\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item3\"), string(\"24.5\")}})\n * {{string(\"item3\"), string(\"24.5\")}, {string(\"item2\"), string(\"15.10\")}, {string(\"item1\"), string(\"12.20\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"20\")}})\n * {{string(\"item3\"), string(\"20\")}, {string(\"item1\"), string(\"15\")}, {string(\"item2\"), string(\"10\")}}\n * > floatSort(vector<vector<string>>{{string(\"item1\"), string(\"5\")}, {string(\"item2\"), string(\"10\")}, {string(\"item3\"), string(\"14\")}})\n * {{string(\"item3\"), string(\"14\")}, {string(\"item2\"), string(\"10\")}, {string(\"item1\"), string(\"5\")}}\n */\nvector<vector<string>> floatSort(vector<vector<string>> price) {\n    sort(price.begin(), price.end(), [](const vector<string>& a, const vector<string>& b) {\n        float floatA = stof(a[1]);\n        float floatB = stof(b[1]);\n        return floatA > floatB;\n    });\n    return price;\n}", "entry_point": "floatSort"}
{"task_id": "MBCPP/371", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n * > smallestMissing(vector<int>{0, 1, 2, 3, 4, 5, 6}, 0, 6)\n * 7\n * > smallestMissing(vector<int>{0, 1, 2, 6, 9, 11, 15}, 0, 6)\n * 3\n * > smallestMissing(vector<int>{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7)\n * 0\n */\nint smallestMissing(vector<int> a, int leftElement, int rightElement) {\n    while (leftElement <= rightElement) {\n        int mid = leftElement + (rightElement - leftElement) / 2;\n        if (a[mid] == mid)\n            leftElement = mid + 1;\n        else\n            rightElement = mid - 1;\n    }\n    return leftElement;\n}", "entry_point": "smallestMissing"}
{"task_id": "MBCPP/372", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n * > heapAssending(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1})\n * {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}\n * > heapAssending(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 22, 25, 25, 35, 58, 65, 75, 85}\n * > heapAssending(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n */\nvector<int> heapAssending(vector<int> nums) {\n    priority_queue<int, vector<int>, greater<int>> minHeap(nums.begin(), nums.end());\n    vector<int> sortedNums;\n    while (!minHeap.empty()) {\n        sortedNums.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedNums;\n}", "entry_point": "heapAssending"}
{"task_id": "MBCPP/373", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the volume of a cuboid.\n * > volumeCuboid(1, 2, 3)\n * 6\n * > volumeCuboid(5, 7, 9)\n * 315\n * > volumeCuboid(10, 15, 21)\n * 3150\n */\nint volumeCuboid(int l, int w, int h) {\n    return l * w * h;\n}", "entry_point": "volumeCuboid"}
{"task_id": "MBCPP/374", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print all permutations of a given string including duplicates.\n * > permuteString(string(\"ab\"))\n * {string(\"ab\"), string(\"ba\")}\n * > permuteString(string(\"abc\"))\n * {string(\"abc\"), string(\"bac\"), string(\"bca\"), string(\"acb\"), string(\"cab\"), string(\"cba\")}\n * > permuteString(string(\"abcd\"))\n * {string(\"abcd\"), string(\"bacd\"), string(\"bcad\"), string(\"bcda\"), string(\"acbd\"), string(\"cabd\"), string(\"cbad\"), string(\"cbda\"), string(\"acdb\"), string(\"cadb\"), string(\"cdab\"), string(\"cdba\"), string(\"abdc\"), string(\"badc\"), string(\"bdac\"), string(\"bdca\"), string(\"adbc\"), string(\"dabc\"), string(\"dbac\"), string(\"dbca\"), string(\"adcb\"), string(\"dacb\"), string(\"dcab\"), string(\"dcba\")}\n */\nvector<string> permuteString(string str) {\n    vector<string> result;\n    sort(str.begin(), str.end());\n    do {\n        result.push_back(str);\n    } while (next_permutation(str.begin(), str.end()));\n    return result;\n}", "entry_point": "permuteString"}
{"task_id": "MBCPP/375", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round the given number to the nearest multiple of a specific number.\n * > roundNum(4722, 10)\n * 4720\n * > roundNum(1111, 5)\n * 1110\n * > roundNum(219, 2)\n * 218\n */\nint roundNum(int n, int m) {\n    int remainder = n % m;\n    if (remainder * 2 >= m)\n        return n + (m - remainder);\n    else\n        return n - remainder;\n}", "entry_point": "roundNum"}
{"task_id": "MBCPP/377", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove all occurrences of a character in a given string.\n * > removeChar(string(\"aba\"), string(\"a\"))\n * string(\"b\")\n * > removeChar(string(\"toggle\"), string(\"g\"))\n * string(\"tole\")\n * > removeChar(string(\"aabbc\"), string(\"b\"))\n * string(\"aac\")\n */\nstring removeChar(string s, string c) {\n    s.erase(remove(s.begin(), s.end(), c[0]), s.end());\n    return s;\n}", "entry_point": "removeChar"}
{"task_id": "MBCPP/378", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift last element to first position in the given list.\n * > moveFirst(vector<int>{1, 2, 3, 4})\n * {4, 1, 2, 3}\n * > moveFirst(vector<int>{0, 1, 2, 3})\n * {3, 0, 1, 2}\n * > moveFirst(vector<int>{9, 8, 7, 1})\n * {1, 9, 8, 7}\n */\nvector<int> moveFirst(vector<int> testList) {\n    if (testList.empty()) return testList;\n    int lastElement = testList.back();\n    testList.pop_back();\n    testList.insert(testList.begin(), lastElement);\n    return testList;\n}", "entry_point": "moveFirst"}
{"task_id": "MBCPP/379", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cuboid.\n * > surfaceareaCuboid(1, 2, 3)\n * 22\n * > surfaceareaCuboid(5, 7, 9)\n * 286\n * > surfaceareaCuboid(10, 15, 21)\n * 1350\n */\nint surfaceareaCuboid(int l, int w, int h) {\n    return 2 * (l * w + w * h + h * l);\n}", "entry_point": "surfaceareaCuboid"}
{"task_id": "MBCPP/380", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a two-dimensional array.\n * > multiList(3, 4)\n * {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}\n * > multiList(5, 7)\n * {{0, 0, 0, \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 168\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 168758\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u5b98\u7f51 1687580 \u6781\u901f\u8d5b\u8f66\u5f00", "entry_point": "multiList"}
{"task_id": "MBCPP/382", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of rotations in a circularly sorted array.\n * > findRotationCount(vector<int>{8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n * 3\n * > findRotationCount(vector<int>{8, 9, 10, 2, 5, 6})\n * 3\n * > findRotationCount(vector<int>{2, 5, 6, 8, 9, 10})\n * 0\n */\nint findRotationCount(vector<int> a) {\n    int low = 0, high = a.size() - 1;\n    while (low <= high) {\n        if (a[low] <= a[high])\n            return low;\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % a.size();\n        int prev = (mid + a.size() - 1) % a.size();\n        if (a[mid] <= a[next] && a[mid] <= a[prev])\n            return mid;\n        else if (a[mid] <= a[high])\n            high = mid - 1;\n        else if (a[mid] >= a[low])\n            low = mid + 1;\n    }\n    return 0;\n}", "entry_point": "findRotationCount"}
{"task_id": "MBCPP/383", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle all odd bits of a given number.\n * > evenBitToggleNumber(10)\n * 15\n * > evenBitToggleNumber(20)\n * 1\n * > evenBitToggleNumber(30)\n * 11\n */\nint evenBitToggleNumber(int n) {\n    int mask = 0xAAAAAAAA; // Binary: 10101010...1010\n    return n ^ mask;\n}", "entry_point": "evenBitToggleNumber"}
{"task_id": "MBCPP/384", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the smallest value in a given array.\n * > frequencyOfSmallest(5, vector<int>{1, 2, 3, 4, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 1, 2, 5, 6, 2, 3})\n * 1\n * > frequencyOfSmallest(7, vector<int>{3, 3, 6, 3, 7, 4, 9})\n * 3\n */\nint frequencyOfSmallest(int n, vector<int> arr) {\n    if (n == 0) return 0;\n    int min_val = *min_element(arr.begin(), arr.end());\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == min_val) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "frequencyOfSmallest"}
{"task_id": "MBCPP/385", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th perrin number using recursion.\n * > getPerrin(9)\n * 12\n * > getPerrin(4)\n * 2\n * > getPerrin(6)\n * 5\n */\nint getPerrin(int n) {\n    if (n == 0)\n        return 3;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    return getPerrin(n - 2) + getPerrin(n - 3);\n}", "entry_point": "getPerrin"}
{"task_id": "MBCPP/386", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n * > swapCount(string(\"[]][][\"))\n * 2\n * > swapCount(string(\"[[][]]\"))\n * 0\n * > swapCount(string(\"[[][]]][\"))\n * 1\n */\nint swapCount(string s) {\n    int count = 0, imbalance = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == '[')\n            imbalance++;\n        else {\n            if (imbalance > 0)\n                imbalance--;\n            else {\n                count++;\n                imbalance++;\n            }\n        }\n    }\n    return count / 2;\n}", "entry_point": "swapCount"}
{"task_id": "MBCPP/387", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the hexadecimal number is even or odd.\n * > evenOrOdd(string(\"AB3454D\"))\n * string(\"Odd\")\n * > evenOrOdd(string(\"ABC\"))\n * string(\"Even\")\n * > evenOrOdd(string(\"AAD\"))\n * string(\"Odd\")\n */\nstring evenOrOdd(string n) {\n    char lastChar = n.back();\n    int lastDigit;\n    if (isdigit(lastChar)) {\n        lastDigit = lastChar - '0';\n    } else {\n        lastDigit = toupper(lastChar) - 'A' + 10;\n    }\n    return (lastDigit % 2 == 0) ? \"Even\" : \"Odd\";\n}", "entry_point": "evenOrOdd"}
{"task_id": "MBCPP/388", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the highest power of 2 that is less than or equal to n.\n * > highestPowerOf2(10)\n * 8\n * > highestPowerOf2(19)\n * 16\n * > highestPowerOf2(32)\n * 32\n */\nint highestPowerOf2(int n) {\n    int res = 1;\n    while (res * 2 <= n) {\n        res *= 2;\n    }\n    return res;\n}", "entry_point": "highestPowerOf2"}
{"task_id": "MBCPP/389", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n'th lucas number.\n * > findLucas(9)\n * 76\n * > findLucas(4)\n * 7\n * > findLucas(3)\n * 4\n */\nint findLucas(int n) {\n    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    \n    int a = 2, b = 1, c;\n    for (int i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}", "entry_point": "findLucas"}
{"task_id": "MBCPP/391", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert more than one list to nested dictionary.\n * > convertListDictionary(vector<string>{string(\"S001\"), string(\"S002\"), string(\"S003\"), string(\"S004\")}, vector<string>{string(\"Adina Park\"), string(\"Leyton Marsh\"), string(\"Duncan Boyle\"), string(\"Saim Richards\"), vector<int>{85, 98, 89, 92})\n * {{{string(\"S001\"), {{string(\"Adina Park\"), 85}}}}, {{string(\"S002\"), {{string(\"Leyton Marsh\"), 98}}}}, {{string(\"S003\"), {{string(\"Duncan Boyle\"), 89}}}}, {{string(\"S004\"), {{string(\"Saim Richards\"), 92}}}}}\n * > convertListDictionary(vector<string>{string(\"abc\"), string(\"def\"), string(\"ghi\"), string(\"jkl\")}, vector<string>{string(\"python\"), string(\"program\"), string(\"language\"), string(\"programs\")}, vector<int>{100, 200, 300, 400})\n * {{{string(\"abc\"), {{string(\"python\"), 100}}}}, {{string(\"def\"), {{string(\"program\"), 200}}}}, {{string(\"ghi\"), {{string(\"language\"), 300}}}}, {{string(\"jkl\"), {{string(\"programs\"), 400}}}}}\n * > convertListDictionary(vector<string>{string(\"A1\"), string(\"A2\"), string(\"A3\"), string(\"A4\")}, vector<string>{string(\"java\"), string(\"C\"), string(\"C++\"), string(\"DBMS\")}, vector<int>{10, 20, 30, 40})\n * {{{string(\"A1\"), {{string(\"java\"), 10}}}}, {{string(\"A2\"), {{string(\"C\"), 20}}}}, {{string(\"A3\"), {{string(\"C++\"), 30}}}}, {{string(\"A4\"), {{string(\"DBMS\"), 40}}}}}\n */\nvector<unordered_map<string, unordered_map<string, int>>> convertListDictionary(vector<string> l1, vector<string> l2, vector<int> l3) {\n    vector<unordered_map<string, unordered_map<string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        unordered_map<string, int> innerMap;\n        innerMap[l2[i]] = l3[i];\n        unordered_map<string, unordered_map<string, int>> outerMap;\n        outerMap[l1[i]] = innerMap;\n        result.push_back(outerMap);\n    }\n    return result;\n}", "entry_point": "convertListDictionary"}
{"task_id": "MBCPP/392", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n * > getMaxSum(60)\n * 106\n * > getMaxSum(10)\n * 12\n * > getMaxSum(2)\n * 2\n */\nint getMaxSum(int n) {\n    if (n == 0)\n        return 0;\n    int sum = getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5);\n    return max(sum, n);\n}", "entry_point": "getMaxSum"}
{"task_id": "MBCPP/394", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if given tuple is distinct or not.\n * > checkDistinct(vector<int>{1, 4, 5, 6, 1, 4})\n * false\n * > checkDistinct(vector<int>{1, 4, 5, 6})\n * true\n * > checkDistinct(vector<int>{2, 3, 4, 5, 6})\n * true\n */\nbool checkDistinct(vector<int> testTup) {\n    unordered_set<int> seen;\n    for (int num : testTup) {\n        if (seen.find(num) != seen.end()) {\n            return false;\n        }\n        seen.insert(num);\n    }\n    return true;\n}", "entry_point": "checkDistinct"}
{"task_id": "MBCPP/396", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string starts and ends with the same character or not using regex.\n * > checkChar(string(\"abba\"))\n * string(\"Valid\")\n * > checkChar(string(\"a\"))\n * string(\"Valid\")\n * > checkChar(string(\"abcd\"))\n * string(\"Invalid\")\n */\nstring checkChar(string str) {\n    regex pattern(\"^(.).*\\\\1$\");\n    if (regex_match(str, pattern)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}", "entry_point": "checkChar"}
{"task_id": "MBCPP/397", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of three specific numbers.\n * > medianNumbers(25, 55, 65)\n * 55.0\n * > medianNumbers(20, 10, 30)\n * 20.0\n * > medianNumbers(15, 45, 75)\n * 45.0\n */\ndouble medianNumbers(int a, int b, int c) {\n    if ((a >= b && a <= c) || (a <= b && a >= c))\n        return a;\n    else if ((b >= a && b <= c) || (b <= a && b >= c))\n        return b;\n    else\n        return c;\n}", "entry_point": "medianNumbers"}
{"task_id": "MBCPP/398", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n * > sumOfDigits(vector<int>{10, 2, 56})\n * 14\n * > sumOfDigits(vector<int>{10, 20, -4, 5, -70})\n * 19\n */\nint sumOfDigits(vector<int> nums) {\n    int total = 0;\n    for (int num : nums) {\n        int n = abs(num);\n        while (n > 0) {\n            total += n % 10;\n            n /= 10;\n        }\n    }\n    return total;\n}", "entry_point": "sumOfDigits"}
{"task_id": "MBCPP/399", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n * > bitwiseXor(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {15, 6, 5, 10}\n * > bitwiseXor(vector<int>{11, 5, 7, 10}, vector<int>{6, 3, 4, 4})\n * {13, 6, 3, 14}\n * > bitwiseXor(vector<int>{12, 6, 8, 11}, vector<int>{7, 4, 5, 6})\n * {11, 2, 13, 13}\n */\nvector<int> bitwiseXor(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] ^ testTup2[i]);\n    }\n    return result;\n}", "entry_point": "bitwiseXor"}
{"task_id": "MBCPP/400", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n * > extractFreq(vector<vector<int>>{{3, 4}, {1, 2}, {4, 3}, {5, 6}})\n * 3\n * > extractFreq(vector<vector<int>>{{4, 15}, {2, 3}, {5, 4}, {6, 7}})\n * 4\n * > extractFreq(vector<vector<int>>{{5, 16}, {2, 3}, {6, 5}, {6, 9}})\n * 4\n */\nint extractFreq(vector<vector<int>> testList) {\n    unordered_set<string> uniqueTuples;\n    for (auto& tuple : testList) {\n        sort(tuple.begin(), tuple.end());\n        string key = to_string(tuple[0]) + \",\" + to_string(tuple[1]);\n        uniqueTuples.insert(key);\n    }\n    return uniqueTuples.size();\n}", "entry_point": "extractFreq"}
{"task_id": "MBCPP/401", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n * > addNestedTuples(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{7, 10}, {7, 14}, {3, 10}, {\u6781\u597d\u7684\uff0c\u6211\u4eec\u7ee7\u7eed\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u8ba8\u8bba\u5982\u4f55\u5c06\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u6574\u5408\u5230\u4e00\u4e2a\u5b8c\u6574\u7684Markdown\u6587\u6863\u4e2d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6574\u5408\u540e\u7684\u793a\u4f8b\uff1a\n\n---\n\n# \u4f7f\u7528C++\u5b9e\u73b0\u5d4c\u5957\u5143\u7ec4\u7684\u9010\u5143\u7d20\u52a0\u6cd5\n\n## \u529f\u80fd\u63cf\u8ff0\n\u8be5\u7a0b\u5e8f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u51fd\u6570`addNestedTuples`\uff0c\u7528\u4e8e\u5bf9\u4e24\u4e2a\u5d4c\u5957\u7684\u6574\u6570\u5411\u91cf\uff08\u6a21\u62df\u5143\u7ec4\uff09\u8fdb\u884c\u9010\u5143\u7d20\u52a0\u6cd5\u8fd0\u7b97\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0", "entry_point": "addNestedTuples"}
{"task_id": "MBCPP/402", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr%p.\n * > ncrModp(10, 2, 13)\n * 6\n * > ncrModp(15, 12, 43)\n * 25\n * > ncrModp(17, 9, 18)\n * 10\n */\nint ncrModp(int n, int r, int p) {\n    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    if (r > n - r)\n        r = n - r;\n    int dp[r + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = min(i, r); j > 0; j--) {\n            dp[j] = (dp[j] + dp[j - 1]) % p;\n        }\n    }\n    return dp[r];\n}", "entry_point": "ncrModp"}
{"task_id": "MBCPP/403", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a url is valid or not using regex.\n * > isValidUrl(string(\"https://www.google.com\"))\n * true\n * > isValidUrl(string(\"https:/www.gmail.com\"))\n * false\n * > isValidUrl(string(\"https:// www.redit.com\"))\n * false\n */\nbool isValidUrl(string str) {\n    regex pattern(\"^(https?:\\\\/\\\\/)?([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([\\\\/\\\\w \\\\.-]*)*\\\\/?$\");\n    return regex_match(str, pattern);\n}", "entry_point": "isValidUrl"}
{"task_id": "MBCPP/404", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum of two numbers.\n * > minimum(1, 2)\n * 1\n * > minimum(-5, -4)\n * -5\n * > minimum(0, 0)\n * 0\n */\nint minimum(int a, int b) {\n    return (a < b) ? a : b;\n}", "entry_point": "minimum"}
{"task_id": "MBCPP/406", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the parity of a given number.\n * > findParity(12)\n * string(\"Even Parity\")\n * > findParity(7)\n * string(\"Odd Parity\")\n * > findParity(10)\n * string(\"Even Parity\")\n */\nstring findParity(int x) {\n    if (x % 2 == 0)\n        return \"Even Parity\";\n    else\n        return \"Odd Parity\";\n}", "entry_point": "findParity"}
{"task_id": "MBCPP/408", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 2)\n * {{1, 2}, {1, 4}}\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 1)\n * {{1, 2}}\n * > kSmallestPairs(vector<int>{1, 3, 7}, vector<int>{2, 4, 6}, 7)\n * {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}\n */\nvector<vector<int>> kSmallestPairs(vector<int> nums1, vector<int> nums2, int k) {\n    vector<vector<int>> result;\n    if (nums1.empty() || nums2.empty() || k <= 0) return result;\n    \n    auto cmp = [](const pair<int, pair<int, int>>& a, const pair<int, pair<int, int>>& b) {\n        return a.first > b.first;\n    };\n    \n    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, decltype(cmp)> pq(cmp);\n    \n    for (int i = 0; i < nums1.size(); ++i) {\n        pq.push({nums1[i] + nums2[0], {i, 0}});\n    }\n    \n    while (k-- && !pq.empty()) {\n        auto top = pq.top();\n        pq.pop();\n        int i = top.second.first, j = top.second.second;\n        result.push_back({nums1[i], nums2[j]});\n        if (j + 1 < nums2.size()) {\n            pq.push({nums1[i] + nums2[j + 1], {i, j + 1}});\n        }\n    }\n    \n    return result;\n}", "entry_point": "kSmallestPairs"}
{"task_id": "MBCPP/409", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum product from the pairs of tuples within a given list.\n * > minProductTuple(vector<vector<int>>{{2, 7}, {2, 6}, {1, 8}, {4, 9}})\n * 8\n * > minProductTuple(vector<vector<int>>{{10, 20}, {15, 2}, {5, 10}})\n * 30\n * > minProductTuple(vector<vector<int>>{{11, 44}, {10, 15}, {20, 5}, {12, 9}})\n * 100\n */\nint minProductTuple(vector<vector<int>> list1) {\n    int minProduct = INT_MAX;\n    for (const auto& pair : list1) {\n        int product = pair[0] * pair[1];\n        if (product < minProduct) {\n            minProduct = product;\n        }\n    }\n    return minProduct;\n}", "entry_point": "minProductTuple"}
{"task_id": "MBCPP/411", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given snake case string to camel case string by using regex.\n * > snakeToCamel(string(\"android_tv\"))\n * string(\"AndroidTv\")\n * > snakeToCamel(string(\"google_pixel\"))\n * string(\"GooglePixel\")\n * > snakeToCamel(string(\"apple_watch\"))\n * string(\"AppleWatch\")\n */\nstring snakeToCamel(string word) {\n    string result;\n    bool capitalizeNext = true;\n    for (char ch : word) {\n        if (ch == '_') {\n            capitalizeNext = true;\n        } else {\n            if (capitalizeNext) {\n                result += toupper(ch);\n                capitalizeNext = false;\n            } else {\n                result += ch;\n            }\n        }\n    }\n    return result;\n}", "entry_point": "snakeToCamel"}
{"task_id": "MBCPP/412", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove odd numbers from a given list.\n * > removeOdd(vector<int>{1, 2, 3})\n * {2}\n * > removeOdd(vector<int>{2, 4, 6})\n * {2, 4, 6}\n * > removeOdd(vector<int>{10, 20, 3})\n * {10, 20}\n */\nvector<int> removeOdd(vector<int> l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "removeOdd"}
{"task_id": "MBCPP/414", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the value exists in a sequence or not.\n * > overlapping(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 8, 9})\n * false\n * > overlapping(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * false\n * > overlapping(vector<int>{1, 4, 5}, vector<int>{1, 4, 5})\n * true\n */\nbool overlapping(vector<int> list1, vector<int> list2) {\n    unordered_set<int> set1(list1.begin(), list1.end());\n    for (int num : list2) {\n        if (set1.find(num) != set1.end()) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "overlapping"}
{"task_id": "MBCPP/415", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find a pair with highest product from a given array of integers.\n * > maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4})\n * {7, 8}\n * > maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6})\n * {-4, -6}\n * > maxProduct(vector<int>{1, 2, 3})\n * {2, 3}\n */\nvector<int> maxProduct(vector<int> arr) {\n    int n = arr.size();\n    if (n < 2)\n        return {};\n\n    sort(arr.begin(), arr.end());\n\n    long long product1 = arr[0] * arr[1];\n    long long product2 = arr[n - 1] * arr[n - 2];\n\n    if (product1 > product2)\n        return {arr[0], arr[1]};\n    else\n        return {arr[n - 2], arr[n - 1]};\n}", "entry_point": "maxProduct"}
{"task_id": "MBCPP/416", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n * > breaksum(12)\n * 13\n * > breaksum(24)\n * 27\n * > breaksum(23)\n * 23\n */\nint breaksum(int n) {\n    if (n == 0 || n == 1)\n        return n;\n    return max(n, breaksum(n / 2) + breaksum(n / 3) + breaksum(n / 4));\n}", "entry_point": "breaksum"}
{"task_id": "MBCPP/417", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common first element in given list of tuple.\n * > groupTuples(vector<vector<string>>{{string(\"x\"), string(\"y\")}, {string(\"x\"), string(\"z\")}, {string(\"w\"), string(\"t\")}})\n * {{string(\"x\"), string(\"y\"), string(\"z\")}, {string(\"w\"), string(\"t\")}}\n * > groupTuples(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"a\"), string(\"c\")}, {string(\"d\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\"), string(\"c\")}, {string(\"d\"), string(\"e\")}}\n * > groupTuples(vector<vector<string>>{{string(\"f\"), string(\"g\")}, {string(\"f\"), string(\"g\")}, {string(\"h\"), string(\"i\")}})\n * {{string(\"f\"), string(\"g\"), string(\"g\")}, {string(\"h\"), string(\"i\")}}\n */\nvector<vector<string>> groupTuples(vector<vector<string>> input) {\n    unordered_map<string, vector<string>> groups;\n    for (const auto& tuple : input) {\n        if (!tuple.empty()) {\n            string key = tuple[0];\n            for (size_t i = 1; i < tuple.size(); ++i) {\n                groups[key].push_back(tuple[i]);\n            }\n        }\n    }\n\n    vector<vector<string>> result;\n    for (const auto& [key, values] : groups) {\n        vector<string> group;\n        group.push_back(key);\n        group.insert(group.end(), values.begin(), values.end());\n        result.push_back(group);\n    }\n\n    return result;\n}", "entry_point": "groupTuples"}
{"task_id": "MBCPP/419", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n * > roundAndSum(vector<double>{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5})\n * 243\n * > roundAndSum(vector<double>{25.0, 56.7, 89.2})\n * 513\n */\nint roundAndSum(vector<double> list1) {\n    int sum = 0;\n    for (double num : list1) {\n        sum += round(num);\n    }\n    return sum * list1.size();\n}", "entry_point": "roundAndSum"}
{"task_id": "MBCPP/420", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n even natural numbers.\n * > cubeSum(2)\n * 72\n * > cubeSum(3)\n * 288\n * > cubeSum(4)\n * 800\n */\nint cubeSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += evenNum * evenNum * evenNum;\n    }\n    return sum;\n}", "entry_point": "cubeSum"}
{"task_id": "MBCPP/423", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve gold mine problem.\n * > getMaxgold(vector<vector<int>>{{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}, 4, 4)\n * 16\n * > getMaxgold(vector<vector<int>>{{10, 20}, {30, 40}}, 2, 2)\n * 70\n * > getMaxgold(vector<vector<int>>{{4, 9}, {3, 7}}, 2, 2)\n * 13\n */\nint getMaxgold(vector<vector<int>> gold, int m, int n) {\n    vector<vector<int>> dp(m, vector<int>(n, 0));\n    for (int col = n - 1; col >= 0; col--) {\n        for (int row = 0; row < m; row++) {\n            int right = (col == n - 1) ? 0 : dp[row][col + 1];\n            int right_up = (row == 0 || col == n - 1) ? 0 : dp[row - 1][col + 1];\n            int right_down = (row == m - 1 || col == n - 1) ? 0 : dp[row + 1][col + 1];\n            dp[row][col] = gold[row][col] + max(right, max(right_up, right_down));\n        }\n    }\n    int max_gold = dp[0][0];\n    for (int i = 1; i < m; i++) {\n        max_gold = max(max_gold, dp[i][0]);\n    }\n    return max_gold;\n}", "entry_point": "getMaxgold"}
{"task_id": "MBCPP/424", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract only the rear index element of each string in the given tuple.\n * > extractRear(vector<string>{string(\"Mers\"), string(\"for\"), string(\"Vers\")})\n * {string(\"s\"), string(\"r\"), string(\"s\")}\n * > extractRear(vector<string>{string(\"Avenge\"), string(\"for\"), string(\"People\")})\n * {string(\"e\"), string(\"r\"), string(\"e\")}\n * > extractRear(vector<string>{string(\"Gotta\"), string(\"get\"), string(\"go\")})\n * {string(\"a\"), string(\"t\"), string(\"o\")}\n */\nvector<string> extractRear(vector<string> testTuple) {\n    vector<string> result;\n    for (const auto& str : testTuple) {\n        if (!str.empty()) {\n            result.push_back(string(1, str.back()));\n        }\n    }\n    return result;\n}", "entry_point": "extractRear"}
{"task_id": "MBCPP/426", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to filter odd numbers using lambda function.\n * > filterOddnumbers(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 3, 5, 7, 9}\n * > filterOddnumbers(vector<int>{10, 20, 45, 67, 84, 93})\n * {45, 67, 93}\n * > filterOddnumbers(vector<int>{5, 7, 9, 8, 6, 4, 3})\n * {5, 7, 9, 3}\n */\nvector<int> filterOddnumbers(vector<int> nums) {\n    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), [](int num) { return num % 2 != 0; });\n    return result;\n}", "entry_point": "filterOddnumbers"}
{"task_id": "MBCPP/427", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n * > changeDateFormat(string(\"2026-01-02\"))\n * string(\"02-01-2026\")\n * > changeDateFormat(string(\"2020-11-13\"))\n * string(\"13-11-2020\")\n * > changeDateFormat(string(\"2021-04-26\"))\n * string(\"26-04-2021\")\n */\nstring changeDateFormat(string dt) {\n    regex pattern(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    smatch match;\n    if (regex_match(dt, match, pattern)) {\n        return match[3].str() + \"-\" + match[2].str() + \"-\" + match[1].str();\n    }\n    return dt;\n}", "entry_point": "changeDateFormat"}
{"task_id": "MBCPP/428", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using shell sort.\n * > shellSort(vector<int>{12, 23, 4, 5, 3, 2, 12, 81, 56, 95})\n * {2, 3, 4, 5, 12, 12, 23, 56, 81, 95}\n * > shellSort(vector<int>{24, 22, 39, 34, 87, 73, 68})\n * {22, 24, 34, 39, 68, 73, 87}\n * > shellSort(vector<int>{32, 30, 16, 96, 82, 83, 74})\n * {16, 30, 32, 74, 82, 83, 96}\n */\nvector<int> shellSort(vector<int> myList) {\n    int n = myList.size();\n    for (int gap = n / 2; gap > 0; gap /= 2) {\n        for (int i = gap; i < n; i++) {\n            int temp = myList[i];\n            int j;\n            for (j = i; j >= gap && myList[j - gap] > temp; j -= gap) {\n                myList[j] = myList[j - gap];\n            }\n            myList[j] = temp;\n        }\n    }\n    return myList;\n}", "entry_point": "shellSort"}
{"task_id": "MBCPP/429", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the elementwise and tuples from the given two tuples.\n * > andTuples(vector<int>{10, 4, 6, 9}, vector<int>{5, 2, 3, 3})\n * {0, 0, 2, 1}\n * > andTuples(vector<int>{1, 2, 3, 4}, vector<int>{5, 6, 7, 8})\n * {1, 2, 3, 0}\n * > andTuples(vector<int>{8, 9, 11, 12}, vector<int>{7, 13, 14, 17})\n * {0, 9, 10, 0}\n */\nvector<int> andTuples(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] & testTup2[i]);\n    }\n    return result;\n}", "entry_point": "andTuples"}
{"task_id": "MBCPP/430", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the directrix of a parabola.\n * > parabolaDirectrix(5, 3, 2)\n * -198\n * > parabolaDirectrix(9, 8, 4)\n * -2336\n * > parabolaDirectrix(2, 4, 6)\n * -130\n */\nint parabolaDirectrix(int a, int b, int c) {\n    return -((b * b) + (4 * a * c));\n}", "entry_point": "parabolaDirectrix"}
{"task_id": "MBCPP/433", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the entered number is greater than the elements of the given array.\n * > checkGreater(vector<int>{1, 2, 3, 4, 5}, 4)\n * string(\"No, entered number is less than those in the array\")\n * > checkGreater(vector<int>{2, 3, 4, 5, 6}, 8)\n * string(\"Yes, the entered number is greater than those in the array\")\n * > checkGreater(vector<int>{9, 7, 4, 8, 6, 1}, 11)\n * string(\"Yes, the entered number is greater than those in the array\")\n */\nstring checkGreater(vector<int> arr, int number) {\n    int maxElement = *max_element(arr.begin(), arr.end());\n    if (number > maxElement) {\n        return \"Yes, the entered number is greater than those in the array\";\n    } else {\n        return \"No, entered number is less than those in the array\";\n    }\n}", "entry_point": "checkGreater"}
{"task_id": "MBCPP/434", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n * > textMatchOne(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchOne(string(\"abba\"))\n * string(\"Found a match!\")\n */\nstring textMatchOne(string text) {\n    regex pattern(\"ab+\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatchOne"}
{"task_id": "MBCPP/435", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit of a given number.\n * > lastDigit(123)\n * 3\n * > lastDigit(25)\n * 5\n * > lastDigit(30)\n * 0\n */\nint lastDigit(int n) {\n    return abs(n) % 10;\n}", "entry_point": "lastDigit"}
{"task_id": "MBCPP/436", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print negative numbers in a list.\n * > negNos(vector<int>{-1, 4, 5, -6})\n * {-1, -6}\n * > negNos(vector<int>{-1, -2, 3, 4})\n * {-1, -2}\n * > negNos(vector<int>{-7, -6, 8, 9})\n * {-7, -6}\n */\nvector<int> negNos(vector<int> list1) {\n    vector<int> result;\n    for (int num : list1) {\n        if (num < 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "negNos"}
{"task_id": "MBCPP/437", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove odd characters in a string.\n * > removeOdd(string(\"python\"))\n * string(\"yhn\")\n * > removeOdd(string(\"program\"))\n * string(\"rga\")\n * > removeOdd(string(\"language\"))\n * string(\"agae\")\n */\nstring removeOdd(string str1) {\n    string result;\n    for (int i = 0; i < str1.length(); i++) {\n        if (i % 2 == 1) {\n            result += str1[i];\n        }\n    }\n    return result;\n}", "entry_point": "removeOdd"}
{"task_id": "MBCPP/438", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count bidirectional tuple pairs.\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"3\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}})\n * string(\"2\")\n * > countBidirectional(vector<vector<int>>{{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}})\n * string(\"4\")\n */\nstring countBidirectional(vector<vector<int>> testList) {\n    unordered_map<string, int> freq;\n    int count = 0;\n    \n    for (auto& pair : testList) {\n        string key = to_string(pair[0]) + \",\" + to_string(pair[1]);\n        string reverseKey = to_string(pair[1]) + \",\" + to_string(pair[0]);\n        \n        if (freq.find(reverseKey) != freq.end()) {\n            count += freq[reverseKey];\n        }\n        freq[key]++;\n    }\n    \n    return to_string(count);\n}", "entry_point": "countBidirectional"}
{"task_id": "MBCPP/439", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list of multiple integers into a single integer.\n * > multipleToSingle(vector<int>{11, 33, 50})\n * 113350\n * > multipleToSingle(vector<int>{-1, 2, 3, 4, 5, 6})\n * -123456\n * > multipleToSingle(vector<int>{10, 15, 20, 25})\n * 10152025\n */\nint multipleToSingle(vector<int> l) {\n    int result = 0;\n    for (int num : l) {\n        int temp = num;\n        if (temp < 0) {\n            temp = -temp;\n        }\n        while (temp > 0) {\n            result *= 10;\n            temp /= 10;\n        }\n        result += num;\n    }\n    return result;\n}", "entry_point": "multipleToSingle"}
{"task_id": "MBCPP/441", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cube.\n * > surfaceareaCube(5)\n * 150\n * > surfaceareaCube(3)\n * 54\n * > surfaceareaCube(10)\n * 600\n */\nint surfaceareaCube(int l) {\n    return 6 * l * l;\n}", "entry_point": "surfaceareaCube"}
{"task_id": "MBCPP/442", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of positive numbers in an array of integers.\n * > positiveCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.54\n * > positiveCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.69\n * > positiveCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.56\n */\ndouble positiveCount(vector<int> nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "entry_point": "positiveCount"}
{"task_id": "MBCPP/443", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest negative number from the given list.\n * > largestNeg(vector<int>{1, 2, 3, -4, -6})\n * -6\n * > largestNeg(vector<int>{1, 2, 3, -8, -9})\n * -9\n * > largestNeg(vector<int>{1, 2, 3, 4, -1})\n * -1\n */\nint largestNeg(vector<int> list1) {\n    int largest = 0;\n    for (int num : list1) {\n        if (num < 0) {\n            if (largest == 0 || num > largest) {\n                largest = num;\n            }\n        }\n    }\n    return largest;\n}", "entry_point": "largestNeg"}
{"task_id": "MBCPP/444", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to trim each tuple by k in the given tuple list.\n * > trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2)\n * string(\"[(2,), (9,), (2,), (2,)]\")\n * > trimTuple(vector<vector<int>>{{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1)\n * string(\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")\n * > trimTuple(vector<vector<int>>{{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1)\n * string(\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")\n */\nstring trimTuple(vector<vector<int>> testList, int k) {\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = k; j < testList[i].size() - k; ++j) {\n            result += to_string(testList[i][j]);\n            if (j < testList[i].size() - k - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i < testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "entry_point": "trimTuple"}
{"task_id": "MBCPP/445", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n * > indexMultiplication(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{6, 21}, {12, 45}, {2, 9}, {7, 30}}\n * > indexMultiplication(vector<vector<int>>{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, vector<vector<int>>{{7, 8}, {4, 10}, {2, 2}, {8, 4}})\n * {{14, 32}, {20, 60}, {6, 20}, {16, 44}}\n * > indexMultiplication(vector<vector<int>>{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, vector<vector<int>>{{8, 9}, {5, 11}, {3, 3}, {9, 5}})\n * {{24, 45}, {30, 77}, {12, 33}, {27, 60}}\n */\nvector<vector<int>> indexMultiplication(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] * testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "entry_point": "indexMultiplication"}
{"task_id": "MBCPP/447", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find cubes of individual elements in a list using lambda function.\n * > cubeNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}\n * > cubeNums(vector<int>{10, 20, 30})\n * {1000, 8000, 27000}\n * > cubeNums(vector<int>{12, 15})\n * {1728, 3375}\n */\nvector<int> cubeNums(vector<int> nums) {\n    transform(nums.begin(), nums.end(), nums.begin(), [](int n) { return n * n * n; });\n    return nums;\n}", "entry_point": "cubeNums"}
{"task_id": "MBCPP/448", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of perrin numbers.\n * > calSum(9)\n * 49\n * > calSum(10)\n * 66\n * > calSum(11)\n * 88\n */\nint calSum(int n) {\n    if (n == 0) return 0;\n    if (n == 1) return 2;\n    if (n == 2) return 2;\n    \n    int p0 = 3, p1 = 0, p2 = 2;\n    int sum = p0 + p1 + p2;\n    \n    for (int i = 3; i < n; i++) {\n        int curr = p1 + p0;\n        sum += curr;\n        p0 = p1;\n        p1 = p2;\n        p2 = curr;\n    }\n    \n    return sum;\n}", "entry_point": "calSum"}
{"task_id": "MBCPP/449", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the triangle is valid or not if 3 points are given.\n * > checkTriangle(1, 5, 2, 5, 4, 6)\n * string(\"Yes\")\n * > checkTriangle(1, 1, 1, 4, 1, 5)\n * string(\"No\")\n * > checkTriangle(1, 1, 1, 1, 1, 1)\n * string(\"No\")\n */\nstring checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    // Calculate the area of the triangle using the shoelace formula\n    double area = abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2.0);\n    \n    // If the area is zero, the points are collinear (not a valid triangle)\n    if (area == 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n}", "entry_point": "checkTriangle"}
{"task_id": "MBCPP/450", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified size of strings from a give list of string values.\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 8)\n * {string(\"practice\"), string(\"solution\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 6)\n * {string(\"Python\")}\n * > extractString(vector<string>{string(\"Python\"), string(\"list\"), string(\"exercises\"), string(\"practice\"), string(\"solution\")}, 9)\n * {string(\"exercises\")}\n */\nvector<string> extractString(vector<string> str, int l) {\n    vector<string> result;\n    for (const auto& s : str) {\n        if (s.size() == l) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}", "entry_point": "extractString"}
{"task_id": "MBCPP/451", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from the given string using regex.\n * > removeWhitespaces(string(\" Google    Flutter \"))\n * string(\"GoogleFlutter\")\n * > removeWhitespaces(string(\" Google    Dart \"))\n * string(\"GoogleDart\")\n * > removeWhitespaces(string(\" iOS    Swift \"))\n * string(\"iOSSwift\")\n */\nstring removeWhitespaces(string text1) {\n    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \"\");\n}", "entry_point": "removeWhitespaces"}
{"task_id": "MBCPP/453", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of even factors of a number.\n * > sumoffactors(18)\n * 26\n * > sumoffactors(30)\n * 48\n * > sumoffactors(6)\n * 8\n */\nint sumoffactors(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0 && i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "entry_point": "sumoffactors"}
{"task_id": "MBCPP/454", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z'.\n * > textMatchWordz(string(\"pythonz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"xyz.\"))\n * string(\"Found a match!\")\n * > textMatchWordz(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWordz(string text) {\n    regex pattern(\"\\\\b\\\\w*z\\\\w*\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatchWordz"}
{"task_id": "MBCPP/455", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 31 days or not.\n * > checkMonthnumbNumber(5)\n * true\n * > checkMonthnumbNumber(2)\n * false\n * > checkMonthnumbNumber(6)\n * false\n */\nbool checkMonthnumbNumber(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)\n        return true;\n    else\n        return false;\n}", "entry_point": "checkMonthnumbNumber"}
{"task_id": "MBCPP/456", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse strings in a given list of string values.\n * > reverseStringList(vector<string>{string(\"Red\"), string(\"Green\"), string(\"Blue\"), string(\"White\"), string(\"Black\")})\n * {string(\"deR\"), string(\"neerG\"), string(\"eulB\"), string(\"etihW\"), string(\"kcalB\")}\n * > reverseStringList(vector<string>{string(\"john\"), string(\"amal\"), string(\"joel\"), string(\"george\")})\n * {string(\"nhoj\"), string(\"lama\"), string(\"leoj\"), string(\"egroeg\")}\n * > reverseStringList(vector<string>{string(\"jack\"), string(\"john\"), string(\"mary\")})\n * {string(\"kcaj\"), string(\"nhoj\"), string(\"yram\")}\n */\nvector<string> reverseStringList(vector<string> stringlist) {\n    for (auto& str : stringlist) {\n        reverse(str.begin(), str.end());\n    }\n    return stringlist;\n}", "entry_point": "reverseStringList"}
{"task_id": "MBCPP/458", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rectangle.\n * > rectangleArea(10, 20)\n * 200\n * > rectangleArea(10, 5)\n * 50\n * > rectangleArea(4, 2)\n * 8\n */\nint rectangleArea(int l, int b) {\n    return l * b;\n}", "entry_point": "rectangleArea"}
{"task_id": "MBCPP/459", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove uppercase substrings from a given string by using regex.\n * > removeUppercase(string(\"cAstyoUrFavoRitETVshoWs\"))\n * string(\"cstyoravoitshos\")\n * > removeUppercase(string(\"wAtchTheinTernEtrAdIo\"))\n * string(\"wtchheinerntrdo\")\n * > removeUppercase(string(\"VoicESeaRchAndreComMendaTionS\"))\n * string(\"oiceachndreomendaion\")\n */\nstring removeUppercase(string str1) {\n    regex pattern(\"[A-Z]\");\n    return regex_replace(str1, pattern, \"\");\n}", "entry_point": "removeUppercase"}
{"task_id": "MBCPP/460", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the first element of each sublist.\n * > extract(vector<vector<int>>{{1, 2}, {3, 4, 5}, {6, 7, 8, 9}})\n * {1, 3, 6}\n * > extract(vector<vector<int>>{{1, 2, 3}, {4, 5}})\n * {1, 4}\n * > extract(vector<vector<int>>{{9, 8, 1}, {1, 2}})\n * {9, 1}\n */\nvector<int> extract(vector<vector<int>> lst) {\n    vector<int> result;\n    for (const auto& sublist : lst) {\n        if (!sublist.empty()) {\n            result.push_back(sublist[0]);\n        }\n    }\n    return result;\n}", "entry_point": "extract"}
{"task_id": "MBCPP/461", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the upper case characters in a given string.\n * > upperCtr(string(\"PYthon\"))\n * 1\n * > upperCtr(string(\"BigData\"))\n * 1\n * > upperCtr(string(\"program\"))\n * 0\n */\nint upperCtr(string str) {\n    int count = 0;\n    for (char c : str) {\n        if (isupper(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "upperCtr"}
{"task_id": "MBCPP/463", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product subarray of the given array.\n * > maxSubarrayProduct(vector<int>{1, -2, -3, 0, 7, -8, -2})\n * 112\n * > maxSubarrayProduct(vector<int>{6, -3, -10, 0, 2})\n * 180\n * > maxSubarrayProduct(vector<int>{-2, -40, 0, -2, -3})\n * 80\n */\nint maxSubarrayProduct(vector<int> arr) {\n    int max_ending_here = arr[0];\n    int min_ending_here = arr[0];\n    int max_so_far = arr[0];\n    \n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0)\n            swap(max_ending_here, min_ending_here);\n            \n        max_ending_here = max(arr[i], max_ending_here * arr[i]);\n        min_ending_here = min(arr[i], min_ending_here * arr[i]);\n        \n        max_so_far = max(max_so_far, max_ending_here);\n    }\n    \n    return max_so_far;\n}", "entry_point": "maxSubarrayProduct"}
{"task_id": "MBCPP/464", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if all values are same in a dictionary.\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 10)\n * false\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 12)\n * true\n * > checkValue(unordered_map<string, int>{{string(\"Cierra Vega\"), 12}, {string(\"Alden Cantrell\"), 12}, {string(\"Kierra Gentry\"), 12}, {string(\"Pierre Cox\"), 12}}, 5)\n * false\n */\nbool checkValue(unordered_map<string, int> dict, int n) {\n    for (const auto& pair : dict) {\n        if (pair.second != n) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "checkValue"}
{"task_id": "MBCPP/466", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the peak element in the given array.\n * > findPeak(vector<int>{1, 3, 20, 4, 1, 0}, 6)\n * 2\n * > findPeak(vector<int>{2, 3, 4, 5, 6}, 5)\n * 4\n * > findPeak(vector<int>{8, 9, 11, 12, 14, 15}, 6)\n * 5\n */\nint findPeak(vector<int> arr, int n) {\n    int left = 0, right = n - 1;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] < arr[mid + 1]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}", "entry_point": "findPeak"}
{"task_id": "MBCPP/467", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert decimal number to octal number.\n * > decimalToOctal(10)\n * 12\n * > decimalToOctal(2)\n * 2\n * > decimalToOctal(33)\n * 41\n */\nint decimalToOctal(int decinum) {\n    int octalnum = 0, i = 1;\n    while (decinum != 0) {\n        octalnum += (decinum % 8) * i;\n        decinum /= 8;\n        i *= 10;\n    }\n    return octalnum;\n}", "entry_point": "decimalToOctal"}
{"task_id": "MBCPP/468", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n * > maxProduct(vector<int>{3, 100, 4, 5, 150, 6}, 6)\n * 45000\n * > maxProduct(vector<int>{4, 42, 55, 68, 80}, 5)\n * 50265600\n * > maxProduct(vector<int>{10, 22, 9, 33, 21, 50, 41, 60}, 8)\n * 21780000\n */\nint maxProduct(vector<int> arr, int n) {\n    vector<int> dp(n);\n    for (int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "entry_point": "maxProduct"}
{"task_id": "MBCPP/469", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum profit earned from a maximum of k stock transactions\n * > maxProfit(vector<int>{1, 5, 2, 3, 7, 6, 4, 5}, 3)\n * 10\n * > maxProfit(vector<int>{2, 4, 7, 5, 4, 3, 5}, 2)\n * 7\n * > maxProfit(vector<int>{10, 6, 8, 4, 2}, 2)\n * 2\n */\nint maxProfit(vector<int> price, int k) {\n    int n = price.size();\n    if (n == 0 || k == 0)\n        return 0;\n\n    if (k >= n / 2) {\n        int maxProfit = 0;\n        for (int i = 1; i < n; i++) {\n            if (price[i] > price[i - 1])\n                maxProfit += price[i] - price[i - 1];\n        }\n        return maxProfit;\n    }\n\n    vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n    for (int i = 1; i <= k; i++) {\n        int maxDiff = -price[0];\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i][j - 1], price[j] + maxDiff);\n            maxDiff = max(maxDiff, dp[i - 1][j] - price[j]);\n        }\n    }\n    return dp[k][n - 1];\n}", "entry_point": "maxProfit"}
{"task_id": "MBCPP/470", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the pairwise addition of the elements of the given tuples.\n * > addPairwise(vector<int>{1, 5, 7, 8, 10})\n * {6, 12, 15, 18}\n * > addPairwise(vector<int>{2, 6, 8, 9, 11})\n * {8, 14, 17, 20}\n * > addPairwise(vector<int>{3, 7, 9, 10, 12})\n * {10, 16, 19, 22}\n */\nvector<int> addPairwise(vector<int> testTup) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] + testTup[i + 1]);\n    }\n    return result;\n}", "entry_point": "addPairwise"}
{"task_id": "MBCPP/471", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of array multiplication divided by n.\n * > findRemainder(vector<int>{100, 10, 5, 25, 35, 14}, 6, 11)\n * 9\n * > findRemainder(vector<int>{1, 1, 1}, 3, 1)\n * 0\n * > findRemainder(vector<int>{1, 2, 1}, 3, 2)\n * 0\n */\nint findRemainder(vector<int> arr, int lens, int n) {\n    long long product = 1;\n    for (int i = 0; i < lens; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product % n;\n}", "entry_point": "findRemainder"}
{"task_id": "MBCPP/472", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given list contains consecutive numbers or not.\n * > checkConsecutive(vector<int>{1, 2, 3, 4, 5})\n * true\n * > checkConsecutive(vector<int>{1, 2, 3, 5, 6})\n * false\n * > checkConsecutive(vector<int>{1, 2, 1})\n * false\n */\nbool checkConsecutive(vector<int> l) {\n    if (l.empty()) return false;\n    sort(l.begin(), l.end());\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "checkConsecutive"}
{"task_id": "MBCPP/474", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace characters in a string.\n * > replaceChar(string(\"polygon\"), string(\"y\"), string(\"l\"))\n * string(\"pollgon\")\n * > replaceChar(string(\"character\"), string(\"c\"), string(\"a\"))\n * string(\"aharaater\")\n * > replaceChar(string(\"python\"), string(\"l\"), string(\"a\"))\n * string(\"python\")\n */\nstring replaceChar(string str1, string ch, string newch) {\n    size_t pos = str1.find(ch);\n    while (pos != string::npos) {\n        str1.replace(pos, ch.length(), newch);\n        pos = str1.find(ch, pos + newch.length());\n    }\n    return str1;\n}", "entry_point": "replaceChar"}
{"task_id": "MBCPP/476", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of the largest and smallest value in a given array.\n * > bigSum(vector<int>{1, 2, 3})\n * 4\n * > bigSum(vector<int>{-1, 2, 3, 4})\n * 3\n * > bigSum(vector<int>{2, 3, 6})\n * 8\n */\nint bigSum(vector<int> nums) {\n    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return min_val + max_val;\n}", "entry_point": "bigSum"}
{"task_id": "MBCPP/477", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to lower case.\n * > isLower(string(\"InValid\"))\n * string(\"invalid\")\n * > isLower(string(\"TruE\"))\n * string(\"true\")\n * > isLower(string(\"SenTenCE\"))\n * string(\"sentence\")\n */\nstring isLower(string str) {\n    for (char &c : str) {\n        c = tolower(c);\n    }\n    return str;\n}", "entry_point": "isLower"}
{"task_id": "MBCPP/478", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string.\n * > removeLowercase(string(\"PYTHon\"))\n * string(\"PYTH\")\n * > removeLowercase(string(\"FInD\"))\n * string(\"FID\")\n * > removeLowercase(string(\"STRinG\"))\n * string(\"STRG\")\n */\nstring removeLowercase(string str1) {\n    string result;\n    for (char c : str1) {\n        if (!islower(c)) {\n            result += c;\n        }\n    }\n    return result;\n}", "entry_point": "removeLowercase"}
{"task_id": "MBCPP/479", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit of a given number.\n * > firstDigit(123)\n * 1\n * > firstDigit(456)\n * 4\n * > firstDigit(12)\n * 1\n */\nint firstDigit(int n) {\n    while (n >= 10) {\n        n /= 10;\n    }\n    return n;\n}", "entry_point": "firstDigit"}
{"task_id": "MBCPP/480", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum occurring character in a given string.\n * > getMaxOccuringChar(string(\"data\"))\n * string(\"a\")\n * > getMaxOccuringChar(string(\"create\"))\n * string(\"e\")\n * > getMaxOccuringChar(string(\"brilliant girl\"))\n * string(\"i\")\n */\nstring getMaxOccuringChar(string str1) {\n    int count[256] = {0};\n    int len = str1.length();\n    for (int i = 0; i < len; i++)\n        count[str1[i]]++;\n    int max = -1;\n    char result;\n    for (int i = 0; i < len; i++) {\n        if (max < count[str1[i]]) {\n            max = count[str1[i]];\n            result = str1[i];\n        }\n    }\n    return string(1, result);\n}", "entry_point": "getMaxOccuringChar"}
{"task_id": "MBCPP/481", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 9)\n * true\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 30)\n * false\n * > isSubsetSum(vector<int>{3, 34, 4, 12, 5, 2}, 6, 15)\n * true\n */\nbool isSubsetSum(vector<int> set, int n, int sum) {\n    bool dp[n + 1][sum + 1];\n    for (int i = 0; i <= n; i++)\n        dp[i][0] = true;\n    for (int i = 1; i <= sum; i++)\n        dp[0][i] = false;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= sum; j++) {\n            if (j < set[i - 1])\n                dp[i][j] = dp[i - 1][j];\n            else\n                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - set[i - 1]];\n        }\n    }\n    return dp[n][sum];\n}", "entry_point": "isSubsetSum"}
{"task_id": "MBCPP/482", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n * > match(string(\"Geeks\"))\n * string(\"Yes\")\n * > match(string(\"geeksforGeeks\"))\n * string(\"Yes\")\n * > match(string(\"geeks\"))\n * string(\"No\")\n */\nstring match(string text) {\n    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_search(text, pattern))\n        return \"Yes\";\n    else\n        return \"No\";\n}", "entry_point": "match"}
{"task_id": "MBCPP/483", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first natural number whose factorial is divisible by x.\n * > firstFactorialDivisibleNumber(10)\n * 5\n * > firstFactorialDivisibleNumber(15)\n * 5\n * > firstFactorialDivisibleNumber(5)\n * 4\n */\nint firstFactorialDivisibleNumber(int x) {\n    if (x == 1)\n        return 1;\n    \n    int factorial = 1;\n    for (int i = 1; ; ++i) {\n        factorial *= i;\n        if (factorial % x == 0)\n            return i;\n    }\n}", "entry_point": "firstFactorialDivisibleNumber"}
{"task_id": "MBCPP/484", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the matching tuples from the given two tuples.\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Hello\"), string(\"dude\")}, {string(\"How\"), string(\"are\")}, {string(\"you\"), string(\"?\")}}, vector<vector<string>>{{string(\"Hello\"), string(\"dude\"), {string(\"How\"), string(\"are\")}})\n * {{string(\"you\"), string(\"?\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}, vector<vector<string>>{{string(\"Journey\"), string(\"the\")}, {string(\"is\"), string(\"end\")}})\n * {{string(\"Part\"), string(\"of\")}, {string(\"the\"), string(\"journey\")}, {string(\"is \"), string(\"end\")}}\n * > removeMatchingTuple(vector<vector<string>>{{string(\"Its\"), string(\"been\")}, {string(\"a\"), string(\"long\")}, {string(\"day\"), string(\"without\")}}, vector<vector<string>>{{string(\"a\"), string(\"long\")}, {string(\"my\"), string(\"friend\")}})\n * {{string(\"Its\"), string(\"been\")}, {string(\"day\"), string(\"without\")}}\n */\nvector<vector<string>> removeMatchingTuple(vector<vector<string>> testList1, vector<vector<string>> testList2) {\n    vector<vector<string>> result;\n    for (const auto& tuple1 : testList1) {\n        bool found = false;\n        for (const auto& tuple2 : testList2) {\n            if (tuple1 == tuple2) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push_back(tuple1);\n        }\n    }\n    return result;\n}", "entry_point": "removeMatchingTuple"}
{"task_id": "MBCPP/485", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest palindromic number in the given array.\n * > largestPalindrome(vector<int>{1, 232, 54545, 999991}, 4)\n * 54545\n * > largestPalindrome(vector<int>{1, 2, 3, 4, 5, 50}, 6)\n * 5\n */\nint largestPalindrome(vector<int> a, int n) {\n    int largest = -1;\n    for(int i = 0; i < n; i++) {\n        string num = to_string(a[i]);\n        string reversed_num = num;\n        reverse(reversed_num.begin(), reversed_num.end());\n        if(num == reversed_num && a[i] > largest) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}", "entry_point": "largestPalindrome"}
{"task_id": "MBCPP/486", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute binomial probability for the given number.\n * > binomialProbability(10, 5, 0.3333333333333333)\n * 0.13656454808718185\n * > binomialProbability(11, 6, 0.5)\n * 0.2255859375\n * > binomialProbability(12, 7, 0.6)\n * 0.227030335488\n */\ndouble binomialProbability(int n, int k, double p) {\n    if (p < 0 || p > 1 || n < 0 || k < 0 || k > n)\n        return 0.0;\n    \n    double comb = 1.0;\n    for (int i = 1; i <= k; i++) {\n        comb *= (n - k + i);\n        comb /= i;\n    }\n    \n    return comb * pow(p, k) * pow(1 - p, n - k);\n}", "entry_point": "binomialProbability"}
{"task_id": "MBCPP/487", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n * > sortTuple(vector<vector<int>>{{1, 3}, {3, 2}, {2, 1}})\n * {{2, 1}, {3, 2}, {1, 3}}\n * > sortTuple(vector<vector<int>>{{2, 4}, {3, 3}, {1, 1}})\n * {{1, 1}, {3, 3}, {2, 4}}\n * > sortTuple(vector<vector<int>>{{3, 9}, {6, 7}, {4, 3}})\n * {{4, 3}, {6, 7}, {3, 9}}\n */\nvector<vector<int>> sortTuple(vector<vector<int>> tup) {\n    sort(tup.begin(), tup.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tup;\n}", "entry_point": "sortTuple"}
{"task_id": "MBCPP/488", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a pentagon.\n * > areaPentagon(5)\n * 43.01193501472417\n * > areaPentagon(10)\n * 172.0477400588967\n * > areaPentagon(15)\n * 387.10741513251753\n */\ndouble areaPentagon(int a) {\n    return (sqrt(5 * (5 + 2 * sqrt(5))) * a * a) / 4.0;\n}", "entry_point": "areaPentagon"}
{"task_id": "MBCPP/489", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the frequency of the largest value in a given array.\n * > frequencyOfLargest(5, vector<int>{1, 2, 3, 4, 4})\n * 2\n * > frequencyOfLargest(3, vector<int>{5, 6, 5})\n * 1\n * > frequencyOfLargest(4, vector<int>{2, 7, 7, 7})\n * 3\n */\nint frequencyOfLargest(int n, vector<int> arr) {\n    if (n == 0) return 0;\n    int max_val = *max_element(arr.begin(), arr.end());\n    int count = 0;\n    for (int num : arr) {\n        if (num == max_val) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "frequencyOfLargest"}
{"task_id": "MBCPP/491", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of geometric progression series.\n * > sumGp(1, 5, 2)\n * 31\n * > sumGp(1, 5, 4)\n * 341\n * > sumGp(2, 6, 3)\n * 728\n */\nint sumGp(int a, int n, int r) {\n    if (r == 1)\n        return a * n;\n    return a * (pow(r, n) - 1) / (r - 1);\n}", "entry_point": "sumGp"}
{"task_id": "MBCPP/492", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search an element in the given array by using binary search.\n * > binarySearch(vector<int>{1, 2, 3, 5, 8}, 6)\n * false\n * > binarySearch(vector<int>{7, 8, 9, 10, 13}, 10)\n * true\n * > binarySearch(vector<int>{11, 13, 14, 19, 22, 36}, 23)\n * false\n */\nbool binarySearch(vector<int> itemList, int item) {\n    int left = 0;\n    int right = itemList.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (itemList[mid] == item)\n            return true;\n        else if (itemList[mid] < item)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return false;\n}", "entry_point": "binarySearch"}
{"task_id": "MBCPP/493", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n * > calculatePolygons(1, 1, 4, 4, 3)\n * {{{-5.0, -4.196152422706632}, {-5.0, -0.7320508075688767}, {-2.0, 1.0}, {1.0, -0.7320508075688767}, {1.0, -4.196152422706632}, {-2.0, -5.928203\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781\u5ba2\u65f6\u95f4\u6781", "entry_point": "calculatePolygons"}
{"task_id": "MBCPP/494", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given binary tuple to integer.\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 0, 1})\n * string(\"105\")\n * > binaryToInteger(vector<int>{0, 1, 1, 0, 0, 1, 0, 1})\n * string(\"101\")\n * > binaryToInteger(vector<int>{1, 1, 0, 1, 0, 1})\n * string(\"53\")\n */\nstring binaryToInteger(vector<int> testTup) {\n    int result = 0;\n    for (int i = 0; i < testTup.size(); ++i) {\n        result += testTup[i] * pow(2, testTup.size() - i - 1);\n    }\n    return to_string(result);\n}", "entry_point": "binaryToInteger"}
{"task_id": "MBCPP/495", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove lowercase substrings from a given string by using regex.\n * > removeLowercase(string(\"KDeoALOklOOHserfLoAJSIskdsf\"))\n * string(\"KDALOOOHLAJSI\")\n * > removeLowercase(string(\"ProducTnamEstreAmIngMediAplAYer\"))\n * string(\"PTEAIMAAY\")\n * > removeLowercase(string(\"maNufacTuredbYSheZenTechNolOGIes\"))\n * string(\"NTYSZTNOGI\")\n */\nstring removeLowercase(string str1) {\n    regex pattern(\"[a-z]\");\n    return regex_replace(str1, pattern, \"\");\n}", "entry_point": "removeLowercase"}
{"task_id": "MBCPP/496", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 3)\n * {14, 22, 25}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58}, 2)\n * {14, 22}\n * > heapQueueSmallest(vector<int>{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5)\n * {14, 22, 22, 25, 35}\n */\nvector<int> heapQueueSmallest(vector<int> nums, int n) {\n    priority_queue<int> maxHeap;\n    for (int num : nums) {\n        maxHeap.push(num);\n        if (maxHeap.size() > n) {\n            maxHeap.pop();\n        }\n    }\n    vector<int> result;\n    while (!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n        maxHeap.pop();\n    }\n    reverse(result.begin(), result.end());\n    return result;\n}", "entry_point": "heapQueueSmallest"}
{"task_id": "MBCPP/497", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cone.\n * > surfaceareaCone(5, 12)\n * 282.7433388230814\n * > surfaceareaCone(10, 15)\n * 880.5179353159282\n * > surfaceareaCone(19, 17)\n * 2655.923961165254\n */\ndouble surfaceareaCone(int r, int h) {\n    double l = sqrt(r * r + h * h);\n    return M_PI * r * (r + l);\n}", "entry_point": "surfaceareaCone"}
{"task_id": "MBCPP/498", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find gcd of two positive integers.\n * > gcd(12, 17)\n * 1\n * > gcd(4, 6)\n * 2\n * > gcd(2, 9)\n * 1\n */\nint gcd(int x, int y) {\n    while (y != 0) {\n        int temp = y;\n        y = x % y;\n        x = temp;\n    }\n    return x;\n}", "entry_point": "gcd"}
{"task_id": "MBCPP/499", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the diameter of a circle.\n * > diameterCircle(10)\n * 20\n * > diameterCircle(40)\n * 80\n * > diameterCircle(15)\n * 30\n */\nint diameterCircle(int r) {\n    return 2 * r;\n}", "entry_point": "diameterCircle"}
{"task_id": "MBCPP/500", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate all elements of the given list into a string.\n * > concatenateElements(vector<string>{string(\"hello\"), string(\"there\"), string(\"have\"), string(\"a\"), string(\"rocky\"), string(\"day\")})\n * string(\"  hello there have a rocky day\")\n * > concatenateElements(vector<string>{string(\"Hi\"), string(\"there\"), string(\"How\"), string(\"are\"), string(\"you\")})\n * string(\"  Hi there How are you\")\n * > concatenateElements(vector<string>{string(\"Part\"), string(\"of\"), string(\"the\"), string(\"journey\"), string(\"is\"), string(\"end\")})\n * string(\"  Part of the journey is end\")\n */\nstring concatenateElements(vector<string> list) {\n    string result = \"  \";\n    for (const string& s : list) {\n        result += s + \" \";\n    }\n    if (!result.empty()) {\n        result.pop_back();\n    }\n    return result;\n}", "entry_point": "concatenateElements"}
{"task_id": "MBCPP/501", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find common divisor between two numbers in a given pair.\n * > numCommDiv(2, 4)\n * 2\n * > numCommDiv(2, 8)\n * 2\n * > numCommDiv(12, 24)\n * 6\n */\nint numCommDiv(int x, int y) {\n    int gcd = __gcd(x, y);\n    int count = 0;\n    for (int i = 1; i <= sqrt(gcd); i++) {\n        if (gcd % i == 0) {\n            if (gcd / i == i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return count;\n}", "entry_point": "numCommDiv"}
{"task_id": "MBCPP/502", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find remainder of two numbers.\n * > find(3, 3)\n * 0\n * > find(10, 3)\n * 1\n * > find(16, 5)\n * 1\n */\nint find(int n, int m) {\n    return n % m;\n}", "entry_point": "find"}
{"task_id": "MBCPP/503", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add consecutive numbers of a given list.\n * > addConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {2, 4, 7, 8, 9, 11, 13}\n * > addConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10})\n * {9, 13, 17, 15, 16}\n * > addConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {3, 5, 7, 9, 11, 13, 15, 17, 19}\n */\nvector<int> addConsecutiveNums(vector<int> nums) {\n    vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}", "entry_point": "addConsecutiveNums"}
{"task_id": "MBCPP/504", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n natural numbers.\n * > sumOfSeries(5)\n * 225\n * > sumOfSeries(2)\n * 9\n * > sumOfSeries(3)\n * 36\n */\nint sumOfSeries(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "entry_point": "sumOfSeries"}
{"task_id": "MBCPP/505", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all zeroes to the end of the given array.\n * > reOrder(vector<int>{6, 0, 8, 2, 3, 0, 4, 0, 1})\n * {6, 8, 2, 3, 4, 1, 0, 0, 0}\n * > reOrder(vector<int>{4, 0, 2, 7, 0, 9, 0, 12, 0})\n * {4, 2, 7, 9, 12, 0, 0, 0, 0}\n * > reOrder(vector<int>{3, 11, 0, 74, 14, 0, 1, 0, 2})\n * {3, 11, 74, 14, 1, 2, 0, 0, 0}\n */\nvector<int> reOrder(vector<int> a) {\n    int count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] != 0) {\n            a[count++] = a[i];\n        }\n    }\n    while (count < a.size()) {\n        a[count++] = 0;\n    }\n    return a;\n}", "entry_point": "reOrder"}
{"task_id": "MBCPP/506", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the permutation coefficient of given p(n, k).\n * > permutationCoefficient(10, 2)\n * 90\n * > permutationCoefficient(10, 3)\n * 720\n * > permutationCoefficient(10, 1)\n * 10\n */\nint permutationCoefficient(int n, int k) {\n    int result = 1;\n    for (int i = 0; i < k; i++) {\n        result *= (n - i);\n    }\n    return result;\n}", "entry_point": "permutationCoefficient"}
{"task_id": "MBCPP/507", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove specific words from a given list.\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"white\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"black\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\"), vector<string>{string(\"black\"), string(\"orange\")})\n * {string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\")}\n * > removeWords(vector<string>{string(\"red\"), string(\"green\"), string(\"blue\"), string(\"white\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"blue\"), string(\"white\")})\n * {string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> removewords) {\n    vector<string> result;\n    unordered_set<string> removeSet(removewords.begin(), removewords.end());\n    for (const auto& word : list1) {\n        if (removeSet.find(word) == removeSet.end()) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "entry_point": "removeWords"}
{"task_id": "MBCPP/508", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the common elements between two given lists are in the same order or not.\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n * > sameOrder(vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")}, vector<string>{string(\"white\"), string(\"orange\"), string(\"pink\"), string(\"black\")})\n * false\n * > sameOrder(vector<string>{string(\"red\"), string(\"green\"), string(\"black\"), string(\"orange\")}, vector<string>{string(\"red\"), string(\"pink\"), string(\"green\"), string(\"white\"), string(\"black\")})\n * true\n */\nbool sameOrder(vector<string> l1, vector<string> l2) {\n    vector<string> common1, common2;\n    for (const auto& s : l1) {\n        if (find(l2.begin(), l2.end(), s) != l2.end()) {\n            common1.push_back(s);\n        }\n    }\n    for (const auto& s : l2) {\n        if (find(l1.begin(), l1.end(), s) != l1.end()) {\n            common2.push_back(s);\n        }\n    }\n    return common1 == common2;\n}", "entry_point": "sameOrder"}
{"task_id": "MBCPP/509", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of odd numbers till a given odd number.\n * > averageOdd(9)\n * 5\n * > averageOdd(5)\n * 3\n * > averageOdd(11)\n * 6\n */\nint averageOdd(int n) {\n    int sum = 0, count = 0;\n    for (int i = 1; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "entry_point": "averageOdd"}
{"task_id": "MBCPP/510", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n * > noOfSubsequences(vector<int>{1, 2, 3, 4}, 10)\n * 11\n * > noOfSubsequences(vector<int>{4, 8, 7, 2}, 50)\n * 9\n * > noOfSubsequences(vector<int>{5, 6, 7, 8}, 15)\n * 4\n */\nint noOfSubsequences(vector<int> arr, int k) {\n    int n = arr.size();\n    int count = 0;\n    for (int i = 1; i < (1 << n); i++) {\n        long long product = 1;\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                product *= arr[j];\n                if (product >= k) {\n                    break;\n                }\n            }\n        }\n        if (product < k) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "noOfSubsequences"}
{"task_id": "MBCPP/511", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum sum of factors of a given number.\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nint findMinSum(int num) {\n    if (num == 1)\n        return 1;\n    int sum = 0;\n    for (int i = 2; i * i <= num; i++) {\n        while (num % i == 0) {\n            sum += i;\n            num /= i;\n        }\n    }\n    if (num > 1)\n        sum += num;\n    return sum;\n}", "entry_point": "findMinSum"}
{"task_id": "MBCPP/514", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the summation of tuple elements in the given tuple list.\n * > sumElements(vector<int>{7, 8, 9, 1, 10, 7})\n * 42\n * > sumElements(vector<int>{1, 2, 3, 4, 5, 6})\n * 21\n * > sumElements(vector<int>{11, 12, 13, 45, 14})\n * 95\n */\nint sumElements(vector<int> testTup) {\n    int sum = 0;\n    for (int num : testTup) {\n        sum += num;\n    }\n    return sum;\n}", "entry_point": "sumElements"}
{"task_id": "MBCPP/515", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if there is a subset with sum divisible by m.\n * > modularSum(vector<int>{3, 1, 7, 5}, 4, 6)\n * true\n * > modularSum(vector<int>{1, 7}, 2, 5)\n * false\n * > modularSum(vector<int>{1, 6}, 2, 5)\n * false\n */\nbool modularSum(vector<int> arr, int n, int m) {\n    if (n > m)\n        return true;\n\n    vector<bool> dp(m, false);\n    for (int i = 0; i < n; i++) {\n        if (dp[0])\n            return true;\n\n        vector<bool> temp(m, false);\n        for (int j = 0; j < m; j++) {\n            if (dp[j]) {\n                if (!dp[(j + arr[i]) % m])\n                    temp[(j + arr[i]) % m] = true;\n            }\n        }\n\n        for (int j = 0; j < m; j++) {\n            if (temp[j])\n                dp[j] = true;\n        }\n\n        dp[arr[i] % m] = true;\n    }\n\n    return dp[0];\n}", "entry_point": "modularSum"}
{"task_id": "MBCPP/516", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list of elements using radix sort.\n * > radixSort(vector<int>{15, 79, 25, 68, 37})\n * {15, 25, 37, 68, 79}\n * > radixSort(vector<int>{9, 11, 8, 7, 3, 2})\n * {2, 3, 7, 8, 9, 11}\n * > radixSort(vector<int>{36, 12, 24, 26, 29})\n * {12, 24, 26, 29, 36}\n */\nvector<int> radixSort(vector<int> nums) {\n    int max_num = *max_element(nums.begin(), nums.end());\n    for (int exp = 1; max_num / exp > 0; exp *= 10) {\n        vector<int> output(nums.size());\n        vector<int> count(10, 0);\n        for (int i = 0; i < nums.size(); i++)\n            count[(nums[i] / exp) % 10]++;\n        for (int i = 1; i < 10; i++)\n            count[i] += count[i - 1];\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            output[count[(nums[i] / exp) % 10] - 1] = nums[i];\n            count[(nums[i] / exp) % 10]--;\n        }\n        nums = output;\n    }\n    return nums;\n}", "entry_point": "radixSort"}
{"task_id": "MBCPP/517", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest postive number from the given list.\n * > largestPos(vector<int>{1, 2, 3, 4, -1})\n * 4\n * > largestPos(vector<int>{0, 1, 2, -5, -1, 6})\n * 6\n * > largestPos(vector<int>{0, 0, 1, 0})\n * 1\n */\nint largestPos(vector<int> list1) {\n    int largest = -1;\n    for (int num : list1) {\n        if (num > largest && num > 0) {\n            largest = num;\n        }\n    }\n    return largest;\n}", "entry_point": "largestPos"}
{"task_id": "MBCPP/518", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the square root of a perfect number.\n * > sqrtRoot(4)\n * 2\n * > sqrtRoot(16)\n * 4\n * > sqrtRoot(400)\n * 20\n */\nint sqrtRoot(int num) {\n    int low = 0, high = num, result = 0;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid * mid == num) {\n            return mid;\n        } else if (mid * mid < num) {\n            low = mid + 1;\n            result = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "entry_point": "sqrtRoot"}
{"task_id": "MBCPP/519", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate volume of a tetrahedron.\n * > volumeTetrahedron(10)\n * 117.85\n * > volumeTetrahedron(15)\n * 397.75\n * > volumeTetrahedron(20)\n * 942.81\n */\ndouble volumeTetrahedron(int num) {\n    double volume = (pow(num, 3)) / (6 * sqrt(2));\n    return round(volume * 100) / 100;\n}", "entry_point": "volumeTetrahedron"}
{"task_id": "MBCPP/520", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lcm of the given array elements.\n * > getLcm(vector<int>{2, 7, 3, 9, 4})\n * 252\n * > getLcm(vector<int>{1, 2, 8, 3})\n * 24\n * > getLcm(vector<int>{3, 8, 4, 10, 5})\n * 120\n */\nint getLcm(vector<int> l) {\n    int result = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        result = (result * l[i]) / __gcd(result, l[i]);\n    }\n    return result;\n}", "entry_point": "getLcm"}
{"task_id": "MBCPP/521", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print check if the triangle is scalene or not.\n * > checkIsosceles(6, 8, 12)\n * true\n * > checkIsosceles(6, 6, 12)\n * false\n * > checkIsosceles(6, 15, 20)\n * true\n */\nbool checkIsosceles(int x, int y, int z) {\n    if (x == y || y == z || x == z)\n        return false;\n    else\n        return true;\n}", "entry_point": "checkIsosceles"}
{"task_id": "MBCPP/522", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest bitonic subsequence for the given array.\n * > lbs(vector<int>{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15})\n * 7\n * > lbs(vector<int>{1, 11, 2, 10, 4, 5, 2, 1})\n * 6\n * > lbs(vector<int>{80, 60, 30, 40, 20, 10})\n * 5\n */\nint lbs(vector<int> arr) {\n    int n = arr.size();\n    if (n == 0) return 0;\n\n    vector<int> lis(n, 1);\n    vector<int> lds(n, 1);\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1)\n                lis[i] = lis[j] + 1;\n        }\n    }\n\n    for (int i = n-2; i >= 0; i--) {\n        for (int j = n-1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + 1)\n                lds[i] = lds[j] + 1;\n        }\n    }\n\n    int max_len = 0;\n    for (int i = 0; i < n; i++) {\n        max_len = max(max_len, lis[i] + lds[i] - 1);\n    }\n\n    return max_len;\n}", "entry_point": "lbs"}
{"task_id": "MBCPP/523", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n * > checkString(string(\"python\"))\n * {string(\"String must have 1 upper case character.\"), string(\"String must have 1 number.\"), string(\"String length should be atleast 8.\")}\n * > checkString(string(\"123python\"))\n * {string(\"String must have 1 upper case character.\")}\n * > checkString(string(\"123Python\"))\n * {string(\"Valid string.\")}\n */\nvector<string> checkString(string str1) {\n    vector<string> result;\n    bool hasUpper = false, hasLower = false, hasNumber = false;\n    int length = str1.length();\n\n    auto checkChar = [&](char c) {\n        if (isupper(c)) hasUpper = true;\n        else if (islower(c)) hasLower = true;\n        else if (isdigit(c)) hasNumber = true;\n    };\n\n    for (char c : str1) {\n        checkChar(c);\n    }\n\n    if (!hasUpper) result.push_back(\"String must have 1 upper case character.\");\n    if (!hasLower) result.push_back(\"String must have 1 lower case character.\");\n    if (!hasNumber) result.push_back(\"String must have 1 number.\");\n    if (length < 8) result.push_back(\"String length should be atleast 8.\");\n\n    if (result.empty()) result.push_back(\"Valid string.\");\n\n    return result;\n}", "entry_point": "checkString"}
{"task_id": "MBCPP/524", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of maximum increasing subsequence of the given array.\n * > maxSumIncreasingSubsequence(vector<int>{1, 101, 2, 3, 100, 4, 5}, 7)\n * 106\n * > maxSumIncreasingSubsequence(vector<int>{3, 4, 5, 10}, 4)\n * 22\n * > maxSumIncreasingSubsequence(vector<int>{10, 5, 4, 3}, 4)\n * 10\n */\nint maxSumIncreasingSubsequence(vector<int> arr, int n) {\n    vector<int> dp(arr.begin(), arr.end());\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "entry_point": "maxSumIncreasingSubsequence"}
{"task_id": "MBCPP/525", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether two given lines are parallel or not.\n * > parallelLines(vector<int>{2, 3, 4}, vector<int>{2, 3, 8})\n * true\n * > parallelLines(vector<int>{2, 3, 4}, vector<int>{4, -3, 8})\n * false\n * > parallelLines(vector<int>{3, 3}, vector<int>{5, 5})\n * true\n */\nbool parallelLines(vector<int> line1, vector<int> line2) {\n    if (line1.size() == 2) {\n        // Lines are in the form y = mx + c, where m is the slope\n        return line1[0] == line2[0];\n    } else {\n        // Lines are in the form ax + by + c = 0, where slope is -a/b\n        int a1 = line1[0], b1 = line1[1];\n        int a2 = line2[0], b2 = line2[1];\n        return a1 * b2 == a2 * b1;\n    }\n}", "entry_point": "parallelLines"}
{"task_id": "MBCPP/526", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to capitalize first and last letters of each word of a given string.\n * > capitalizeFirstLastLetters(string(\"python\"))\n * string(\"PythoN\")\n * > capitalizeFirstLastLetters(string(\"bigdata\"))\n * string(\"BigdatA\")\n * > capitalizeFirstLastLetters(string(\"Hadoop\"))\n * string(\"HadooP\")\n */\nstring capitalizeFirstLastLetters(string str1) {\n    if (str1.empty()) return str1;\n    \n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (i == 0 || (i > 0 && str1[i-1] == ' ')) {\n            str1[i] = toupper(str1[i]);\n        }\n        if (i == str1.length() - 1 || (i < str1.length() - 1 && str1[i+1] == ' ')) {\n            str1[i] = toupper(str1[i]);\n        }\n    }\n    \n    return str1;\n}", "entry_point": "capitalizeFirstLastLetters"}
{"task_id": "MBCPP/527", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n * > getPairsCount(vector<int>{1, 5, 7, -1, 5}, 5, 6)\n * 3\n * > getPairsCount(vector<int>{1, 5, 7, -1}, 4, 6)\n * 2\n * > getPairsCount(vector<int>{1, 1, 1, 1}, 4, 2)\n * 6\n */\nint getPairsCount(vector<int> arr, int n, int sum) {\n    unordered_map<int, int> freq;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.find(complement) != freq.end()) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    return count;\n}", "entry_point": "getPairsCount"}
{"task_id": "MBCPP/529", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth jacobsthal-lucas number.\n * > jacobsthalLucas(5)\n * 31\n * > jacobsthalLucas(2)\n * 5\n * > jacobsthalLucas(4)\n * 17\n */\nint jacobsthalLucas(int n) {\n    if (n == 0)\n        return 2;\n    if (n == 1)\n        return 1;\n    return jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}", "entry_point": "jacobsthalLucas"}
{"task_id": "MBCPP/530", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the ration of negative numbers in an array of integers.\n * > negativeCount(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8})\n * 0.31\n * > negativeCount(vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 0.31\n * > negativeCount(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 0.44\n */\ndouble negativeCount(vector<int> nums) {\n    int count = 0;\n    for (int num : nums) {\n        if (num < 0) {\n            count++;\n        }\n    }\n    return static_cast<double>(count) / nums.size();\n}", "entry_point": "negativeCount"}
{"task_id": "MBCPP/531", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum number of coins that make a given value.\n * > minCoins(vector<int>{9, 6, 5, 1}, 4, 11)\n * 2\n * > minCoins(vector<int>{4, 5, 6, 7, 8, 9}, 6, 9)\n * 1\n * > minCoins(vector<int>{1, 2, 3}, 3, 4)\n * 2\n */\nint minCoins(vector<int> coins, int m, int v) {\n    vector<int> dp(v + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 1; i <= v; i++) {\n        for (int j = 0; j < m; j++) {\n            if (coins[j] <= i && dp[i - coins[j]] != INT_MAX) {\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1);\n            }\n        }\n    }\n\n    return dp[v] == INT_MAX ? -1 : dp[v];\n}", "entry_point": "minCoins"}
{"task_id": "MBCPP/532", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the two given strings are permutations of each other.\n * > checkPermutation(string(\"abc\"), string(\"cba\"))\n * true\n * > checkPermutation(string(\"test\"), string(\"ttew\"))\n * false\n * > checkPermutation(string(\"xxyz\"), string(\"yxzx\"))\n * true\n */\nbool checkPermutation(string str1, string str2) {\n    if (str1.length() != str2.length())\n        return false;\n    \n    sort(str1.begin(), str1.end());\n    sort(str2.begin(), str2.end());\n    \n    return str1 == str2;\n}", "entry_point": "checkPermutation"}
{"task_id": "MBCPP/534", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n * > searchLiteral(string(\"python\"), string(\"python programming language\"))\n * {0, 6}\n * > searchLiteral(string(\"programming\"), string(\"python programming language\"))\n * {7, 18}\n * > searchLiteral(string(\"language\"), string(\"python programming language\"))\n * {19, 27}\n */\nvector<int> searchLiteral(string pattern, string text) {\n    vector<int> result;\n    size_t pos = text.find(pattern);\n    if (pos != string::npos) {\n        result.push_back(pos);\n        result.push_back(pos + pattern.length());\n    }\n    return result;\n}", "entry_point": "searchLiteral"}
{"task_id": "MBCPP/535", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the top or bottom surface area of a cylinder.\n * > topbottomSurfacearea(10)\n * 314.15000000000003\n * > topbottomSurfacearea(5)\n * 78.53750000000001\n * > topbottomSurfacearea(4)\n * 50.264\n */\ndouble topbottomSurfacearea(int r) {\n    const double pi = 3.14159;\n    return pi * r * r;\n}", "entry_point": "topbottomSurfacearea"}
{"task_id": "MBCPP/536", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to select the nth items of a list.\n * > nthItems(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2)\n * {1, 3, 5, 7, 9}\n * > nthItems(vector<int>{10, 15, 19, 17, 16, 18}, 3)\n * {10, 17}\n * > nthItems(vector<int>{14, 16, 19, 15, 17}, 4)\n * {14, 17}\n */\nvector<int> nthItems(vector<int> list, int n) {\n    vector<int> result;\n    for (size_t i = 0; i < list.size(); i += n) {\n        result.push_back(list[i]);\n    }\n    return result;\n}", "entry_point": "nthItems"}
{"task_id": "MBCPP/537", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated word in a given string.\n * > firstRepeatedWord(string(\"ab ca bc ab\"))\n * string(\"ab\")\n * > firstRepeatedWord(string(\"ab ca bc\"))\n * string(\"None\")\n * > firstRepeatedWord(string(\"ab ca bc ca ab bc\"))\n * string(\"ca\")\n */\nstring firstRepeatedWord(string str1) {\n    unordered_map<string, int> wordCount;\n    string word;\n    stringstream ss(str1);\n    while (ss >> word) {\n        if (wordCount[word]++) {\n            return word;\n        }\n    }\n    return \"None\";\n}", "entry_point": "firstRepeatedWord"}
{"task_id": "MBCPP/538", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a given string list to a tuple.\n * > stringListToTuple(string(\"python 3.0\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\"), string(\"3\"), string(\".\"), string(\"0\")}\n * > stringListToTuple(string(\"bigdata\"))\n * {string(\"b\"), string(\"i\"), string(\"g\"), string(\"d\"), string(\"a\"), string(\"t\"), string(\"a\")}\n * > stringListToTuple(string(\"language\"))\n * {string(\"l\"), string(\"a\"), string(\"n\"), string(\"g\"), string(\"u\"), string(\"a\"), string(\"g\"), string(\"e\")}\n */\nvector<string> stringListToTuple(string str1) {\n    vector<string> result;\n    for (char ch : str1) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "entry_point": "stringListToTuple"}
{"task_id": "MBCPP/540", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between highest and least frequencies in a given array.\n * > findDiff(vector<int>{1, 1, 2, 2, 7, 8, 4, 5, 1, 4}, 10)\n * 2\n * > findDiff(vector<int>{1, 7, 9, 2, 3, 3, 1, 3, 3}, 9)\n * 3\n * > findDiff(vector<int>{1, 2, 1, 2}, 4)\n * 0\n */\nint findDiff(vector<int> arr, int n) {\n    unordered_map<int, int> freqMap;\n    for(int i = 0; i < n; i++) {\n        freqMap[arr[i]]++;\n    }\n    \n    int maxFreq = INT_MIN, minFreq = INT_MAX;\n    for(auto it : freqMap) {\n        if(it.second > maxFreq) {\n            maxFreq = it.second;\n        }\n        if(it.second < minFreq) {\n            minFreq = it.second;\n        }\n    }\n    \n    return maxFreq - minFreq;\n}", "entry_point": "findDiff"}
{"task_id": "MBCPP/541", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if the given number is abundant or not.\n * > checkAbundant(12)\n * true\n * > checkAbundant(15)\n * false\n * > checkAbundant(18)\n * true\n */\nbool checkAbundant(int n) {\n    if (n < 1)\n        return false;\n    \n    int sum = 0;\n    for (int i = 1; i <= n / 2; ++i) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    \n    return sum > n;\n}", "entry_point": "checkAbundant"}
{"task_id": "MBCPP/542", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n * > fillSpaces(string(\"Boult Curve Wireless Neckband\"))\n * string(\"Boult:Curve:Wireless:Neckband\")\n * > fillSpaces(string(\"Stereo Sound Sweatproof\"))\n * string(\"Stereo:Sound:Sweatproof\")\n * > fillSpaces(string(\"Probass Curve Audio\"))\n * string(\"Probass:Curve:Audio\")\n */\nstring fillSpaces(string text) {\n    regex pattern(\"[ ,.]\");\n    return regex_replace(text, pattern, \":\");\n}", "entry_point": "fillSpaces"}
{"task_id": "MBCPP/543", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two numbers and print number of digits of sum.\n * > countDigits(9875, 10)\n * 4\n * > countDigits((long long)98759853034, 100)\n * 11\n * > countDigits(1234567, 500)\n * 7\n */\nint countDigits(int num1, int num2) {\n    long long sum = (long long)num1 + num2;\n    if (sum == 0)\n        return 1;\n    int count = 0;\n    while (sum != 0) {\n        sum /= 10;\n        count++;\n    }\n    return count;\n}", "entry_point": "countDigits"}
{"task_id": "MBCPP/544", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten the tuple list to a string.\n * > flattenTuple(vector<vector<string>>{{string(\"1\"), string(\"4\"), string(\"6\")}, {string(\"5\"), string(\"8\")}, {string(\"2\"), string(\"9\")}, {string(\"1\"), string(\"10\")}})\n * string(\"1 4 6 5 8 2 9 1 10\")\n * > flattenTuple(vector<vector<string>>{{string(\"2\"), string(\"3\"), string(\"4\")}, {string(\"6\"), string(\"9\")}, {string(\"3\"), string(\"2\")}, {string(\"\u6781\u5ba2\u65f6\u95f4\"), string(\"11\")}})\n * string(\"2 3 4 6 9 3 2 \u6781\u5ba2\u65f6\u95f4 11\")\n * > flattenTuple(vector<vector<string>>{{string(\"14\"), string(\"21\"), string(\"9\")}, {string(\"24\"), string(\"19\")}, {string(\"12\"), string(\"29\")}, {string(\"23\"), string(\"17\")}})\n * string(\"14 21 9 24 19 12 29 23 17\")\n */\nstring flattenTuple(vector<vector<string>> testList) {\n    string result;\n    for (const auto& vec : testList) {\n        for (const auto& str : vec) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += str;\n        }\n    }\n    return result;\n}", "entry_point": "flattenTuple"}
{"task_id": "MBCPP/545", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle only first and last bits of a given number.\n * > toggleFAndLBits(10)\n * 3\n * > toggleFAndLBits(15)\n * 6\n * > toggleFAndLBits(20)\n * 5\n */\nint toggleFAndLBits(int n) {\n    int lastBit = n & 1;\n    int firstBit = (n >> (sizeof(int) * 8 - 1)) & 1;\n    n ^= 1; // Toggle last bit\n    n ^= (1 << (sizeof(int) * 8 - 1)); // Toggle first bit\n    return n;\n}", "entry_point": "toggleFAndLBits"}
{"task_id": "MBCPP/547", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of hamming distances of all consecutive numbers from o to n.\n * > totalHammingDistance(4)\n * 7\n * > totalHammingDistance(2)\n * 3\n * > totalHammingDistance(5)\n * 8\n */\nint totalHammingDistance(int n) {\n    int total = 0;\n    for (int i = 0; i < n; ++i) {\n        int xorResult = i ^ (i + 1);\n        while (xorResult > 0) {\n            total += xorResult & 1;\n            xorResult >>= 1;\n        }\n    }\n    return total;\n}", "entry_point": "totalHammingDistance"}
{"task_id": "MBCPP/548", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the longest increasing subsequence of the given sequence.\n * > longestIncreasingSubsequence(vector<int>{10, 22, 9, 33, 21, 50, 41, 60})\n * 5\n * > longestIncreasingSubsequence(vector<int>{3, 10, 2, 1, 20})\n * 3\n * > longestIncreasingSubsequence(vector<int>{50, 3, 10, 7, 40, 80})\n * 4\n */\nint longestIncreasingSubsequence(vector<int> arr) {\n    if (arr.empty()) return 0;\n    vector<int> dp(arr.size(), 1);\n    for (int i = 1; i < arr.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    return *max_element(dp.begin(), dp.end());\n}", "entry_point": "longestIncreasingSubsequence"}
{"task_id": "MBCPP/549", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of first n odd natural numbers.\n * > oddNumSum(1)\n * 1\n * > oddNumSum(2)\n * 244\n * > oddNumSum(3)\n * 3369\n */\nint oddNumSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int oddNum = 2 * i - 1;\n        sum += pow(oddNum, 5);\n    }\n    return sum;\n}", "entry_point": "oddNumSum"}
{"task_id": "MBCPP/550", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum element in a sorted and rotated array.\n * > findMax(vector<int>{2, 3, 5, 6, 9}, 0, 4)\n * 9\n * > findMax(vector<int>{3, 4, 5, 2, 1}, 0, 4)\n * 5\n * > findMax(vector<int>{1, 2, 3}, 0, 2)\n * 3\n */\nint findMax(vector<int> arr, int low, int high) {\n    if (low == high)\n        return arr[low];\n    \n    int mid = low + (high - low) / 2;\n    \n    if (mid < high && arr[mid] > arr[mid + 1])\n        return arr[mid];\n    \n    if (mid > low && arr[mid] < arr[mid - 1])\n        return arr[mid - 1];\n    \n    if (arr[low] > arr[mid])\n        return findMax(arr, low, mid - 1);\n    else\n        return findMax(arr, mid + 1, high);\n}", "entry_point": "findMax"}
{"task_id": "MBCPP/551", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract a specified column from a given nested list.\n * > extractColumn(vector<vector<int>>{{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}, 0)\n * {1, 2, 1}\n * > extractColumn(vector<vector<int>>{{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}, 2)\n * {3, -5, 1}\n * > extractColumn(vector<vector<int>>{{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}, 0)\n * {1, 5, 1, 13, 5, 9}\n */\nvector<int> extractColumn(vector<vector<int>> list1, int n) {\n    vector<int> result;\n    for (const auto& row : list1) {\n        if (n < row.size()) {\n            result.push_back(row[n]);\n        }\n    }\n    return result;\n}", "entry_point": "extractColumn"}
{"task_id": "MBCPP/552", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a given sequence is linear or not.\n * > seqLinear(vector<int>{0, 2, 4, 6, 8, 10})\n * string(\"Linear Sequence\")\n * > seqLinear(vector<int>{1, 2, 3})\n * string(\"Linear Sequence\")\n * > seqLinear(vector<int>{1, 5, 2})\n * string(\"Non Linear Sequence\")\n */\nstring seqLinear(vector<int> seqNums) {\n    if (seqNums.size() < 2)\n        return \"Linear Sequence\";\n    \n    int diff = seqNums[1] - seqNums[0];\n    for (int i = 1; i < seqNums.size(); i++) {\n        if (seqNums[i] - seqNums[i-1] != diff)\n            return \"Non Linear Sequence\";\n    }\n    return \"Linear Sequence\";\n}", "entry_point": "seqLinear"}
{"task_id": "MBCPP/553", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuple to a floating-point number.\n * > tupleToFloat(vector<int>{4, 56})\n * 4.56\n * > tupleToFloat(vector<int>{7, 256})\n * 7.256\n * > tupleToFloat(vector<int>{8, 123})\n * 8.123\n */\ndouble tupleToFloat(vector<int> testTup) {\n    int whole = testTup[0];\n    int decimal = testTup[1];\n    int digits = to_string(decimal).length();\n    double result = whole + decimal / pow(10, digits);\n    return result;\n}", "entry_point": "tupleToFloat"}
{"task_id": "MBCPP/554", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find odd numbers from a mixed list.\n * > split(vector<int>{1, 2, 3, 4, 5, 6})\n * {1, 3, 5}\n * > split(vector<int>{10, 11, 12, 13})\n * {11, 13}\n * > split(vector<int>{7, 8, 9, 1})\n * {7, 9, 1}\n */\nvector<int> split(vector<int> list) {\n    vector<int> result;\n    for (int num : list) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "split"}
{"task_id": "MBCPP/555", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n * > difference(3)\n * 30\n * > difference(5)\n * 210\n * > difference(2)\n * 6\n */\nint difference(int n) {\n    int sum = n * (n + 1) / 2;\n    int sumOfCubes = (n * (n + 1) / 2) * (n * (n + 1) / 2);\n    return sumOfCubes - sum;\n}", "entry_point": "difference"}
{"task_id": "MBCPP/556", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the pairs with xor as an odd number.\n * > findOddPair(vector<int>{5, 4, 7, 2, 1}, 5)\n * 6\n * > findOddPair(vector<int>{7, 2, 8, 1, 0, 5, 11}, 7)\n * 12\n * > findOddPair(vector<int>{1, 2, 3}, 3)\n * 2\n */\nint findOddPair(vector<int> a, int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if ((a[i] ^ a[j]) % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "findOddPair"}
{"task_id": "MBCPP/557", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to toggle characters case in a string.\n * > toggleString(string(\"Python\"))\n * string(\"pYTHON\")\n * > toggleString(string(\"Pangram\"))\n * string(\"pANGRAM\")\n * > toggleString(string(\"LIttLE\"))\n * string(\"liTTle\")\n */\nstring toggleString(string str) {\n    for (char &c : str) {\n        if (isupper(c)) {\n            c = tolower(c);\n        } else if (islower(c)) {\n            c = toupper(c);\n        }\n    }\n    return str;\n}", "entry_point": "toggleString"}
{"task_id": "MBCPP/558", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the digit distance between two integers.\n * > digitDistanceNums(1, 2)\n * 1\n * > digitDistanceNums(23, 56)\n * 6\n * > digitDistanceNums(123, 256)\n * 7\n */\nint digitDistanceNums(int n1, int n2) {\n    int distance = 0;\n    while (n1 > 0 || n2 > 0) {\n        int digit1 = n1 % 10;\n        int digit2 = n2 % 10;\n        distance += abs(digit1 - digit2);\n        n1 /= 10;\n        n2 /= 10;\n    }\n    return distance;\n}", "entry_point": "digitDistanceNums"}
{"task_id": "MBCPP/559", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest sum of contiguous subarray in the given array.\n * > maxSubArraySum(vector<int>{-2, -3, 4, -1, -2, 1, 5, -3}, 8)\n * 7\n * > maxSubArraySum(vector<int>{-3, -4, 5, -2, -3, 2, 6, -4}, 8)\n * 8\n * > maxSubArraySum(vector<int>{-4, -5, 6, -3, -4, 3, 7, -5}, 8)\n * 10\n */\nint maxSubArraySum(vector<int> a, int size) {\n    int max_so_far = INT_MIN, max_ending_here = 0;\n\n    for (int i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}", "entry_point": "maxSubArraySum"}
{"task_id": "MBCPP/560", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the union of elements of the given tuples.\n * > unionElements(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {3, 4, 5, 6, 7, 10}\n * > unionElements(vector<int>{1, 2, 3, 4}, vector<int>{3, 4, 5, 6})\n * {1, 2, 3, 4, 5, 6}\n * > unionElements(vector<int>{11, 12, 13, 14}, vector<int>{13, 15, 16, 17})\n * {11, 12, 13, 14, 15, 16, 17}\n */\nvector<int> unionElements(vector<int> testTup1, vector<int> testTup2) {\n    set<int> s(testTup1.begin(), testTup1.end());\n    s.insert(testTup2.begin(), testTup2.end());\n    vector<int> result(s.begin(), s.end());\n    return result;\n}", "entry_point": "unionElements"}
{"task_id": "MBCPP/562", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the maximum length of sublist.\n * > findMaxLength(vector<vector<int>>{{1}, {1, 4}, {5, 6, 7, 8}})\n * 4\n * > findMaxLength(vector<vector<int>>{{0, 1}, {2, 2}, {3, 2, 1}})\n * 3\n * > findMaxLength(vector<vector<int>>{{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}})\n * 5\n */\nint findMaxLength(vector<vector<int>> lst) {\n    int maxLen = 0;\n    for (const auto& sublist : lst) {\n        if (sublist.size() > maxLen) {\n            maxLen = sublist.size();\n        }\n    }\n    return maxLen;\n}", "entry_point": "findMaxLength"}
{"task_id": "MBCPP/563", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract values between quotation marks of a string.\n * > extractValues(string(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\"))\n * {string(\"Python\"), string(\"PHP\"), string(\"Java\")}\n * > extractValues(string(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\"))\n * {string(\"python\"), string(\"program\"), string(\"language\")}\n * > extractValues(string(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\"))\n * {string(\"red\"), string(\"blue\"), string(\"green\"), string(\"yellow\")}\n */\nvector<string> extractValues(string text) {\n    vector<string> result;\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == '\\\"') {\n            i++;\n            string temp;\n            while (i < text.length() && text[i] != '\\\"') {\n                temp += text[i];\n                i++;\n            }\n            result.push_back(temp);\n        }\n        i++;\n    }\n    return result;\n}", "entry_point": "extractValues"}
{"task_id": "MBCPP/564", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count unequal element pairs from the given array.\n * > countPairs(vector<int>{1, 2, 1}, 3)\n * 2\n * > countPairs(vector<int>{1, 1, 1, 1}, 4)\n * 0\n * > countPairs(vector<int>{1, 2, 3, 4, 5}, 5)\n * 10\n */\nint countPairs(vector<int> arr, int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] != arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "countPairs"}
{"task_id": "MBCPP/565", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to split a string into characters.\n * > split(string(\"python\"))\n * {string(\"p\"), string(\"y\"), string(\"t\"), string(\"h\"), string(\"o\"), string(\"n\")}\n * > split(string(\"Name\"))\n * {string(\"N\"), string(\"a\"), string(\"m\"), string(\"e\")}\n * > split(string(\"program\"))\n * {string(\"p\"), string(\"r\"), string(\"o\"), string(\"g\"), string(\"r\"), string(\"a\"), string(\"m\")}\n */\nvector<string> split(string word) {\n    vector<string> result;\n    for (char ch : word) {\n        result.push_back(string(1, ch));\n    }\n    return result;\n}", "entry_point": "split"}
{"task_id": "MBCPP/566", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the sum of a non-negative integer.\n * > sumDigits(345)\n * 12\n * > sumDigits(12)\n * 3\n * > sumDigits(97)\n * 16\n */\nint sumDigits(int n) {\n    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}", "entry_point": "sumDigits"}
{"task_id": "MBCPP/567", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether a specified list is sorted or not.\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 12, 14, 16, 17})\n * true\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 12, 14, 20, 17})\n * false\n * > issortList(vector<int>{1, 2, 4, 6, 8, 10, 15, 14, 20})\n * false\n */\nbool issortList(vector<int> list1) {\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i] < list1[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "issortList"}
{"task_id": "MBCPP/569", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort each sublist of strings in a given list of lists.\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"white\"), string(\"black\"), string(\"orange\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\"), string(\"white\")}, {string(\"black\"), string(\"orange\"), string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\"green\"), string(\"orange\")}, {string(\"black\")}, {string(\"green\"), string(\"orange\")}, {string(\"white\")}})\n * {{string(\"green\"), string(\"orange\")}, {string(\"black\")}, {string(\"green\"), string(\"orange\")}, {string(\"white\")}}\n * > sortSublists(vector<vector<string>>{{string(\"a\"), string(\"b\")}, {string(\"d\"), string(\"c\")}, {string(\"g\"), string(\"h\")}, {string(\"f\"), string(\"e\")}})\n * {{string(\"a\"), string(\"b\")}, {string(\"c\"), string(\"d\")}, {string(\"g\"), string(\"h\")}, {string(\"e\"), string(\"f\")}}\n */\nvector<vector<string>> sortSublists(vector<vector<string>> list1) {\n    for (auto& sublist : list1) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return list1;\n}", "entry_point": "sortSublists"}
{"task_id": "MBCPP/570", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove words from a given list of strings containing a character or string.\n * > removeWords(vector<string>{string(\"Red color\"), string(\"Orange#\"), string(\"Green\"), string(\"Orange @\"), string(\"White\"), vector<string>{string(\"#\"), string(\"color\"), string(\"@\")})\n * {string(\"Red\"), string(\"\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n * > removeWords(vector<string>{string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"&\"), string(\"+\"), string(\"@\")})\n * {string(\"Red\"), string(\"\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n * > removeWords(vector<string>{string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange @\"), string(\"White\")}, vector<string>{string(\"@\")})\n * {string(\"Red &\"), string(\"Orange+\"), string(\"Green\"), string(\"Orange\"), string(\"White\")}\n */\nvector<string> removeWords(vector<string> list1, vector<string> charlist) {\n    for (size_t i = 0; i < list1.size(); ++i) {\n        for (const string& ch : charlist) {\n            size_t pos = list1[i].find(ch);\n            while (pos != string::npos) {\n                list1[i].erase(pos, ch.length());\n                pos = list1[i].find(ch, pos);\n            }\n        }\n    }\n    return list1;\n}", "entry_point": "removeWords"}
{"task_id": "MBCPP/571", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n * > maxSumPairDiffLessthanK(vector<int>{3, 5, 10, 15, 17, 12, 9}, 7, 4)\n * 62\n * > maxSumPairDiffLessthanK(vector<int>{5, 15, 10, 300}, 4, 12)\n * 25\n * > maxSumPairDiffLessthanK(vector<int>{1, 2, 3, 4, 5, 6}, 6, 6)\n * 21\n */\nint maxSumPairDiffLessthanK(vector<int> arr, int n, int k) {\n    sort(arr.begin(), arr.end());\n    int sum = 0;\n    for (int i = n - 1; i > 0; --i) {\n        if (arr[i] - arr[i - 1] < k) {\n            sum += arr[i] + arr[i - 1];\n            --i;\n        }\n    }\n    return sum;\n}", "entry_point": "maxSumPairDiffLessthanK"}
{"task_id": "MBCPP/572", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove two duplicate numbers from a given number of lists.\n * > twoUniqueNums(vector<int>{1, 2, 3, 2, 3, 4, 5})\n * {1, 4, 5}\n * > twoUniqueNums(vector<int>{1, 2, 3, 2, 4, 5})\n * {1, 3, 4, 5}\n * > twoUniqueNums(vector<int>{1, 2, 3, 4, 5})\n * {1, 2, 3, 4, 5}\n */\nvector<int> twoUniqueNums(vector<int> nums) {\n    unordered_map<int, int> freq;\n    for (int num : nums) {\n        freq[num]++;\n    }\n    vector<int> result;\n    for (int num : nums) {\n        if (freq[num] != 2) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "twoUniqueNums"}
{"task_id": "MBCPP/573", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the product of the unique numbers of a given list.\n * > uniqueProduct(vector<int>{10, 20, 30, 40, 20, 50, 60, 40})\n * 720000000\n * > uniqueProduct(vector<int>{1, 2, 3, 1})\n * 6\n * > uniqueProduct(vector<int>{7, 8, 9, 0, 1, 1})\n * 0\n */\nint uniqueProduct(vector<int> listData) {\n    unordered_set<int> uniqueNumbers;\n    int product = 1;\n    for (int num : listData) {\n        if (uniqueNumbers.find(num) == uniqueNumbers.end()) {\n            uniqueNumbers.insert(num);\n            product *= num;\n        }\n    }\n    return product;\n}", "entry_point": "uniqueProduct"}
{"task_id": "MBCPP/574", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the surface area of a cylinder.\n * > surfaceareaCylinder(10, 5)\n * 942.45\n * > surfaceareaCylinder(4, 5)\n * 226.18800000000002\n * > surfaceareaCylinder(4, 10)\n * 351.848\n */\ndouble surfaceareaCylinder(int r, int h) {\n    double pi = 3.14159;\n    double area = 2 * pi * r * h + 2 * pi * r * r;\n    return area;\n}", "entry_point": "surfaceareaCylinder"}
{"task_id": "MBCPP/575", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find nth number in a sequence which is not a multiple of a given number.\n * > countNo(2, 3, 1, 10)\n * 5\n * > countNo(3, 6, 4, 20)\n * 11\n * > countNo(5, 10, 4, 20)\n * 16\n */\nint countNo(int a, int n, int l, int r) {\n    int count = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % a != 0) {\n            count++;\n            if (count == n)\n                return i;\n        }\n    }\n    return -1; // If nth number not found in the range\n}", "entry_point": "countNo"}
{"task_id": "MBCPP/576", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array is subarray of another or not.\n * > isSubArray(vector<int>{1, 4, 3, 5}, vector<int>{1, 2}, 4, 2)\n * false\n * > isSubArray(vector<int>{1, 2, 1}, vector<int>{1, 2, 1}, 3, 3)\n * true\n * > isSubArray(vector<int>{1, 0, 2, 2}, vector<int>{2, 2, 0}, 4, 3)\n * false\n */\nbool isSubArray(vector<int> a, vector<int> b, int n, int m) {\n    if (m == 0) return true;\n    if (n == 0) return false;\n\n    for (int i = 0; i <= n - m; i++) {\n        int j;\n        for (j = 0; j < m; j++) {\n            if (a[i + j] != b[j])\n                break;\n        }\n        if (j == m)\n            return true;\n    }\n    return false;\n}", "entry_point": "isSubArray"}
{"task_id": "MBCPP/577", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last digit in factorial of a given number.\n * > lastDigitFactorial(4)\n * 4\n * > lastDigitFactorial(21)\n * 0\n * > lastDigitFactorial(30)\n * 0\n */\nint lastDigitFactorial(int n) {\n    if (n >= 5)\n        return 0;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result = (result * i) % 10;\n    }\n    return result;\n}", "entry_point": "lastDigitFactorial"}
{"task_id": "MBCPP/578", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to interleave lists of the same length.\n * > interleaveLists(vector<int>{1, 2, 3, 4, 5, 6, 7}, vector<int>{10, 20, 30, 40, 50, 60, 70}, vector<int>{100, 200, 300, 400, 500, 600, 700})\n * {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700}\n * > interleaveLists(vector<int>{10, 20}, vector<int>{15, 2}, vector<int>{5, 10})\n * {10, 15, 5, 20, 2, 10}\n * > interleaveLists(vector<int>{11, 44}, vector<int>{10, 15}, vector<int>{20, 5})\n * {11, 10, 20, 44, 15, 5}\n */\nvector<int> interleaveLists(vector<int> list1, vector<int> list2, vector<int> list3) {\n    vector<int> result;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        result.push_back(list1[i]);\n        result.push_back(list2[i]);\n        result.push_back(list3[i]);\n    }\n    return result;\n}", "entry_point": "interleaveLists"}
{"task_id": "MBCPP/579", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the dissimilar elements in the given two tuples.\n * > findDissimilar(vector<int>{3, 4, 5, 6}, vector<int>{5, 7, 4, 10})\n * {3, 6, 7, 10}\n * > findDissimilar(vector<int>{1, 2, 3, 4}, vector<int>{7, 2, 3, 9})\n * {1, 4, 7, 9}\n * > findDissimilar(vector<int>{21, 11, 25, \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5386", "entry_point": "findDissimilar"}
{"task_id": "MBCPP/581", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the surface area of the square pyramid.\n * > surfaceArea(3, 4)\n * 33\n * > surfaceArea(4, 5)\n * 56\n * > surfaceArea(1, 2)\n * 5\n */\nint surfaceArea(int b, int s) {\n    int baseArea = b * b;\n    int lateralArea = 2 * b * s;\n    return baseArea + lateralArea;\n}", "entry_point": "surfaceArea"}
{"task_id": "MBCPP/582", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a dictionary is empty or not.\n * > myDict(unordered_set<int>{10})\n * false\n * > myDict(unordered_set<int>{11})\n * false\n */\nbool myDict(unordered_set<int> dict1) {\n    return dict1.empty();\n}", "entry_point": "myDict"}
{"task_id": "MBCPP/583", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function for nth catalan number.\n * > catalanNumber(10)\n * 16796\n * > catalanNumber(9)\n * 4862\n * > catalanNumber(7)\n * 429\n */\nint catalanNumber(int num) {\n    if (num <= 1)\n        return 1;\n\n    int catalan[num + 1];\n    catalan[0] = catalan[1] = 1;\n\n    for (int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (int j = 0; j < i; j++)\n            catalan[i] += catalan[j] * catalan[i - j - 1];\n    }\n\n    return catalan[num];\n}", "entry_point": "catalanNumber"}
{"task_id": "MBCPP/584", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all adverbs and their positions in a given sentence by using regex.\n * > findAdverbs(string(\"Clearly, he has no excuse for such behavior.\"))\n * string(\"0-7: Clearly\")\n * > findAdverbs(string(\"Please handle the situation carefuly\"))\n * string(\"28-36: carefuly\")\n * > findAdverbs(string(\"Complete the task quickly\"))\n * string(\"18-25: quickly\")\n */\nstring findAdverbs(string text) {\n    regex adverbPattern(\"\\\\b\\\\w+ly\\\\b\");\n    smatch match;\n    string result = \"\";\n    if (regex_search(text, match, adverbPattern)) {\n        int start = match.position();\n        int end = start + match.length() - 1;\n        result = to_string(start) + \"-\" + to_string(end) + \": \" + match.str();\n    }\n    return result;\n}", "entry_point": "findAdverbs"}
{"task_id": "MBCPP/586", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to split the array and add the first part to the end.\n * > splitArr(vector<int>{12, 10, 5, 6, 52, 36}, 6, 2)\n * {5, 6, 52, 36, 12, 10}\n * > splitArr(vector<int>{1, 2, 3, 4}, 4, 1)\n * {2, 3, 4, 1}\n * > splitArr(vector<int>{0, 1, 2, 3, 4, 5, 6, 7}, 8, 3)\n * {3, 4, 5, 6, 7, 0, 1, 2}\n */\nvector<int> splitArr(vector<int> a, int n, int k) {\n    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        result[i] = a[(i + k) % n];\n    }\n    return result;\n}", "entry_point": "splitArr"}
{"task_id": "MBCPP/587", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a list to a tuple.\n * > listTuple(vector<int>{5, 10, 7, 4, 15, 3})\n * {5, 10, 7, 4, 15, 3}\n * > listTuple(vector<int>{2, 4, 5, 6, 2, 3, 4, 4, 7})\n * {2, 4, 5, 6, 2, 3, 4, 4, 7}\n * > listTuple(vector<int>{58, 44, 56})\n * {58, 44, 56}\n */\nvector<int> listTuple(vector<int> listx) {\n    return listx;\n}", "entry_point": "listTuple"}
{"task_id": "MBCPP/588", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the difference between largest and smallest value in a given array.\n * > bigDiff(vector<int>{1, 2, 3, 4})\n * 3\n * > bigDiff(vector<int>{4, 5, 12})\n * 8\n * > bigDiff(vector<int>{9, 2, 3})\n * 7\n */\nint bigDiff(vector<int> nums) {\n    if (nums.empty()) return 0;\n    int min_val = *min_element(nums.begin(), nums.end());\n    int max_val = *max_element(nums.begin(), nums.end());\n    return max_val - min_val;\n}", "entry_point": "bigDiff"}
{"task_id": "MBCPP/589", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find perfect squares between two given numbers.\n * > perfectSquares(1, 30)\n * {1, 4, 9, 16, 25}\n * > perfectSquares(50, 100)\n * {64, 81, 100}\n * > perfectSquares(100, 200)\n * {100, 121, 144, 169, 196}\n */\nvector<int> perfectSquares(int a, int b) {\n    vector<int> result;\n    int start = ceil(sqrt(a));\n    int end = floor(sqrt(b));\n    for (int i = start; i <= end; i++) {\n        result.push_back(i * i);\n    }\n    return result;\n}", "entry_point": "perfectSquares"}
{"task_id": "MBCPP/591", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to interchange the first and last elements in a list.\n * > swapList(vector<int>{12, 35, 9, 56, 24})\n * {24, 35, 9, 56, 12}\n * > swapList(vector<int>{1, 2, 3})\n * {3, 2, 1}\n * > swapList(vector<int>{4, 5, 6})\n * {6, 5, 4}\n */\nvector<int> swapList(vector<int> newlist) {\n    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "entry_point": "swapList"}
{"task_id": "MBCPP/592", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of product of binomial co-efficients.\n * > sumOfProduct(3)\n * 15\n * > sumOfProduct(4)\n * 56\n * > sumOfProduct(1)\n * 1\n */\nint sumOfProduct(int n) {\n    int dp[n+1][n+1];\n    for(int i=0; i<=n; i++) {\n        for(int j=0; j<=min(i, n); j++) {\n            if(j == 0 || j == i)\n                dp[i][j] = 1;\n            else\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n        }\n    }\n    \n    int sum = 0;\n    for(int i=0; i<=n; i++) {\n        sum += dp[n][i] * dp[n][n-i];\n    }\n    \n    return sum;\n}", "entry_point": "sumOfProduct"}
{"task_id": "MBCPP/593", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove leading zeroes from an ip address.\n * > removezeroIp(string(\"216.08.094.196\"))\n * string(\"216.8.94.196\")\n * > removezeroIp(string(\"12.01.024\"))\n * string(\"12.1.24\")\n * > removezeroIp(string(\"216.08.094.0196\"))\n * string(\"216.8.94.196\")\n */\nstring removezeroIp(string ip) {\n    string result;\n    stringstream ss(ip);\n    string token;\n    while (getline(ss, token, '.')) {\n        token.erase(0, token.find_first_not_of('0'));\n        if (token.empty()) token = \"0\";\n        result += token + \".\";\n    }\n    if (!result.empty()) result.pop_back();\n    return result;\n}", "entry_point": "removezeroIp"}
{"task_id": "MBCPP/594", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the difference of first even and odd number of a given list.\n * > diffEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 3\n * > diffEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 1\n * > diffEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 9\n */\nint diffEvenOdd(vector<int> list1) {\n    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    return even - odd;\n}", "entry_point": "diffEvenOdd"}
{"task_id": "MBCPP/597", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find kth element from the given two sorted arrays.\n * > findKth(vector<int>{2, 3, 6, 7, 9}, vector<int>{1, 4, 8, 10}, 5, 4, 5)\n * 6\n * > findKth(vector<int>{100, 112, 256, 349, 770}, vector<int>{72, 86, 113, 119, 265, 445, 892}, 5, 7, 7)\n * 256\n * > findKth(vector<int>{3, 4, 7, 8, 10}, vector<int>{2, 5, 9, 11}, 5, 4, 6)\n * 8\n */\nint findKth(vector<int> arr1, vector<int> arr2, int m, int n, int k) {\n    int i = 0, j = 0;\n    while (i < m && j < n) {\n        if (arr1[i] < arr2[j]) {\n            k--;\n            if (k == 0)\n                return arr1[i];\n            i++;\n        } else {\n            k--;\n            if (k == 0)\n                return arr2[j];\n            j++;\n        }\n    }\n    while (i < m) {\n        k--;\n        if (k == 0)\n            return arr1[i];\n        i++;\n    }\n    while (j < n) {\n        k--;\n        if (k == 0)\n            return arr2[j];\n        j++;\n    }\n    return -1;\n}", "entry_point": "findKth"}
{"task_id": "MBCPP/598", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given number is armstrong or not.\n * > armstrongNumber(153)\n * true\n * > armstrongNumber(259)\n * false\n * > armstrongNumber(4458)\n * false\n */\nbool armstrongNumber(int number) {\n    int originalNumber = number;\n    int sum = 0;\n    int digits = 0;\n    \n    while (originalNumber != 0) {\n        originalNumber /= 10;\n        digits++;\n    }\n    \n    originalNumber = number;\n    \n    while (originalNumber != 0) {\n        int digit = originalNumber % 10;\n        sum += pow(digit, digits);\n        originalNumber /= 10;\n    }\n    \n    return sum == number;\n}", "entry_point": "armstrongNumber"}
{"task_id": "MBCPP/600", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is even or not using bitwise operator.\n * > isEven(1)\n * false\n * > isEven(2)\n * true\n * > isEven(3)\n * false\n */\nbool isEven(int n) {\n    return (n & 1) == 0;\n}", "entry_point": "isEven"}
{"task_id": "MBCPP/602", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first repeated character in a given string.\n * > firstRepeatedChar(string(\"abcabc\"))\n * string(\"a\")\n * > firstRepeatedChar(string(\"abc\"))\n * string(\"None\")\n * > firstRepeatedChar(string(\"123123\"))\n * string(\"1\")\n */\nstring firstRepeatedChar(string str1) {\n    unordered_set<char> seen;\n    for (char c : str1) {\n        if (seen.find(c) != seen.end()) {\n            return string(1, c);\n        }\n        seen.insert(c);\n    }\n    return \"None\";\n}", "entry_point": "firstRepeatedChar"}
{"task_id": "MBCPP/603", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get a lucid number smaller than or equal to n.\n * > getLudic(10)\n * {1, 2, 3, 5, 7}\n * > getLudic(25)\n * {1, 2, 3, 5, 7, 11, 13, 17, 23, 25}\n * > getLudic(45)\n * {1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43}\n */\nvector<int> getLudic(int n) {\n    if (n < 1)\n        return {};\n\n    vector<int> ludics;\n    for (int i = 1; i <= n; i++)\n        ludics.push_back(i);\n\n    for (int i = 1; i < ludics.size(); i++) {\n        int current = ludics[i];\n        for (int j = i + current; j < ludics.size(); j += current) {\n            ludics[j] = 0;\n        }\n        ludics.erase(remove(ludics.begin(), ludics.end(), 0), ludics.end());\n    }\n\n    return ludics;\n}", "entry_point": "getLudic"}
{"task_id": "MBCPP/604", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse words in a given string.\n * > reverseWords(string(\"python program\"))\n * string(\"program python\")\n * > reverseWords(string(\"java language\"))\n * string(\"language java\")\n * > reverseWords(string(\"indian man\"))\n * string(\"man indian\")\n */\nstring reverseWords(string s) {\n    string result;\n    string word;\n    stack<string> st;\n    \n    for (char ch : s) {\n        if (ch == ' ') {\n            st.push(word);\n            word = \"\";\n        } else {\n            word += ch;\n        }\n    }\n    st.push(word);\n    \n    while (!st.empty()) {\n        result += st.top();\n        st.pop();\n        if (!st.empty()) {\n            result += ' ';\n        }\n    }\n    \n    return result;\n}", "entry_point": "reverseWords"}
{"task_id": "MBCPP/605", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given integer is a prime number.\n * > primeNum(13)\n * true\n * > primeNum(7)\n * true\n * > primeNum(-1010)\n * false\n */\nbool primeNum(int num) {\n    if (num <= 1)\n        return false;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0)\n            return false;\n    }\n    return true;\n}", "entry_point": "primeNum"}
{"task_id": "MBCPP/606", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert degrees to radians.\n * > radianDegree(90)\n * 1.5707963267948966\n * > radianDegree(60)\n * 1.0471975511965976\n * > radianDegree(120)\n * 2.0943951023931953\n */\ndouble radianDegree(int degree) {\n    return degree * M_PI / 180.0;\n}", "entry_point": "radianDegree"}
{"task_id": "MBCPP/608", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find nth bell number.\n * > bellNumber(2)\n * 2\n * > bellNumber(3)\n * 5\n * > bellNumber(4)\n * 15\n */\nint bellNumber(int n) {\n    int bell[n+1][n+1];\n    bell[0][0] = 1;\n    for (int i=1; i<=n; i++) {\n        bell[i][0] = bell[i-1][i-1];\n        for (int j=1; j<=i; j++)\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n    }\n    return bell[n][0];\n}", "entry_point": "bellNumber"}
{"task_id": "MBCPP/609", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum possible value for the given periodic function.\n * > floorMin(10, 20, 30)\n * 15\n * > floorMin(1, 2, 1)\n * 0\n * > floorMin(11, 10, 9)\n * 9\n */\nint floorMin(int a, int b, int n) {\n    int min_val = INT_MAX;\n    for (int i = 0; i <= n; i++) {\n        int current = a * i + b * (n - i);\n        if (current < min_val) {\n            min_val = current;\n        }\n    }\n    return min_val;\n}", "entry_point": "floorMin"}
{"task_id": "MBCPP/610", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove the k'th element from a given list.\n * > removeKthElement(vector<int>{1, 1, 2, 3, 4, 4, 5, 1}, 3)\n * {1, 1, 3, 4, 4, 5, 1}\n * > removeKthElement(vector<int>{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4)\n * {0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}\n * > removeKthElement(vector<int>{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u63d0\u4f9b\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u3001\u5386\u53f2\u8bb0\u5f55\u3001\u8d70\u52bf\u5206\u6790\u7b49\u670d\u52a1\uff0c\u662f\u5f69\u6c11\u83b7\u53d6\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u4fe1\u606f\u7684\u5b98\u65b9\u5e73\u53f0", "entry_point": "removeKthElement"}
{"task_id": "MBCPP/611", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum of nth column from the given tuple list.\n * > maxOfNth(vector<vector<int>>{{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2)\n * 19\n * > maxOfNth(vector<vector<int>>{{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1)\n * 10\n * > maxOfNth(vector<vector<int>>{{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1)\n * 11\n */\nint maxOfNth(vector<vector<int>> testList, int n) {\n    int maxVal = INT_MIN;\n    for (const auto& row : testList) {\n        if (n < row.size() && row[n] > maxVal) {\n            maxVal = row[n];\n        }\n    }\n    return maxVal;\n}", "entry_point": "maxOfNth"}
{"task_id": "MBCPP/614", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n * > cummulativeSum(vector<vector<int>>{{1, 3}, {5, 6, 7}, {2, 6}})\n * 30\n * > cummulativeSum(vector<vector<int>>{{2, 4}, {6, 7, 8}, {3, 7}})\n * 37\n * > cummulativeSum(vector<vector<int>>{{3, 5}, {7, 8, 9}, {4, 8}})\n * 44\n */\nint cummulativeSum(vector<vector<int>> testList) {\n    int sum = 0;\n    for (const auto& vec : testList) {\n        for (int num : vec) {\n            sum += num;\n        }\n    }\n    return sum;\n}", "entry_point": "cummulativeSum"}
{"task_id": "MBCPP/615", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find average value of the numbers in a given tuple of tuples.\n * > averageTuple(vector<vector<int>>{{10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4}})\n * {30.5, 34.25, 27.0, 23.25}\n * > averageTuple(vector<vector<int>>{{1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3}})\n * {25.5, -18.0, 3.75}\n * > averageTuple(vector<vector<int>>{{100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40}})\n * {305.0, 342.5, 270.0, 232.5}\n */\nvector<double> averageTuple(vector<vector<int>> nums) {\n    vector<double> result;\n    if (nums.empty()) return result;\n    \n    int n = nums.size();\n    int m = nums[0].size();\n    \n    for (int j = 0; j < m; ++j) {\n        double sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += nums[i][j];\n        }\n        result.push_back(sum / n);\n    }\n    \n    return result;\n}", "entry_point": "averageTuple"}
{"task_id": "MBCPP/616", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perfom the modulo of tuple elements in the given two tuples.\n * > tupleModulo(vector<int>{10, 4, 5, 6}, vector<int>{5, 6, 7, 5})\n * {0, 4, 5, 1}\n * > tupleModulo(vector<int>{11, 5, 6, 7}, vector<int>{6, 7, 8, 6})\n * {5, 5, 6, 1}\n * > tupleModulo(vector<int>{12, 6, 7, 8}, vector<int>{7, 8, 9, 7})\n * {5, 6, 7, 1}\n */\nvector<int> tupleModulo(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        result.push_back(testTup1[i] % testTup2[i]);\n    }\n    return result;\n}", "entry_point": "tupleModulo"}
{"task_id": "MBCPP/618", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to divide two lists using map and lambda function.\n * > divList(vector<int>{4, 5, 6}, vector<int>{1, 2, 3})\n * {4.0, 2.5, 2.0}\n * > divList(vector<int>{3, 2}, vector<int>{1, 4})\n * {3.0, 0.5}\n * > divList(vector<int>{90, 120}, vector<int>{50, 70})\n * {1.8, 1.7142857142857142}\n */\nvector<double> divList(vector<int> nums1, vector<int> nums2) {\n    vector<double> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return static_cast<double>(a) / b; });\n    return result;\n}", "entry_point": "divList"}
{"task_id": "MBCPP/619", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to move all the numbers in it to the given string.\n * > moveNum(string(\"I1love143you55three3000thousand\"))\n * string(\"Iloveyouthreethousand1143553000\")\n * > moveNum(string(\"Avengers124Assemble\"))\n * string(\"AvengersAssemble124\")\n * > moveNum(string(\"Its11our12path13to14see15things16do17things\"))\n * string(\"Itsourpathtoseethingsdothings11121314151617\")\n */\nstring moveNum(string testStr) {\n    string nums = \"\";\n    string result = \"\";\n    for (char c : testStr) {\n        if (isdigit(c)) {\n            nums += c;\n        } else {\n            result += c;\n        }\n    }\n    return result + nums;\n}", "entry_point": "moveNum"}
{"task_id": "MBCPP/620", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest subset where each pair is divisible.\n * > largestSubset(vector<int>{1, 3, 6, 13, 17, 18}, 6)\n * 4\n * > largestSubset(vector<int>{10, 5, 3, 15, 20}, 5)\n * 3\n * > largestSubset(vector<int>{18, 1, 3, 6, 13, 17}, 6)\n * 4\n */\nint largestSubset(vector<int> a, int n) {\n    sort(a.begin(), a.end());\n    vector<int> dp(n, 1);\n    int max_size = 1;\n    \n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (a[i] % a[j] == 0) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        max_size = max(max_size, dp[i]);\n    }\n    \n    return max_size;\n}", "entry_point": "largestSubset"}
{"task_id": "MBCPP/621", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to increment the numeric values in the given strings by k.\n * > incrementNumerics(vector<string>{string(\"MSM\"), string(\"234\"), string(\"is\"), string(\"98\"), string(\"123\"), string(\"best\"), string(\"4\")}, 6)\n * {string(\"MSM\"), string(\"240\"), string(\"is\"), string(\"104\"), string(\"129\"), string(\"best\"), string(\"10\")}\n * > incrementNumerics(vector<string>{string(\"Dart\"), string(\"356\"), string(\"is\"), string(\"88\"), string(\"169\"), string(\"Super\"), string(\"6\")}, 12)\n * {string(\"Dart\"), string(\"368\"), string(\"is\"), string(\"100\"), string(\"181\"), string(\"Super\"), string(\"18\")}\n * > incrementNumerics(vector<string>{string(\"Flutter\"), string(\"451\"), string(\"is\"), string(\"44\"), string(\"96\"), string(\"Magnificent\"), string(\"12\")}, 33)\n * {string(\"Flutter\"), string(\"484\"), string(\"is\"), string(\"77\"), string(\"129\"), string(\"Magnificent\"), string(\"45\")}\n */\nvector<string> incrementNumerics(vector<string> testList, int k) {\n    for (auto& s : testList) {\n        bool isNumeric = true;\n        for (char c : s) {\n            if (!isdigit(c)) {\n                isNumeric = false;\n                break;\n            }\n        }\n        if (isNumeric) {\n            int num = stoi(s);\n            num += k;\n            s = to_string(num);\n        }\n    }\n    return testList;\n}", "entry_point": "incrementNumerics"}
{"task_id": "MBCPP/622", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the median of two sorted arrays of same size.\n * > getMedian(vector<int>{1, 12, 15, 26, 38}, vector<int>{2, 13, 17, 30, 45}, 5)\n * 16.0\n * > getMedian(vector<int>{2, 4, 8, 9}, vector<int>{7, 13, 19, 28}, 4)\n * 8.5\n * > getMedian(vector<int>{3, 6, 14, 23, 36, 42}, vector<int>{2, 18, 27, 39, 49, 55}, 6)\n * 25.0\n */\ndouble getMedian(vector<int> arr1, vector<int> arr2, int n) {\n    int i = 0, j = 0, m1 = -1, m2 = -1;\n    for (int count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] <= arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}", "entry_point": "getMedian"}
{"task_id": "MBCPP/623", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the n-th power of individual elements in a list using lambda function.\n * > nthNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2)\n * {1, 4, 9, 16, 25, 36, 49, 64, 81, 100}\n * > nthNums(vector<int>{10, 20, 30}, 3)\n * {1000, 8000, 27000}\n * > nthNums(vector<int>{12, 15}, 5)\n * {248832, 759375}\n */\nvector<int> nthNums(vector<int> nums, int n) {\n    transform(nums.begin(), nums.end(), nums.begin(), [n](int x) { return pow(x, n); });\n    return nums;\n}", "entry_point": "nthNums"}
{"task_id": "MBCPP/624", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert the given string to upper case.\n * > isUpper(string(\"person\"))\n * string(\"PERSON\")\n * > isUpper(string(\"final\"))\n * string(\"FINAL\")\n * > isUpper(string(\"Valid\"))\n * string(\"VALID\")\n */\nstring isUpper(string str) {\n    for (char &c : str) {\n        c = toupper(c);\n    }\n    return str;\n}", "entry_point": "isUpper"}
{"task_id": "MBCPP/625", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to interchange first and last elements in a given list.\n * > swapList(vector<int>{1, 2, 3})\n * {3, 2, 1}\n * > swapList(vector<int>{1, 2, 3, 4, 4})\n * {4, 2, 3, 4, 1}\n * > swapList(vector<int>{4, 5, 6})\n * {6, 5, 4}\n */\nvector<int> swapList(vector<int> newlist) {\n    if (newlist.size() > 1) {\n        swap(newlist[0], newlist[newlist.size() - 1]);\n    }\n    return newlist;\n}", "entry_point": "swapList"}
{"task_id": "MBCPP/626", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the largest triangle that can be inscribed in the semicircle.\n * > triangleArea(0)\n * 0\n * > triangleArea(-1)\n * -1\n * > triangleArea(2)\n * 4\n */\nint triangleArea(int r) {\n    if (r < 0)\n        return -1;\n    if (r == 0)\n        return 0;\n    return r * r;\n}", "entry_point": "triangleArea"}
{"task_id": "MBCPP/627", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the smallest missing number from the given array.\n * > findFirstMissing(vector<int>{0, 1, 2, 3}, 0, 3)\n * 4\n * > findFirstMissing(vector<int>{0, 1, 2, 6, 9}, 0, 4)\n * 3\n * > findFirstMissing(vector<int>{2, 3, 5, 8, 9}, 0, 4)\n * 0\n */\nint findFirstMissing(vector<int> array, int start, int end) {\n    if (start > end)\n        return end + 1;\n\n    if (start != array[start])\n        return start;\n\n    int mid = (start + end) / 2;\n\n    if (array[mid] == mid)\n        return findFirstMissing(array, mid + 1, end);\n\n    return findFirstMissing(array, start, mid);\n}", "entry_point": "findFirstMissing"}
{"task_id": "MBCPP/628", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n * > replaceSpaces(string(\"My Name is Dawood\"))\n * string(\"My%20Name%20is%20Dawood\")\n * > replaceSpaces(string(\"I am a Programmer\"))\n * string(\"I%20am%20a%20Programmer\")\n * > replaceSpaces(string(\"I love Coding\"))\n * string(\"I%20love%20Coding\")\n */\nstring replaceSpaces(string str) {\n    string result;\n    for (char ch : str) {\n        if (ch == ' ') {\n            result += \"%20\";\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}", "entry_point": "replaceSpaces"}
{"task_id": "MBCPP/629", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find even numbers from a mixed list.\n * > split(vector<int>{1, 2, 3, 4, 5})\n * {2, 4}\n * > split(vector<int>{4, 5, 6, 7, 8, 0, 1})\n * {4, 6, 8, 0}\n */\nvector<int> split(vector<int> list) {\n    vector<int> result;\n    for (int num : list) {\n        if (num % 2 == 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "split"}
{"task_id": "MBCPP/630", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n * > getCoordinates(vector<int>{3, 4})\n * {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}}\n * > getCoordinates(vector<int>{4, 5})\n * {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}}\n * > getCoordinates(vector<int>{5, 6})\n * {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}}\n */\nvector<vector<int>> getCoordinates(vector<int> testTup) {\n    vector<vector<int>> result;\n    int x = testTup[0];\n    int y = testTup[1];\n    \n    for(int i = x - 1; i <= x + 1; i++) {\n        for(int j = y - 1; j <= y + 1; j++) {\n            result.push_back({i, j});\n        }\n    }\n    \n    return result;\n}", "entry_point": "getCoordinates"}
{"task_id": "MBCPP/631", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n * > replaceSpaces(string(\"Jumanji The Jungle\"))\n * string(\"Jumanji_The_Jungle\")\n * > replaceSpaces(string(\"The Avengers\"))\n * string(\"The_Avengers\")\n * > replaceSpaces(string(\"Fast and Furious\"))\n * string(\"Fast_and_Furious\")\n */\nstring replaceSpaces(string text) {\n    regex spaceRegex(\"\\\\s\");\n    regex underscoreRegex(\"_\");\n    text = regex_replace(text, spaceRegex, \"_\");\n    text = regex_replace(text, underscoreRegex, \" \");\n    return text;\n}", "entry_point": "replaceSpaces"}
{"task_id": "MBCPP/632", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to move all zeroes to the end of the given list.\n * > moveZero(vector<int>{1, 0, 2, 0, 3, 4})\n * {1, 2, 3, 4, 0, 0}\n * > moveZero(vector<int>{2, 3, 2, 0, 0, 4, 0, 5, 0})\n * {2, 3, 2, 4, 5, 0, 0, 0, 0}\n * > moveZero(vector<int>{0, 1, 0, 1, 1})\n * {1, 1, 1, 0, 0}\n */\nvector<int> moveZero(vector<int> numList) {\n    int count = 0;\n    for (int i = 0; i < numList.size(); i++) {\n        if (numList[i] != 0) {\n            numList[count++] = numList[i];\n        }\n    }\n    while (count < numList.size()) {\n        numList[count++] = 0;\n    }\n    return numList;\n}", "entry_point": "moveZero"}
{"task_id": "MBCPP/633", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of xor of all pairs of numbers in the given array.\n * > pairOrSum(vector<int>{5, 9, 7, 6}, 4)\n * 47\n * > pairOrSum(vector<int>{7, 3, 5}, 3)\n * 12\n * > pairOrSum(vector<int>{7, 3}, 2)\n * 4\n */\nint pairOrSum(vector<int> arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            sum += arr[i] ^ arr[j];\n        }\n    }\n    return sum;\n}", "entry_point": "pairOrSum"}
{"task_id": "MBCPP/634", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of first n even natural numbers.\n * > evenPowerSum(2)\n * 272\n * > evenPowerSum(3)\n * 1568\n * > evenPowerSum(4)\n * 5664\n */\nint evenPowerSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int evenNum = 2 * i;\n        sum += pow(evenNum, 4);\n    }\n    return sum;\n}", "entry_point": "evenPowerSum"}
{"task_id": "MBCPP/635", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n * > heapSort(vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8, 0})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n * > heapSort(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 22, 25, 25, 35, 58, 65, 75, 85}\n * > heapSort(vector<int>{7, 1, 9, 5})\n * {1, 5, 7, 9}\n */\nvector<int> heapSort(vector<int> iterable) {\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    for (int num : iterable) {\n        minHeap.push(num);\n    }\n    vector<int> sorted;\n    while (!minHeap.empty()) {\n        sorted.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sorted;\n}", "entry_point": "heapSort"}
{"task_id": "MBCPP/636", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if roots of a quadratic equation are reciprocal of each other or not.\n * > checkSolution(2, 0, 2)\n * string(\"Yes\")\n * > checkSolution(2, -5, 2)\n * string(\"Yes\")\n * > checkSolution(1, 2, 3)\n * string(\"No\")\n */\nstring checkSolution(int a, int b, int c) {\n    if (a == 0)\n        return \"No\";\n    if (a == c)\n        return \"Yes\";\n    return \"No\";\n}", "entry_point": "checkSolution"}
{"task_id": "MBCPP/637", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given amount has no profit and no loss\n * > noprofitNoloss(1500, 1200)\n * false\n * > noprofitNoloss(100, 100)\n * true\n * > noprofitNoloss(2000, 5000)\n * false\n */\nbool noprofitNoloss(int actualCost, int saleAmount) {\n    return actualCost == saleAmount;\n}", "entry_point": "noprofitNoloss"}
{"task_id": "MBCPP/638", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate wind chill index.\n * > windChill(120, 35)\n * 40\n * > windChill(40, 70)\n * 86\n * > windChill(10, 100)\n * 116\n */\nint windChill(int v, int t) {\n    if (v < 4 || t > 50)\n        return t;\n    double wci = 35.74 + 0.6215 * t - 35.75 * pow(v, 0.16) + 0.4275 * t * pow(v, 0.16);\n    return round(wci);\n}", "entry_point": "windChill"}
{"task_id": "MBCPP/639", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n * > sampleNam(vector<string>{string(\"sally\"), string(\"Dylan\"), string(\"rebecca\"), string(\"Diana\"), string(\"Joanne\"), string(\"keith\")})\n * 16\n * > sampleNam(vector<string>{string(\"php\"), string(\"res\"), string(\"Python\"), string(\"abcd\"), string(\"Java\"), string(\"aaa\")})\n * 10\n * > sampleNam(vector<string>{string(\"abcd\"), string(\"Python\"), string(\"abba\"), string(\"aba\")})\n * 6\n */\nint sampleNam(vector<string> sampleNames) {\n    int sum = 0;\n    for (const auto& name : sampleNames) {\n        if (!name.empty() && isupper(name[0])) {\n            sum += name.length();\n        }\n    }\n    return sum;\n}", "entry_point": "sampleNam"}
{"task_id": "MBCPP/640", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove the parenthesis area in a string.\n * > removeParenthesis(vector<string>{string(\"python (chrome)\")})\n * string(\"python\")\n * > removeParenthesis(vector<string>{string(\"string(.abc)\")})\n * string(\"string\")\n * > removeParenthesis(vector<string>{string(\"alpha(num)\")})\n * string(\"alpha\")\n */\nstring removeParenthesis(vector<string> items) {\n    string result = items[0];\n    size_t pos = result.find('(');\n    if (pos != string::npos) {\n        result = result.substr(0, pos);\n    }\n    return result;\n}", "entry_point": "removeParenthesis"}
{"task_id": "MBCPP/641", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth nonagonal number.\n * > isNonagonal(10)\n * 325\n * > isNonagonal(15)\n * 750\n * > isNonagonal(18)\n * 1089\n */\nint isNonagonal(int n) {\n    return n * (7 * n - 5) / 2;\n}", "entry_point": "isNonagonal"}
{"task_id": "MBCPP/643", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a word containing 'z', not at the start or end of the word.\n * > textMatchWordzMiddle(string(\"pythonzabc.\"))\n * string(\"Found a match!\")\n * > textMatchWordzMiddle(string(\"xyzabc.\"))\n * string(\"Found a match!\")\n * > textMatchWordzMiddle(string(\"  lang  .\"))\n * string(\"Not matched!\")\n */\nstring textMatchWordzMiddle(string text) {\n    regex pattern(\"\\\\b[^z ]+z[^z ]+\\\\b\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatchWordzMiddle"}
{"task_id": "MBCPP/644", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to reverse an array upto a given position.\n * > reverseArrayUptoK(vector<int>{1, 2, 3, 4, 5, 6}, 4)\n * {4, 3, 2, 1, 5, 6}\n * > reverseArrayUptoK(vector<int>{4, 5, 6, 7}, 2)\n * {5, 4, 6, 7}\n * > reverseArrayUptoK(vector<int>{9, 8, 7, 6, 5}, 3)\n * {7, 8, 9, 6, 5}\n */\nvector<int> reverseArrayUptoK(vector<int> input, int k) {\n    if (k > input.size()) {\n        k = input.size();\n    }\n    reverse(input.begin(), input.begin() + k);\n    return input;\n}", "entry_point": "reverseArrayUptoK"}
{"task_id": "MBCPP/645", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the product of it\u2019s kth index in the given tuples.\n * > findKProduct(vector<vector<int>>{{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2)\n * 665\n * > findKProduct(vector<vector<int>>{{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1)\n * 280\n * > findKProduct(vector<vector<int>>{{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 0)\n * 210\n */\nint findKProduct(vector<vector<int>> testList, int k) {\n    int product = 1;\n    for (const auto& vec : testList) {\n        if (k < vec.size()) {\n            product *= vec[k];\n        }\n    }\n    return product;\n}", "entry_point": "findKProduct"}
{"task_id": "MBCPP/646", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of cubes of size k in a cube of size n.\n * > noOfCubes(2, 1)\n * 8\n * > noOfCubes(5, 2)\n * 64\n * > noOfCubes(1, 1)\n * 1\n */\nint noOfCubes(int n, int k) {\n    if (k > n) return 0;\n    int count = n - k + 1;\n    return count * count * count;\n}", "entry_point": "noOfCubes"}
{"task_id": "MBCPP/647", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split a string at uppercase letters.\n * > splitUpperstring(string(\"PythonProgramLanguage\"))\n * {string(\"Python\"), string(\"Program\"), string(\"Language\")}\n * > splitUpperstring(string(\"PythonProgram\"))\n * {string(\"Python\"), string(\"Program\")}\n * > splitUpperstring(string(\"ProgrammingLanguage\"))\n * {string(\"Programming\"), string(\"Language\")}\n */\nvector<string> splitUpperstring(string text) {\n    vector<string> result;\n    string current;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!current.empty()) {\n                result.push_back(current);\n            }\n            current = ch;\n        } else {\n            current += ch;\n        }\n    }\n    if (!current.empty()) {\n        result.push_back(current);\n    }\n    return result;\n}", "entry_point": "splitUpperstring"}
{"task_id": "MBCPP/648", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n * > exchangeElements(vector<int>{0, 1, 2, 3, 4, 5})\n * {1, 0, 3, 2, 5, 4}\n * > exchangeElements(vector<int>{5, 6, 7, 8, 9, 10})\n * {6, 5, 8, 7, 10, 9}\n * > exchangeElements(vector<int>{25, 35, 45, 55, 75, 95})\n * {35, 25, 55, 45, 95, 75}\n */\nvector<int> exchangeElements(vector<int> lst) {\n    for (int i = 0; i < lst.size() - 1; i += 2) {\n        swap(lst[i], lst[i + 1]);\n    }\n    return lst;\n}", "entry_point": "exchangeElements"}
{"task_id": "MBCPP/649", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the sum of the numbers in a list between the indices of a specified range.\n * > sumRangeList(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10)\n * 29\n * > sumRangeList(vector<int>{1, 2, 3, 4, 5}, 1, 2)\n * 5\n * > sumRangeList(vector<int>{1, 0, 1, 2, 5, 6}, 4, 5)\n * 11\n */\nint sumRangeList(vector<int> nums, int m, int n) {\n    int sum = 0;\n    for (int i = m; i <= n; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}", "entry_point": "sumRangeList"}
{"task_id": "MBCPP/650", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two arrays are equal or not.\n * > areEqual(vector<int>{1, 2, 3}, vector<int>{3, 2, 1}, 3, 3)\n * true\n * > areEqual(vector<int>{1, 1, 1}, vector<int>{2, 2, 2}, 3, 3)\n * false\n * > areEqual(vector<int>{8, 9}, vector<int>{4, 5, 6}, 2, 3)\n * false\n */\nbool areEqual(vector<int> arr1, vector<int> arr2, int n, int m) {\n    if (n != m)\n        return false;\n    sort(arr1.begin(), arr1.end());\n    sort(arr2.begin(), arr2.end());\n    for (int i = 0; i < n; i++) {\n        if (arr1[i] != arr2[i])\n            return false;\n    }\n    return true;\n}", "entry_point": "areEqual"}
{"task_id": "MBCPP/651", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if one tuple is a subset of another tuple.\n * > checkSubset(vector<int>{10, 4, 5, 6}, vector<int>{5, 10})\n * true\n * > checkSubset(vector<int>{1, 2, 3, 4}, vector<int>{5, 6})\n * false\n * > checkSubset(vector<int>{7, 8, 9, 10}, vector<int>{10, 8})\n * true\n */\nbool checkSubset(vector<int> testTup1, vector<int> testTup2) {\n    unordered_set<int> s(testTup1.begin(), testTup1.end());\n    for (int num : testTup2) {\n        if (s.find(num) == s.end()) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "checkSubset"}
{"task_id": "MBCPP/652", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n * > matrixToList(vector<vector<vector<int>>>{{{4, 5}, {7, 8}}, {{10, 13}, {18, 17}}, {{0, 4}, {10, 1}}})\n * string(\"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\")\n * > matrixToList(vector<vector<vector<int>>>{{{5, 6}, {8, 9}}, {{11, 14}, {19, 18}}, {{1, 5}, {11, 2}}})\n * string(\"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\")\n * > matrixToList(vector<vector<vector<int>>>{{{6, 7}, {9, 10}}, {{12, 15}, {20, 21}}, {{23, 7}, {15, 8}}})\n * string(\"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\")\n */\nstring matrixToList(vector<vector<vector<int>>> testList) {\n    vector<int> col1, col2;\n    for (const auto& matrix : testList) {\n        for (const auto& row : matrix) {\n            col1.push_back(row[0]);\n            col2.push_back(row[1]);\n        }\n    }\n    string result = \"[(\";\n    for (size_t i = 0; i < col1.size(); ++i) {\n        result += to_string(col1[i]);\n        if (i != col1.size() - 1) result += \", \";\n    }\n    result += \"), (\";\n    for (size_t i = 0; i < col2.size(); ++i) {\n        result += to_string(col2[i]);\n        if (i != col2.size() - 1) result += \", \";\n    }\n    result += \")]\";\n    return result;\n}", "entry_point": "matrixToList"}
{"task_id": "MBCPP/654", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a rectangle.\n * > rectanglePerimeter(10, 20)\n * 60\n * > rectanglePerimeter(10, 5)\n * 30\n * > rectanglePerimeter(4, 2)\n * 12\n */\nint rectanglePerimeter(int l, int b) {\n    return 2 * (l + b);\n}", "entry_point": "rectanglePerimeter"}
{"task_id": "MBCPP/655", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fifth power of n natural numbers.\n * > fifthPowerSum(2)\n * 33\n * > fifthPowerSum(4)\n * 1300\n * > fifthPowerSum(3)\n * 276\n */\nint fifthPowerSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 5);\n    }\n    return sum;\n}", "entry_point": "fifthPowerSum"}
{"task_id": "MBCPP/656", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum sum of absolute differences of two arrays.\n * > findMinSum(vector<int>{3, 2, 1}, vector<int>{2, 1, 3}, 3)\n * 0\n * > findMinSum(vector<int>{1, 2, 3}, vector<int>{4, 5, 6}, 3)\n * 9\n * > findMinSum(vector<int>{4, 1, 8, 7}, vector<int>{2, 3, 6, 5}, 4)\n * 6\n */\nint findMinSum(vector<int> a, vector<int> b, int n) {\n    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += abs(a[i] - b[i]);\n    }\n    return sum;\n}", "entry_point": "findMinSum"}
{"task_id": "MBCPP/657", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first digit in factorial of a given number.\n * > firstDigit(5)\n * 1\n * > firstDigit(10)\n * 3\n * > firstDigit(7)\n * 5\n */\nint firstDigit(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n\n    double logSum = 0.0;\n    for (int i = 2; i <= n; i++)\n        logSum += log10(i);\n\n    double fractionalPart = logSum - floor(logSum);\n    int firstDigit = pow(10, fractionalPart);\n\n    return firstDigit;\n}", "entry_point": "firstDigit"}
{"task_id": "MBCPP/658", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the item with maximum occurrences in a given list.\n * > maxOccurrences(vector<int>{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2})\n * 2\n * > maxOccurrences(vector<int>{1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11})\n * 1\n * > maxOccurrences(vector<int>{1, 2, 3, 2, 4, 5, 1, 1, 1})\n * 1\n */\nint maxOccurrences(vector<int> list1) {\n    unordered_map<int, int> frequencyMap;\n    for (int num : list1) {\n        frequencyMap[num]++;\n    }\n    \n    int maxCount = 0;\n    int result = 0;\n    for (auto& pair : frequencyMap) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n            result = pair.first;\n        }\n    }\n    \n    return result;\n}", "entry_point": "maxOccurrences"}
{"task_id": "MBCPP/659", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to print duplicants from a list of integers.\n * > repeat(vector<int>{10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20})\n * {20, 30, -20, 60}\n * > repeat(vector<int>{-1, 1, -1, 8})\n * {-1}\n * > repeat(vector<int>{1, 2, 3, 1, 2})\n * {1, 2}\n */\nvector<int> repeat(vector<int> x) {\n    unordered_map<int, int> freq;\n    vector<int> result;\n    \n    for (int num : x) {\n        freq[num]++;\n    }\n    \n    for (int num : x) {\n        if (freq[num] > 1) {\n            result.push_back(num);\n            freq[num] = 0; // To avoid adding duplicates in the result\n        }\n    }\n    \n    return result;\n}", "entry_point": "repeat"}
{"task_id": "MBCPP/660", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to choose points from two ranges such that no point lies in both the ranges.\n * > findPoints(5, 10, 1, 5)\n * {1, 10}\n * > findPoints(3, 5, 7, 9)\n * {3, 9}\n * > findPoints(1, 5, 2, 8)\n * {1, 8}\n */\nvector<int> findPoints(int l1, int r1, int l2, int r2) {\n    vector<int> result;\n    if (r1 < l2 || r2 < l1) {\n        result.push_back(l1);\n        result.push_back(r2);\n    } else {\n        result.push_back(min(l1, l2));\n        result.push_back(max(r1, r2));\n    }\n    return result;\n}", "entry_point": "findPoints"}
{"task_id": "MBCPP/661", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n * > maxSumOfThreeConsecutive(vector<int>{100, 1000, 100, 1000, 1}, 5)\n * 2101\n * > maxSumOfThreeConsecutive(vector<int>{3000, 2000, 1000, 3, 10}, 5)\n * 5013\n * > maxSumOfThreeConsecutive(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, 8)\n * 27\n */\nint maxSumOfThreeConsecutive(vector<int> arr, int n) {\n    if (n == 0) return 0;\n    if (n == 1) return arr[0];\n    if (n == 2) return arr[0] + arr[1];\n\n    int dp[n];\n    dp[0] = arr[0];\n    dp[1] = arr[0] + arr[1];\n    dp[2] = max({dp[1], arr[1] + arr[2], arr[0] + arr[2]});\n\n    for (int i = 3; i < n; i++) {\n        dp[i] = max({dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i-1] + arr[i]});\n    }\n\n    return dp[n-1];\n}", "entry_point": "maxSumOfThreeConsecutive"}
{"task_id": "MBCPP/662", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list in a dictionary.\n * > sortedDict(unordered_map<string, vector<int>>{{string(\"n1\"), {2, 3, 1}}, {string(\"n2\"), {5, 1, 2}}, {string(\"n3\"), {3, 2, 4}}})\n * {{string(\"n1\"), {1, 2, 3}}, {string(\"n2\"), {1, 2, 5}}, {string(\"n3\"), {2, 3, 4}}}\n * > sortedDict(unordered_map<string, vector<int>>{{string(\"n1\"), {25, 37, 41}}, {string(\"n2\"), {41, 54, 63}}, {string(\"n3\"), {29, 38, 93}}})\n * {{string(\"n1\"), {25, 37, 41}}, {string(\"n2\"), {41, 54, 63}}, {string(\"n3\"), {29, 38, 93}}}\n * > sortedDict(unordered_map<string, vector<int>>{{string(\"n1\"), {58, 44, 56}}, {string(\"n2\"), {91, 34, 58}}, {string(\"n3\"), {100, 200, 300}}})\n * {{string(\"n1\"), {44, 56, 58}}, {string(\"n2\"), {34, 58, 91}}, {string(\"n3\"), {100, 200, 300}}}\n */\nunordered_map<string, vector<int>> sortedDict(unordered_map<string, vector<int>> dict1) {\n    for (auto& pair : dict1) {\n        sort(pair.second.begin(), pair.second.end());\n    }\n    return dict1;\n}", "entry_point": "sortedDict"}
{"task_id": "MBCPP/663", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the largest possible value of k such that k modulo x is y.\n * > findMaxVal(15, 10, 5)\n * 15\n * > findMaxVal(187, 10, 5)\n * 185\n * > findMaxVal(16, 11, 1)\n * 12\n */\nint findMaxVal(int n, int x, int y) {\n    int remainder = n % x;\n    if (remainder >= y)\n        return n - (remainder - y);\n    else\n        return n - x + (y - remainder);\n}", "entry_point": "findMaxVal"}
{"task_id": "MBCPP/664", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the average of even numbers till a given even number.\n * > averageEven(2)\n * 2\n * > averageEven(4)\n * 3\n * > averageEven(100)\n * 51\n */\nint averageEven(int n) {\n    int sum = 0, count = 0;\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n        count++;\n    }\n    return sum / count;\n}", "entry_point": "averageEven"}
{"task_id": "MBCPP/665", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to shift first element to the end of given list.\n * > moveLast(vector<int>{1, 2, 3, 4})\n * {2, 3, 4, 1}\n * > moveLast(vector<int>{2, 3, 4, 1, 5, 0})\n * {3, 4, 1, 5, 0, 2}\n * > moveLast(vector<int>{5, 4, 3, 2, 1})\n * {4, 3, 2, 1, 5}\n */\nvector<int> moveLast(vector<int> numList) {\n    if (numList.empty()) return numList;\n    int first = numList[0];\n    numList.erase(numList.begin());\n    numList.push_back(first);\n    return numList;\n}", "entry_point": "moveLast"}
{"task_id": "MBCPP/666", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count occurrence of a character in a string.\n * > countChar(string(\"Python\"), string(\"o\"))\n * 1\n * > countChar(string(\"little\"), string(\"t\"))\n * 2\n * > countChar(string(\"assert\"), string(\"s\"))\n * 2\n */\nint countChar(string str, string chr) {\n    int count = 0;\n    for (char c : str) {\n        if (c == chr[0]) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countChar"}
{"task_id": "MBCPP/667", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count number of vowels in the string.\n * > checkVow(string(\"corner\"), string(\"AaEeIiOoUu\"))\n * 2\n * > checkVow(string(\"valid\"), string(\"AaEeIiOoUu\"))\n * 2\n * > checkVow(string(\"true\"), string(\"AaEeIiOoUu\"))\n * 2\n */\nint checkVow(string str, string vowels) {\n    int count = 0;\n    for (char ch : str) {\n        if (vowels.find(ch) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "checkVow"}
{"task_id": "MBCPP/668", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to replace multiple occurence of character by single.\n * > replace(string(\"peep\"), string(\"e\"))\n * string(\"pep\")\n * > replace(string(\"Greek\"), string(\"e\"))\n * string(\"Grek\")\n * > replace(string(\"Moon\"), string(\"o\"))\n * string(\"Mon\")\n */\nstring replace(string str, string chr) {\n    string result;\n    char target = chr[0];\n    for (size_t i = 0; i < str.size(); ++i) {\n        if (i == 0 || str[i] != target || str[i-1] != target) {\n            result += str[i];\n        }\n    }\n    return result;\n}", "entry_point": "replace"}
{"task_id": "MBCPP/669", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given ip address is valid or not using regex.\n * > checkIp(string(\"192.168.0.1\"))\n * string(\"Valid IP address\")\n * > checkIp(string(\"110.234.52.124\"))\n * string(\"Valid IP address\")\n * > checkIp(string(\"366.1.2.2\"))\n * string(\"Invalid IP address\")\n */\nstring checkIp(string ip) {\n    regex pattern(\"^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$\");\n    if (regex_match(ip, pattern)) {\n        return \"Valid IP address\";\n    } else {\n        return \"Invalid IP address\";\n    }\n}", "entry_point": "checkIp"}
{"task_id": "MBCPP/670", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a sequence of numbers has a decreasing trend or not.\n * > decreasingTrend(vector<int>{-4, -3, -2, -1})\n * true\n * > decreasingTrend(vector<int>{1, 2, 3})\n * true\n * > decreasingTrend(vector<int>{3, 2, 1})\n * false\n */\nbool decreasingTrend(vector<int> nums) {\n    if (nums.size() <= 1)\n        return true;\n    \n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] >= nums[i - 1])\n            return false;\n    }\n    \n    return true;\n}", "entry_point": "decreasingTrend"}
{"task_id": "MBCPP/671", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to set the right most unset bit.\n * > setRightMostUnsetBit(21)\n * 23\n * > setRightMostUnsetBit(11)\n * 15\n * > setRightMostUnsetBit(15)\n * 15\n */\nint setRightMostUnsetBit(int n) {\n    if ((n & (n + 1)) == 0)\n        return n;\n    return n | (n + 1);\n}", "entry_point": "setRightMostUnsetBit"}
{"task_id": "MBCPP/672", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum of three numbers.\n * > maxOfThree(10, 20, 30)\n * 30\n * > maxOfThree(55, 47, 39)\n * 55\n * > maxOfThree(10, 49, 30)\n * 49\n */\nint maxOfThree(int num1, int num2, int num3) {\n    return max(num1, max(num2, num3));\n}", "entry_point": "maxOfThree"}
{"task_id": "MBCPP/673", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a list of multiple integers into a single integer.\n * > convert(vector<int>{1, 2, 3})\n * 123\n * > convert(vector<int>{4, 5, 6})\n * 456\n * > convert(vector<int>{7, 8, 9})\n * 789\n */\nint convert(vector<int> list) {\n    int result = 0;\n    for (int num : list) {\n        result = result * 10 + num;\n    }\n    return result;\n}", "entry_point": "convert"}
{"task_id": "MBCPP/674", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove duplicate words from a given string using collections module.\n * > removeDuplicate(string(\"Python Exercises Practice Solution Exercises\"))\n * string(\"Python Exercises Practice Solution\")\n * > removeDuplicate(string(\"Python Exercises Practice Solution Python\"))\n * string(\"Python Exercises Practice Solution\")\n * > removeDuplicate(string(\"Python Exercises Practice Solution Practice\"))\n * string(\"Python Exercises Practice Solution\")\n */\nstring removeDuplicate(string str) {\n    istringstream iss(str);\n    unordered_set<string> seen;\n    string word, result;\n    while (iss >> word) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}", "entry_point": "removeDuplicate"}
{"task_id": "MBCPP/675", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two integers. however, if the sum is between the given range it will return 20.\n * > sumNums(2, 10, 11, 20)\n * 20\n * > sumNums(15, 17, 1, 10)\n * 32\n * > sumNums(10, 15, 5, 30)\n * 20\n */\nint sumNums(int x, int y, int m, int n) {\n    int sum = x + y;\n    if (sum >= m && sum <= n)\n        return 20;\n    else\n        return sum;\n}", "entry_point": "sumNums"}
{"task_id": "MBCPP/676", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n * > removeExtraChar(string(\"**\\//Google Android// - 12. \"))\n * string(\"GoogleAndroid12\")\n * > removeExtraChar(string(\"****\\//Google Flutter//*** - 36. \"))\n * string(\"GoogleFlutter36\")\n * > removeExtraChar(string(\"**\\//Google Firebase// - 478. \"))\n * string(\"GoogleFirebase478\")\n */\nstring removeExtraChar(string text1) {\n    regex pattern(\"[^a-zA-Z0-9]\");\n    return regex_replace(text1, pattern, \"\");\n}", "entry_point": "removeExtraChar"}
{"task_id": "MBCPP/677", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the triangle is valid or not.\n * > validityTriangle(60, 50, 90)\n * false\n * > validityTriangle(45, 75, 60)\n * true\n * > validityTriangle(30, 50, 100)\n * true\n */\nbool validityTriangle(int a, int b, int c) {\n    if (a + b + c == 180 && a > 0 && b > 0 && c > 0)\n        return true;\n    else\n        return false;\n}", "entry_point": "validityTriangle"}
{"task_id": "MBCPP/678", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove spaces from a given string.\n * > removeSpaces(string(\"a b c\"))\n * string(\"abc\")\n * > removeSpaces(string(\"1 2 3\"))\n * string(\"123\")\n * > removeSpaces(string(\" b c\"))\n * string(\"bc\")\n */\nstring removeSpaces(string str1) {\n    str1.erase(remove(str1.begin(), str1.end(), ' '), str1.end());\n    return str1;\n}", "entry_point": "removeSpaces"}
{"task_id": "MBCPP/679", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to access dictionary key\u2019s element by index.\n * > accessKey(unordered_map<string, int>{{string(\"physics\"), 80}, {string(\"math\"), 90}, {string(\"chemistry\"), 86}}, 0)\n * string(\"physics\")\n * > accessKey(unordered_map<string, int>{{string(\"python\"), 10}, {string(\"java\"), 20}, {string(\"C++\"), 30}}, 2)\n * string(\"C++\")\n * > accessKey(unordered_map<string, int>{{string(\"program\"), 15}, {string(\"computer\"), 45}}, 1)\n * string(\"computer\")\n */\nstring accessKey(unordered_map<string, int> ditionary, int key) {\n    auto it = ditionary.begin();\n    advance(it, key);\n    return it->first;\n}", "entry_point": "accessKey"}
{"task_id": "MBCPP/680", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether a sequence of numbers has an increasing trend or not.\n * > increasingTrend(vector<int>{1, 2, 3, 4})\n * true\n * > increasingTrend(vector<int>{4, 3, 2, 1})\n * false\n * > increasingTrend(vector<int>{0, 1, 4, 9})\n * true\n */\nbool increasingTrend(vector<int> nums) {\n    if (nums.empty()) return false;\n    for (size_t i = 1; i < nums.size(); ++i) {\n        if (nums[i] <= nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "increasingTrend"}
{"task_id": "MBCPP/681", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the smallest prime divisor of a number.\n * > smallestDivisor(10)\n * 2\n * > smallestDivisor(25)\n * 5\n * > smallestDivisor(31)\n * 31\n */\nint smallestDivisor(int n) {\n    if (n % 2 == 0)\n        return 2;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n            return i;\n    }\n    return n;\n}", "entry_point": "smallestDivisor"}
{"task_id": "MBCPP/682", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply two lists using map and lambda function.\n * > mulList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {4, 10, 18}\n * > mulList(vector<int>{1, 2}, vector<int>{3, 4})\n * {3, 8}\n * > mulList(vector<int>{90, 120}, vector<int>{50, 70})\n * {4500, 8400}\n */\nvector<int> mulList(vector<int> nums1, vector<int> nums2) {\n    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a * b; });\n    return result;\n}", "entry_point": "mulList"}
{"task_id": "MBCPP/683", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number can be represented by sum of two squares or not.\n * > sumSquare(25)\n * true\n * > sumSquare(24)\n * false\n * > sumSquare(17)\n * true\n */\nbool sumSquare(int n) {\n    for (int i = 0; i * i <= n; i++) {\n        for (int j = 0; j * j <= n; j++) {\n            if (i * i + j * j == n) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "entry_point": "sumSquare"}
{"task_id": "MBCPP/684", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count occurences of a character in a repeated string.\n * > countChar(string(\"abcac\"), string(\"a\"))\n * 4\n * > countChar(string(\"abca\"), string(\"c\"))\n * 2\n * > countChar(string(\"aba\"), string(\"a\"))\n * 7\n */\nint countChar(string str, string x) {\n    int count = 0;\n    for (char c : str) {\n        if (c == x[0]) {\n            count++;\n        }\n    }\n    int len = str.length();\n    int fullRepeats = 7 / len;\n    int remainder = 7 % len;\n    int total = count * fullRepeats;\n    for (int i = 0; i < remainder; i++) {\n        if (str[i] == x[0]) {\n            total++;\n        }\n    }\n    return total;\n}", "entry_point": "countChar"}
{"task_id": "MBCPP/685", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of prime numbers between 1 to n.\n * > sumOfPrimes(10)\n * 17\n * > sumOfPrimes(20)\n * 77\n * > sumOfPrimes(5)\n * 10\n */\nint sumOfPrimes(int n) {\n    if (n < 2)\n        return 0;\n\n    vector<bool> isPrime(n + 1, true);\n    isPrime[0] = isPrime[1] = false;\n\n    for (int i = 2; i * i <= n; ++i) {\n        if (isPrime[i]) {\n            for (int j = i * i; j <= n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n\n    int sum = 0;\n    for (int i = 2; i <= n; ++i) {\n        if (isPrime[i]) {\n            sum += i;\n        }\n    }\n\n    return sum;\n}", "entry_point": "sumOfPrimes"}
{"task_id": "MBCPP/686", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the frequency of each element in the given list.\n * > freqElement(vector<int>{4, 5, 4, 5, 6, 6, 5, 5, 4})\n * string(\"{4: 3, 5: 4, 6: 2}\")\n * > freqElement(vector<int>{7, 8, 8, 9, 4, 7, 6, 5, 4})\n * string(\"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\")\n * > freqElement(vector<int>{1, 4, 3, 1, 4, 5, 2, 6, 2, 7})\n * string(\"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\")\n */\nstring freqElement(vector<int> testTup) {\n    map<int, int> freqMap;\n    for (int num : testTup) {\n        freqMap[num]++;\n    }\n    string result = \"{\";\n    for (auto it = freqMap.begin(); it != freqMap.end(); ++it) {\n        if (it != freqMap.begin()) {\n            result += \", \";\n        }\n        result += to_string(it->first) + \": \" + to_string(it->second);\n    }\n    result += \"}\";\n    return result;\n}", "entry_point": "freqElement"}
{"task_id": "MBCPP/687", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n * > recurGcd(12, 14)\n * 2\n * > recurGcd(13, 17)\n * 1\n * > recurGcd(9, 3)\n * 3\n */\nint recurGcd(int a, int b) {\n    if (b == 0)\n        return a;\n    else\n        return recurGcd(b, a % b);\n}", "entry_point": "recurGcd"}
{"task_id": "MBCPP/688", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get the length of a complex number.\n * > lenComplex(3, 4)\n * 5.0\n * > lenComplex(9, 10)\n * 13.45362404707371\n * > lenComplex(7, 9)\n * 11.40175425099138\n */\ndouble lenComplex(int a, int b) {\n    return sqrt(a * a + b * b);\n}", "entry_point": "lenComplex"}
{"task_id": "MBCPP/689", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n * > minJumps(vector<int>{1, 3, 6, 1, 0, 9}, 6)\n * 3\n * > minJumps(vector<int>{1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}, 11)\n * 3\n * > minJumps(vector<int>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 11)\n * 10\n */\nint minJumps(vector<int> arr, int n) {\n    if (n <= 1)\n        return 0;\n    if (arr[0] == 0)\n        return -1;\n    int maxReach = arr[0];\n    int step = arr[0];\n    int jump = 1;\n    for (int i = 1; i < n; i++) {\n        if (i == n - 1)\n            return jump;\n        maxReach = max(maxReach, i + arr[i]);\n        step--;\n        if (step == 0) {\n            jump++;\n            if (i >= maxReach)\n                return -1;\n            step = maxReach - i;\n        }\n    }\n    return -1;\n}", "entry_point": "minJumps"}
{"task_id": "MBCPP/690", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply consecutive numbers of a given list.\n * > mulConsecutiveNums(vector<int>{1, 1, 3, 4, 4, 5, 6, 7})\n * {1, 3, 12, 16, 20, 30, 42}\n * > mulConsecutiveNums(vector<int>{4, 5, 8, 9, 6, 10})\n * {20, 40, 72, 54, 60}\n * > mulConsecutiveNums(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {2, 6, 12, 20, 30, 42, 56, 72, 90}\n */\nvector<int> mulConsecutiveNums(vector<int> nums) {\n    vector<int> result;\n    if (nums.empty()) return result;\n    \n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] * nums[i + 1]);\n    }\n    \n    return result;\n}", "entry_point": "mulConsecutiveNums"}
{"task_id": "MBCPP/691", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n * > groupElement(vector<vector<int>>{{6, 5}, {2, 7}, {2, 5}, {8, 7}, {9, 8}, {3, 7}})\n * {{5, {6, 2}}, {7, {2, 8, 3}}, {8, {9}}}\n * > groupElement(vector<vector<int>>{{7, 6}, {3, 8}, {3, 6}, {9, 8}, {10, 9}, {4, 8}})\n * {{6, {7, 3}}, {8, {3, 9, 4}}, {9, {10}}}\n * > groupElement(vector<vector<int>>{{8, 7}, {4, 9}, {4, 7}, {10, 9}, {11, 10}, {5, 9}})\n * {{7, {8, 4}}, {9, {4, 10, 5}}, {10, {11}}}\n */\nunordered_map<int, vector<int>> groupElement(vector<vector<int>> testList) {\n    unordered_map<int, vector<int>> result;\n    for (const auto& pair : testList) {\n        result[pair[1]].push_back(pair[0]);\n    }\n    return result;\n}", "entry_point": "groupElement"}
{"task_id": "MBCPP/692", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last two digits in factorial of a given number.\n * > lastTwoDigits(7)\n * 40\n * > lastTwoDigits(5)\n * 20\n * > lastTwoDigits(2)\n * 2\n */\nint lastTwoDigits(int n) {\n    if (n <= 1)\n        return 1;\n    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n        result %= 100;\n    }\n    return result;\n}", "entry_point": "lastTwoDigits"}
{"task_id": "MBCPP/693", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove multiple spaces in a string by using regex.\n * > removeMultipleSpaces(string(\"Google      Assistant\"))\n * string(\"Google Assistant\")\n * > removeMultipleSpaces(string(\"Quad      Core\"))\n * string(\"Quad Core\")\n * > removeMultipleSpaces(string(\"ChromeCast      Built-in\"))\n * string(\"ChromeCast Built-in\")\n */\nstring removeMultipleSpaces(string text1) {\n    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \" \");\n}", "entry_point": "removeMultipleSpaces"}
{"task_id": "MBCPP/694", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract unique values from the given dictionary values.\n * > extractUnique(unordered_map<string, vector<int>>{{string(\"msm\"), {5, 6, 7, 8}}, {string(\"is\"), {10, 11, 7, 5}}, {string(\"best\"), {6, 12, 10, 8}}, {string(\"for\"), {1, 2, 5}}})\n * {1, 2, 5, 6, 7, 8, 10, 11, 12}\n * > extractUnique(unordered_map<string, vector<int>>{{string(\"Built\"), {7, 1, 9, 4}}, {string(\"for\"), {11, 21, 36, 14, 9}}, {string(\"ISP\"), {4, 1, 21, 39, 47}}, {string(\"TV\"), {1, 32, 38}}})\n * {1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47}\n * > extractUnique(unordered_map<string, vector<int>>{{string(\"F\"), {11, 13, 14, 17}}, {string(\"A\"), {12, 11, 15, 18}}, {string(\"N\"), {19, 21, 15, \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3", "entry_point": "extractUnique"}
{"task_id": "MBCPP/695", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n * > checkGreater(vector<int>{10, 4, 5}, vector<int>{13, 5, 18})\n * true\n * > checkGreater(vector<int>{1, 2, 3}, vector<int>{2, 1, 4})\n * false\n * > checkGreater(vector<int>{4, 5, 6}, vector<int>{5, 6, 7})\n * true\n */\nbool checkGreater(vector<int> testTup1, vector<int> testTup2) {\n    if (testTup1.size() != testTup2.size())\n        return false;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] <= testTup1[i])\n            return false;\n    }\n    return true;\n}", "entry_point": "checkGreater"}
{"task_id": "MBCPP/697", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find number of even elements in the given list using lambda function.\n * > countEven(vector<int>{1, 2, 3, 5, 7, 8, 9, 10})\n * 3\n * > countEven(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * 5\n * > countEven(vector<int>{1, 2, 4, 8, 9})\n * 3\n */\nint countEven(vector<int> arrayNums) {\n    return count_if(arrayNums.begin(), arrayNums.end(), [](int num) { return num % 2 == 0; });\n}", "entry_point": "countEven"}
{"task_id": "MBCPP/701", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the equilibrium index of the given array.\n * > equilibriumIndex(vector<int>{1, 2, 3, 4, 1, 2, 3})\n * 3\n * > equilibriumIndex(vector<int>{-7, 1, 5, 2, -4, 3, 0})\n * 3\n * > equilibriumIndex(vector<int>{1, 2, 3})\n * -1\n */\nint equilibriumIndex(vector<int> arr) {\n    int totalSum = 0;\n    for (int num : arr) {\n        totalSum += num;\n    }\n    \n    int leftSum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        totalSum -= arr[i];\n        if (leftSum == totalSum) {\n            return i;\n        }\n        leftSum += arr[i];\n    }\n    \n    return -1;\n}", "entry_point": "equilibriumIndex"}
{"task_id": "MBCPP/702", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n * > removals(vector<int>{1, 3, 4, 9, 10, 11, 12, 17, 20}, 9, 4)\n * 5\n * > removals(vector<int>{1, 5, 6, 2, 8}, 5, 2)\n * 3\n * > removals(vector<int>{1, 2, 3, 4, 5, 6}, 6, 3)\n * 2\n */\nint removals(vector<int> arr, int n, int k) {\n    sort(arr.begin(), arr.end());\n    int minRemovals = n;\n    for (int i = 0; i < n; i++) {\n        int j = upper_bound(arr.begin(), arr.end(), arr[i] + k) - arr.begin();\n        minRemovals = min(minRemovals, n - (j - i));\n    }\n    return minRemovals;\n}", "entry_point": "removals"}
{"task_id": "MBCPP/703", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given key is present in the dictionary or not.\n * > isKeyPresent(unordered_map<int, int>{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 5)\n * true\n * > isKeyPresent(unordered_map<int, int>{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 6)\n * true\n * > isKeyPresent(unordered_map<int, int>{{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 10)\n * false\n */\nbool isKeyPresent(unordered_map<int, int> d, int x) {\n    return d.find(x) != d.end();\n}", "entry_point": "isKeyPresent"}
{"task_id": "MBCPP/704", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the harmonic sum of n-1.\n * > harmonicSum(10)\n * 2.9289682539682538\n * > harmonicSum(4)\n * 2.083333333333333\n * > harmonicSum(7)\n * 2.5928571428571425\n */\ndouble harmonicSum(int n) {\n    double sum = 0.0;\n    for (int i = 1; i < n; i++) {\n        sum += 1.0 / i;\n    }\n    return sum;\n}", "entry_point": "harmonicSum"}
{"task_id": "MBCPP/706", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find whether an array is subset of another array.\n * > isSubset(vector<int>{11, 1, 13, 21, 3, 7}, 6, vector<int>{11, 3, 7, 1}, 4)\n * true\n * > isSubset(vector<int>{1, 2, 3, 4, 5, 6}, 6, vector<int>{1, 2, 4}, 3)\n * true\n * > isSubset(vector<int>{10, 5, 2, 23, 19}, 5, vector<int>{19, 5, 3}, 3)\n * false\n */\nbool isSubset(vector<int> arr1, int m, vector<int> arr2, int n) {\n    unordered_set<int> s;\n    for (int i = 0; i < m; i++)\n        s.insert(arr1[i]);\n    for (int i = 0; i < n; i++) {\n        if (s.find(arr2[i]) == s.end())\n            return false;\n    }\n    return true;\n}", "entry_point": "isSubset"}
{"task_id": "MBCPP/707", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the total set bits from 1 to n.\n * > countSetBits(16)\n * 33\n * > countSetBits(2)\n * 2\n * > countSetBits(14)\n * 28\n */\nint countSetBits(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num > 0) {\n            count += num & 1;\n            num >>= 1;\n        }\n    }\n    return count;\n}", "entry_point": "countSetBits"}
{"task_id": "MBCPP/708", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to convert a string to a list.\n * > convert(string(\"python program\"))\n * {string(\"python\"), string(\"program\")}\n * > convert(string(\"Data Analysis\"))\n * {string(\"Data\"), string(\"Analysis\")}\n * > convert(string(\"Hadoop Training\"))\n * {string(\"Hadoop\"), string(\"Training\")}\n */\nvector<string> convert(string str) {\n    vector<string> result;\n    stringstream ss(str);\n    string word;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n    return result;\n}", "entry_point": "convert"}
{"task_id": "MBCPP/709", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count unique keys for each value present in the tuple.\n * > getUnique(vector<vector<int>>{{3, 4}, {1, 2}, {2, 4}, {8, 2}, {7, 2}, {8, 1}, {9, 1}, {8, 4}, {10, 4}})\n * string(\"{4: 4, 2: 3, 1: 2}\")\n * > getUnique(vector<vector<int>>{{4, 5}, {2, 3}, {3, 5}, {9, 3}, {8, 3}, {9, 2}, {10, 2}, {9, 5}, {11, 5}})\n * string(\"{5: 4, 3: 3, 2: 2}\")\n * > getUnique(vector<vector<int>>{{6, 5}, {3, 4}, {2, 6}, {11, 1}, {8, 22}, {8, 11}, {4, 3}, {14, 3}, {11, 6}})\n * string(\"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\")\n */\nstring getUnique(vector<vector<int>> testList) {\n    unordered_map<int, unordered_set<int>> valueToKeys;\n    for (const auto& pair : testList) {\n        valueToKeys[pair[1]].insert(pair[0]);\n    }\n    \n    map<int, int> countMap;\n    for (const auto& entry : valueToKeys) {\n        countMap[entry.first] = entry.second.size();\n    }\n    \n    string result = \"{\";\n    for (auto it = countMap.begin(); it != countMap.end(); ++it) {\n        if (it != countMap.begin()) {\n            result += \", \";\n        }\n        result += to_string(it->first) + \": \" + to_string(it->second);\n    }\n    result += \"}\";\n    \n    return result;\n}", "entry_point": "getUnique"}
{"task_id": "MBCPP/710", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to access the initial and last data of the given tuple record.\n * > frontAndRear(vector<int>{10, 4, 5, 6, 7})\n * {10, 7}\n * > frontAndRear(vector<int>{1, 2, 3, 4, 5})\n * {1, 5}\n * > frontAndRear(vector<int>{6, 7, 8, 9, 10})\n * {6, 10}\n */\nvector<int> frontAndRear(vector<int> testTup) {\n    vector<int> result;\n    if (!testTup.empty()) {\n        result.push_back(testTup.front());\n        result.push_back(testTup.back());\n    }\n    return result;\n}", "entry_point": "frontAndRear"}
{"task_id": "MBCPP/711", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the product of digits of a number at even and odd places is equal or not.\n * > productEqual(2841)\n * true\n * > productEqual(1234)\n * false\n * > productEqual(1212)\n * false\n */\nbool productEqual(int n) {\n    int evenProduct = 1, oddProduct = 1;\n    bool isEvenPosition = false;\n    \n    while (n > 0) {\n        int digit = n % 10;\n        if (isEvenPosition)\n            evenProduct *= digit;\n        else\n            oddProduct *= digit;\n        isEvenPosition = !isEvenPosition;\n        n /= 10;\n    }\n    \n    return evenProduct == oddProduct;\n}", "entry_point": "productEqual"}
{"task_id": "MBCPP/713", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple contains all valid values or not.\n * > checkValid(vector<bool>{true, true, true, true})\n * true\n * > checkValid(vector<bool>{true, false, true, true})\n * false\n * > checkValid(vector<bool>{true, true, true, true})\n * true\n */\nbool checkValid(vector<bool> testTup) {\n    for (bool val : testTup) {\n        if (!val) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "checkValid"}
{"task_id": "MBCPP/714", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of distinct power of prime factor of given number.\n * > countFac(24)\n * 3\n * > countFac(12)\n * 2\n * > countFac(4)\n * 1\n */\nint countFac(int n) {\n    int count = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        count++;\n    }\n    return count;\n}", "entry_point": "countFac"}
{"task_id": "MBCPP/715", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given string of integers into a tuple.\n * > strToTuple(string(\"1, -5, 4, 6, 7\"))\n * {1, -5, 4, 6, 7}\n * > strToTuple(string(\"1, 2, 3, 4, 5\"))\n * {1, 2, 3, 4, 5}\n * > strToTuple(string(\"4, 6, 9, 11, 13, 14\"))\n * {4, 6, 9, 11, 13, 14}\n */\nvector<int> strToTuple(string testStr) {\n    vector<int> result;\n    stringstream ss(testStr);\n    string token;\n    while (getline(ss, token, ',')) {\n        result.push_back(stoi(token));\n    }\n    return result;\n}", "entry_point": "strToTuple"}
{"task_id": "MBCPP/716", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the perimeter of a rombus.\n * > rombusPerimeter(10)\n * 40\n * > rombusPerimeter(5)\n * 20\n * > rombusPerimeter(4)\n * 16\n */\nint rombusPerimeter(int a) {\n    return 4 * a;\n}", "entry_point": "rombusPerimeter"}
{"task_id": "MBCPP/717", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the standard deviation.\n * > sdCalc(vector<int>{4, 2, 5, 8, 6})\n * 2.23606797749979\n * > sdCalc(vector<int>{1, 2, 3, 4, 5, 6, 7})\n * 2.160246899469287\n * > sdCalc(vector<int>{5, 9, 10, 15, 6, 4})\n * 4.070217029430577\n */\ndouble sdCalc(vector<int> data) {\n    double mean = accumulate(data.begin(), data.end(), 0.0) / data.size();\n    double variance = 0.0;\n    for (int num : data) {\n        variance += pow(num - mean, 2);\n    }\n    variance /= data.size();\n    return sqrt(variance);\n}", "entry_point": "sdCalc"}
{"task_id": "MBCPP/719", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by zero or more b's.\n * > textMatch(string(\"ac\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"abba\"))\n * string(\"Found a match!\")\n */\nstring textMatch(string text) {\n    regex pattern(\"ab*\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatch"}
{"task_id": "MBCPP/721", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n * > maxaverageofpath(vector<vector<int>>{{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}, 3)\n * 5.2\n * > maxaverageofpath(vector<vector<int>>{{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}, 3)\n * 6.2\n * > maxaverageofpath(vector<vector<int>>{{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}, 3)\n * 7.2\n */\ndouble maxaverageofpath(vector<vector<int>> cost, int n) {\n    vector<vector<double>> dp(n, vector<double>(n, 0));\n    dp[0][0] = cost[0][0];\n\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n\n    for (int j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n\n    return dp[n-1][n-1] / (2 * n - 1);\n}", "entry_point": "maxaverageofpath"}
{"task_id": "MBCPP/723", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the same pair in two given lists using map function.\n * > countSamePair(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, vector<int>{2, 2, 3, 1, 2, 6, 7, 9})\n * 4\n * > countSamePair(vector<int>{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 11\n * > countSamePair(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17}, vector<int>{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8})\n * 1\n */\nint countSamePair(vector<int> nums1, vector<int> nums2) {\n    int count = 0;\n    for (size_t i = 0; i < nums1.size() && i < nums2.size(); ++i) {\n        if (nums1[i] == nums2[i]) {\n            ++count;\n        }\n    }\n    return count;\n}", "entry_point": "countSamePair"}
{"task_id": "MBCPP/724", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of all digits of the base to the specified power.\n * > powerBaseSum(2, 100)\n * 115\n * > powerBaseSum(8, 10)\n * 37\n * > powerBaseSum(8, 15)\n * 62\n */\nint powerBaseSum(int base, int power) {\n    long long num = pow(base, power);\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}", "entry_point": "powerBaseSum"}
{"task_id": "MBCPP/725", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract values between quotation marks of the given string by using regex.\n * > extractQuotation(string(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\"))\n * {string(\"A53\"), string(\"multi\"), string(\"Processor\")}\n * > extractQuotation(string(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\"))\n * {string(\"favorite\"), string(\"apps\")}\n * > extractQuotation(string(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\"))\n * {string(\"4k Ultra HD\"), string(\"HDR 10\")}\n */\nvector<string> extractQuotation(string text1) {\n    vector<string> result;\n    regex pattern(\"\\\"([^\\\"]*)\\\"\");\n    smatch matches;\n    string text = text1;\n    while (regex_search(text, matches, pattern)) {\n        result.push_back(matches.str(1));\n        text = matches.suffix().str();\n    }\n    return result;\n}", "entry_point": "extractQuotation"}
{"task_id": "MBCPP/726", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to multiply the adjacent elements of the given tuple.\n * > multiplyElements(vector<int>{1, 5, 7, 8, 10})\n * {5, 35, 56, 80}\n * > multiplyElements(vector<int>{2, 4, 5, 6, 7})\n * {8, 20, 30, 42}\n * > multiplyElements(vector<int>{12, 13, 14, 9, 15})\n * {156, 182, 126, 135}\n */\nvector<int> multiplyElements(vector<int> testTup) {\n    vector<int> result;\n    for (size_t i = 0; i < testTup.size() - 1; ++i) {\n        result.push_back(testTup[i] * testTup[i + 1]);\n    }\n    return result;\n}", "entry_point": "multiplyElements"}
{"task_id": "MBCPP/727", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all characters except letters and numbers using regex\n * > removeChar(string(\"123abcjw:, .@! eiw\"))\n * string(\"123abcjweiw\")\n * > removeChar(string(\"Hello1234:, ! Howare33u\"))\n * string(\"Hello1234Howare33u\")\n * > removeChar(string(\"Cool543Triks@:, Make@987Trips\"))\n * string(\"Cool543TriksMake987Trips\")\n */\nstring removeChar(string s) {\n    regex pattern(\"[^a-zA-Z0-9]\");\n    return regex_replace(s, pattern, \"\");\n}", "entry_point": "removeChar"}
{"task_id": "MBCPP/728", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum elements in two lists.\n * > sumList(vector<int>{10, 20, 30}, vector<int>{15, 25, 35})\n * {25, 45, 65}\n * > sumList(vector<int>{1, 2, 3}, vector<int>{5, 6, 7})\n * {6, 8, 10}\n * > sumList(vector<int>{15, 20, 30}, vector<int>{15, 45, 75})\n * {30, 65, 105}\n */\nvector<int> sumList(vector<int> lst1, vector<int> lst2) {\n    vector<int> result;\n    for (size_t i = 0; i < lst1.size(); ++i) {\n        result.push_back(lst1[i] + lst2[i]);\n    }\n    return result;\n}", "entry_point": "sumList"}
{"task_id": "MBCPP/729", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add two lists using map and lambda function.\n * > addList(vector<int>{1, 2, 3}, vector<int>{4, 5, 6})\n * {5, 7, 9}\n * > addList(vector<int>{1, 2}, vector<int>{3, 4})\n * {4, 6}\n * > addList(vector<int>{10, 20}, vector<int>{50, 70})\n * {60, 90}\n */\nvector<int> addList(vector<int> nums1, vector<int> nums2) {\n    vector<int> result;\n    transform(nums1.begin(), nums1.end(), nums2.begin(), back_inserter(result), [](int a, int b) { return a + b; });\n    return result;\n}", "entry_point": "addList"}
{"task_id": "MBCPP/731", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the lateral surface area of a cone.\n * > lateralsurfaceCone(5, 12)\n * 204.20352248333654\n * > lateralsurfaceCone(10, 15)\n * 566.3586699569488\n * > lateralsurfaceCone(19, 17)\n * 1521.8090132193388\n */\ndouble lateralsurfaceCone(int r, int h) {\n    double l = sqrt(r * r + h * h);\n    return M_PI * r * l;\n}", "entry_point": "lateralsurfaceCone"}
{"task_id": "MBCPP/732", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n * > replaceSpecialchar(string(\"Python language, Programming language.\"))\n * string(\"Python:language::Programming:language:\")\n * > replaceSpecialchar(string(\"a b c,d e f\"))\n * string(\"a:b:c:d:e:f\")\n * > replaceSpecialchar(string(\"ram reshma,ram rahim\"))\n * string(\"ram:reshma:ram:rahim\")\n */\nstring replaceSpecialchar(string text) {\n    for (char &c : text) {\n        if (c == ' ' || c == ',' || c == '.') {\n            c = ':';\n        }\n    }\n    return text;\n}", "entry_point": "replaceSpecialchar"}
{"task_id": "MBCPP/733", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the index of the first occurrence of a given number in a sorted array.\n * > findFirstOccurrence(vector<int>{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 1\n * > findFirstOccurrence(vector<int>{2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5)\n * 2\n * > findFirstOccurrence(vector<int>{2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6)\n * 4\n */\nint findFirstOccurrence(vector<int> a, int x) {\n    int left = 0, right = a.size() - 1;\n    int result = -1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (a[mid] == x) {\n            result = mid;\n            right = mid - 1;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return result;\n}", "entry_point": "findFirstOccurrence"}
{"task_id": "MBCPP/734", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of products of all possible subarrays.\n * > sumOfSubarrayProd(vector<int>{1, 2, 3}, 3)\n * 20\n * > sumOfSubarrayProd(vector<int>{1, 2}, 2)\n * 5\n * > sumOfSubarrayProd(vector<int>{1, 2, 3, 4}, 4)\n * 84\n */\nint sumOfSubarrayProd(vector<int> arr, int n) {\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n        int product = 1;\n        for (int j = i; j < n; j++) {\n            product *= arr[j];\n            result += product;\n        }\n    }\n    return result;\n}", "entry_point": "sumOfSubarrayProd"}
{"task_id": "MBCPP/735", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to toggle bits of the number except the first and the last bit.\n * > toggleMiddleBits(9)\n * 15\n * > toggleMiddleBits(10)\n * 12\n * > toggleMiddleBits(11)\n * 13\n */\nint toggleMiddleBits(int n) {\n    if (n == 0)\n        return 0;\n    \n    int numBits = log2(n) + 1;\n    if (numBits <= 2)\n        return n;\n    \n    int mask = (1 << (numBits - 1)) - 1;\n    mask &= ~1;\n    \n    return n ^ mask;\n}", "entry_point": "toggleMiddleBits"}
{"task_id": "MBCPP/736", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to locate the left insertion point for a specified value in sorted order.\n * > leftInsertion(vector<int>{1, 2, 4, 5}, 6)\n * 4\n * > leftInsertion(vector<int>{1, 2, 4, 5}, 3)\n * 2\n * > leftInsertion(vector<int>{1, 2, 4, 5}, 7)\n * 4\n */\nint leftInsertion(vector<int> a, int x) {\n    int low = 0, high = a.size();\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] < x)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}", "entry_point": "leftInsertion"}
{"task_id": "MBCPP/737", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string is starting with a vowel or not using regex.\n * > checkStr(string(\"annie\"))\n * string(\"Valid\")\n * > checkStr(string(\"dawood\"))\n * string(\"Invalid\")\n * > checkStr(string(\"Else\"))\n * string(\"Valid\")\n */\nstring checkStr(string str) {\n    regex pattern(\"^[aeiouAEIOU].*\");\n    if (regex_match(str, pattern))\n        return \"Valid\";\n    else\n        return \"Invalid\";\n}", "entry_point": "checkStr"}
{"task_id": "MBCPP/738", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the geometric sum of n-1.\n * > geometricSum(7)\n * 1.9921875\n * > geometricSum(4)\n * 1.9375\n * > geometricSum(8)\n * 1.99609375\n */\ndouble geometricSum(int n) {\n    if (n == 1)\n        return 1;\n    return geometricSum(n - 1) + 1.0 / pow(2, n - 1);\n}", "entry_point": "geometricSum"}
{"task_id": "MBCPP/739", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the index of smallest triangular number with n digits.\n * > findIndex(2)\n * 4\n * > findIndex(3)\n * 14\n * > findIndex(4)\n * 45\n */\nint findIndex(int n) {\n    if (n == 1)\n        return 1;\n    \n    long long low = 1, high = 1e6;\n    long long result = 0;\n    long long minDigits = pow(10, n - 1);\n    \n    while (low <= high) {\n        long long mid = low + (high - low) / 2;\n        long long triangular = mid * (mid + 1) / 2;\n        \n        if (triangular >= minDigits) {\n            result = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    \n    return result;\n}", "entry_point": "findIndex"}
{"task_id": "MBCPP/740", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n * > tupleToDict(vector<int>{1, 5, 7, 10, 13, 5})\n * {{1, 5}, {7, 10}, {13, 5}}\n * > tupleToDict(vector<int>{1, 2, 3, 4, 5, 6})\n * {{1, 2}, {3, 4}, {5, 6}}\n * > tupleToDict(vector<int>{7, 8, 9, 10, 11, 12})\n * {{7, 8}, {9, 10}, {11, 12}}\n */\nunordered_map<int, int> tupleToDict(vector<int> testTup) {\n    unordered_map<int, int> result;\n    for (size_t i = 0; i < testTup.size(); i += 2) {\n        if (i + 1 < testTup.size()) {\n            result[testTup[i]] = testTup[i + 1];\n        }\n    }\n    return result;\n}", "entry_point": "tupleToDict"}
{"task_id": "MBCPP/741", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the characters are same or not.\n * > allCharactersSame(string(\"python\"))\n * false\n * > allCharactersSame(string(\"aaa\"))\n * true\n * > allCharactersSame(string(\"data\"))\n * false\n */\nbool allCharactersSame(string s) {\n    if (s.length() == 0)\n        return true;\n    char firstChar = s[0];\n    for (char c : s) {\n        if (c != firstChar)\n            return false;\n    }\n    return true;\n}", "entry_point": "allCharactersSame"}
{"task_id": "MBCPP/742", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate the area of a tetrahedron.\n * > areaTetrahedron(3)\n * 15.588457268119894\n * > areaTetrahedron(20)\n * 692.8203230275509\n * > areaTetrahedron(10)\n * 173.20508075688772\n */\ndouble areaTetrahedron(int side) {\n    return (sqrt(3) * side * side);\n}", "entry_point": "areaTetrahedron"}
{"task_id": "MBCPP/743", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rotate a given list by specified number of items to the right direction.\n * > rotateRight(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4)\n * {8, 9, 10, 1, 2, 3, 4, 5, 6}\n * > rotateRight(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2)\n * {9, 10, 1, 2, 3, 4, 5, 6, 7, 8}\n * > rotateRight(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2)\n * {6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8}\n */\nvector<int> rotateRight(vector<int> list1, int m, int n) {\n    if (list1.empty() || n == 0) return list1;\n    n = n % list1.size();\n    vector<int> rotated(list1.end() - n, list1.end());\n    rotated.insert(rotated.end(), list1.begin(), list1.end() - n);\n    if (m > 0) {\n        rotated.resize(rotated.size() - m);\n    }\n    return rotated;\n}", "entry_point": "rotateRight"}
{"task_id": "MBCPP/744", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple has any -1 or not.\n * > checkNone(vector<int>{7, 8, 9, 11, 14})\n * false\n */\nbool checkNone(vector<int> testTup) {\n    for (int num : testTup) {\n        if (num == -1) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "checkNone"}
{"task_id": "MBCPP/745", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n * > divisibleByDigits(1, 22)\n * {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\n * > divisibleByDigits(1, 15)\n * {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15}\n * > divisibleByDigits(20, 25)\n * {22, 24}\n */\nvector<int> divisibleByDigits(int startnum, int endnum) {\n    vector<int> result;\n    for (int num = startnum; num <= endnum; ++num) {\n        int temp = num;\n        bool valid = true;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || num % digit != 0) {\n                valid = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (valid) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "divisibleByDigits"}
{"task_id": "MBCPP/747", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the longest common subsequence for the given three string sequence.\n * > lcsOfThree(string(\"AGGT12\"), string(\"12TXAYB\"), string(\"12XBA\"), 6, 7, 5)\n * 2\n * > lcsOfThree(string(\"Reels\"), string(\"Reelsfor\"), string(\"ReelsforReels\"), 5, 8, 13)\n * 5\n * > lcsOfThree(string(\"abcd1e2\"), string(\"bc12ea\"), string(\"bd1ea\"), 7, 6, 5)\n * 3\n */\nint lcsOfThree(string x, string y, string z, int m, int n, int o) {\n    int dp[m+1][n+1][o+1];\n    memset(dp, 0, sizeof(dp));\n    \n    for(int i=1; i<=m; i++) {\n        for(int j=1; j<=n; j++) {\n            for(int k=1; k<=o; k++) {\n                if(x[i-1] == y[j-1] && y[j-1] == z[k-1]) {\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                } else {\n                    dp[i][j][k] = max({dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]});\n                }\n            }\n        }\n    }\n    \n    return dp[m][n][o];\n}", "entry_point": "lcsOfThree"}
{"task_id": "MBCPP/748", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n * > capitalWordsSpaces(string(\"Python\"))\n * string(\"Python\")\n * > capitalWordsSpaces(string(\"PythonProgrammingExamples\"))\n * string(\"Python Programming Examples\")\n * > capitalWordsSpaces(string(\"GetReadyToBeCodingFreak\"))\n * string(\"Get Ready To Be Coding Freak\")\n */\nstring capitalWordsSpaces(string str1) {\n    string result;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (i != 0 && isupper(str1[i])) {\n            result += ' ';\n        }\n        result += str1[i];\n    }\n    return result;\n}", "entry_point": "capitalWordsSpaces"}
{"task_id": "MBCPP/749", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a given list of strings of numbers numerically.\n * > sortNumericStrings(vector<string>{string(\"4\"), string(\"12\"), string(\"45\"), string(\"7\"), string(\"0\"), string(\"100\"), string(\"200\"), string(\"-12\"), string(\"-500\")})\n * {-500, -12, 0, 4, 7, 12, 45, 100, 200}\n * > sortNumericStrings(vector<string>{string(\"2\"), string(\"3\"), string(\"8\"), string(\"4\"), string(\"7\"), string(\"9\"), string(\"8\"), string(\"2\"), string(\"6\"), string(\"5\"), string(\"1\"), string(\"6\"), string(\"1\"), string(\"2\"), string(\"3\"), string(\"4\"), string(\"6\"), string(\"9\"), string(\"1\"), string(\"2\")})\n * {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9}\n * > sortNumericStrings(vector<string>{string(\"1\"), string(\"3\"), string(\"5\"), string(\"7\"), string(\"1\"), string(\"3\"), string(\"13\"), string(\"15\"), string(\"17\"), string(\"5\"), string(\"7 \"), string(\"9\"), string(\"1\"), string(\"11\")})\n * {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17}\n */\nvector<int> sortNumericStrings(vector<string> numsStr) {\n    vector<int> nums;\n    for (const string& s : numsStr) {\n        nums.push_back(stoi(s));\n    }\n    sort(nums.begin(), nums.end());\n    return nums;\n}", "entry_point": "sortNumericStrings"}
{"task_id": "MBCPP/750", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add the given tuple to the given list.\n * > addTuple(vector<int>{5, 6, 7}, vector<int>{9, 10})\n * {5, 6, 7, 9, 10}\n * > addTuple(vector<int>{6, 7, 8}, vector<int>{10, 11})\n * {6, 7, 8, 10, 11}\n * > addTuple(vector<int>{7, 8, 9}, vector<int>{11, 12})\n * {7, 8, 9, 11, 12}\n */\nvector<int> addTuple(vector<int> testList, vector<int> testTup) {\n    testList.insert(testList.end(), testTup.begin(), testTup.end());\n    return testList;\n}", "entry_point": "addTuple"}
{"task_id": "MBCPP/751", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given array represents min heap or not.\n * > checkMinHeap(vector<int>{1, 2, 3, 4, 5, 6}, 0)\n * true\n * > checkMinHeap(vector<int>{2, 3, 4, 5, 10, 15}, 0)\n * true\n * > checkMinHeap(vector<int>{2, 10, 4, 5, 3, 15}, 0)\n * false\n */\nbool checkMinHeap(vector<int> arr, int i) {\n    int n = arr.size();\n    if (i >= (n - 1) / 2)\n        return true;\n    if (arr[i] <= arr[2 * i + 1] && arr[i] <= arr[2 * i + 2] && checkMinHeap(arr, 2 * i + 1) && checkMinHeap(arr, 2 * i + 2))\n        return true;\n    return false;\n}", "entry_point": "checkMinHeap"}
{"task_id": "MBCPP/752", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth jacobsthal number.\n * > jacobsthalNum(5)\n * 11\n * > jacobsthalNum(2)\n * 1\n * > jacobsthalNum(4)\n * 5\n */\nint jacobsthalNum(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2);\n}", "entry_point": "jacobsthalNum"}
{"task_id": "MBCPP/754", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find common index elements from three lists.\n * > extractIndexList(vector<int>{1, 1, 3, 4, 5, 6, 7}, vector<int>{0, 1, 2, 3, 4, 5, 7}, vector<int>{0, 1, 2, 3, 4, 5, 7})\n * {1, 7}\n * > extractIndexList(vector<int>{1, 1, 3, 4, 5, 6, 7}, vector<int>{0, 1, 2, 3, 4, 6, 5}, vector<int>{0, 1, 2, 3, 4, 6, 7})\n * {1, 6}\n * > extractIndexList(vector<int>{1, 1, 3, 4, 6, 5, 6}, vector<int>{0, 1, 2, 3, 4, 5, 7}, vector<int>{0, 1, 2, 3, 4, 5, 7})\n * {1, 5}\n */\nvector<int> extractIndexList(vector<int> l1, vector<int> l2, vector<int> l3) {\n    vector<int> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;\n}", "entry_point": "extractIndexList"}
{"task_id": "MBCPP/756", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by zero or one 'b'.\n * > textMatchZeroOne(string(\"ac\"))\n * string(\"Found a match!\")\n * > textMatchZeroOne(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchZeroOne(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchZeroOne(string text) {\n    regex pattern(\"ab?\");\n    if (regex_search(text, pattern))\n        return \"Found a match!\";\n    else\n        return \"Not matched!\";\n}", "entry_point": "textMatchZeroOne"}
{"task_id": "MBCPP/757", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the pairs of reverse strings in the given string list.\n * > countReversePairs(vector<string>{string(\"julia\"), string(\"best\"), string(\"tseb\"), string(\"for\"), string(\"ailuj\")})\n * string(\"2\")\n * > countReversePairs(vector<string>{string(\"geeks\"), string(\"best\"), string(\"for\"), string(\"skeeg\")})\n * string(\"1\")\n * > countReversePairs(vector<string>{string(\"makes\"), string(\"best\"), string(\"sekam\"), string(\"for\"), string(\"rof\")})\n * string(\"2\")\n */\nstring countReversePairs(vector<string> testList) {\n    unordered_set<string> seen;\n    int count = 0;\n    \n    for (const string& s : testList) {\n        string reversed(s.rbegin(), s.rend());\n        if (seen.find(reversed) != seen.end()) {\n            count++;\n            seen.erase(reversed);\n        } else {\n            seen.insert(s);\n        }\n    }\n    \n    return to_string(count);\n}", "entry_point": "countReversePairs"}
{"task_id": "MBCPP/759", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check a decimal with a precision of 2.\n * > isDecimal(string(\"123.11\"))\n * true\n * > isDecimal(string(\"e666.86\"))\n * false\n * > isDecimal(string(\"3.124587\"))\n * false\n */\nbool isDecimal(string num) {\n    int dotCount = 0;\n    int dotIndex = -1;\n    \n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dotCount++;\n            dotIndex = i;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n    }\n    \n    if (dotCount != 1) {\n        return false;\n    }\n    \n    int decimalPlaces = num.length() - dotIndex - 1;\n    return decimalPlaces == 2;\n}", "entry_point": "isDecimal"}
{"task_id": "MBCPP/760", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array contains only one distinct element or not.\n * > uniqueElement(vector<int>{1, 1, 1}, 3)\n * string(\"YES\")\n * > uniqueElement(vector<int>{1, 2, 1, 2}, 4)\n * string(\"NO\")\n * > uniqueElement(vector<int>{1, 2, 3, 4, 5}, 5)\n * string(\"NO\")\n */\nstring uniqueElement(vector<int> arr, int n) {\n    if (n == 0)\n        return \"NO\";\n    int first = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] != first)\n            return \"NO\";\n    }\n    return \"YES\";\n}", "entry_point": "uniqueElement"}
{"task_id": "MBCPP/762", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 30 days or not.\n * > checkMonthnumberNumber(6)\n * true\n * > checkMonthnumberNumber(2)\n * false\n * > checkMonthnumberNumber(12)\n * false\n */\nbool checkMonthnumberNumber(int monthnum3) {\n    if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11)\n        return true;\n    else\n        return false;\n}", "entry_point": "checkMonthnumberNumber"}
{"task_id": "MBCPP/763", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimum difference between any two elements in a given array.\n * > findMinDiff(vector<int>{1, 5, 3, 19, 18, 25}, 6)\n * 1\n * > findMinDiff(vector<int>{4, 3, 2, 6}, 4)\n * 1\n * > findMinDiff(vector<int>{30, 5, 20, 9}, 4)\n * 4\n */\nint findMinDiff(vector<int> arr, int n) {\n    sort(arr.begin(), arr.end());\n    int min_diff = INT_MAX;\n    for (int i = 1; i < n; i++) {\n        int diff = arr[i] - arr[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n        }\n    }\n    return min_diff;\n}", "entry_point": "findMinDiff"}
{"task_id": "MBCPP/764", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count numeric values in a given string.\n * > numberCtr(string(\"program2bedone\"))\n * 1\n * > numberCtr(string(\"3wonders\"))\n * 1\n * > numberCtr(string(\"123\"))\n * 3\n */\nint numberCtr(string str) {\n    int count = 0;\n    for (char ch : str) {\n        if (isdigit(ch)) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "numberCtr"}
{"task_id": "MBCPP/765", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find nth polite number.\n * > isPolite(7)\n * 11\n * > isPolite(4)\n * 7\n * > isPolite(9)\n * 13\n */\nint isPolite(int n) {\n    return n + (int)log2(n) + 1;\n}", "entry_point": "isPolite"}
{"task_id": "MBCPP/766", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to iterate over all pairs of consecutive items in a given list.\n * > pairWise(vector<int>{1, 1, 2, 3, 3, 4, 4, 5})\n * {{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}}\n * > pairWise(vector<int>{1, 5, 7, 9, 10})\n * {{1, 5}, {5, 7}, {7, 9}, {9, 10}}\n * > pairWise(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}}\n */\nvector<vector<int>> pairWise(vector<int> l1) {\n    vector<vector<int>> result;\n    if (l1.size() < 2) return result;\n    \n    for (size_t i = 0; i < l1.size() - 1; ++i) {\n        result.push_back({l1[i], l1[i+1]});\n    }\n    \n    return result;\n}", "entry_point": "pairWise"}
{"task_id": "MBCPP/767", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n * > getPairsCount(vector<int>{1, 1, 1, 1}, 4, 2)\n * 6\n * > getPairsCount(vector<int>{1, 5, 7, -1, 5}, 5, 6)\n * 3\n * > getPairsCount(vector<int>{1, -2, 3}, 3, 1)\n * 1\n */\nint getPairsCount(vector<int> arr, int n, int sum) {\n    unordered_map<int, int> freq;\n    int count = 0;\n    \n    for (int i = 0; i < n; i++) {\n        int complement = sum - arr[i];\n        if (freq.find(complement) != freq.end()) {\n            count += freq[complement];\n        }\n        freq[arr[i]]++;\n    }\n    \n    return count;\n}", "entry_point": "getPairsCount"}
{"task_id": "MBCPP/768", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check for odd parity of a given number.\n * > checkOddParity(13)\n * true\n * > checkOddParity(21)\n * true\n * > checkOddParity(18)\n * false\n */\nbool checkOddParity(int x) {\n    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return count % 2 != 0;\n}", "entry_point": "checkOddParity"}
{"task_id": "MBCPP/769", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the difference between two lists.\n * > diff(vector<int>{10, 15, 20, 25, 30, 35, 40}, vector<int>{25, 40, 35})\n * {10, 20, 30, 15}\n * > diff(vector<int>{1, 2, 3, 4, 5}, vector<int>{6, 7, 1})\n * {2, 3, 4, 5, 6, 7}\n * > diff(vector<int>{1, 2, 3}, vector<int>{6, 7, 1})\n * {2, 3, 6, 7}\n */\nvector<int> diff(vector<int> li1, vector<int> li2) {\n    unordered_set<int> set1(li1.begin(), li1.end());\n    unordered_set<int> set2(li2.begin(), li2.end());\n    vector<int> result;\n\n    for (int num : li1) {\n        if (set2.find(num) == set2.end()) {\n            result.push_back(num);\n        }\n    }\n\n    for (int num : li2) {\n        if (set1.find(num) == set1.end()) {\n            result.push_back(num);\n        }\n    }\n\n    return result;\n}", "entry_point": "diff"}
{"task_id": "MBCPP/770", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of fourth power of first n odd natural numbers.\n * > oddNumSum(2)\n * 82\n * > oddNumSum(3)\n * 707\n * > oddNumSum(4)\n * 3108\n */\nint oddNumSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int oddNum = 2 * i - 1;\n        sum += pow(oddNum, 4);\n    }\n    return sum;\n}", "entry_point": "oddNumSum"}
{"task_id": "MBCPP/771", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given expression is balanced or not.\n * > checkExpression(string(\"{()}[{}]\"))\n * true\n * > checkExpression(string(\"{()}[{]\"))\n * false\n * > checkExpression(string(\"{()}[{}][]({})\"))\n * true\n */\nbool checkExpression(string exp) {\n    stack<char> s;\n    for (char c : exp) {\n        if (c == '{' || c == '[' || c == '(') {\n            s.push(c);\n        } else if (c == '}' || c == ']' || c == ')') {\n            if (s.empty())\n                return false;\n            char top = s.top();\n            s.pop();\n            if ((c == '}' && top != '{') || (c == ']' && top != '[') || (c == ')' && top != '('))\n                return false;\n        }\n    }\n    return s.empty();\n}", "entry_point": "checkExpression"}
{"task_id": "MBCPP/772", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all the words with k length in the given string.\n * > removeLength(string(\"The person is most value tet\"), 3)\n * string(\"person is most value\")\n * > removeLength(string(\"If you told me about this ok\"), 4)\n * string(\"If you me about ok\")\n * > removeLength(string(\"Forces of darkeness is come into the play\"), 4)\n * string(\"Forces of darkeness is the\")\n */\nstring removeLength(string testStr, int k) {\n    stringstream ss(testStr);\n    string word, result;\n    while (ss >> word) {\n        if (word.length() != k) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}", "entry_point": "removeLength"}
{"task_id": "MBCPP/774", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the string is a valid email address or not using regex.\n * > checkEmail(string(\"ankitrai326@gmail.com\"))\n * string(\"Valid Email\")\n * > checkEmail(string(\"my.ownsite@ourearth.org\"))\n * string(\"Valid Email\")\n * > checkEmail(string(\"ankitaoie326.com\"))\n * string(\"Invalid Email\")\n */\nstring checkEmail(string email) {\n    regex pattern(R\"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\");\n    if (regex_match(email, pattern)) {\n        return \"Valid Email\";\n    } else {\n        return \"Invalid Email\";\n    }\n}", "entry_point": "checkEmail"}
{"task_id": "MBCPP/775", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether every odd index contains odd numbers of a given list.\n * > oddPosition(vector<int>{2, 1, 4, 3, 6, 7, 6, 3})\n * true\n * > oddPosition(vector<int>{4, 1, 2})\n * true\n * > oddPosition(vector<int>{1, 2, 3})\n * false\n */\nbool oddPosition(vector<int> nums) {\n    for (int i = 1; i < nums.size(); i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "oddPosition"}
{"task_id": "MBCPP/776", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count those characters which have vowels as their neighbors in the given string.\n * > countVowels(string(\"bestinstareels\"))\n * 7\n * > countVowels(string(\"partofthejourneyistheend\"))\n * 12\n * > countVowels(string(\"amazonprime\"))\n * 5\n */\nint countVowels(string testStr) {\n    int count = 0;\n    for (int i = 0; i < testStr.length(); ++i) {\n        bool leftVowel = (i > 0 && (testStr[i-1] == 'a' || testStr[i-1] == 'e' || testStr[i-1] == 'i' || testStr[i-1] == 'o' || testStr[i-1] == 'u'));\n        bool rightVowel = (i < testStr.length() - 1 && (testStr[i+1] == 'a' || testStr[i+1] == 'e' || testStr[i+1] == 'i' || testStr[i+1] == 'o' || testStr[i+1] == 'u'));\n        if (leftVowel || rightVowel) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countVowels"}
{"task_id": "MBCPP/777", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of non-repeated elements in a given array.\n * > findSum(vector<int>{1, 2, 3, 1, 1, 4, 5, 6}, 8)\n * 21\n * > findSum(vector<int>{1, 10, 9, 4, 2, 10, 10, 45, 4}, 9)\n * 71\n * > findSum(vector<int>{12, 10, 9, 45, 2, 10, 10, 45, 10}, 9)\n * 78\n */\nint findSum(vector<int> arr, int n) {\n    unordered_map<int, int> freq;\n    for(int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    int sum = 0;\n    for(auto it : freq) {\n        if(it.second == 1) {\n            sum += it.first;\n        }\n    }\n    return sum;\n}", "entry_point": "findSum"}
{"task_id": "MBCPP/780", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the combinations of sums with tuples in the given tuple list.\n * > findCombinations(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}, {6, 10}})\n * {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}}\n * > findCombinations(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}, {7, 11}})\n * {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}}\n * > findCombinations(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}, {8, 12}})\n * {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}}\n */\nvector<vector<int>> findCombinations(vector<vector<int>> testList) {\n    vector<vector<int>> result;\n    for (size_t i = 0; i < testList.size(); ++i) {\n        for (size_t j = i + 1; j < testList.size(); ++j) {\n            vector<int> temp;\n            temp.push_back(testList[i][0] + testList[j][0]);\n            temp.push_back(testList[i][1] + testList[j][1]);\n            result.push_back(temp);\n        }\n    }\n    return result;\n}", "entry_point": "findCombinations"}
{"task_id": "MBCPP/781", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the count of divisors is even or odd.\n * > countDivisors(10)\n * string(\"Even\")\n * > countDivisors(100)\n * string(\"Odd\")\n * > countDivisors(125)\n * string(\"Even\")\n */\nstring countDivisors(int n) {\n    int count = 0;\n    for (int i = 1; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            if (n / i == i)\n                count++;\n            else\n                count += 2;\n        }\n    }\n    return (count % 2 == 0) ? \"Even\" : \"Odd\";\n}", "entry_point": "countDivisors"}
{"task_id": "MBCPP/782", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of all odd length subarrays.\n * > oddLengthSum(vector<int>{1, 2, 4})\n * 14\n * > oddLengthSum(vector<int>{1, 2, 1, 2})\n * 15\n * > oddLengthSum(vector<int>{1, 7})\n * 8\n */\nint oddLengthSum(vector<int> arr) {\n    int sum = 0;\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j += 2) {\n            for (int k = i; k <= j; k++) {\n                sum += arr[k];\n            }\n        }\n    }\n    return sum;\n}", "entry_point": "oddLengthSum"}
{"task_id": "MBCPP/784", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the product of first even and odd number of a given list.\n * > mulEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 4\n * > mulEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 2\n * > mulEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 10\n */\nint mulEvenOdd(vector<int> list1) {\n    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    if (even == -1 || odd == -1) {\n        return 0;\n    }\n    return even * odd;\n}", "entry_point": "mulEvenOdd"}
{"task_id": "MBCPP/785", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert tuple string to integer tuple.\n * > tupleStrInt(string(\"(7, 8, 9)\"))\n * {7, 8, 9}\n * > tupleStrInt(string(\"(1, 2, 3)\"))\n * {1, 2, 3}\n * > tupleStrInt(string(\"(4, 5, 6)\"))\n * {4, 5, 6}\n */\nvector<int> tupleStrInt(string testStr) {\n    vector<int> result;\n    stringstream ss(testStr);\n    char ch;\n    int num;\n    ss >> ch; // Read '('\n    while (ss >> num) {\n        result.push_back(num);\n        ss >> ch; // Read ',' or ')'\n    }\n    return result;\n}", "entry_point": "tupleStrInt"}
{"task_id": "MBCPP/786", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to locate the right insertion point for a specified value in sorted order.\n * > rightInsertion(vector<int>{1, 2, 4, 5}, 6)\n * 4\n * > rightInsertion(vector<int>{1, 2, 4, 5}, 3)\n * 2\n * > rightInsertion(vector<int>{1, 2, 4, 5}, 7)\n * 4\n */\nint rightInsertion(vector<int> a, int x) {\n    int low = 0, high = a.size();\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (a[mid] <= x)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}", "entry_point": "rightInsertion"}
{"task_id": "MBCPP/787", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by three 'b'.\n * > textMatchThree(string(\"ac\"))\n * string(\"Not matched!\")\n * > textMatchThree(string(\"dc\"))\n * string(\"Not matched!\")\n * > textMatchThree(string(\"abbbba\"))\n * string(\"Found a match!\")\n */\nstring textMatchThree(string text) {\n    regex pattern(\"ab{3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatchThree"}
{"task_id": "MBCPP/788", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to create a new tuple from the given string and list.\n * > newTuple(vector<string>{string(\"WEB\"), string(\"is\")}, string(\"best\"))\n * {string(\"WEB\"), string(\"is\"), string(\"best\")}\n * > newTuple(vector<string>{string(\"We\"), string(\"are\")}, string(\"Developers\"))\n * {string(\"We\"), string(\"are\"), string(\"Developers\")}\n * > newTuple(vector<string>{string(\"Part\"), string(\"is\")}, string(\"Wrong\"))\n * {string(\"Part\"), string(\"is\"), string(\"Wrong\")}\n */\nvector<string> newTuple(vector<string> testList, string testStr) {\n    testList.push_back(testStr);\n    return testList;\n}", "entry_point": "newTuple"}
{"task_id": "MBCPP/789", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the perimeter of a regular polygon.\n * > perimeterPolygon(4, 20)\n * 80\n * > perimeterPolygon(10, 15)\n * 150\n * > perimeterPolygon(9, 7)\n * 63\n */\nint perimeterPolygon(int s, int l) {\n    return s * l;\n}", "entry_point": "perimeterPolygon"}
{"task_id": "MBCPP/790", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether every even index contains even numbers of a given list.\n * > evenPosition(vector<int>{3, 2, 1})\n * false\n * > evenPosition(vector<int>{1, 2, 3})\n * false\n * > evenPosition(vector<int>{2, 1, 4})\n * true\n */\nbool evenPosition(vector<int> nums) {\n    for (int i = 0; i < nums.size(); i += 2) {\n        if (nums[i] % 2 != 0) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "evenPosition"}
{"task_id": "MBCPP/792", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of lists in a given number of lists.\n * > countList(vector<vector<int>>{{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}})\n * 4\n * > countList(vector<vector<int>>{{1, 2}, {2, 3}, {4, 5}})\n * 3\n * > countList(vector<vector<int>>{{1, 0}, {2, 0}})\n * 2\n */\nint countList(vector<vector<int>> inputList) {\n    return inputList.size();\n}", "entry_point": "countList"}
{"task_id": "MBCPP/793", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the last position of an element in a sorted array.\n * > last(vector<int>{1, 2, 3}, 1, 3)\n * 0\n * > last(vector<int>{1, 1, 1, 2, 3, 4}, 1, 6)\n * 2\n * > last(vector<int>{2, 3, 2, 3, 6, 8, 9}, 3, 8)\n * 3\n */\nint last(vector<int> arr, int x, int n) {\n    int low = 0, high = n - 1, result = -1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (arr[mid] == x) {\n            result = mid;\n            low = mid + 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;\n}", "entry_point": "last"}
{"task_id": "MBCPP/794", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n * > textStartaEndb(string(\"aabbbb\"))\n * string(\"Found a match!\")\n * > textStartaEndb(string(\"aabAbbbc\"))\n * string(\"Not matched!\")\n * > textStartaEndb(string(\"accddbbjjj\"))\n * string(\"Not matched!\")\n */\nstring textStartaEndb(string text) {\n    regex pattern(\"a.*b\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textStartaEndb"}
{"task_id": "MBCPP/796", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write function to find the sum of all items in the given dictionary.\n * > returnSum(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}, {string(\"c\"), 300}})\n * 600\n * > returnSum(unordered_map<string, int>{{string(\"a\"), 25}, {string(\"b\"), 18}, {string(\"c\"), 45}})\n * 88\n * > returnSum(unordered_map<string, int>{{string(\"a\"), 36}, {string(\"b\"), 39}, {string(\"c\"), 49}})\n * 124\n */\nint returnSum(unordered_map<string, int> dict) {\n    int sum = 0;\n    for (auto& item : dict) {\n        sum += item.second;\n    }\n    return sum;\n}", "entry_point": "returnSum"}
{"task_id": "MBCPP/797", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of all odd natural numbers within the range l and r.\n * > sumInRange(2, 5)\n * 8\n * > sumInRange(5, 7)\n * 12\n * > sumInRange(7, 13)\n * 40\n */\nint sumInRange(int l, int r) {\n    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "entry_point": "sumInRange"}
{"task_id": "MBCPP/798", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of an array.\n * > Sum(vector<int>{1, 2, 3})\n * 6\n * > Sum(vector<int>{15, 12, 13, 10})\n * 50\n * > Sum(vector<int>{0, 1, 2})\n * 3\n */\nint Sum(vector<int> arr) {\n    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "entry_point": "Sum"}
{"task_id": "MBCPP/799", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to left rotate the bits of a given number.\n * > leftRotate(16, 2)\n * 64\n * > leftRotate(10, 2)\n * 40\n * > leftRotate(99, 3)\n * 792\n */\nint leftRotate(int n, int d) {\n    const int bits = sizeof(n) * 8;\n    d = d % bits;\n    return (n << d) | (n >> (bits - d));\n}", "entry_point": "leftRotate"}
{"task_id": "MBCPP/800", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove all whitespaces from a string.\n * > removeAllSpaces(string(\"python  program\"))\n * string(\"pythonprogram\")\n * > removeAllSpaces(string(\"python   programming    language\"))\n * string(\"pythonprogramminglanguage\")\n * > removeAllSpaces(string(\"python                     program\"))\n * string(\"pythonprogram\")\n */\nstring removeAllSpaces(string text) {\n    text.erase(remove(text.begin(), text.end(), ' '), text.end());\n    return text;\n}", "entry_point": "removeAllSpaces"}
{"task_id": "MBCPP/801", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of equal numbers from three given integers.\n * > testThreeEqual(1, 1, 1)\n * 3\n * > testThreeEqual(-1, -2, -3)\n * 0\n * > testThreeEqual(1, 2, 2)\n * 2\n */\nint testThreeEqual(int x, int y, int z) {\n    if (x == y && y == z)\n        return 3;\n    else if (x == y || y == z || x == z)\n        return 2;\n    else\n        return 0;\n}", "entry_point": "testThreeEqual"}
{"task_id": "MBCPP/802", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of rotations required to generate a sorted array.\n * > countRotation(vector<int>{3, 2, 1}, 3)\n * 1\n * > countRotation(vector<int>{4, 5, 1, 2, 3}, 5)\n * 2\n * > countRotation(vector<int>{7, 8, 9, 1, 2, 3}, 6)\n * 3\n */\nint countRotation(vector<int> arr, int n) {\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high])\n            return low;\n        int mid = low + (high - low) / 2;\n        int next = (mid + 1) % n;\n        int prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n            return mid;\n        else if (arr[mid] <= arr[high])\n            high = mid - 1;\n        else if (arr[mid] >= arr[low])\n            low = mid + 1;\n    }\n    return 0;\n}", "entry_point": "countRotation"}
{"task_id": "MBCPP/803", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is a perfect square or not.\n * > isPerfectSquare(10)\n * false\n * > isPerfectSquare(36)\n * true\n * > isPerfectSquare(14)\n * false\n */\nbool isPerfectSquare(int n) {\n    if (n < 0)\n        return false;\n    int sqrt_n = sqrt(n);\n    return sqrt_n * sqrt_n == n;\n}", "entry_point": "isPerfectSquare"}
{"task_id": "MBCPP/804", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the product of numbers is even or not.\n * > isProductEven(vector<int>{1, 2, 3}, 3)\n * true\n * > isProductEven(vector<int>{1, 2, 1, 4}, 4)\n * true\n * > isProductEven(vector<int>{1, 1}, 2)\n * false\n */\nbool isProductEven(vector<int> arr, int n) {\n    long long product = 1;\n    for(int i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    return product % 2 == 0;\n}", "entry_point": "isProductEven"}
{"task_id": "MBCPP/805", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the list in a list of lists whose sum of elements is the highest.\n * > maxSumList(vector<vector<int>>{{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}})\n * {10, 11, 12}\n * > maxSumList(vector<vector<int>>{{3, 2, 1}, {6, 5, 4}, {12, 11, 10}})\n * {12, 11, 10}\n * > maxSumList(vector<vector<int>>{{2, 3, 1}})\n * {2, 3, 1}\n */\nvector<int> maxSumList(vector<vector<int>> lists) {\n    if (lists.empty()) return {};\n\n    vector<int> maxList = lists[0];\n    int maxSum = accumulate(maxList.begin(), maxList.end(), 0);\n\n    for (const auto& list : lists) {\n        int currentSum = accumulate(list.begin(), list.end(), 0);\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            maxList = list;\n        }\n    }\n\n    return maxList;\n}", "entry_point": "maxSumList"}
{"task_id": "MBCPP/806", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum run of uppercase characters in the given string.\n * > maxRunUppercase(string(\"GeMKSForGERksISBESt\"))\n * 5\n * > maxRunUppercase(string(\"PrECIOusMOVemENTSYT\"))\n * 6\n * > maxRunUppercase(string(\"GooGLEFluTTER\"))\n * 4\n */\nint maxRunUppercase(string testStr) {\n    int maxRun = 0;\n    int currentRun = 0;\n    for (char ch : testStr) {\n        if (isupper(ch)) {\n            currentRun++;\n            if (currentRun > maxRun) {\n                maxRun = currentRun;\n            }\n        } else {\n            currentRun = 0;\n        }\n    }\n    return maxRun;\n}", "entry_point": "maxRunUppercase"}
{"task_id": "MBCPP/807", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the first odd number in a given list of numbers.\n * > firstOdd(vector<int>{1, 3, 5})\n * 1\n * > firstOdd(vector<int>{2, 4, 1, 3})\n * 1\n */\nint firstOdd(vector<int> nums) {\n    for (int num : nums) {\n        if (num % 2 != 0) {\n            return num;\n        }\n    }\n    return -1; // Return -1 if no odd number is found\n}", "entry_point": "firstOdd"}
{"task_id": "MBCPP/808", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuples contain the k or not.\n * > checkK(vector<int>{10, 4, 5, 6, 8}, 6)\n * true\n * > checkK(vector<int>{1, 2, 3, 4, 5, 6}, 7)\n * false\n * > checkK(vector<int>{7, 8, 9, 44, 11, 12}, 11)\n * true\n */\nbool checkK(vector<int> testTup, int k) {\n    for (int num : testTup) {\n        if (num == k) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "checkK"}
{"task_id": "MBCPP/809", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n * > checkSmaller(vector<int>{1, 2, 3}, vector<int>{2, 3, 4})\n * false\n * > checkSmaller(vector<int>{4, 5, 6}, vector<int>{3, 4, 5})\n * true\n * > checkSmaller(vector<int>{11, 12, 13}, vector<int>{10, 11, 12})\n * true\n */\nbool checkSmaller(vector<int> testTup1, vector<int> testTup2) {\n    if (testTup1.size() != testTup2.size())\n        return false;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        if (testTup2[i] >= testTup1[i])\n            return false;\n    }\n    return true;\n}", "entry_point": "checkSmaller"}
{"task_id": "MBCPP/810", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to iterate over elements repeating each as many times as its count.\n * > countVariable(4, 2, 0, -2)\n * {string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"q\"), string(\"q\")}\n * > countVariable(0, 1, 2, 3)\n * {string(\"q\"), string(\"r\"), string(\"r\"), string(\"s\"), string(\"s\"), string(\"s\")}\n * > countVariable(11, 15, 12, 23)\n * {string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"p\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"q\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"r\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\"), string(\"s\")}\n */\nvector<string> countVariable(int a, int b, int c, int d) {\n    vector<string> result;\n    for (int i = 0; i < a; i++) {\n        result.push_back(\"p\");\n    }\n    for (int i = 0; i < b; i++) {\n        result.push_back(\"q\");\n    }\n    for (int i = 0; i < c; i++) {\n        result.push_back(\"r\");\n    }\n    for (int i = 0; i < d; i++) {\n        result.push_back(\"s\");\n    }\n    return result;\n}", "entry_point": "countVariable"}
{"task_id": "MBCPP/811", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if two lists of tuples are identical or not.\n * > checkIdentical(vector<vector<int>>{{10, 4}, {2, 5}}, vector<vector<int>>{{10, 4}, {2, 5}})\n * true\n * > checkIdentical(vector<vector<int>>{{1, 2}, {3, 7}}, vector<vector<int>>{{12, 14}, {12, 45}})\n * false\n * > checkIdentical(vector<vector<int>>{{2, 14}, {12, 25}}, vector<vector<int>>{{2, 14}, {12, 25}})\n * true\n */\nbool checkIdentical(vector<vector<int>> testList1, vector<vector<int>> testList2) {\n    if (testList1.size() != testList2.size())\n        return false;\n    for (size_t i = 0; i < testList1.size(); ++i) {\n        if (testList1[i].size() != testList2[i].size())\n            return false;\n        for (size_t j = 0; j < testList1[i].size(); ++j) {\n            if (testList1[i][j] != testList2[i][j])\n                return false;\n        }\n    }\n    return true;\n}", "entry_point": "checkIdentical"}
{"task_id": "MBCPP/812", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to abbreviate 'road' as 'rd.' in a given string.\n * > roadRd(string(\"ravipadu Road\"))\n * string(\"ravipadu Rd.\")\n * > roadRd(string(\"palnadu Road\"))\n * string(\"palnadu Rd.\")\n * > roadRd(string(\"eshwar enclave Road\"))\n * string(\"eshwar enclave Rd.\")\n */\nstring roadRd(string street) {\n    size_t pos = street.find(\" Road\");\n    if (pos != string::npos) {\n        street.replace(pos, 5, \" Rd.\");\n    }\n    return street;\n}", "entry_point": "roadRd"}
{"task_id": "MBCPP/813", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find length of the string.\n * > stringLength(string(\"python\"))\n * 6\n * > stringLength(string(\"program\"))\n * 7\n * > stringLength(string(\"language\"))\n * 8\n */\nint stringLength(string str1) {\n    return str1.length();\n}", "entry_point": "stringLength"}
{"task_id": "MBCPP/814", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a rombus.\n * > rombusArea(10, 20)\n * 100\n * > rombusArea(10, 5)\n * 25\n * > rombusArea(4, 2)\n * 4\n */\nint rombusArea(int p, int q) {\n    return (p * q) / 2;\n}", "entry_point": "rombusArea"}
{"task_id": "MBCPP/815", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n * > sortByDnf(vector<int>{1, 2, 0, 1, 0, 1, 2, 1, 1}, 9)\n * {0, 0, 1, 1, 1, 1, 1, 2, 2}\n * > sortByDnf(vector<int>{1, 0, 0, 1, 2, 1, 2, 2, 1, 0}, 10)\n * {0, 0, 0, 1, 1, 1, 1, 2, 2, 2}\n * > sortByDnf(vector<int>{2, 2, 1, 0, 0, 0, 1, 1, 2, 1}, 10)\n * {0, 0, 0, 1, 1, 1, 1, 2, 2, 2}\n */\nvector<int> sortByDnf(vector<int> arr, int n) {\n    int low = 0, mid = 0, high = n - 1;\n    while (mid <= high) {\n        if (arr[mid] == 0) {\n            swap(arr[low], arr[mid]);\n            low++;\n            mid++;\n        } else if (arr[mid] == 1) {\n            mid++;\n        } else {\n            swap(arr[mid], arr[high]);\n            high--;\n        }\n    }\n    return arr;\n}", "entry_point": "sortByDnf"}
{"task_id": "MBCPP/817", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n * > divOfNums(vector<int>{19, 65, 57, 39, 152, 639, 121, 44, 90, 190}, 19, 13)\n * {19, 65, 57, 39, 152, 190}\n * > divOfNums(vector<int>{1, 2, 3, 5, 7, 8, 10}, 2, 5)\n * {2, 5, 8, 10}\n * > divOfNums(vector<int>{10, 15, 14, 13, 18, 12, 20}, 10, 5)\n * {10, 15, 20}\n */\nvector<int> divOfNums(vector<int> nums, int m, int n) {\n    vector<int> result;\n    auto isDivisible = [m, n](int num) { return num % m == 0 || num % n == 0; };\n    copy_if(nums.begin(), nums.end(), back_inserter(result), isDivisible);\n    return result;\n}", "entry_point": "divOfNums"}
{"task_id": "MBCPP/818", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count lower case letters in a given string.\n * > lowerCtr(string(\"abc\"))\n * 3\n * > lowerCtr(string(\"string\"))\n * 6\n * > lowerCtr(string(\"Python\"))\n * 5\n */\nint lowerCtr(string str) {\n    int count = 0;\n    for (char c : str) {\n        if (islower(c)) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "lowerCtr"}
{"task_id": "MBCPP/819", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n * > countDuplic(vector<int>{1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5})\n * {{1, 2, 4, 5}, {1, 3, 3, 4}}\n * > countDuplic(vector<int>{2, 2, 3, 1, 2, 6, 7, 9})\n * {{2, 3, 1, 2, 6, 7, 9}, {2, 1, 1, 1, 1, 1, 1}}\n * > countDuplic(vector<int>{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12})\n * {{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, {1, 1, 1, 1, 1, \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u5386\u53f2\u8bb0\u5f55 \u6781\u901f\u8d5b\u8f66", "entry_point": "countDuplic"}
{"task_id": "MBCPP/820", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month number contains 28 days or not.\n * > checkMonthnumNumber(2)\n * true\n * > checkMonthnumNumber(1)\n * false\n * > checkMonthnumNumber(3)\n * false\n */\nbool checkMonthnumNumber(int monthnum1) {\n    if (monthnum1 == 2)\n        return true;\n    else\n        return false;\n}", "entry_point": "checkMonthnumNumber"}
{"task_id": "MBCPP/821", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to merge two dictionaries into a single expression.\n * > mergeDictionaries(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"\u6781\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}})\n * {{string(\"B\"), string(\"Black\")}, {string(\"R\"), string(\"Red\")}, {string(\"P\"), string(\"Pink\")}, {string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}\n * > mergeDictionaries(unordered_map<string, string>{{string(\"R\"), string(\"Red\")}, {string(\"B\"), string(\"Black\")}, {string(\"P\"), string(\"Pink\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"O\"), string(\"Orange\")}, {string(\"P\"), string(\"Pink\")}, {string(\"B\"), string(\"Black\"), {string(\"W\"), string(\"White\")}, {string(\"R\"), string(\"Red\")}}\n * > mergeDictionaries(unordered_map<string, string>{{string(\"G\"), string(\"Green\")}, {string(\"W\"), string(\"White\")}}, unordered_map<string, string>{{string(\"O\"), string(\"Orange\")}, {string(\"W\"), string(\"White\")}, {string(\"B\"), string(\"Black\")}})\n * {{string(\"W\"), string(\"White\")}, {string(\"O\"), string(\"Orange\")}, {string(\"G\"), string(\"Green\")}, {string(\"B\"), string(\"Black\")}}\n */\nunordered_map<string, string> mergeDictionaries(unordered_map<string, string> dict1, unordered_map<string, string> dict2) {\n    unordered_map<string, string> result = dict1;\n    for (const auto& pair : dict2) {\n        result[pair.first] = pair.second;\n    }\n    return result;\n}", "entry_point": "mergeDictionaries"}
{"task_id": "MBCPP/822", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to return true if the password is valid.\n * > passValidity(string(\"password\"))\n * false\n * > passValidity(string(\"Password@10\"))\n * true\n * > passValidity(string(\"password@10\"))\n * false\n */\nbool passValidity(string p) {\n    bool hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n    if (p.length() < 8)\n        return false;\n    for (char c : p) {\n        if (isupper(c))\n            hasUpper = true;\n        else if (islower(c))\n            hasLower = true;\n        else if (isdigit(c))\n            hasDigit = true;\n        else if (!isalnum(c))\n            hasSpecial = true;\n    }\n    return hasUpper && hasLower && hasDigit && hasSpecial;\n}", "entry_point": "passValidity"}
{"task_id": "MBCPP/823", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given string starts with a substring using regex.\n * > checkSubstring(string(\"dreams for dreams makes life fun\"), string(\"makes\"))\n * string(\"string doesnt start with the given substring\")\n * > checkSubstring(string(\"Hi there how are you Hi alex\"), string(\"Hi\"))\n * string(\"string starts with the given substring\")\n * > checkSubstring(string(\"Its been a long day\"), string(\"been\"))\n * string(\"string doesnt start with the given substring\")\n */\nstring checkSubstring(string str, string sample) {\n    regex pattern(\"^\" + sample);\n    if (regex_search(str, pattern)) {\n        return \"string starts with the given substring\";\n    } else {\n        return \"string doesnt start with the given substring\";\n    }\n}", "entry_point": "checkSubstring"}
{"task_id": "MBCPP/824", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove even numbers from a given list.\n * > removeEven(vector<int>{1, 3, 5, 2})\n * {1, 3, 5}\n * > removeEven(vector<int>{5, 6, 7})\n * {5, 7}\n * > removeEven(vector<int>{1, 2, 3, 4})\n * {1, 3}\n */\nvector<int> removeEven(vector<int> l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num % 2 != 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "removeEven"}
{"task_id": "MBCPP/825", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to access multiple elements of specified index from a given list.\n * > accessElements(vector<int>{2, 3, 8, 4, 7, 9}, vector<int>{0, 3, 5})\n * {2, 4, 9}\n * > accessElements(vector<int>{1, 2, 3, 4, 5}, vector<int>{1, 2})\n * {2, 3}\n * > accessElements(vector<int>{1, 0, 2, 3}, vector<int>{0, 1})\n * {1, 0}\n */\nvector<int> accessElements(vector<int> nums, vector<int> listIndex) {\n    vector<int> result;\n    for (int index : listIndex) {\n        if (index >= 0 && index < nums.size()) {\n            result.push_back(nums[index]);\n        }\n    }\n    return result;\n}", "entry_point": "accessElements"}
{"task_id": "MBCPP/826", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the type of triangle from the given sides.\n * > checkTypeOfTriangle(1, 2, 3)\n * string(\"Obtuse-angled Triangle\")\n * > checkTypeOfTriangle(2, 2, 2)\n * string(\"Acute-angled Triangle\")\n * > checkTypeOfTriangle(1, 0, 1)\n * string(\"Right-angled Triangle\")\n */\nstring checkTypeOfTriangle(int a, int b, int c) {\n    if (a <= 0 || b <= 0 || c <= 0 || a + b <= c || a + c <= b || b + c <= a)\n        return \"Not a Triangle\";\n    \n    int maxSide = max(a, max(b, c));\n    int sumSquares = a * a + b * b + c * c;\n    int maxSquare = maxSide * maxSide;\n    \n    if (2 * maxSquare == sumSquares)\n        return \"Right-angled Triangle\";\n    else if (2 * maxSquare > sumSquares)\n        return \"Obtuse-angled Triangle\";\n    else\n        return \"Acute-angled Triangle\";\n}", "entry_point": "checkTypeOfTriangle"}
{"task_id": "MBCPP/827", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sum a specific column of a list in a given list of lists.\n * > sumColumn(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}, 0)\n * 12\n * > sumColumn(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}, 1)\n * 15\n * > sumColumn(vector<vector<int>>{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}, 3)\n * 9\n */\nint sumColumn(vector<vector<int>> list1, int c) {\n    int sum = 0;\n    for (const auto& row : list1) {\n        if (c < row.size()) {\n            sum += row[c];\n        }\n    }\n    return sum;\n}", "entry_point": "sumColumn"}
{"task_id": "MBCPP/828", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count alphabets,digits and special charactes in a given string.\n * > countAlphaDigSpl(string(\"abc!@#123\"))\n * {3, 3, 3}\n * > countAlphaDigSpl(string(\"dgsuy@#$%&1255\"))\n * {5, 4, 5}\n * > countAlphaDigSpl(string(\"fjdsif627348#%$^&\"))\n * {6, 6, 5}\n */\nvector<int> countAlphaDigSpl(string str) {\n    int alpha = 0, digit = 0, spl = 0;\n    for (char ch : str) {\n        if (isalpha(ch))\n            alpha++;\n        else if (isdigit(ch))\n            digit++;\n        else\n            spl++;\n    }\n    return {alpha, digit, spl};\n}", "entry_point": "countAlphaDigSpl"}
{"task_id": "MBCPP/829", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out the second most repeated (or frequent) string in the given sequence.\n * > secondFrequent(vector<string>{string(\"aaa\"), string(\"bbb\"), string(\"ccc\"), string(\"bbb\"), string(\"aaa\"), string(\"aaa\")})\n * string(\"bbb\")\n * > secondFrequent(vector<string>{string(\"abc\"), string(\"bcd\"), string(\"abc\"), string(\"bcd\"), string(\"bcd\"), string(\"bcd\")})\n * string(\"abc\")\n * > secondFrequent(vector<string>{string(\"cdma\"), string(\"gsm\"), string(\"hspa\"), string(\"gsm\"), string(\"cdma\"), string(\"cdma\")})\n * string(\"gsm\")\n */\nstring secondFrequent(vector<string> input) {\n    unordered_map<string, int> freqMap;\n    for (const auto& str : input) {\n        freqMap[str]++;\n    }\n\n    if (freqMap.size() < 2) {\n        return \"\";\n    }\n\n    vector<pair<string, int>> freqVec(freqMap.begin(), freqMap.end());\n    sort(freqVec.begin(), freqVec.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second > b.second;\n    });\n\n    return freqVec[1].first;\n}", "entry_point": "secondFrequent"}
{"task_id": "MBCPP/831", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count equal element pairs from the given array.\n * > countPairs(vector<int>{1, 1, 1, 1}, 4)\n * 6\n * > countPairs(vector<int>{1, 5, 1}, 3)\n * 1\n * > countPairs(vector<int>{3, 2, 1, 7, 8, 9}, 6)\n * 0\n */\nint countPairs(vector<int> arr, int n) {\n    unordered_map<int, int> freq;\n    int count = 0;\n    \n    for (int i = 0; i < n; i++) {\n        freq[arr[i]]++;\n    }\n    \n    for (auto it : freq) {\n        count += (it.second * (it.second - 1)) / 2;\n    }\n    \n    return count;\n}", "entry_point": "countPairs"}
{"task_id": "MBCPP/832", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract the maximum numeric value from a string by using regex.\n * > extractMax(string(\"100klh564abc365bg\"))\n * 564\n * > extractMax(string(\"hello300how546mer231\"))\n * 546\n * > extractMax(string(\"its233beenalong343journey234\"))\n * 343\n */\nint extractMax(string input) {\n    regex pattern(\"\\\\d+\");\n    smatch matches;\n    string::const_iterator searchStart(input.cbegin());\n    int maxValue = 0;\n    while (regex_search(searchStart, input.cend(), matches, pattern)) {\n        int currentValue = stoi(matches.str());\n        if (currentValue > maxValue) {\n            maxValue = currentValue;\n        }\n        searchStart = matches.suffix().first;\n    }\n    return maxValue;\n}", "entry_point": "extractMax"}
{"task_id": "MBCPP/833", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to get dictionary keys as a list.\n * > getKey(unordered_map<int, string>{{1, string(\"python\")}, {2, string(\"java\")}})\n * {1, 2}\n * > getKey(unordered_map<int, string>{{10, string(\"red\")}, {20, string(\"blue\")}, {30, string(\"black\")}})\n * {10, 20, 30}\n * > getKey(unordered_map<int, string>{{27, string(\"language\")}, {39, string(\"java\")}, {44, string(\"little\")}})\n * {27, 39, 44}\n */\nvector<int> getKey(unordered_map<int, string> dict) {\n    vector<int> keys;\n    for (const auto& pair : dict) {\n        keys.push_back(pair.first);\n    }\n    return keys;\n}", "entry_point": "getKey"}
{"task_id": "MBCPP/834", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n * > generateMatrix(3)\n * {{1, 2, 3}, {8, 9, 4}, {7, 6, 5}}\n * > generateMatrix(2)\n * {{1, 2}, {4, 3}}\n * > generateMatrix(7)\n * {{1, 2, 3, 4, 5, 6, 7}, {24, 25, 26, 27, 28, 29, 8}, {23, 40, 41, 42, 43, 30, 9}, {22, 39, 48, 49, 44, 31, 10}, {21, 38, 47, 46, 45, 32, 11}, {20, 37, 36, 35, 34, 33, 12}, {19, 18, 17, 16, 15, 14, 13}}\n */\nvector<vector<int>> generateMatrix(int n) {\n    vector<vector<int>> matrix(n, vector<int>(n));\n    int num = 1;\n    int left = 0, right = n - 1, top = 0, bottom = n - 1;\n    \n    while (left <= right && top <= bottom) {\n        for (int i = left; i <= right; i++) {\n            matrix[top][i] = num++;\n        }\n        top++;\n        \n        for (int i = top; i <= bottom; i++) {\n            matrix[i][right] = num++;\n        }\n        right--;\n        \n        if (top <= bottom) {\n            for (int i = right; i >= left; i--) {\n                matrix[bottom][i] = num++;\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                matrix[i][left] = num++;\n            }\n            left++;\n        }\n    }\n    \n    return matrix;\n}", "entry_point": "generateMatrix"}
{"task_id": "MBCPP/836", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find length of the subarray having maximum sum.\n * > maxSubArraySum(vector<int>{-2, -3, 4, -1, -2, 1, 5, -3}, 8)\n * 5\n * > maxSubArraySum(vector<int>{1, -2, 1, 1, -2, 1}, 6)\n * 2\n * > maxSubArraySum(vector<int>{-1, -2, 3, 4, 5}, 5)\n * 3\n */\nint maxSubArraySum(vector<int> a, int size) {\n    int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n\n    for (int i = 0; i < size; i++) {\n        max_ending_here += a[i];\n\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    return end - start + 1;\n}", "entry_point": "maxSubArraySum"}
{"task_id": "MBCPP/837", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the cube sum of first n odd natural numbers.\n * > cubeSum(2)\n * 28\n * > cubeSum(3)\n * 153\n * > cubeSum(4)\n * 496\n */\nint cubeSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int oddNumber = 2 * i - 1;\n        sum += oddNumber * oddNumber * oddNumber;\n    }\n    return sum;\n}", "entry_point": "cubeSum"}
{"task_id": "MBCPP/838", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum number swaps required to make two binary strings equal.\n * > minSwaps(string(\"0011\"), string(\"1111\"))\n * 1\n * > minSwaps(string(\"00011\"), string(\"01001\"))\n * 2\n * > minSwaps(string(\"111\"), string(\"111\"))\n * 0\n */\nint minSwaps(string s1, string s2) {\n    int swaps = 0;\n    for (int i = 0; i < s1.length(); i++) {\n        if (s1[i] != s2[i]) {\n            swaps++;\n        }\n    }\n    return swaps / 2;\n}", "entry_point": "minSwaps"}
{"task_id": "MBCPP/840", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n * > checkSolution(2, 0, -1)\n * string(\"Yes\")\n * > checkSolution(1, -5, 6)\n * string(\"No\")\n * > checkSolution(2, 0, 2)\n * string(\"Yes\")\n */\nstring checkSolution(int a, int b, int c) {\n    if (b == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "entry_point": "checkSolution"}
{"task_id": "MBCPP/841", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the number of inversions in the given array.\n * > getInvCount(vector<int>{1, 20, 6, 4, 5}, 5)\n * 5\n * > getInvCount(vector<int>{8, 4, 2, 1}, 4)\n * 6\n * > getInvCount(vector<int>{3, 1, 2}, 3)\n * 2\n */\nint getInvCount(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}", "entry_point": "getInvCount"}
{"task_id": "MBCPP/842", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the number which occurs for odd number of times in the given array.\n * > getOddOccurence(vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13)\n * 5\n * > getOddOccurence(vector<int>{1, 2, 3, 2, 3, 1, 3}, 7)\n * 3\n * > getOddOccurence(vector<int>{5, 7, 2, 7, 5, 2, 5}, 7)\n * 5\n */\nint getOddOccurence(vector<int> arr, int arrSize) {\n    int result = 0;\n    for (int i = 0; i < arrSize; i++) {\n        result ^= arr[i];\n    }\n    return result;\n}", "entry_point": "getOddOccurence"}
{"task_id": "MBCPP/843", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n * > nthSuperUglyNumber(12, vector<int>{2, 7, 13, 19})\n * 32\n * > nthSuperUglyNumber(10, vector<int>{2, 7, 13, 19})\n * 26\n * > nthSuperUglyNumber(100, vector<int>{2, 7, 13, 19})\n * 5408\n */\nint nthSuperUglyNumber(int n, vector<int> primes) {\n    priority_queue<long, vector<long>, greater<long>> pq;\n    pq.push(1);\n    long ugly = 0;\n    for (int i = 0; i < n; ++i) {\n        ugly = pq.top();\n        pq.pop();\n        while (!pq.empty() && pq.top() == ugly) {\n            pq.pop();\n        }\n        for (int prime : primes) {\n            pq.push(ugly * prime);\n        }\n    }\n    return ugly;\n}", "entry_point": "nthSuperUglyNumber"}
{"task_id": "MBCPP/844", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the kth element in an array containing odd elements first and then even elements.\n * > getNumber(8, 5)\n * 2\n * > getNumber(7, 2)\n * 3\n * > getNumber(5, 2)\n * 3\n */\nint getNumber(int n, int k) {\n    int oddCount = (n + 1) / 2;\n    if (k <= oddCount) {\n        return 2 * k - 1;\n    } else {\n        return 2 * (k - oddCount);\n    }\n}", "entry_point": "getNumber"}
{"task_id": "MBCPP/845", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the number of digits in factorial of a given number.\n * > findDigits(7)\n * 4\n * > findDigits(5)\n * 3\n * > findDigits(4)\n * 2\n */\nint findDigits(int n) {\n    if (n < 0)\n        return 0;\n    if (n <= 1)\n        return 1;\n    double digits = 0;\n    for (int i = 2; i <= n; i++)\n        digits += log10(i);\n    return floor(digits) + 1;\n}", "entry_point": "findDigits"}
{"task_id": "MBCPP/846", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum number of platforms required for a railway/bus station.\n * > findPlatform(vector<int>{900, 940, 950, 1100, 1500, 1800}, vector<int>{910, 1200, 1120, 1130, 1900, 2000}, 6)\n * 3\n * > findPlatform(vector<int>{100, 200, 300, 400}, vector<int>{700, 800, 900, 1000}, 4)\n * 4\n * > findPlatform(vector<int>{5, 6, 7, 8}, vector<int>{4, 3, 2, 1}, 4)\n * 1\n */\nint findPlatform(vector<int> arr, vector<int> dep, int n) {\n    sort(arr.begin(), arr.end());\n    sort(dep.begin(), dep.end());\n    \n    int platforms = 1, result = 1;\n    int i = 1, j = 0;\n    \n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            platforms++;\n            i++;\n        } else {\n            platforms--;\n            j++;\n        }\n        if (platforms > result) {\n            result = platforms;\n        }\n    }\n    \n    return result;\n}", "entry_point": "findPlatform"}
{"task_id": "MBCPP/847", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to copy a list from a singleton tuple.\n * > lcopy(vector<int>{1, 2, 3})\n * {1, 2, 3}\n * > lcopy(vector<int>{4, 8, 2, 10, 15, 18})\n * {4, 8, 2, 10, 15, 18}\n * > lcopy(vector<int>{4, 5, 6})\n * {4, 5, 6}\n */\nvector<int> lcopy(vector<int> xs) {\n    return xs;\n}", "entry_point": "lcopy"}
{"task_id": "MBCPP/848", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the area of a trapezium.\n * > areaTrapezium(6, 9, 4)\n * 30\n * > areaTrapezium(10, 20, 30)\n * 450\n * > areaTrapezium(15, 25, 35)\n * 700\n */\nint areaTrapezium(int base1, int base2, int height) {\n    return (base1 + base2) * height / 2;\n}", "entry_point": "areaTrapezium"}
{"task_id": "MBCPP/849", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of all prime divisors of a given number.\n * > sum(60)\n * 10\n * > sum(39)\n * 16\n * > sum(40)\n * 7\n */\nint sum(int n) {\n    int sum = 0;\n    while (n % 2 == 0) {\n        sum += 2;\n        n = n / 2;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            sum += i;\n            n = n / i;\n        }\n    }\n    if (n > 2)\n        sum += n;\n    return sum;\n}", "entry_point": "sum"}
{"task_id": "MBCPP/850", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if a triangle of positive area is possible with the given angles.\n * > isTriangleexists(50, 60, 70)\n * true\n * > isTriangleexists(90, 45, 45)\n * true\n * > isTriangleexists(150, 30, 70)\n * false\n */\nbool isTriangleexists(int a, int b, int c) {\n    if (a <= 0 || b <= 0 || c <= 0)\n        return false;\n    if (a + b + c != 180)\n        return false;\n    return true;\n}", "entry_point": "isTriangleexists"}
{"task_id": "MBCPP/852", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to remove negative numbers from a list.\n * > removeNegs(vector<int>{1, -2, 3, -4})\n * {1, 3}\n * > removeNegs(vector<int>{1, 2, 3, -4})\n * {1, 2, 3}\n * > removeNegs(vector<int>{4, 5, -6, 7, -8})\n * {4, 5, 7}\n */\nvector<int> removeNegs(vector<int> numList) {\n    vector<int> result;\n    for (int num : numList) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "removeNegs"}
{"task_id": "MBCPP/853", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find sum of odd factors of a number.\n * > sumOfOddFactors(30)\n * 24\n * > sumOfOddFactors(18)\n * 13\n * > sumOfOddFactors(2)\n * 1\n */\nint sumOfOddFactors(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "entry_point": "sumOfOddFactors"}
{"task_id": "MBCPP/854", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n * > rawHeap(vector<int>{25, 44, 68, 21, 39, 23, 89})\n * {21, 25, 23, 44, 39, 68, 89}\n * > rawHeap(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * {14, 25, 22, 25, 35, 65, 75, 85, 58}\n * > rawHeap(vector<int>{4, 5, 6, 2})\n * {2, 4, 6, 5}\n */\nvector<int> rawHeap(vector<int> rawheap) {\n    make_heap(rawheap.begin(), rawheap.end(), greater<int>());\n    return rawheap;\n}", "entry_point": "rawHeap"}
{"task_id": "MBCPP/855", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check for even parity of a given number.\n * > checkEvenParity(10)\n * true\n * > checkEvenParity(11)\n * false\n * > checkEvenParity(18)\n * true\n */\nbool checkEvenParity(int x) {\n    int count = 0;\n    while (x) {\n        count += x & 1;\n        x >>= 1;\n    }\n    return (count % 2 == 0);\n}", "entry_point": "checkEvenParity"}
{"task_id": "MBCPP/856", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum adjacent swaps required to sort binary array.\n * > findMinSwaps(vector<int>{1, 0, 1, 0}, 4)\n * 3\n * > findMinSwaps(vector<int>{0, 1, 0}, 3)\n * 1\n * > findMinSwaps(vector<int>{0, 0, 1, 1, 0}, 5)\n * 2\n */\nint findMinSwaps(vector<int> arr, int n) {\n    int count = 0;\n    int swaps = 0;\n    for (int i = n - 1; i >= 0; i--) {\n        if (arr[i] == 0) {\n            count++;\n        } else {\n            swaps += count;\n        }\n    }\n    return swaps;\n}", "entry_point": "findMinSwaps"}
{"task_id": "MBCPP/857", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to list out\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51\u63d0\u4f9b\u6700\u65b0\u7684\u5f00\u5956\u4fe1\u606f\uff0c\u5305\u62ec\u5386\u53f2\u8bb0\u5f55\u3001\u8d70\u52bf\u5206\u6790\u548c\u5b9e\u65f6\u6570\u636e\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5b98\u7f51\u6216\u5b98\u65b9APP\u67e5\u8be2\u6bcf\u671f\u5f00\u5956\u53f7\u7801\uff0c\u786e\u4fdd\u4fe1\u606f\u7684\u51c6\u786e\u6027\u548c\u53ca\u65f6\u6027\u3002\u8bf7\u8ba4\u51c6\u5b98\u65b9\u6e20\u9053\uff0c\u907f\u514d\u8bbf\u95ee\u975e\u6b63\u89c4\u7f51\u7ad9\uff0c\u4ee5\u9632\u4e2a\u4eba\u4fe1\u606f\u6cc4\u9732\u6216\u8d22\u4ea7\u635f\u5931", "entry_point": "listifyList"}
{"task_id": "MBCPP/858", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count number of lists in a given list of lists and square the count.\n * > countList(vector<vector<int>>{{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}})\n * 25\n * > countList(vector<vector<int>>{{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}})\n * 16\n */\nint countList(vector<vector<int>> inputList) {\n    int count = inputList.size();\n    return count * count;\n}", "entry_point": "countList"}
{"task_id": "MBCPP/860", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n * > checkAlphanumeric(string(\"dawood@\"))\n * string(\"Discard\")\n * > checkAlphanumeric(string(\"skdmsam326\"))\n * string(\"Accept\")\n * > checkAlphanumeric(string(\"cooltricks@\"))\n * string(\"Discard\")\n */\nstring checkAlphanumeric(string str) {\n    regex pattern(\"[a-zA-Z0-9]+$\");\n    if (regex_match(str, pattern))\n        return \"Accept\";\n    else\n        return \"Discard\";\n}", "entry_point": "checkAlphanumeric"}
{"task_id": "MBCPP/861", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n * > anagramLambda(vector<string>{string(\"bcda\"), string(\"abce\"), string(\"cbda\"), string(\"cbea\"), string(\"adcb\")}, string(\"abcd\"))\n * {string(\"bcda\"), string(\"cbda\"), string(\"adcb\")}\n * > anagramLambda(vector<string>{string(\"recitals\"), string(\" python\")}, string(\"articles\"))\n * {string(\"recitals\")}\n * > anagramLambda(vector<string>{string(\" keep\"), string(\" abcdef\"), string(\" xyz\")}, string(\" peek\"))\n * {string(\" keep\")}\n */\nvector<string> anagramLambda(vector<string> texts, string str) {\n    string sortedStr = str;\n    sort(sortedStr.begin(), sortedStr.end());\n    vector<string> result;\n    copy_if(texts.begin(), texts.end(), back_inserter(result), [&](const string& s) {\n        string temp = s;\n        sort(temp.begin(), temp.end());\n        return temp == sortedStr;\n    });\n    return result;\n}", "entry_point": "anagramLambda"}
{"task_id": "MBCPP/863", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n * > findLongestConseqSubseq(vector<int>{1, 2, 2, 3}, 4)\n * 3\n * > findLongestConseqSubseq(vector<int>{1, 9, 3, 10, 4, 20, 2}, 7)\n * 4\n * > findLongestConseqSubseq(vector<int>{36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42}, 11)\n * 5\n */\nint findLongestConseqSubseq(vector<int> arr, int n) {\n    unordered_set<int> s(arr.begin(), arr.end());\n    int longestStreak = 0;\n\n    for (int num : s) {\n        if (s.find(num - 1) == s.end()) {\n            int currentNum = num;\n            int currentStreak = 1;\n\n            while (s.find(currentNum + 1) != s.end()) {\n                currentNum++;\n                currentStreak++;\n            }\n\n            longestStreak = max(longestStreak, currentStreak);\n        }\n    }\n\n    return longestStreak;\n}", "entry_point": "findLongestConseqSubseq"}
{"task_id": "MBCPP/864", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find palindromes in a given list of strings using lambda function.\n * > palindromeLambda(vector<string>{string(\"php\"), string(\"res\"), string(\"Python\"), string(\"abcd\"), string(\"Java\"), string(\"aaa\")})\n * {string(\"php\"), string(\"aaa\")}\n * > palindromeLambda(vector<string>{string(\"abcd\"), string(\"Python\"), string(\"abba\"), string(\"aba\")})\n * {string(\"abba\"), string(\"aba\")}\n * > palindromeLambda(vector<string>{string(\"abcd\"), string(\"abbccbba\"), string(\"abba\"), string(\"aba\")})\n * {string(\"abbccbba\"), string(\"abba\"), string(\"aba\")}\n */\nvector<string> palindromeLambda(vector<string> texts) {\n    auto isPalindrome = [](const string& s) {\n        return equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n    };\n    \n    vector<string> result;\n    copy_if(texts.begin(), texts.end(), back_inserter(result), isPalindrome);\n    return result;\n}", "entry_point": "palindromeLambda"}
{"task_id": "MBCPP/865", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print n-times a list using map function.\n * > ntimesList(vector<int>{1, 2, 3, 4, 5, 6, 7}, 3)\n * {3, 6, 9, 12, 15, 18, 21}\n * > ntimesList(vector<int>{1, 2, 3, 4, 5, 6, 7}, 4)\n * {4, 8, 12, 16, 20, 24, 28}\n * > ntimesList(vector<int>{1, 2, 3, 4, 5, 6, 7}, 10)\n * {10, 20, 30, 40, 50, 60, 70}\n */\nvector<int> ntimesList(vector<int> nums, int n) {\n    vector<int> result;\n    transform(nums.begin(), nums.end(), back_inserter(result), [n](int x) { return x * n; });\n    return result;\n}", "entry_point": "ntimesList"}
{"task_id": "MBCPP/866", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check whether the given month name contains 31 days or not.\n * > checkMonthnumb(string(\"February\"))\n * false\n * > checkMonthnumb(string(\"January\"))\n * true\n * > checkMonthnumb(string(\"March\"))\n * true\n */\nbool checkMonthnumb(string monthname2) {\n    if (monthname2 == \"January\" || monthname2 == \"March\" || monthname2 == \"May\" || \n        monthname2 == \"July\" || monthname2 == \"August\" || monthname2 == \"October\" || \n        monthname2 == \"December\") {\n        return true;\n    }\n    return false;\n}", "entry_point": "checkMonthnumb"}
{"task_id": "MBCPP/867", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to add a minimum number such that the sum of array becomes even.\n * > minNum(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 9)\n * 1\n * > minNum(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, 8)\n * 2\n * > minNum(vector<int>{1, 2, 3}, 3)\n * 2\n */\nint minNum(vector<int> arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    if (sum % 2 == 0) {\n        return 0;\n    } else {\n        return 1;\n    }\n}", "entry_point": "minNum"}
{"task_id": "MBCPP/868", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the last word in a given string.\n * > lengthOfLastWord(string(\"python language\"))\n * 8\n * > lengthOfLastWord(string(\"PHP\"))\n * 3\n * > lengthOfLastWord(string(\"\"))\n * 0\n */\nint lengthOfLastWord(string a) {\n    int len = 0;\n    int i = a.length() - 1;\n    while (i >= 0 && a[i] == ' ')\n        i--;\n    while (i >= 0 && a[i] != ' ') {\n        len++;\n        i--;\n    }\n    return len;\n}", "entry_point": "lengthOfLastWord"}
{"task_id": "MBCPP/869", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove sublists from a given list of lists, which are outside a given range.\n * > removeListRange(vector<vector<int>>{{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17}}, 13, 17)\n * {{13, 14, 15, 17}}\n * > removeListRange(vector<vector<int>>{{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17}}, 1, 3)\n * {{2}, {1, 2, 3}}\n * > removeListRange(vector<vector<int>>{{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17}}, 0, 7)\n * {{2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}}\n */\nvector<vector<int>> removeListRange(vector<vector<int>> list1, int leftrange, int rigthrange) {\n    vector<vector<int>> result;\n    for (const auto& sublist : list1) {\n        bool withinRange = false;\n        for (int num : sublist) {\n            if (num >= leftrange && num <= rigthrange) {\n                withinRange = true;\n                break;\n            }\n        }\n        if (withinRange) {\n            result.push_back(sublist);\n        }\n    }\n    return result;\n}", "entry_point": "removeListRange"}
{"task_id": "MBCPP/870", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n * > sumPositivenum(vector<int>{2, 4, -6, -9, 11, -12, 14, -5, 17})\n * 48\n * > sumPositivenum(vector<int>{10, 15, -14, 13, -18, 12, -20)\n * 50\n * > sumPositivenum(vector<int>{19, -65, 57, 39, 152, -639, 121, 44, 90, -190})\n * 522\n */\nint sumPositivenum(vector<int> nums) {\n    return accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {\n        return num > 0 ? sum + num : sum;\n    });\n}", "entry_point": "sumPositivenum"}
{"task_id": "MBCPP/871", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given strings are rotations of each other or not.\n * > areRotations(string(\"abc\"), string(\"cba\"))\n * false\n * > areRotations(string(\"abcd\"), string(\"cdba\"))\n * false\n * > areRotations(string(\"abacd\"), string(\"cdaba\"))\n * true\n */\nbool areRotations(string string1, string string2) {\n    if (string1.length() != string2.length())\n        return false;\n    \n    string temp = string1 + string1;\n    return (temp.find(string2) != string::npos);\n}", "entry_point": "areRotations"}
{"task_id": "MBCPP/873", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve the fibonacci sequence using recursion.\n * > fibonacci(7)\n * 13\n * > fibonacci(8)\n * 21\n * > fibonacci(9)\n * 34\n */\nint fibonacci(int n) {\n    if (n <= 1)\n        return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}", "entry_point": "fibonacci"}
{"task_id": "MBCPP/874", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check if the string is a concatenation of another string.\n * > checkConcat(string(\"abcabcabc\"), string(\"abc\"))\n * true\n * > checkConcat(string(\"abcab\"), string(\"abc\"))\n * false\n * > checkConcat(string(\"aba\"), string(\"ab\"))\n * false\n */\nbool checkConcat(string str1, string str2) {\n    if (str2.empty()) return str1.empty();\n    int len1 = str1.length();\n    int len2 = str2.length();\n    if (len1 % len2 != 0) return false;\n    for (int i = 0; i < len1; i += len2) {\n        if (str1.substr(i, len2) != str2) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "checkConcat"}
{"task_id": "MBCPP/875", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum difference in the tuple pairs of given tuples.\n * > minDifference(vector<vector<int>>{{3, 5}, {1, 7}, {10, 3}, {1, 2}})\n * 1\n * > minDifference(vector<vector<int>>{{4, 6}, {12, 8}, {11, 4}, {2, 13}})\n * 2\n * > minDifference(vector<vector<int>>{{5, 17}, {3, 9}, {12, 5}, {3, 24}})\n * 6\n */\nint minDifference(vector<vector<int>> testList) {\n    int minDiff = INT_MAX;\n    for (const auto& pair : testList) {\n        int diff = abs(pair[0] - pair[1]);\n        if (diff < minDiff) {\n            minDiff = diff;\n        }\n    }\n    return minDiff;\n}", "entry_point": "minDifference"}
{"task_id": "MBCPP/876", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find lcm of two positive integers.\n * > lcm(4, 6)\n * 12\n * > lcm(15, 17)\n * 255\n * > lcm(2, 6)\n * 6\n */\nint lcm(int x, int y) {\n    int gcd = __gcd(x, y);\n    return (x * y) / gcd;\n}", "entry_point": "lcm"}
{"task_id": "MBCPP/877", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to sort the given string.\n * > sortString(string(\"cba\"))\n * string(\"abc\")\n * > sortString(string(\"data\"))\n * string(\"aadt\")\n * > sortString(string(\"zxy\"))\n * string(\"xyz\")\n */\nstring sortString(string str) {\n    sort(str.begin(), str.end());\n    return str;\n}", "entry_point": "sortString"}
{"task_id": "MBCPP/878", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if the given tuple contains only k elements.\n * > checkTuples(vector<int>{3, 5, 6, 5, 3, 6}, vector<int>{3, 6, 5})\n * true\n * > checkTuples(vector<int>{4, 5, 6, 4, 6, 5}, vector<int>{4, 5, 6})\n * true\n * > checkTuples(vector<int>{9, 8, 7, 6, 8, 9}, vector<int>{9, 8, 1})\n * false\n */\nbool checkTuples(vector<int> testTuple, vector<int> k) {\n    unordered_set<int> kSet(k.begin(), k.end());\n    unordered_set<int> tupleSet(testTuple.begin(), testTuple.end());\n    return kSet == tupleSet;\n}", "entry_point": "checkTuples"}
{"task_id": "MBCPP/879", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n * > textMatch(string(\"aabbbbd\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"aabAbbbc\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"accddbbjjjb\"))\n * string(\"Found a match!\")\n */\nstring textMatch(string text) {\n    regex pattern(\"a.*b$\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatch"}
{"task_id": "MBCPP/880", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find number of solutions in quadratic equation.\n * > checkSolution(2, 5, 2)\n * string(\"2 solutions\")\n * > checkSolution(1, 1, 1)\n * string(\"No solutions\")\n * > checkSolution(1, 2, 1)\n * string(\"1 solution\")\n */\nstring checkSolution(int a, int b, int c) {\n    int discriminant = b * b - 4 * a * c;\n    if (discriminant > 0) {\n        return \"2 solutions\";\n    } else if (discriminant == 0) {\n        return \"1 solution\";\n    } else {\n        return \"No solutions\";\n    }\n}", "entry_point": "checkSolution"}
{"task_id": "MBCPP/881", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sum of first even and odd number of a given list.\n * > sumEvenOdd(vector<int>{1, 3, 5, 7, 4, 1, 6, 8})\n * 5\n * > sumEvenOdd(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n * 3\n * > sumEvenOdd(vector<int>{1, 5, 7, 9, 10})\n * 11\n */\nint sumEvenOdd(vector<int> list1) {\n    int even = -1, odd = -1;\n    for (int num : list1) {\n        if (even == -1 && num % 2 == 0) {\n            even = num;\n        }\n        if (odd == -1 && num % 2 != 0) {\n            odd = num;\n        }\n        if (even != -1 && odd != -1) {\n            break;\n        }\n    }\n    return even + odd;\n}", "entry_point": "sumEvenOdd"}
{"task_id": "MBCPP/882", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to caluclate perimeter of a parallelogram.\n * > parallelogramPerimeter(10, 20)\n * 400\n * > parallelogramPerimeter(15, 20)\n * 600\n * > parallelogramPerimeter(8, 9)\n * 144\n */\nint parallelogramPerimeter(int b, int h) {\n    return 2 * (b + h);\n}", "entry_point": "parallelogramPerimeter"}
{"task_id": "MBCPP/883", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n * > divOfNums(vector<int>{19, 65, 57, 39, 152, 639, 121, 44, 90, 190}, 2, 4)\n * {152, 44}\n * > divOfNums(vector<int>{1, 2, 3, 5, 7, 8, 10}, 2, 5)\n * {10}\n * > divOfNums(vector<int>{10, 15, 14, 13, 18, 12, 20}, 10, 5)\n * {10, 20}\n */\nvector<int> divOfNums(vector<int> nums, int m, int n) {\n    auto isDivisible = [m, n](int num) { return num % m == 0 && num % n == 0; };\n    vector<int> result;\n    copy_if(nums.begin(), nums.end(), back_inserter(result), isDivisible);\n    return result;\n}", "entry_point": "divOfNums"}
{"task_id": "MBCPP/884", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether all the bits are within a given range or not.\n * > allBitsSetInTheGivenRange(10, 2, 1)\n * true\n * > allBitsSetInTheGivenRange(5, 2, 4)\n * false\n * > allBitsSetInTheGivenRange(22, 2, 3)\n * true\n */\nbool allBitsSetInTheGivenRange(int n, int l, int r) {\n    int mask = (1 << (r - l + 1)) - 1;\n    mask = mask << (l - 1);\n    return (n & mask) == mask;\n}", "entry_point": "allBitsSetInTheGivenRange"}
{"task_id": "MBCPP/885", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the two given strings are isomorphic to each other or not.\n * > isIsomorphic(string(\"paper\"), string(\"title\"))\n * true\n * > isIsomorphic(string(\"ab\"), string(\"ba\"))\n * true\n * > isIsomorphic(string(\"ab\"), string(\"aa\"))\n * false\n */\nbool isIsomorphic(string str1, string str2) {\n    if (str1.length() != str2.length())\n        return false;\n\n    unordered_map<char, char> map1, map2;\n\n    for (int i = 0; i < str1.length(); i++) {\n        char c1 = str1[i], c2 = str2[i];\n\n        if (map1.find(c1) != map1.end()) {\n            if (map1[c1] != c2)\n                return false;\n        } else {\n            if (map2.find(c2) != map2.end())\n                return false;\n            map1[c1] = c2;\n            map2[c2] = c1;\n        }\n    }\n\n    return true;\n}", "entry_point": "isIsomorphic"}
{"task_id": "MBCPP/886", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to add all the numbers in a list and divide it with the length of the list.\n * > sumNum(vector<int>{8, 2, 3, 0, 7})\n * 4.0\n * > sumNum(vector<int>{-10, -20, -30})\n * -20.0\n * > sumNum(vector<int>{19, 15, 18})\n * 17.333333333333332\n */\ndouble sumNum(vector<int> numbers) {\n    double sum = 0;\n    for (int num : numbers) {\n        sum += num;\n    }\n    return sum / numbers.size();\n}", "entry_point": "sumNum"}
{"task_id": "MBCPP/887", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given number is odd or not using bitwise operator.\n * > isOdd(5)\n * true\n * > isOdd(6)\n * false\n * > isOdd(7)\n * true\n */\nbool isOdd(int n) {\n    return n & 1;\n}", "entry_point": "isOdd"}
{"task_id": "MBCPP/888", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to substract the elements of the given nested tuples.\n * > substractElements(vector<vector<int>>{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, vector<vector<int>>{{6, 7}, {3, 9}, {1, 1}, {7, 3}})\n * {{-5, -4}, {1, -4}, {1, 8}, {-6, 7}}\n * > substractElements(vector<vector<int>>{{13, 4}, {14, 6}, {13, 10}, {12, 11}}, vector<vector<int>>{{19, 8}, {14, 10}, {12, 2}, {18, 4}})\n * {{-6, -4}, {0, -4}, {1, 8}, {-6, 7}}\n * > substractElements(vector<vector<int>>{{19, 5}, {18, 7}, {19, 11}, {17, 12}}, vector<vector<int>>{{12, 9}, {17, 11}, {13, 3}, {19, 5}})\n * {{7, -4}, {1, -4}, {6, 8}, {-2, 7}}\n */\nvector<vector<int>> substractElements(vector<vector<int>> testTup1, vector<vector<int>> testTup2) {\n    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup1.size(); ++i) {\n        vector<int> temp;\n        for (size_t j = 0; j < testTup1[i].size(); ++j) {\n            temp.push_back(testTup1[i][j] - testTup2[i][j]);\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "entry_point": "substractElements"}
{"task_id": "MBCPP/889", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to reverse each list in a given list of lists.\n * > reverseListLists(vector<vector<int>>{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}})\n * {{4, 3, 2, 1}, {8, 7, 6, 5}, {12, 11, 10, 9}, {16, 15, 14, 13}}\n * > reverseListLists(vector<vector<int>>{{1, 2}, {2, 3}, {3, 4}})\n * {{2, 1}, {3, 2}, {4, 3}}\n * > reverseListLists(vector<vector<int>>{{10, 20}, {30, 40}})\n * {{20, 10}, {40, 30}}\n */\nvector<vector<int>> reverseListLists(vector<vector<int>> lists) {\n    for (auto& list : lists) {\n        reverse(list.begin(), list.end());\n    }\n    return lists;\n}", "entry_point": "reverseListLists"}
{"task_id": "MBCPP/890", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the index of an extra element present in one sorted array.\n * > findExtra(vector<int>{1, 2, 3, 4}, vector<int>{1, 2, 3}, 3)\n * 3\n * > findExtra(vector<int>{2, 4, 6, 8, 10}, vector<int>{2, 4, 6, 8}, 4)\n * 4\n * > findExtra(vector<int>{1, 3, 5, 7, 9, 11}, vector<int>{1, 3, 5, 7, 9}, 5)\n * 5\n */\nint findExtra(vector<int> arr1, vector<int> arr2, int n) {\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (mid < arr2.size() && arr1[mid] == arr2[mid]) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}", "entry_point": "findExtra"}
{"task_id": "MBCPP/891", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given two numbers have same number of digits or not.\n * > sameLength(12, 1)\n * false\n * > sameLength(2, 2)\n * true\n * > sameLength(10, 20)\n * true\n */\nbool sameLength(int a, int b) {\n    int countA = 0, countB = 0;\n    if (a == 0) countA = 1;\n    if (b == 0) countB = 1;\n    while (a != 0) {\n        countA++;\n        a /= 10;\n    }\n    while (b != 0) {\n        countB++;\n        b /= 10;\n    }\n    return countA == countB;\n}", "entry_point": "sameLength"}
{"task_id": "MBCPP/892", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove multiple spaces in a string.\n * > removeSpaces(string(\"python  program\"))\n * string(\"python program\")\n * > removeSpaces(string(\"python   programming    language\"))\n * string(\"python programming language\")\n * > removeSpaces(string(\"python                     program\"))\n * string(\"python program\")\n */\nstring removeSpaces(string text) {\n    string result;\n    bool space = false;\n    for (char c : text) {\n        if (c == ' ') {\n            if (!space) {\n                result += c;\n                space = true;\n            }\n        } else {\n            result += c;\n            space = false;\n        }\n    }\n    return result;\n}", "entry_point": "removeSpaces"}
{"task_id": "MBCPP/894", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given string of float type into tuple.\n * > floatToTuple(string(\"1.2, 1.3, 2.3, 2.4, 6.5\"))\n * {1.2, 1.3, 2.3, 2.4, 6.5}\n * > floatToTuple(string(\"2.3, 2.4, 5.6, 5.4, 8.9\"))\n * {2.3, 2.4, 5.6, 5.4, 8.9}\n * > floatToTuple(string(\"0.3, 0.5, 7.8, 9.4\"))\n * {0.3, 0.5, 7.8, 9.4}\n */\nvector<double> floatToTuple(string testStr) {\n    vector<double> result;\n    stringstream ss(testStr);\n    string token;\n    while (getline(ss, token, ',')) {\n        result.push_back(stod(token));\n    }\n    return result;\n}", "entry_point": "floatToTuple"}
{"task_id": "MBCPP/895", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n * > maxSumSubseq(vector<int>{1, 2, 9, 4, 5, 0, 4, 11, 6})\n * 26\n * > maxSumSubseq(vector<int>{1, 2, 9, 5, 6, 0, 5, 12, 7})\n * 28\n * > maxSumSubseq(vector<int>{1, 3, 10, 5, 6, 0, 6, 14, 21})\n * 44\n */\nint maxSumSubseq(vector<int> a) {\n    int n = a.size();\n    if (n == 0) return 0;\n    if (n == 1) return a[0];\n    \n    int prev2 = a[0];\n    int prev1 = max(a[0], a[1]);\n    \n    for (int i = 2; i < n; i++) {\n        int current = max(prev1, prev2 + a[i]);\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return prev1;\n}", "entry_point": "maxSumSubseq"}
{"task_id": "MBCPP/896", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n * > sortListLast(vector<vector<int>>{{2, 5}, {1, 2}, {4, 4}, {2, 3}, {2, 1}})\n * {{2, 1}, {1, 2}, {2, 3}, {4, 4}, {2, 5}}\n * > sortListLast(vector<vector<int>>{{9, 8}, {4, 7}, {3, 5}, {7, 9}, {1, 2}})\n * {{1, 2}, {3, 5}, {4, 7}, {9, 8}, {7, 9}}\n * > sortListLast(vector<vector<int>>{{20, 50}, {10, 20}, {40, 40}})\n * {{10, 20}, {40, 40}, {20, 50}}\n */\nvector<vector<int>> sortListLast(vector<vector<int>> tuples) {\n    sort(tuples.begin(), tuples.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a.back() < b.back();\n    });\n    return tuples;\n}", "entry_point": "sortListLast"}
{"task_id": "MBCPP/897", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the word is present in a given sentence or not.\n * > isWordPresent(string(\"machine learning\"), string(\"machine\"))\n * true\n * > isWordPresent(string(\"easy\"), string(\"fun\"))\n * false\n * > isWordPresent(string(\"python language\"), string(\"code\"))\n * false\n */\nbool isWordPresent(string sentence, string word) {\n    stringstream ss(sentence);\n    string token;\n    while (ss >> token) {\n        if (token == word) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "isWordPresent"}
{"task_id": "MBCPP/898", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n * > extractElements(vector<int>{1, 1, 3, 4, 4, 5, 6, 7}, 2)\n * {1, 4}\n * > extractElements(vector<int>{0, 1, 2, 3, 4, 4, 4, 4, 5, 7}, 4)\n * {4}\n * > extractElements(vector<int>{0, 0, 0, 0, 0}, 5)\n * {0}\n */\nvector<int> extractElements(vector<int> numbers, int n) {\n    vector<int> result;\n    if (numbers.empty() || n <= 0) return result;\n    \n    int count = 1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] == numbers[i-1]) {\n            count++;\n            if (count == n) {\n                result.push_back(numbers[i]);\n                count = 1;\n            }\n        } else {\n            count = 1;\n        }\n    }\n    \n    return result;\n}", "entry_point": "extractElements"}
{"task_id": "MBCPP/899", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether an array can be sorted or not by picking only the corner elements.\n * > check(vector<int>{3, 2, 1, 2, 3, 4}, 6)\n * true\n * > check(vector<int>{2, 1, 4, 5, 1}, 5)\n * true\n * > check(vector<int>{1, 2, 2, 1, 2, 3}, 6)\n * true\n */\nbool check(vector<int> arr, int n) {\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    int left = 0, right = n - 1;\n    for (int i = 0; i < n; i++) {\n        if (arr[left] == sortedArr[i]) {\n            left++;\n        } else if (arr[right] == sortedArr[i]) {\n            right--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "check"}
{"task_id": "MBCPP/900", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function where a string will start with a specific number.\n * > matchNum(string(\"5-2345861\"))\n * true\n * > matchNum(string(\"6-2345861\"))\n * false\n * > matchNum(string(\"78910\"))\n * false\n */\nbool matchNum(string str) {\n    if (str.empty())\n        return false;\n    return str[0] == '5' && str.size() > 1 && str[1] == '-';\n}", "entry_point": "matchNum"}
{"task_id": "MBCPP/901", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the smallest multiple of the first n numbers.\n * > smallestMultiple(13)\n * 360360\n * > smallestMultiple(2)\n * 2\n * > smallestMultiple(1)\n * 1\n */\nint smallestMultiple(int n) {\n    if (n == 1) return 1;\n    long result = 1;\n    for (int i = 2; i <= n; i++) {\n        result = (result * i) / __gcd(result, (long)i);\n    }\n    return result;\n}", "entry_point": "smallestMultiple"}
{"task_id": "MBCPP/902", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to combine two dictionaries by adding values for common keys.\n * > addDict(unordered_map<string, int>{{string(\"a\"), 100}, {string(\"b\"), 200}, {string(\"c\"), 300}}, unordered_map<string, int>{{string(\"a\"), 300}, {string(\"b\"), 200}, {string(\"d\"), 400}})\n * {{string(\"b\"), 400}, {string(\"d\"), 400}, {string(\"a\"), 400}, {string(\"c\"), 300}}\n * > addDict(unordered_map<string, int>{{string(\"a\"), 500}, {string(\"b\"), 700}, {string(\"c\"), 900}}, unordered_map<string, int>{{string(\"a\"), 500}, {string(\"b\"), 600}, {string(\"d\"), 900}})\n * {{string(\"b\"), 1300}, {string(\"d\"), 900}, {string(\"a\"), 1000}, {string(\"c\"), 900}}\n * > addDict(unordered_map<string, int>{{string(\"a\"), 900}, {string(\"b\"), 900},\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u76f4\u64ad\u5b98", "entry_point": "addDict"}
{"task_id": "MBCPP/903", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to count the total unset bits from 1 to n.\n * > countUnsetBits(2)\n * 1\n * > countUnsetBits(5)\n * 4\n * > countUnsetBits(14)\n * 17\n */\nint countUnsetBits(int n) {\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        int num = i;\n        while (num > 0) {\n            if ((num & 1) == 0) {\n                count++;\n            }\n            num >>= 1;\n        }\n    }\n    return count;\n}", "entry_point": "countUnsetBits"}
{"task_id": "MBCPP/905", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of squares of binomial co-efficients.\n * > sumOfSquare(4)\n * 70\n * > sumOfSquare(5)\n * 252\n * > sumOfSquare(2)\n * 6\n */\nint sumOfSquare(int n) {\n    int sum = 0;\n    int C[n+1][n+1];\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, n); j++) {\n            if (j == 0 || j == i)\n                C[i][j] = 1;\n            else\n                C[i][j] = C[i-1][j-1] + C[i-1][j];\n        }\n    }\n    for (int i = 0; i <= n; i++) {\n        sum += C[n][i] * C[n][i];\n    }\n    return sum;\n}", "entry_point": "sumOfSquare"}
{"task_id": "MBCPP/906", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to extract year, month and date from a url by using regex.\n * > extractDate(string(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\"))\n * {{string(\"2016\"), string(\"09\"), string(\"02\")}}\n * > extractDate(string(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"))\n * {{string(\"2020\"), string(\"11\"), string(\"03\")}}\n * > extractDate(string(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\"))\n * {{string(\"2020\"), string(\"12\"), string(\"29\")}}\n */\nvector<vector<string>> extractDate(string url) {\n    regex pattern(R\"((\\d{4})/(\\d{2})/(\\d{2}))\");\n    smatch match;\n    vector<vector<string>> result;\n    if (regex_search(url, match, pattern)) {\n        result.push_back({match[1], match[2], match[3]});\n    }\n    return result;\n}", "entry_point": "extractDate"}
{"task_id": "MBCPP/907", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to print the first n lucky numbers.\n * > luckyNum(10)\n * {1, 3, 7, 9, 13, 15, 21, 25, 31, 33}\n * > luckyNum(5)\n * {1, 3, 7, 9, 13}\n * > luckyNum(8)\n * {1, 3, 7, 9, 13, 15, 21, 25}\n */\nvector<int> luckyNum(int n) {\n    vector<int> luckyNumbers;\n    int count = 0;\n    int num = 1;\n    \n    while (count < n) {\n        string s = to_string(num);\n        bool isLucky = true;\n        for (char c : s) {\n            if (c != '3' && c != '7' && c != '1' && c != '5' && c != '9') {\n                isLucky = false;\n                break;\n            }\n        }\n        if (isLucky) {\n            luckyNumbers.push_back(num);\n            count++;\n        }\n        num++;\n    }\n    \n    return luckyNumbers;\n}", "entry_point": "luckyNum"}
{"task_id": "MBCPP/908", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the fixed point in the given array.\n * > findFixedPoint(vector<int>{-10, -1, 0, 3, 10, 11, 30, 50, 100}, 9)\n * 3\n * > findFixedPoint(vector<int>{1, 2, 3, 4, 5, 6, 7, 8}, 8)\n * -1\n * > findFixedPoint(vector<int>{0, 2, 5, 8, 17}, 5)\n * 0\n */\nint findFixedPoint(vector<int> arr, int n) {\n    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == mid)\n            return mid;\n        else if (arr[mid] < mid)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return -1;\n}", "entry_point": "findFixedPoint"}
{"task_id": "MBCPP/909", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the previous palindrome of a specified number.\n * > previousPalindrome(99)\n * 88\n * > previousPalindrome(1221)\n * 1111\n * > previousPalindrome(120)\n * 111\n */\nint previousPalindrome(int num) {\n    num--;\n    while (num >= 0) {\n        int original = num;\n        int reversed = 0;\n        while (original != 0) {\n            reversed = reversed * 10 + original % 10;\n            original /= 10;\n        }\n        if (reversed == num) {\n            return num;\n        }\n        num--;\n    }\n    return -1;\n}", "entry_point": "previousPalindrome"}
{"task_id": "MBCPP/911", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n * > maximumProduct(vector<int>{12, 74, 9, 50, 61, 41})\n * 225700\n * > maximumProduct(vector<int>{25, 35, 22, 85, 14, 65, 75, 25, 58})\n * 414375\n * > maximumProduct(vector<int>{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1})\n * 2520\n */\nint maximumProduct(vector<int> nums) {\n    priority_queue<int> maxHeap;\n    priority_queue<int, vector<int>, greater<int>> minHeap;\n    \n    for (int num : nums) {\n        maxHeap.push(num);\n        minHeap.push(num);\n        if (maxHeap.size() > 3) maxHeap.pop();\n        if (minHeap.size() > 2) minHeap.pop();\n    }\n    \n    int max1 = maxHeap.top(); maxHeap.pop();\n    int max2 = maxHeap.top(); maxHeap.pop();\n    int max3 = maxHeap.top(); maxHeap.pop();\n    \n    int min1 = minHeap.top(); minHeap.pop();\n    int min2 = minHeap.top(); minHeap.pop();\n    \n    return max(max1 * max2 * max3, min1 * min2 * max1);\n}", "entry_point": "maximumProduct"}
{"task_id": "MBCPP/912", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find ln, m lobb number.\n * > lobbNum(5, 3)\n * 35\n * > lobbNum(3, 2)\n * 5\n * > lobbNum(4, 2)\n * 20\n */\nint lobbNum(int n, int m) {\n    if (m == 0)\n        return 1;\n    if (n == m)\n        return 1;\n    if (n < m)\n        return 0;\n    return ((2 * n - 1) * lobbNum(n - 1, m) - (n + m - 1) * lobbNum(n - 1, m - 1)) / (n - m);\n}", "entry_point": "lobbNum"}
{"task_id": "MBCPP/913", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check for a number at the end of a string.\n * > endNum(string(\"abcdef\"))\n * false\n * > endNum(string(\"abcdef7\"))\n * true\n * > endNum(string(\"abc\"))\n * false\n */\nbool endNum(string str) {\n    if (str.empty())\n        return false;\n    char lastChar = str.back();\n    return isdigit(lastChar);\n}", "entry_point": "endNum"}
{"task_id": "MBCPP/914", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the given string is made up of two alternating characters or not.\n * > isTwoAlter(string(\"abab\"))\n * true\n * > isTwoAlter(string(\"aaaa\"))\n * false\n * > isTwoAlter(string(\"xyz\"))\n * false\n */\nbool isTwoAlter(string s) {\n    if (s.length() < 2)\n        return false;\n    \n    char first = s[0];\n    char second = s[1];\n    \n    if (first == second)\n        return false;\n    \n    for (int i = 2; i < s.length(); i++) {\n        if (i % 2 == 0) {\n            if (s[i] != first)\n                return false;\n        } else {\n            if (s[i] != second)\n                return false;\n        }\n    }\n    \n    return true;\n}", "entry_point": "isTwoAlter"}
{"task_id": "MBCPP/915", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n * > rearrangeNumbs(vector<int>{-1, 2, -3, 5, 7, 8, 9, -10})\n * {2, 5, 7, 8, 9, -10, -3, -1}\n * > rearrangeNumbs(vector<int>{10, 15, 14, 13, -18, 12, -20})\n * {10, 12, 13, 14, 15, -20, -18}\n * > rearrangeNumbs(vector<int>{-20, 20, -10, 10, -30, 30})\n * {10, 20, 30, -30, -20, -10}\n */\nvector<int> rearrangeNumbs(vector<int> arrayNums) {\n    auto comp = [](int a, int b) {\n        if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {\n            return a < b;\n        }\n        return a >= 0;\n    };\n    sort(arrayNums.begin(), arrayNums.end(), comp);\n    return arrayNums;\n}", "entry_point": "rearrangeNumbs"}
{"task_id": "MBCPP/916", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n * > findTripletArray(vector<int>{1, 4, 45, 6, 10, 8}, 6, 22)\n * {4, 10, 8}\n * > findTripletArray(vector<int>{12, 3, 5, 2, 6, 9}, 6, 24)\n * {12, 3, 9}\n * > findTripletArray(vector<int>{1, 2, 3, 4, 5}, 5, 9)\n * {1, 3, 5}\n */\nvector<int> findTripletArray(vector<int> a, int arrSize, int sum) {\n    sort(a.begin(), a.end());\n    for (int i = 0; i < arrSize - 2; i++) {\n        int left = i + 1;\n        int right = arrSize - 1;\n        while (left < right) {\n            int currentSum = a[i] + a[left] + a[right];\n            if (currentSum == sum) {\n                return {a[i], a[left], a[right]};\n            } else if (currentSum < sum) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return {};\n}", "entry_point": "findTripletArray"}
{"task_id": "MBCPP/917", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the sequences of one upper case letter followed by lower case letters.\n * > textUppercaseLowercase(string(\"AaBbGg\"))\n * string(\"Found a match!\")\n * > textUppercaseLowercase(string(\"aA\"))\n * string(\"Not matched!\")\n * > textUppercaseLowercase(string(\"PYTHON\"))\n * string(\"Not matched!\")\n */\nstring textUppercaseLowercase(string text) {\n    regex pattern(\"[A-Z][a-z]+\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textUppercaseLowercase"}
{"task_id": "MBCPP/918", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count coin change.\n * > coinChange(vector<int>{1, 2, 3}, 3, 4)\n * 4\n * > coinChange(vector<int>{4, 5, 6, 7, 8, 9}, 6, 9)\n * 2\n * > coinChange(vector<int>{4, 5, 6, 7, 8, 9}, 6, 4)\n * 1\n */\nint coinChange(vector<int> s, int m, int n) {\n    vector<int> dp(n + 1, 0);\n    dp[0] = 1;\n    for (int i = 0; i < m; i++) {\n        for (int j = s[i]; j <= n; j++) {\n            dp[j] += dp[j - s[i]];\n        }\n    }\n    return dp[n];\n}", "entry_point": "coinChange"}
{"task_id": "MBCPP/919", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to multiply all items in the list.\n * > multiplyList(vector<int>{1, -2, 3})\n * -6\n * > multiplyList(vector<int>{1, 2, 3, 4})\n * 24\n * > multiplyList(vector<int>{3, 1, 2, 3})\n * 18\n */\nint multiplyList(vector<int> items) {\n    int result = 1;\n    for (int item : items) {\n        result *= item;\n    }\n    return result;\n}", "entry_point": "multiplyList"}
{"task_id": "MBCPP/921", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to perform chunking of tuples each of size n.\n * > chunkTuples(vector<int>{10, 4, 5, 6, 7, 6, 8, 3, 4}, 3)\n * {{10, 4, 5}, {6, 7, 6}, {8, 3, 4}}\n * > chunkTuples(vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9}, 2)\n * {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9}}\n * > chunkTuples(vector<int>{11, 14, 16, 17, 19, 21, 22, 25}, 4)\n * {{11, 14, 16, 17}, {19, 21, 22, 25}}\n */\nvector<vector<int>> chunkTuples(vector<int> testTup, int n) {\n    vector<vector<int>> result;\n    for (size_t i = 0; i < testTup.size(); i += n) {\n        vector<int> chunk;\n        for (size_t j = i; j < i + n && j < testTup.size(); ++j) {\n            chunk.push_back(testTup[j]);\n        }\n        result.push_back(chunk);\n    }\n    return result;\n}", "entry_point": "chunkTuples"}
{"task_id": "MBCPP/922", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find a pair with the highest product from a given array of integers.\n * > maxProduct(vector<int>{1, 2, 3, 4, 7, 0, 8, 4})\n * {7, 8}\n * > maxProduct(vector<int>{0, -1, -2, -4, 5, 0, -6})\n * {-4, -6}\n * > maxProduct(vector<int>{1, 3, 5, 6, 8, 9})\n * {8, 9}\n */\nvector<int> maxProduct(vector<int> arr) {\n    int n = arr.size();\n    if (n < 2)\n        return {};\n\n    sort(arr.begin(), arr.end());\n\n    long long product1 = arr[0] * arr[1];\n    long long product2 = arr[n - 1] * arr[n - 2];\n\n    if (product1 > product2)\n        return {arr[0], arr[1]};\n    else\n        return {arr[n - 2], arr[n - 1]};\n}", "entry_point": "maxProduct"}
{"task_id": "MBCPP/923", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n * > superSeq(string(\"AGGTAB\"), string(\"GXTXAYB\"), 6, 7)\n * 9\n * > superSeq(string(\"feek\"), string(\"eke\"), 4, 3)\n * 5\n * > superSeq(string(\"PARRT\"), string(\"RTA\"), 5, 3)\n * 6\n */\nint superSeq(string x, string y, int m, int n) {\n    int dp[m+1][n+1];\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0)\n                dp[i][j] = j;\n            else if (j == 0)\n                dp[i][j] = i;\n            else if (x[i-1] == y[j-1])\n                dp[i][j] = 1 + dp[i-1][j-1];\n            else\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[m][n];\n}", "entry_point": "superSeq"}
{"task_id": "MBCPP/924", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find maximum of two numbers.\n * > maxOfTwo(10, 20)\n * 20\n * > maxOfTwo(19, 15)\n * 19\n * > maxOfTwo(-10, -20)\n * -10\n */\nint maxOfTwo(int x, int y) {\n    return (x > y) ? x : y;\n}", "entry_point": "maxOfTwo"}
{"task_id": "MBCPP/925", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to calculate the product of all the numbers of a given tuple.\n * > mutipleTuple(vector<int>{4, 3, 2, 2, -1, 18})\n * -864\n * > mutipleTuple(vector<int>{1, 2, 3})\n * 6\n * > mutipleTuple(vector<int>{-2, -4, -6})\n * -48\n */\nint mutipleTuple(vector<int> nums) {\n    int product = 1;\n    for (int num : nums) {\n        product *= num;\n    }\n    return product;\n}", "entry_point": "mutipleTuple"}
{"task_id": "MBCPP/926", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find n-th rencontres number.\n * > rencontresNumber(7, 2)\n * 924\n * > rencontresNumber(3, 0)\n * 2\n * > rencontresNumber(3, 1)\n * 3\n */\nint rencontresNumber(int n, int m) {\n    if (n == 0 && m == 0)\n        return 1;\n    if (n == 1 && m == 0)\n        return 0;\n    if (n == 1 && m == 1)\n        return 1;\n    if (m == 0)\n        return (n - 1) * (rencontresNumber(n - 1, 0) + rencontresNumber(n - 2, 0));\n    return binomialCoefficient(n, m) * rencontresNumber(n - m, 0);\n}\n\nint binomialCoefficient(int n, int k) {\n    if (k == 0 || k == n)\n        return 1;\n    return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);\n}", "entry_point": "rencontresNumber"}
{"task_id": "MBCPP/928", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n * > changeDateFormat(string(\"2026-01-02\"))\n * string(\"02-01-2026\")\n * > changeDateFormat(string(\"2021-01-04\"))\n * string(\"04-01-2021\")\n * > changeDateFormat(string(\"2030-06-06\"))\n * string(\"06-06-2030\")\n */\nstring changeDateFormat(string dt) {\n    string year = dt.substr(0, 4);\n    string month = dt.substr(5, 2);\n    string day = dt.substr(8, 2);\n    return day + \"-\" + month + \"-\" + year;\n}", "entry_point": "changeDateFormat"}
{"task_id": "MBCPP/929", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count repeated items of a tuple.\n * > countTuplex(vector<int>{2, 4, 5, 6, 2, 3, 4, 4, 7}, 4)\n * 3\n * > countTuplex(vector<int>{2, 4, 5, 6, 2, 3, 4, 4, 7}, 2)\n * 2\n * > countTuplex(vector<int>{2, 4, 7, 7, 7, 3, 4, 4, 7}, 7)\n * 4\n */\nint countTuplex(vector<int> tuplex, int value) {\n    int count = 0;\n    for (int num : tuplex) {\n        if (num == value) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "countTuplex"}
{"task_id": "MBCPP/930", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n * > textMatch(string(\"msb\"))\n * string(\"Not matched!\")\n * > textMatch(string(\"a0c\"))\n * string(\"Found a match!\")\n * > textMatch(string(\"abbc\"))\n * string(\"Found a match!\")\n */\nstring textMatch(string text) {\n    regex pattern(\"a[b]*\");\n    if (regex_match(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}", "entry_point": "textMatch"}
{"task_id": "MBCPP/931", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n * > sumSeries(7)\n * 784\n * > sumSeries(5)\n * 225\n * > sumSeries(15)\n * 14400\n */\nint sumSeries(int number) {\n    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}", "entry_point": "sumSeries"}
{"task_id": "MBCPP/932", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to remove duplicate words from a given list of strings.\n * > removeDuplicList(vector<string>{string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Exercises\")})\n * {string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\")}\n * > removeDuplicList(vector<string>{string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Exercises\"), string(\"Java\")})\n * {string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Java\")}\n * > removeDuplicList(vector<string>{string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"Exercises\"), string(\"C++\"), string(\"C\"), string(\"C++\")})\n * {string(\"Python\"), string(\"Exercises\"), string(\"Practice\"), string(\"Solution\"), string(\"C++\"), string(\"C\")}\n */\nvector<string> removeDuplicList(vector<string> l) {\n    unordered_set<string> seen;\n    vector<string> result;\n    for (const auto& word : l) {\n        if (seen.find(word) == seen.end()) {\n            seen.insert(word);\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "entry_point": "removeDuplicList"}
{"task_id": "MBCPP/933", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert camel case string to snake case string by using regex.\n * > camelToSnake(string(\"GoogleAssistant\"))\n * string(\"google_assistant\")\n * > camelToSnake(string(\"ChromeCast\"))\n * string(\"chrome_cast\")\n * > camelToSnake(string(\"QuadCore\"))\n * string(\"quad_core\")\n */\nstring camelToSnake(string text) {\n    string result;\n    for (char c : text) {\n        if (isupper(c)) {\n            if (!result.empty()) {\n                result += '_';\n            }\n            result += tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}", "entry_point": "camelToSnake"}
{"task_id": "MBCPP/934", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the nth delannoy number.\n * > dealnnoyNum(3, 4)\n * 129\n * > dealnnoyNum(3, 3)\n * 63\n * > dealnnoyNum(4, 5)\n * 681\n */\nint dealnnoyNum(int n, int m) {\n    if (m == 0 || n == 0)\n        return 1;\n    return dealnnoyNum(m - 1, n) + dealnnoyNum(m - 1, n - 1) + dealnnoyNum(m, n - 1);\n}", "entry_point": "dealnnoyNum"}
{"task_id": "MBCPP/935", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n * > seriesSum(6)\n * 91\n * > seriesSum(7)\n * 140\n * > seriesSum(12)\n * 650\n */\nint seriesSum(int number) {\n    int sum = 0;\n    for (int i = 1; i <= number; i++) {\n        sum += i * i;\n    }\n    return sum;\n}", "entry_point": "seriesSum"}
{"task_id": "MBCPP/936", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to re-arrange the given tuples based on the given ordered list.\n * > reArrangeTuples(vector<vector<int>>{{4, 3}, {1, 9}, {2, 10}, {3, 2}}, vector<int>{1, 4, 2, 3})\n * {{1, 9}, {4, 3}, {2, 10}, {3, 2}}\n * > reArrangeTuples(vector<vector<int>>{{5, 4}, {2, 10}, {3, 11}, {4, 3}}, vector<int>{3, 4, 2, 3})\n * {{3, 11}, {4, 3}, {2, 10}, {3, 11}}\n * > reArrangeTuples(vector<vector<int>>{{6, 3}, {3, 8}, {5, 7}, {2, 4}}, vector<int>{2, 5, 3, 6})\n * {{2, 4}, {5, 7}, {3, 8}, {6, 3}}\n */\nvector<vector<int>> reArrangeTuples(vector<vector<int>> testList, vector<int> ordList) {\n    unordered_map<int, vector<int>> mp;\n    for (const auto& tuple : testList) {\n        mp[tuple[0]] = tuple;\n    }\n    vector<vector<int>> result;\n    for (int num : ordList) {\n        if (mp.find(num) != mp.end()) {\n            result.push_back(mp[num]);\n        }\n    }\n    return result;\n}", "entry_point": "reArrangeTuples"}
{"task_id": "MBCPP/937", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to count the most common character in a given string.\n * > maxChar(string(\"hello world\"))\n * string(\"l\")\n * > maxChar(string(\"hello \"))\n * string(\"l\")\n * > maxChar(string(\"python pr\"))\n * string(\"p\")\n */\nstring maxChar(string str1) {\n    unordered_map<char, int> charCount;\n    for (char c : str1) {\n        if (c != ' ') {\n            charCount[c]++;\n        }\n    }\n\n    char maxChar = '\\0';\n    int maxCount = 0;\n    for (auto& pair : charCount) {\n        if (pair.second > maxCount) {\n            maxChar = pair.first;\n            maxCount = pair.second;\n        }\n    }\n\n    return string(1, maxChar);\n}", "entry_point": "maxChar"}
{"task_id": "MBCPP/938", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find three closest elements from three sorted arrays.\n * > findCloset(vector<int>{1, 4, 10}, vector<int>{2, 15, 20}, vector<int>{10, 12}, 3, 3, 2)\n * {10, 15, 10}\n * > findCloset(vector<int>{20, 24, 100}, vector<int>{2, 19, 22, 79, 800}, vector<int>{10, 12, 23, 24, 119}, 3, 5, 5)\n * {24, 22, 23}\n * > findCloset(vector<int>{2, 5, 11}, vector<int>{3, 16, 21}, vector<int>{11, 13}, 3, 3, 2)\n * {11, 16, 11}\n */\nvector<int> findCloset(vector<int> a, vector<int> b, vector<int> c, int p, int q, int r) {\n    int i = 0, j = 0, k = 0;\n    int res_i = 0, res_j = 0, res_k = 0;\n    int min_diff = INT_MAX;\n\n    while (i < p && j < q && k < r) {\n        int minimum = min(a[i], min(b[j], c[k]));\n        int maximum = max(a[i], max(b[j], c[k]));\n        int curr_diff = maximum - minimum;\n\n        if (curr_diff < min_diff) {\n            min_diff = curr_diff;\n            res_i = i;\n            res_j = j;\n            res_k = k;\n        }\n\n        if (min_diff == 0)\n            break;\n\n        if (a[i] == minimum)\n            i++;\n        else if (b[j] == minimum)\n            j++;\n        else\n            k++;\n    }\n\n    return {a[res_i], b[res_j], c[res_k]};\n}", "entry_point": "findCloset"}
{"task_id": "MBCPP/940", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given array by using heap sort.\n * > heapSort(vector<int>{12, 2, 4, 5, 2, 3})\n * {2, 2, 3, 4, 5, 12}\n * > heapSort(vector<int>{32, 14, 5, 6, 7, 19})\n * {5, 6, 7, 14, 19, 32}\n * > heapSort(vector<int>{21, 15, 29, 78, 65})\n * {15, 21, 29, 65, 78}\n */\nvector<int> heapSort(vector<int> arr) {\n    int n = arr.size();\n\n    // Build max heap\n    for (int i = n / 2 - 1; i >= 0; i--)\n        heapify(arr, n, i);\n\n    // Extract elements from heap one by one\n    for (int i = n - 1; i > 0; i--) {\n        swap(arr[0], arr[i]);\n        heapify(arr, i, 0);\n    }\n\n    return arr;\n}\n\nvoid heapify(vector<int>& arr, int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < n && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != i) {\n        swap(arr[i], arr[largest]);\n        heapify(arr, n, largest);\n    }\n}", "entry_point": "heapSort"}
{"task_id": "MBCPP/942", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to check if any list element is present in the given list.\n * > checkElement(vector<int>{4, 5, 7, 9, 3}, vector<int>{6, 7, 10, 11})\n * true\n * > checkElement(vector<int>{1, 2, 3, 4}, vector<int>{4, 6, 7, 8, 9})\n * true\n * > checkElement(vector<int>{3, 2, 1, 4, 5}, vector<int>{9, 8, 7, 6})\n * false\n */\nbool checkElement(vector<int> testTup, vector<int> checkList) {\n    unordered_set<int> s(checkList.begin(), checkList.end());\n    for (int num : testTup) {\n        if (s.find(num) != s.end()) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "checkElement"}
{"task_id": "MBCPP/943", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to combine two given sorted lists using heapq module.\n * > combineLists(vector<int>{1, 3, 5, 7, 9, 11}, vector<int>{0, 2, 4, 6, 8, 10})\n * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}\n * > combineLists(vector<int>{1, 3, 5, 6, 8, 9}, vector<int>{2, 5, 7, 11}\n * {1, 2, 3, 5, 5, 6, 7, 8, 9, 11}\n * > combineLists(vector<int>{1, 3, 7}, vector<int>{2, 4, 6})\n * {1, 2, 3, 4, 6, 7}\n */\nvector<int> combineLists(vector<int> num1, vector<int> num2) {\n    vector<int> result;\n    int i = 0, j = 0;\n    while (i < num1.size() && j < num2.size()) {\n        if (num1[i] < num2[j]) {\n            result.push_back(num1[i]);\n            i++;\n        } else {\n            result.push_back(num2[j]);\n            j++;\n        }\n    }\n    while (i < num1.size()) {\n        result.push_back(num1[i]);\n        i++;\n    }\n    while (j < num2.size()) {\n        result.push_back(num2[j]);\n        j++;\n    }\n    return result;\n}", "entry_point": "combineLists"}
{"task_id": "MBCPP/944", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to separate and print the numbers and their position of a given string.\n * > numPosition(string(\"there are 70 flats in this apartment\"))\n * 10\n * > numPosition(string(\"every adult have 32 teeth\"))\n * 17\n * > numPosition(string(\"isha has 79 chocolates in her bag\"))\n * 9\n */\nint numPosition(string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (isdigit(text[i])) {\n            return i;\n        }\n    }\n    return -1;\n}", "entry_point": "numPosition"}
{"task_id": "MBCPP/945", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert the given tuples into set.\n * > tupleToSet(vector<string>{string(\"x\"), string(\"y\"), string(\"z\")})\n * {string(\"y\"), string(\"z\"), string(\"x\")}\n * > tupleToSet(vector<string>{string(\"a\"), string(\"b\"), string(\"c\")})\n * {string(\"b\"), string(\"c\"), string(\"a\")}\n * > tupleToSet(vector<string>{string(\"z\"), string(\"d\"), string(\"e\")})\n * {string(\"e\"), string(\"d\"), string(\"z\")}\n */\nunordered_set<string> tupleToSet(vector<string> t) {\n    unordered_set<string> s(t.begin(), t.end());\n    return s;\n}", "entry_point": "tupleToSet"}
{"task_id": "MBCPP/947", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the length of the shortest word.\n * > lenLog(vector<string>{string(\"win\"), string(\"lose\"), string(\"great\")})\n * 3\n * > lenLog(vector<string>{string(\"a\"), string(\"ab\"), string(\"abc\")})\n * 1\n * > lenLog(vector<string>{string(\"12\"), string(\"12\"), string(\"1234\")})\n * 2\n */\nint lenLog(vector<string> list1) {\n    int minLength = INT_MAX;\n    for (const string& word : list1) {\n        if (word.length() < minLength) {\n            minLength = word.length();\n        }\n    }\n    return minLength;\n}", "entry_point": "lenLog"}
{"task_id": "MBCPP/949", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to sort the given tuple list basis the total digits in tuple.\n * > sortList(vector<vector<int>>{{3, 4, 6, 723}, {1, 2}, {12345}, {134, 234, 34}})\n * string(\"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\")\n * > sortList(vector<vector<int>>{{3, 4, 8}, {1, 2}, {1234335}, {1345, 234, 334}})\n * string(\"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\")\n * > sortList(vector<vector<int>>{{34, 4, 61, 723}, {1, 2}, {145}, {134, 23}})\n * string(\"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\")\n */\nstring sortList(vector<vector<int>> testList) {\n    auto countDigits = [](const vector<int>& tuple) {\n        int count = 0;\n        for (int num : tuple) {\n            string s = to_string(num);\n            count += s.length();\n        }\n        return count;\n    };\n\n    sort(testList.begin(), testList.end(), [&](const vector<int>& a, const vector<int>& b) {\n        return countDigits(a) < countDigits(b);\n    });\n\n    string result = \"[\";\n    for (size_t i = 0; i < testList.size(); ++i) {\n        result += \"(\";\n        for (size_t j = 0; j < testList[i].size(); ++j) {\n            result += to_string(testList[i][j]);\n            if (j != testList[i].size() - 1) {\n                result += \", \";\n            }\n        }\n        result += \")\";\n        if (i != testList.size() - 1) {\n            result += \", \";\n        }\n    }\n    result += \"]\";\n    return result;\n}", "entry_point": "sortList"}
{"task_id": "MBCPP/950", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to display sign of the chinese zodiac for given year.\n * > chineseZodiac(1997)\n * string(\"Ox\")\n * > chineseZodiac(1998)\n * string(\"Tiger\")\n * > chineseZodiac(1994)\n * string(\"Dog\")\n */\nstring chineseZodiac(int year) {\n    string zodiac[] = {\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\"};\n    return zodiac[year % 12];\n}", "entry_point": "chineseZodiac"}
{"task_id": "MBCPP/951", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum of similar indices in two lists of tuples.\n * > maxSimilarIndices(vector<vector<int>>{{2, 4}, {6, 7}, {5, 1}}, vector<vector<int>>{{5, 4}, {8, 10}, {8, 14}})\n * {{5, 4}, {8, 10}, {8, 14}}\n * > maxSimilarIndices(vector<vector<int>>{{3, 5}, {7, 8}, {6, 2}}, vector<vector<int>>{{6, 5}, {9, 11}, {9, 15}})\n * {{6, 5}, {9, 11}, {9, 15}}\n * > maxSimilarIndices(vector<vector<int>>{{4, 6}, {8, 9}, {7, 3}}, vector<vector<int>>{{7, 6}, {10, 12}, {10\u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98\u7f51 \u6781\u901f\u8d5b\u8f66\u5f00\u5956\u7ed3\u679c\u67e5\u8be2\u5b98", "entry_point": "maxSimilarIndices"}
{"task_id": "MBCPP/952", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to compute the value of ncr mod p.\n * > ncrModP(10, 2, 13)\n * 6\n * > ncrModP(11, 3, 14)\n * 11\n * > ncrModP(18, 14, 19)\n * 1\n */\nint ncrModP(int n, int r, int p) {\n    if (r > n)\n        return 0;\n    if (r == 0 || r == n)\n        return 1;\n    if (r > n - r)\n        r = n - r;\n    int res = 1;\n    for (int i = 0; i < r; i++) {\n        res = (res * (n - i)) % p;\n        res = (res * modInverse(i + 1, p)) % p;\n    }\n    return res;\n}\n\nint modInverse(int a, int p) {\n    int m0 = p, t, q;\n    int x0 = 0, x1 = 1;\n    if (p == 1)\n        return 0;\n    while (a > 1) {\n        q = a / p;\n        t = p;\n        p = a % p;\n        a = t;\n        t = x0;\n        x0 = x1 - q * x0;\n        x1 = t;\n    }\n    if (x1 < 0)\n        x1 += m0;\n    return x1;\n}", "entry_point": "ncrModP"}
{"task_id": "MBCPP/953", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the minimun number of subsets with distinct elements.\n * > subset(vector<int>{1, 2, 3, 4}, 4)\n * 1\n * > subset(vector<int>{5, 6, 9, 3, 4, 3, 4}, 7)\n * 2\n * > subset(vector<int>{1, 2, 3}, 3)\n * 1\n */\nint subset(vector<int> ar, int n) {\n    unordered_map<int, int> freq;\n    int max_freq = 0;\n    for (int i = 0; i < n; i++) {\n        freq[ar[i]]++;\n        if (freq[ar[i]] > max_freq)\n            max_freq = freq[ar[i]];\n    }\n    return max_freq;\n}", "entry_point": "subset"}
{"task_id": "MBCPP/955", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find out, if the given number is abundant.\n * > isAbundant(12)\n * true\n * > isAbundant(13)\n * false\n * > isAbundant(9)\n * false\n */\nbool isAbundant(int n) {\n    if (n < 1)\n        return false;\n    \n    int sum = 0;\n    for (int i = 1; i <= n / 2; ++i) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    \n    return sum > n;\n}", "entry_point": "isAbundant"}
{"task_id": "MBCPP/956", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to split the given string at uppercase letters by using regex.\n * > splitList(string(\"LearnToBuildAnythingWithGoogle\"))\n * {string(\"Learn\"), string(\"To\"), string(\"Build\"), string(\"Anything\"), string(\"With\"), string(\"Google\")}\n * > splitList(string(\"ApmlifyingTheBlack+DeveloperCommunity\"))\n * {string(\"Apmlifying\"), string(\"The\"), string(\"Black+\"), string(\"Developer\"), string(\"Community\")}\n * > splitList(string(\"UpdateInTheGoEcoSystem\"))\n * {string(\"Update\"), string(\"In\"), string(\"The\"), string(\"Go\"), string(\"Eco\"), string(\"System\")}\n */\nvector<string> splitList(string text) {\n    vector<string> result;\n    string temp;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!temp.empty()) {\n                result.push_back(temp);\n            }\n            temp = ch;\n        } else {\n            temp += ch;\n        }\n    }\n    if (!temp.empty()) {\n        result.push_back(temp);\n    }\n    return result;\n}", "entry_point": "splitList"}
{"task_id": "MBCPP/957", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to get the position of rightmost set bit.\n * > getFirstSetBitPos(12)\n * 3\n * > getFirstSetBitPos(18)\n * 2\n * > getFirstSetBitPos(16)\n * 5\n */\nint getFirstSetBitPos(int n) {\n    if (n == 0)\n        return 0;\n    return log2(n & -n) + 1;\n}", "entry_point": "getFirstSetBitPos"}
{"task_id": "MBCPP/958", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert an integer into a roman numeral.\n * > intToRoman(1)\n * string(\"I\")\n * > intToRoman(50)\n * string(\"L\")\n * > intToRoman(4)\n * string(\"IV\")\n */\nstring intToRoman(int num) {\n    string roman;\n    vector<pair<int, string>> valueSymbols = {\n        {1000, \"M\"}, {900, \"CM\"}, {500, \"D\"}, {400, \"CD\"},\n        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"}, {40, \"XL\"},\n        {10, \"X\"}, {9, \"IX\"}, {5, \"V\"}, {4, \"IV\"}, {1, \"I\"}\n    };\n    \n    for (const auto& [value, symbol] : valueSymbols) {\n        while (num >= value) {\n            roman += symbol;\n            num -= value;\n        }\n    }\n    \n    return roman;\n}", "entry_point": "intToRoman"}
{"task_id": "MBCPP/960", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to solve tiling problem.\n * > getNoofways(4)\n * 3\n * > getNoofways(3)\n * 2\n * > getNoofways(5)\n * 5\n */\nint getNoofways(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    int dp[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    dp[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n}", "entry_point": "getNoofways"}
{"task_id": "MBCPP/961", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert a roman numeral to an integer.\n * > romanToInt(string(\"MMMCMLXXXVI\"))\n * 3986\n * > romanToInt(string(\"MMMM\"))\n * 4000\n * > romanToInt(string(\"C\"))\n * 100\n */\nint romanToInt(string s) {\n    unordered_map<char, int> roman = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n    };\n    \n    int total = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i + 1 < s.length() && roman[s[i]] < roman[s[i + 1]]) {\n            total += roman[s[i + 1]] - roman[s[i]];\n            i++;\n        } else {\n            total += roman[s[i]];\n        }\n    }\n    return total;\n}", "entry_point": "romanToInt"}
{"task_id": "MBCPP/962", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find the sum of all even natural numbers within the range l and r.\n * > sumEven(2, 5)\n * 6\n * > sumEven(3, 8)\n * 18\n * > sumEven(4, 6)\n * 10\n */\nint sumEven(int l, int r) {\n    int sum = 0;\n    for (int i = l; i <= r; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}", "entry_point": "sumEven"}
{"task_id": "MBCPP/964", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to check whether the length of the word is even or not.\n * > wordLen(string(\"program\"))\n * false\n * > wordLen(string(\"solution\"))\n * true\n * > wordLen(string(\"data\"))\n * true\n */\nbool wordLen(string s) {\n    return s.length() % 2 == 0;\n}", "entry_point": "wordLen"}
{"task_id": "MBCPP/965", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to convert camel case string to snake case string.\n * > camelToSnake(string(\"PythonProgram\"))\n * string(\"python_program\")\n * > camelToSnake(string(\"pythonLanguage\"))\n * string(\"python_language\")\n * > camelToSnake(string(\"ProgrammingLanguage\"))\n * string(\"programming_language\")\n */\nstring camelToSnake(string text) {\n    string result;\n    for (char ch : text) {\n        if (isupper(ch)) {\n            if (!result.empty()) {\n                result += '_';\n            }\n            result += tolower(ch);\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}", "entry_point": "camelToSnake"}
{"task_id": "MBCPP/967", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to accept the strings which contains all vowels.\n * > check(string(\"SEEquoiaL\"))\n * string(\"accepted\")\n * > check(string(\"program\"))\n * string(\"not accepted\")\n * > check(string(\"fine\"))\n * string(\"not accepted\")\n */\nstring check(string str) {\n    unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    unordered_set<char> foundVowels;\n    \n    for (char ch : str) {\n        char lowerCh = tolower(ch);\n        if (vowels.find(lowerCh) != vowels.end()) {\n            foundVowels.insert(lowerCh);\n        }\n    }\n    \n    if (foundVowels.size() == vowels.size()) {\n        return \"accepted\";\n    } else {\n        return \"not accepted\";\n    }\n}", "entry_point": "check"}
{"task_id": "MBCPP/968", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find maximum possible value for the given periodic function.\n * > floorMax(11, 10, 9)\n * 9\n * > floorMax(5, 7, 4)\n * 2\n * > floorMax(2, 2, 1)\n * 1\n */\nint floorMax(int a, int b, int n) {\n    int max_val = 0;\n    for (int x = 0; x <= n; x++) {\n        int current = (a * x) % b;\n        if (current > max_val) {\n            max_val = current;\n        }\n    }\n    return max_val;\n}", "entry_point": "floorMax"}
{"task_id": "MBCPP/969", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to join the tuples if they have similar initial elements.\n * > joinTuples(vector<vector<int>>{{5, 6}, {5, 7}, {6, 8}, {6, 10}, {7, 13}})\n * {{5, 6, 7}, {6, 8, 10}, {7, 13}}\n * > joinTuples(vector<vector<int>>{{6, 7}, {6, 8}, {7, 9}, {7, 11}, {8, 14}})\n * {{6, 7, 8}, {7, 9, 11}, {8, 14}}\n * > joinTuples(vector<vector<int>>{{7, 8}, {7, 9}, {8, 10}, {8, 12}, {9, 15}})\n * {{7, 8, 9}, {8, 10, 12}, {9, 15}}\n */\nvector<vector<int>> joinTuples(vector<vector<int>> testList) {\n    map<int, vector<int>> mp;\n    for (auto& tuple : testList) {\n        mp[tuple[0]].insert(mp[tuple[0]].end(), tuple.begin() + 1, tuple.end());\n    }\n    vector<vector<int>> result;\n    for (auto& [key, values] : mp) {\n        vector<int> temp = {key};\n        temp.insert(temp.end(), values.begin(), values.end());\n        result.push_back(temp);\n    }\n    return result;\n}", "entry_point": "joinTuples"}
{"task_id": "MBCPP/970", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find minimum of two numbers.\n * > minOfTwo(10, 20)\n * 10\n * > minOfTwo(19, 15)\n * 15\n * > minOfTwo(-10, -20)\n * -20\n */\nint minOfTwo(int x, int y) {\n    return (x < y) ? x : y;\n}", "entry_point": "minOfTwo"}
{"task_id": "MBCPP/971", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n * > maximumSegments(7, 5, 2, 5)\n * 2\n * > maximumSegments(17, 2, 1, 3)\n * 17\n * > maximumSegments(18, 16, 3, 6)\n * 6\n */\nint maximumSegments(int n, int a, int b, int c) {\n    vector<int> dp(n + 1, -1);\n    dp[0] = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (i >= a && dp[i - a] != -1)\n            dp[i] = max(dp[i], dp[i - a] + 1);\n        if (i >= b && dp[i - b] != -1)\n            dp[i] = max(dp[i], dp[i - b] + 1);\n        if (i >= c && dp[i - c] != -1)\n            dp[i] = max(dp[i], dp[i - c] + 1);\n    }\n    return dp[n];\n}", "entry_point": "maximumSegments"}
{"task_id": "MBCPP/972", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to concatenate the given two tuples to a nested tuple.\n * > concatenateNested(vector<int>{3, 4}, vector<int>{5, 6})\n * {3, 4, 5, 6}\n * > concatenateNested(vector<int>{1, 2}, vector<int>{3, 4})\n * {1, 2, 3, 4}\n * > concatenateNested(vector<int>{4, 5}, vector<int>{6, 8})\n * {4, 5, 6, 8}\n */\nvector<int> concatenateNested(vector<int> testTup1, vector<int> testTup2) {\n    vector<int> result = testTup1;\n    result.insert(result.end(), testTup2.begin(), testTup2.end());\n    return result;\n}", "entry_point": "concatenateNested"}
{"task_id": "MBCPP/973", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to left rotate the string.\n * > leftRotate(string(\"python\"), 2)\n * string(\"thonpy\")\n * > leftRotate(string(\"bigdata\"), 3)\n * string(\"databig\")\n * > leftRotate(string(\"hadoop\"), 1)\n * string(\"adooph\")\n */\nstring leftRotate(string s, int d) {\n    int n = s.length();\n    d = d % n;\n    reverse(s.begin(), s.begin() + d);\n    reverse(s.begin() + d, s.end());\n    reverse(s.begin(), s.end());\n    return s;\n}", "entry_point": "leftRotate"}
{"task_id": "MBCPP/974", "code": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the minimum total path sum in the given triangle.\n * > minSumPath(vector<vector<int>>{{2}, {3, 9}, {1, 6, 7}})\n * 6\n * > minSumPath(vector<vector<int>>{{2}, {3, 7}, {8, 5, 6}})\n * 10\n * > minSumPath(vector<vector<int>>{{3}, {6, 4}, {5, 2, 7}})\n * 9\n */\nint minSumPath(vector<vector<int>> a) {\n    int n = a.size();\n    for (int i = n - 2; i >= 0; --i) {\n        for (int j = 0; j <= i; ++j) {\n            a[i][j] += min(a[i + 1][j], a[i + 1][j + 1]);\n        }\n    }\n    return a[0][0];\n}", "entry_point": "minSumPath"}
