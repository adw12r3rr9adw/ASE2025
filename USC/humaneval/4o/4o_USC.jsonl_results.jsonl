{"task_id": "CPP/0", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    sort(numbers.begin(), numbers.end());\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        if (fabs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "has_close_elements", "result": "passed", "passed": true}
{"task_id": "CPP/1", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string current_group;\n    int balance = 0;\n    \n    for (char c : paren_string) {\n        if (c == ' ') continue;\n        \n        current_group += c;\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n        }\n        \n        if (balance == 0 && !current_group.empty()) {\n            result.push_back(current_group);\n            current_group.clear();\n        }\n    }\n    \n    return result;\n}", "entry_point": "separate_paren_groups", "result": "passed", "passed": true}
{"task_id": "CPP/2", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number - floor(number);\n}", "entry_point": "truncate_number", "result": "passed", "passed": true}
{"task_id": "CPP/3", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "below_zero", "result": "passed", "passed": true}
{"task_id": "CPP/4", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0.0;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    \n    float mad = 0.0;\n    for (float num : numbers) {\n        mad += fabs(num - mean);\n    }\n    \n    return mad / numbers.size();\n}", "entry_point": "mean_absolute_deviation", "result": "passed", "passed": true}
{"task_id": "CPP/5", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}", "entry_point": "intersperse", "result": "passed", "passed": true}
{"task_id": "CPP/6", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> depths;\n    int current_depth = 0, max_depth = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n            current_depth++;\n            if (current_depth > max_depth) {\n                max_depth = current_depth;\n            }\n        } else if (c == ')') {\n            current_depth--;\n        } else if (c == ' ') {\n            depths.push_back(max_depth);\n            current_depth = 0;\n            max_depth = 0;\n        }\n    }\n    depths.push_back(max_depth); // Add the last group's depth\n    return depths;\n}", "entry_point": "parse_nested_parens", "result": "passed", "passed": true}
{"task_id": "CPP/7", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}", "entry_point": "filter_by_substring", "result": "passed", "passed": true}
{"task_id": "CPP/8", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};\n}", "entry_point": "sum_product", "result": "passed", "passed": true}
{"task_id": "CPP/9", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    if (numbers.empty()) return result;\n    \n    int current_max = numbers[0];\n    result.push_back(current_max);\n    \n    for (size_t i = 1; i < numbers.size(); ++i) {\n        current_max = max(current_max, numbers[i]);\n        result.push_back(current_max);\n    }\n    \n    return result;\n}", "entry_point": "rolling_max", "result": "passed", "passed": true}
{"task_id": "CPP/10", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    int n = str.size();\n    for (int i = n; i >= 0; --i) {\n        if (is_palindrome(str.substr(0, i))) {\n            string suffix = str.substr(i);\n            reverse(suffix.begin(), suffix.end());\n            return str + suffix;\n        }\n    }\n    return str; // This line is technically unreachable\n}", "entry_point": "make_palindrome", "result": "Program failed: temp_program.exe: /tmp/tmp_yx6c7xv/temp.cpp:29: int main(): Assertion `make_palindrome(\"xyz\") == \"xyzyx\"' failed.\n", "passed": false}
{"task_id": "CPP/11", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}", "entry_point": "string_xor", "result": "passed", "passed": true}
{"task_id": "CPP/12", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    if (strings.empty())\n        return \"None\";\n    string longestStr = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestStr.length()) {\n            longestStr = str;\n        }\n    }\n    return longestStr;\n}", "entry_point": "longest", "result": "Program failed: temp_program.exe: /tmp/tmp3jeicsta/temp.cpp:24: int main(): Assertion `longest({}) == \"\"' failed.\n", "passed": false}
{"task_id": "CPP/13", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "entry_point": "greatest_common_divisor", "result": "passed", "passed": true}
{"task_id": "CPP/14", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}", "entry_point": "all_prefixes", "result": "passed", "passed": true}
{"task_id": "CPP/15", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string result;\n    for (int i = 0; i <= n; ++i) {\n        if (i > 0) result += \" \";\n        result += to_string(i);\n    }\n    return result;\n}", "entry_point": "string_sequence", "result": "passed", "passed": true}
{"task_id": "CPP/16", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    vector<bool> seen(26, false);\n    int count = 0;\n    for (char c : str) {\n        if (isalpha(c) && !seen[c - 'a']) {\n            seen[c - 'a'] = true;\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "count_distinct_characters", "result": "Program failed: temp_program.exe: /tmp/tmp4j3wjuq_/temp.cpp:29: int main(): Assertion `count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5' failed.\n", "passed": false}
{"task_id": "CPP/17", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    size_t pos = 0;\n    while (pos < music_string.length()) {\n        if (music_string[pos] == 'o') {\n            if (pos + 1 < music_string.length() && music_string[pos + 1] == '|') {\n                beats.push_back(2);\n                pos += 2;\n            } else {\n                beats.push_back(4);\n                pos += 1;\n            }\n        } else if (music_string[pos] == '.' && pos + 1 < music_string.length() && music_string[pos + 1] == '|') {\n            beats.push_back(1);\n            pos += 2;\n        } else {\n            pos += 1; // Skip any spaces or unrecognized characters\n        }\n    }\n    return beats;\n}", "entry_point": "parse_music", "result": "passed", "passed": true}
{"task_id": "CPP/18", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    int count = 0;\n    size_t pos = str.find(substring);\n    while (pos != string::npos) {\n        count++;\n        pos = str.find(substring, pos + 1);\n    }\n    return count;\n}", "entry_point": "how_many_times", "result": "passed", "passed": true}
{"task_id": "CPP/19", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string, int> num_map = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    map<int, string> rev_map = {{0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"}, {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}};\n    vector<string> words;\n    string word;\n    stringstream ss(numbers);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    sort(words.begin(), words.end(), [&](const string &a, const string &b) {\n        return num_map[a] < num_map[b];\n    });\n    string result;\n    for (int i = 0; i < words.size(); ++i) {\n        if (i > 0) result += \" \";\n        result += words[i];\n    }\n    return result;\n}", "entry_point": "sort_numbers", "result": "passed", "passed": true}
{"task_id": "CPP/20", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    sort(numbers.begin(), numbers.end());\n    float min_diff = fabs(numbers[1] - numbers[0]);\n    pair<float, float> closest_pair = {numbers[0], numbers[1]};\n    \n    for (size_t i = 1; i < numbers.size() - 1; ++i) {\n        float diff = fabs(numbers[i + 1] - numbers[i]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {numbers[i], numbers[i + 1]};\n        }\n    }\n    \n    return {closest_pair.first, closest_pair.second};\n}", "entry_point": "find_closest_elements", "result": "passed", "passed": true}
{"task_id": "CPP/21", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    for (auto& num : numbers) {\n        num = (num - min_val) / (max_val - min_val);\n    }\n    return numbers;\n}", "entry_point": "rescale_to_unit", "result": "passed", "passed": true}
{"task_id": "CPP/22", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}", "entry_point": "filter_integers", "result": "passed", "passed": true}
{"task_id": "CPP/23", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}", "entry_point": "strlen", "result": "passed", "passed": true}
{"task_id": "CPP/24", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i = n / 2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // This line is technically unreachable for n > 1\n}", "entry_point": "largest_divisor", "result": "passed", "passed": true}
{"task_id": "CPP/25", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}", "entry_point": "factorize", "result": "passed", "passed": true}
{"task_id": "CPP/26", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    unordered_map<int, int> count;\n    for (int num : numbers) {\n        count[num]++;\n    }\n    for (int num : numbers) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "remove_duplicates", "result": "passed", "passed": true}
{"task_id": "CPP/27", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    for (char &c : str) {\n        if (islower(c))\n            c = toupper(c);\n        else if (isupper(c))\n            c = tolower(c);\n    }\n    return str;\n}", "entry_point": "flip_case", "result": "Compilation failed: In file included from /tmp/tmpc5o84ehu/temp.cpp:19:\n/tmp/tmpc5o84ehu/temp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpc5o84ehu/temp.cpp:21:13: error: \u2018flip_case\u2019 was not declared in this scope; did you mean \u2018filp_case\u2019?\n   21 |     assert (flip_case(\"\") == \"\");\n      |             ^~~~~~~~~\n", "passed": false}
{"task_id": "CPP/28", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}", "entry_point": "concatenate", "result": "passed", "passed": true}
{"task_id": "CPP/29", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const auto& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}", "entry_point": "filter_by_prefix", "result": "passed", "passed": true}
{"task_id": "CPP/30", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "get_positive", "result": "passed", "passed": true}
{"task_id": "CPP/31", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (long long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}", "entry_point": "is_prime", "result": "passed", "passed": true}
{"task_id": "CPP/32", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double left = -1e6, right = 1e6, mid;\n    while (right - left > 1e-7) {\n        mid = (left + right) / 2;\n        if (poly(xs, mid) * poly(xs, left) <= 0)\n            right = mid;\n        else\n            left = mid;\n    }\n    return mid;\n}", "entry_point": "find_zero", "result": "passed", "passed": true}
{"task_id": "CPP/33", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> result = l;\n    vector<int> divisible_by_three;\n    \n    // Collect elements at indices divisible by three\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            divisible_by_three.push_back(l[i]);\n        }\n    }\n    \n    // Sort the collected elements\n    sort(divisible_by_three.begin(), divisible_by_three.end());\n    \n    // Place sorted elements back into their original positions\n    size_t index = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result[i] = divisible_by_three[index++];\n        }\n    }\n    \n    return result;\n}", "entry_point": "sort_third", "result": "passed", "passed": true}
{"task_id": "CPP/34", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}", "entry_point": "unique", "result": "passed", "passed": true}
{"task_id": "CPP/35", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n    float max_val = l[0];\n    for (float num : l) {\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    return max_val;\n}", "entry_point": "max_element", "result": "passed", "passed": true}
{"task_id": "CPP/36", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int temp = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n                    count++;\n                }\n                temp /= 10;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "fizz_buzz", "result": "passed", "passed": true}
{"task_id": "CPP/37", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> even_indices;\n    for (int i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    for (int i = 0, j = 0; i < l.size(); i += 2, j++) {\n        l[i] = even_indices[j];\n    }\n    return l;\n}", "entry_point": "sort_even", "result": "passed", "passed": true}
{"task_id": "CPP/38", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x[2] + x.substr(0, 2);\n        output = output + x;\n    }\n    return output;\n}", "entry_point": "decode_cyclic", "result": "Compilation failed: /tmp/tmp_7qkan0r/temp.cpp: In function \u2018std::string decode_cyclic(std::string)\u2019:\n/tmp/tmp_7qkan0r/temp.cpp:45:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main(){\n      |           ^\n/tmp/tmp_7qkan0r/temp.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmp_7qkan0r/temp.cpp:24:31: note: to match this \u2018{\u2019\n   24 | string decode_cyclic(string s){\n      |                               ^\n/tmp/tmp_7qkan0r/temp.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/39", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    auto is_prime = [](int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    };\n\n    int count = 0;\n    int a = 0, b = 1;\n    while (true) {\n        int fib = a + b;\n        a = b;\n        b = fib;\n        if (is_prime(fib)) {\n            count++;\n            if (count == n) return fib;\n        }\n    }\n}", "entry_point": "prime_fib", "result": "passed", "passed": true}
{"task_id": "CPP/40", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    if (n < 3) return false;\n    sort(l.begin(), l.end());\n    for (int i = 0; i < n - 2; ++i) {\n        if (i > 0 && l[i] == l[i - 1]) continue; // Skip duplicates\n        int left = i + 1, right = n - 1;\n        while (left < right) {\n            int sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                ++left;\n            } else {\n                --right;\n            }\n        }\n    }\n    return false;\n}", "entry_point": "triples_sum_to_zero", "result": "passed", "passed": true}
{"task_id": "CPP/41", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n;\n}", "entry_point": "car_race_collision", "result": "Program failed: temp_program.exe: /tmp/tmpl6vbjop8/temp.cpp:14: int main(): Assertion `car_race_collision(2) == 4' failed.\n", "passed": false}
{"task_id": "CPP/42", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i = 0; i < l.size(); ++i) {\n        l[i] += 1;\n    }\n    return l;\n}", "entry_point": "incr_list", "result": "passed", "passed": true}
{"task_id": "CPP/43", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "entry_point": "pairs_sum_to_zero", "result": "passed", "passed": true}
{"task_id": "CPP/44", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    if (x == 0) return \"0\";\n    string result = \"\";\n    while (x > 0) {\n        result = char('0' + x % base) + result;\n        x /= base;\n    }\n    return result;\n}", "entry_point": "change_base", "result": "passed", "passed": true}
{"task_id": "CPP/45", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}", "entry_point": "triangle_area", "result": "passed", "passed": true}
{"task_id": "CPP/46", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int a = 0, b = 0, c = 2, d = 0, e;\n    for (int i = 4; i <= n; ++i) {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return d;\n}", "entry_point": "fib4", "result": "passed", "passed": true}
{"task_id": "CPP/47", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}", "entry_point": "median", "result": "passed", "passed": true}
{"task_id": "CPP/48", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "entry_point": "is_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/49", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    long long result = 1;\n    long long base = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n    return result;\n}", "entry_point": "modp", "result": "passed", "passed": true}
{"task_id": "CPP/50", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}", "entry_point": "decode_shift", "result": "passed", "passed": true}
{"task_id": "CPP/51", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string result;\n    for (char c : text) {\n        if (!strchr(\"aeiouAEIOU\", c)) {\n            result += c;\n        }\n    }\n    return result;\n}", "entry_point": "remove_vowels", "result": "passed", "passed": true}
{"task_id": "CPP/52", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "below_threshold", "result": "passed", "passed": true}
{"task_id": "CPP/53", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x + y;\n}", "entry_point": "add", "result": "passed", "passed": true}
{"task_id": "CPP/54", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    sort(s0.begin(), s0.end());\n    s0.erase(unique(s0.begin(), s0.end()), s0.end());\n    sort(s1.begin(), s1.end());\n    s1.erase(unique(s1.begin(), s1.end()), s1.end());\n    return s0 == s1;\n}", "entry_point": "same_chars", "result": "passed", "passed": true}
{"task_id": "CPP/55", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}", "entry_point": "fib", "result": "passed", "passed": true}
{"task_id": "CPP/56", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    return balance == 0;\n}", "entry_point": "correct_bracketing", "result": "passed", "passed": true}
{"task_id": "CPP/57", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    bool increasing = true, decreasing = true;\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}", "entry_point": "monotonic", "result": "passed", "passed": true}
{"task_id": "CPP/58", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}", "entry_point": "common", "result": "passed", "passed": true}
{"task_id": "CPP/59", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    int largest_factor = 1;\n    while (n % 2 == 0) {\n        largest_factor = 2;\n        n /= 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest_factor = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        largest_factor = n;\n    }\n    return largest_factor;\n}", "entry_point": "largest_prime_factor", "result": "passed", "passed": true}
{"task_id": "CPP/60", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n * (n + 1) / 2;\n}", "entry_point": "sum_to_n", "result": "passed", "passed": true}
{"task_id": "CPP/61", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}", "entry_point": "correct_bracketing", "result": "passed", "passed": true}
{"task_id": "CPP/62", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}", "entry_point": "derivative", "result": "passed", "passed": true}
{"task_id": "CPP/63", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    \n    int a = 0, b = 0, c = 1, result;\n    for (int i = 3; i <= n; ++i) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    return result;\n}", "entry_point": "fibfib", "result": "passed", "passed": true}
{"task_id": "CPP/64", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    int count = 0;\n    transform(s.begin(), s.end(), s.begin(), ::tolower);\n    for (int i = 0; i < s.length(); ++i) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i] == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "vowels_count", "result": "passed", "passed": true}
{"task_id": "CPP/65", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string s = to_string(x);\n    int n = s.length();\n    if (shift >= n) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    shift = shift % n;\n    return s.substr(n - shift) + s.substr(0, n - shift);\n}", "entry_point": "circular_shift", "result": "Program failed: temp_program.exe: /tmp/tmphswlmtod/temp.cpp:23: int main(): Assertion `circular_shift(12, 2) == \"12\"' failed.\n", "passed": false}
{"task_id": "CPP/66", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += c;\n        }\n    }\n    return sum;\n}", "entry_point": "digitSum", "result": "passed", "passed": true}
{"task_id": "CPP/67", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    int apples = 0, oranges = 0;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}", "entry_point": "fruit_distribution", "result": "passed", "passed": true}
{"task_id": "CPP/68", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    int smallest_even = -1;\n    int index = -1;\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even == -1 || arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                index = i;\n            }\n        }\n    }\n    if (index == -1) {\n        return {};\n    }\n    return {smallest_even, index};\n}", "entry_point": "pluck", "result": "passed", "passed": true}
{"task_id": "CPP/69", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    unordered_map<int, int> frequency;\n    for (int num : lst) {\n        frequency[num]++;\n    }\n    int result = -1;\n    for (const auto& [num, freq] : frequency) {\n        if (freq >= num && num > result) {\n            result = num;\n        }\n    }\n    return result;\n}", "entry_point": "search", "result": "passed", "passed": true}
{"task_id": "CPP/70", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n    while (left <= right) {\n        result.push_back(lst[left++]);\n        if (left <= right) {\n            result.push_back(lst[right--]);\n        }\n    }\n    return result;\n}", "entry_point": "strange_sort_list", "result": "passed", "passed": true}
{"task_id": "CPP/71", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}", "entry_point": "triangle_area", "result": "passed", "passed": true}
{"task_id": "CPP/72", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int n = q.size();\n    int sum = 0;\n    for (int i = 0; i < n; ++i) {\n        if (q[i] != q[n - i - 1]) {\n            return false; // Not a palindrome\n        }\n        sum += q[i];\n    }\n    return sum <= w;\n}", "entry_point": "will_it_fly", "result": "passed", "passed": true}
{"task_id": "CPP/73", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - i - 1]) {\n            ++changes;\n        }\n    }\n    return changes;\n}", "entry_point": "smallest_change", "result": "passed", "passed": true}
{"task_id": "CPP/74", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int sum1 = 0, sum2 = 0;\n    for (const auto& str : lst1) {\n        sum1 += str.size();\n    }\n    for (const auto& str : lst2) {\n        sum2 += str.size();\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else if (sum2 < sum1) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}", "entry_point": "total_match", "result": "passed", "passed": true}
{"task_id": "CPP/75", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    if (a < 2) return false;\n    \n    int count = 0;\n    for (int i = 2; i <= a && count < 3; i++) {\n        while (a % i == 0) {\n            a /= i;\n            count++;\n        }\n    }\n    \n    return count == 3;\n}", "entry_point": "is_multiply_prime", "result": "Program failed: temp_program.exe: /tmp/tmp0japcfaz/temp.cpp:30: int main(): Assertion `is_multiply_prime(3 * 6 * 7) == false' failed.\n", "passed": false}
{"task_id": "CPP/76", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    if (x < 1 || n < 1) return false;\n    if (x == 1) return true;\n    while (x % n == 0) {\n        x /= n;\n    }\n    return x == 1;\n}", "entry_point": "is_simple_power", "result": "timed out", "passed": false}
{"task_id": "CPP/77", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    int cubeRoot = round(cbrt(a));\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}", "entry_point": "iscube", "result": "passed", "passed": true}
{"task_id": "CPP/78", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    int prime_count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            prime_count++;\n        }\n    }\n    return prime_count;\n}", "entry_point": "hex_key", "result": "passed", "passed": true}
{"task_id": "CPP/79", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string binary = \"\";\n    if (decimal == 0) {\n        binary = \"0\";\n    } else {\n        while (decimal > 0) {\n            binary = char((decimal % 2) + '0') + binary;\n            decimal /= 2;\n        }\n    }\n    return \"db\" + binary + \"db\";\n}", "entry_point": "decimal_to_binary", "result": "passed", "passed": true}
{"task_id": "CPP/80", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length() < 3)\n        return false;\n    for (size_t i = 0; i <= s.length() - 3; ++i) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}", "entry_point": "is_happy", "result": "passed", "passed": true}
{"task_id": "CPP/81", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letterGrades;\n    for (float gpa : grades) {\n        if (gpa == 4.0) {\n            letterGrades.push_back(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrades.push_back(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrades.push_back(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrades.push_back(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrades.push_back(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrades.push_back(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrades.push_back(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrades.push_back(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrades.push_back(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrades.push_back(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrades.push_back(\"D\");\n        } else if (gpa > 0.0) {\n            letterGrades.push_back(\"D-\");\n        } else {\n            letterGrades.push_back(\"E\");\n        }\n    }\n    return letterGrades;\n}", "entry_point": "numerical_letter_grade", "result": "Program failed: temp_program.exe: /tmp/tmpur_15kvy/temp.cpp:54: int main(): Assertion `issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"})' failed.\n", "passed": false}
{"task_id": "CPP/82", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int length = str.length();\n    if (length <= 1) return false;\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) return false;\n    }\n    return true;\n}", "entry_point": "prime_length", "result": "passed", "passed": true}
{"task_id": "CPP/83", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n == 1)\n        return 1; // Only the number 1 is a 1-digit number starting or ending with 1\n    return 18 * pow(10, n - 2); // 9 * 2 * 10^(n-2) for n-digit numbers starting or ending with 1\n}", "entry_point": "starts_one_ends", "result": "passed", "passed": true}
{"task_id": "CPP/84", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    return bitset<32>(sum).to_string().substr(bitset<32>(sum).to_string().find('1'));\n}", "entry_point": "solve", "result": "passed", "passed": true}
{"task_id": "CPP/85", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "entry_point": "add", "result": "passed", "passed": true}
{"task_id": "CPP/86", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string result;\n    string word;\n    for (char c : s) {\n        if (c == ' ') {\n            sort(word.begin(), word.end());\n            result += word + ' ';\n            word.clear();\n        } else {\n            word += c;\n        }\n    }\n    sort(word.begin(), word.end());\n    result += word;\n    return result;\n}", "entry_point": "anti_shuffle", "result": "passed", "passed": true}
{"task_id": "CPP/87", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return result;\n}", "entry_point": "get_row", "result": "passed", "passed": true}
{"task_id": "CPP/88", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.empty()) return array;\n    vector<int> sorted_array = array;\n    int sum = array.front() + array.back();\n    if (sum % 2 == 0) {\n        sort(sorted_array.begin(), sorted_array.end(), greater<int>());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n    return sorted_array;\n}", "entry_point": "sort_array", "result": "passed", "passed": true}
{"task_id": "CPP/89", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            char offset = islower(s[i]) ? 'a' : 'A';\n            s[i] = (s[i] - offset + 4) % 26 + offset;\n        }\n    }\n    return s;\n}", "entry_point": "encrypt", "result": "passed", "passed": true}
{"task_id": "CPP/90", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2)\n        return -1; // Assuming -1 is used to represent None for integer return type\n    sort(lst.begin(), lst.end());\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] != lst[0])\n            return lst[i];\n    }\n    return -1; // Return -1 if no second smallest element is found\n}", "entry_point": "next_smallest", "result": "passed", "passed": true}
{"task_id": "CPP/91", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    int count = 0;\n    bool newSentence = true;\n    for (char c : S) {\n        if (newSentence && c == 'I') {\n            count++;\n            newSentence = false;\n        }\n        if (c == '.' || c == '?' || c == '!') {\n            newSentence = true;\n        } else if (c != ' ' && c != '\\t' && c != '\\n') {\n            newSentence = false;\n        }\n    }\n    return count;\n}", "entry_point": "is_bored", "result": "Program failed: temp_program.exe: /tmp/tmpagu55yny/temp.cpp:29: int main(): Assertion `is_bored(\"Is the sky blue?\") == 0' failed.\n", "passed": false}
{"task_id": "CPP/92", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (floor(a) != a || floor(b) != b || floor(c) != c)\n        return false;\n    return (a == b + c) || (b == a + c) || (c == a + b);\n}", "entry_point": "any_int", "result": "passed", "passed": true}
{"task_id": "CPP/93", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    for (char &c : message) {\n        if (isalpha(c)) {\n            // Swap case\n            c = islower(c) ? toupper(c) : tolower(c);\n            \n            // Replace vowels\n            if (c == 'a' || c == 'A') c = 'C';\n            else if (c == 'e' || c == 'E') c = 'G';\n            else if (c == 'i' || c == 'I') c = 'K';\n            else if (c == 'o' || c == 'O') c = 'Q';\n            else if (c == 'u' || c == 'U') c = 'W';\n        }\n    }\n    return message;\n}", "entry_point": "encode", "result": "Program failed: temp_program.exe: /tmp/tmp10hkspl8/temp.cpp:28: int main(): Assertion `encode(\"TEST\") == \"tgst\"' failed.\n", "passed": false}
{"task_id": "CPP/94", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    auto is_prime = [](int num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 == 0 || num % 3 == 0) return false;\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) return false;\n        }\n        return true;\n    };\n\n    int largest_prime = -1;\n    for (int num : lst) {\n        if (is_prime(num) && num > largest_prime) {\n            largest_prime = num;\n        }\n    }\n\n    if (largest_prime == -1) return 0;\n\n    int sum_of_digits = 0;\n    while (largest_prime > 0) {\n        sum_of_digits += largest_prime % 10;\n        largest_prime /= 10;\n    }\n\n    return sum_of_digits;\n}", "entry_point": "skjkasdkd", "result": "passed", "passed": true}
{"task_id": "CPP/95", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty()) return false;\n\n    bool allLower = true, allUpper = true;\n\n    for (const auto& pair : dict) {\n        for (char c : pair.first) {\n            if (islower(c)) {\n                allUpper = false;\n            } else if (isupper(c)) {\n                allLower = false;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    return allLower || allUpper;\n}", "entry_point": "check_dict_case", "result": "passed", "passed": true}
{"task_id": "CPP/96", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    if (n <= 2) return primes;\n    \n    vector<bool> is_prime(n, true);\n    is_prime[0] = is_prime[1] = false;\n    \n    for (int i = 2; i < n; ++i) {\n        if (is_prime[i]) {\n            primes.push_back(i);\n            for (int j = i * 2; j < n; j += i) {\n                is_prime[j] = false;\n            }\n        }\n    }\n    \n    return primes;\n}", "entry_point": "count_up_to", "result": "passed", "passed": true}
{"task_id": "CPP/97", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}", "entry_point": "multiply", "result": "passed", "passed": true}
{"task_id": "CPP/98", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "count_upper", "result": "passed", "passed": true}
{"task_id": "CPP/99", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double num = stod(value);\n    return (int)(num > 0 ? floor(num + 0.5) : ceil(num - 0.5));\n}", "entry_point": "closest_integer", "result": "passed", "passed": true}
{"task_id": "CPP/100", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    int current_stones = n;\n    for (int i = 0; i < n; ++i) {\n        pile.push_back(current_stones);\n        current_stones += 2;\n    }\n    return pile;\n}", "entry_point": "make_a_pile", "result": "passed", "passed": true}
{"task_id": "CPP/101", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    vector<string> result;\n    string word;\n    for (char c : s) {\n        if (c == ' ' || c == ',') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "entry_point": "words_string", "result": "passed", "passed": true}
{"task_id": "CPP/102", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (x > y) \n        return -1;\n    if (y % 2 == 0)\n        return y;\n    if ((y - 1) >= x)\n        return y - 1;\n    return -1;\n}", "entry_point": "choose_num", "result": "passed", "passed": true}
{"task_id": "CPP/103", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n > m) \n        return \"-1\";\n    int sum = (m - n + 1) * (n + m) / 2;\n    int count = m - n + 1;\n    int avg = sum / count;\n    return to_string(avg);\n}", "entry_point": "rounded_avg", "result": "Program failed: temp_program.exe: /tmp/tmp8wjnue5_/temp.cpp:20: int main(): Assertion `rounded_avg(1, 5) == \"11\"' failed.\n", "passed": false}
{"task_id": "CPP/104", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool has_even_digit = false;\n        int temp = num;\n        while (temp > 0) {\n            if ((temp % 10) % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!has_even_digit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "entry_point": "unique_digits", "result": "passed", "passed": true}
{"task_id": "CPP/105", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    vector<string> result;\n    map<int, string> numToStr = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    \n    sort(filtered.begin(), filtered.end());\n    reverse(filtered.begin(), filtered.end());\n    \n    for (int num : filtered) {\n        result.push_back(numToStr[num]);\n    }\n    \n    return result;\n}", "entry_point": "by_length", "result": "passed", "passed": true}
{"task_id": "CPP/106", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    vector<int> result(n);\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; ++j) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            int sum = 0;\n            for (int j = 1; j <= i; ++j) {\n                sum += j;\n            }\n            result[i - 1] = sum;\n        }\n    }\n    return result;\n}", "entry_point": "f", "result": "passed", "passed": true}
{"task_id": "CPP/107", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int even_count = 0, odd_count = 0;\n    for (int i = 1; i <= n; ++i) {\n        string s = to_string(i);\n        string reversed_s = s;\n        reverse(reversed_s.begin(), reversed_s.end());\n        if (s == reversed_s) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    return {even_count, odd_count};\n}", "entry_point": "even_odd_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/108", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        bool is_negative = num < 0;\n        num = abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (is_negative) {\n            sum = -sum;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "count_nums", "result": "Program failed: temp_program.exe: /tmp/tmp30b63mvz/temp.cpp:36: int main(): Assertion `count_nums({12, 23, 34, -45, -56, 0}) == 5' failed.\n", "passed": false}
{"task_id": "CPP/109", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int n = arr.size();\n    if (n == 0) return true;\n\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n            if (count > 1) return false;\n        }\n    }\n    return true;\n}", "entry_point": "move_one_ball", "result": "passed", "passed": true}
{"task_id": "CPP/110", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    bool hasEvenInLst2 = false;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            hasEvenInLst2 = true;\n            break;\n        }\n    }\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            return hasEvenInLst2 ? \"YES\" : \"NO\";\n        }\n    }\n    return \"YES\";\n}", "entry_point": "exchange", "result": "Program failed: temp_program.exe: /tmp/tmprujq7b1e/temp.cpp:29: int main(): Assertion `exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\"' failed.\n", "passed": false}
{"task_id": "CPP/111", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char, int> frequency;\n    int max_count = 0;\n    \n    for (char c : test) {\n        if (c != ' ') {\n            frequency[c]++;\n            if (frequency[c] > max_count) {\n                max_count = frequency[c];\n            }\n        }\n    }\n    \n    map<char, int> result;\n    for (const auto& pair : frequency) {\n        if (pair.second == max_count) {\n            result[pair.first] = pair.second;\n        }\n    }\n    \n    return result;\n}", "entry_point": "histogram", "result": "passed", "passed": true}
{"task_id": "CPP/112", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    for (char ch : c) {\n        s.erase(remove(s.begin(), s.end(), ch), s.end());\n    }\n    string reversed_s = s;\n    reverse(reversed_s.begin(), reversed_s.end());\n    bool is_palindrome = (s == reversed_s);\n    return {s, is_palindrome ? \"True\" : \"False\"};\n}", "entry_point": "reverse_delete", "result": "passed", "passed": true}
{"task_id": "CPP/113", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (const string& s : lst) {\n        int odd_count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        string output = \"the number of odd elements \" + to_string(odd_count) + \n                        \"n the str\" + to_string(odd_count) + \n                        \"ng \" + to_string(odd_count) + \" of the \" + \n                        to_string(odd_count) + \"nput.\";\n        result.push_back(output);\n    }\n    return result;\n}", "entry_point": "odd_count", "result": "passed", "passed": true}
{"task_id": "CPP/114", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long min_sum = nums[0];\n    long long current_sum = nums[0];\n    for (size_t i = 1; i < nums.size(); ++i) {\n        current_sum = min(nums[i], current_sum + nums[i]);\n        min_sum = min(min_sum, current_sum);\n    }\n    return min_sum;\n}", "entry_point": "minSubArraySum", "result": "passed", "passed": true}
{"task_id": "CPP/115", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int total_water_units = 0;\n    for (const auto& row : grid) {\n        for (int water_unit : row) {\n            total_water_units += water_unit;\n        }\n    }\n    return (total_water_units + capacity - 1) / capacity;\n}", "entry_point": "max_fill", "result": "Program failed: temp_program.exe: /tmp/tmpy6m1ty4z/temp.cpp:25: int main(): Assertion `max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2' failed.\n", "passed": false}
{"task_id": "CPP/116", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n    return arr;\n}", "entry_point": "sort_array", "result": "Program failed: temp_program.exe: /tmp/tmpf3_k9ihm/temp.cpp:32: int main(): Assertion `issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3})' failed.\n", "passed": false}
{"task_id": "CPP/117", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    string vowels = \"aeiouAEIOU\";\n    string word;\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                int consonant_count = count_if(word.begin(), word.end(), [&](char ch) {\n                    return vowels.find(ch) == string::npos;\n                });\n                if (consonant_count == n) {\n                    result.push_back(word);\n                }\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        int consonant_count = count_if(word.begin(), word.end(), [&](char ch) {\n            return vowels.find(ch) == string::npos;\n        });\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "entry_point": "select_words", "result": "passed", "passed": true}
{"task_id": "CPP/118", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; --i) {\n        if (vowels.find(word[i]) != string::npos && \n            !is_vowel(word[i - 1]) && \n            !is_vowel(word[i + 1])) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n\nbool is_vowel(char c) {\n    string vowels = \"aeiouAEIOU\";\n    return vowels.find(c) != string::npos;\n}", "entry_point": "get_closest_vowel", "result": "Compilation failed: /tmp/tmpkn55sxif/temp.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpkn55sxif/temp.cpp:13:14: error: \u2018is_vowel\u2019 was not declared in this scope\n   13 |             !is_vowel(word[i - 1]) &&\n      |              ^~~~~~~~\n", "passed": false}
{"task_id": "CPP/119", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    int balance1 = 0, balance2 = 0;\n    int min_balance1 = 0, min_balance2 = 0;\n\n    for (char c : lst[0]) {\n        if (c == '(') balance1++;\n        else balance1--;\n        min_balance1 = min(min_balance1, balance1);\n    }\n\n    for (char c : lst[1]) {\n        if (c == '(') balance2++;\n        else balance2--;\n        min_balance2 = min(min_balance2, balance2);\n    }\n\n    if (balance1 + min_balance2 >= 0 && balance2 + min_balance1 >= 0 && balance1 + balance2 == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "entry_point": "match_parens", "result": "Program failed: temp_program.exe: /tmp/tmpjdwpmf_s/temp.cpp:35: int main(): Assertion `match_parens({\"()(\", \")\"}) == \"Yes\"' failed.\n", "passed": false}
{"task_id": "CPP/120", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result(arr.begin(), arr.begin() + k);\n    sort(result.begin(), result.end());\n    return result;\n}", "entry_point": "maximum", "result": "passed", "passed": true}
{"task_id": "CPP/121", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "entry_point": "solution", "result": "passed", "passed": true}
{"task_id": "CPP/122", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "entry_point": "add_elements", "result": "passed", "passed": true}
{"task_id": "CPP/123", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> odd_numbers;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            odd_numbers.push_back(n);\n        }\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    odd_numbers.push_back(1); // Add 1 as it is part of the sequence\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}", "entry_point": "get_odd_collatz", "result": "passed", "passed": true}
{"task_id": "CPP/124", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    if (date.empty()) return false;\n    \n    if (date.size() != 10 || date[2] != '-' || date[5] != '-') return false;\n    \n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    \n    if (month < 1 || month > 12) return false;\n    \n    if (day < 1) return false;\n    \n    if ((month == 1 || month == 3 || month == 5 || month == 7 || \n         month == 8 || month == 10 || month == 12) && day > 31) return false;\n    \n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) return false;\n    \n    if (month == 2 && day > 29) return false;\n    \n    return true;\n}", "entry_point": "valid_date", "result": "passed", "passed": true}
{"task_id": "CPP/125", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    vector<string> result;\n    if (txt.find(' ') != string::npos) {\n        size_t start = 0, end;\n        while ((end = txt.find(' ', start)) != string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n    } else if (txt.find(',') != string::npos) {\n        size_t start = 0, end;\n        while ((end = txt.find(',', start)) != string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n    } else {\n        int odd_count = 0;\n        for (char c : txt) {\n            if (islower(c) && ((c - 'a') % 2 == 0)) {\n                odd_count++;\n            }\n        }\n        result.push_back(to_string(odd_count));\n    }\n    return result;\n}", "entry_point": "split_words", "result": "Program failed: temp_program.exe: /tmp/tmppw90nes5/temp.cpp:53: int main(): Assertion `issame(split_words(\"aaabb\") , {\"2\"})' failed.\n", "passed": false}
{"task_id": "CPP/126", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    if (lst.size() < 2) return true;\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] < lst[i - 1]) return false;\n        if (i > 1 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) return false;\n    }\n    return true;\n}", "entry_point": "is_sorted", "result": "passed", "passed": true}
{"task_id": "CPP/127", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    int length = end - start + 1;\n\n    if (length <= 0) return \"NO\";\n\n    auto is_prime = [](int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };\n\n    return is_prime(length) ? \"YES\" : \"NO\";\n}", "entry_point": "intersection", "result": "Program failed: temp_program.exe: /tmp/tmpvce6kwic/temp.cpp:31: int main(): Assertion `intersection({-1, 1}, {0, 4}) == \"NO\"' failed.\n", "passed": false}
{"task_id": "CPP/128", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.empty()) return -32768;\n    int sum_magnitudes = 0;\n    int product_signs = 1;\n    for (int num : arr) {\n        sum_magnitudes += abs(num);\n        if (num < 0) product_signs *= -1;\n        else if (num == 0) product_signs = 0;\n    }\n    return sum_magnitudes * product_signs;\n}", "entry_point": "prod_signs", "result": "passed", "passed": true}
{"task_id": "CPP/129", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int N = grid.size();\n    vector<int> result(k, INT_MAX);\n    vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    function<void(int, int, int, vector<int>&)> dfs = [&](int x, int y, int depth, vector<int>& path) {\n        if (depth == k) {\n            if (path < result) {\n                result = path;\n            }\n            return;\n        }\n        for (auto& dir : directions) {\n            int nx = x + dir[0], ny = y + dir[1];\n            if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                path.push_back(grid[nx][ny]);\n                dfs(nx, ny, depth + 1, path);\n                path.pop_back();\n            }\n        }\n    };\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            vector<int> path = {grid[i][j]};\n            dfs(i, j, 1, path);\n        }\n    }\n    return result;\n}", "entry_point": "minPath", "result": "passed", "passed": true}
{"task_id": "CPP/130", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> result(n + 1);\n    if (n >= 0) result[0] = 1; // tri(0) is not defined in the problem, assuming 1 for consistency\n    if (n >= 1) result[1] = 3; // tri(1) = 3\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + (i + 1 <= n ? result[i + 1] : 0);\n        }\n    }\n    return result;\n}", "entry_point": "tri", "result": "Program failed: temp_program.exe: /tmp/tmpau0i58uu/temp.cpp:33: int main(): Assertion `issame(tri(3) , {1, 3, 2, 8})' failed.\n", "passed": false}
{"task_id": "CPP/131", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int product = 1;\n    bool hasOdd = false;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    return hasOdd ? product : 0;\n}", "entry_point": "digits", "result": "passed", "passed": true}
{"task_id": "CPP/132", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int depth = 0;\n    bool has_nested = false;\n    for (char ch : str) {\n        if (ch == '[') {\n            depth++;\n            if (depth > 1) {\n                has_nested = true;\n            }\n        } else if (ch == ']') {\n            if (depth > 0) {\n                depth--;\n            }\n        }\n    }\n    return has_nested;\n}", "entry_point": "is_nested", "result": "Program failed: temp_program.exe: /tmp/tmpn5a9qxj8/temp.cpp:30: int main(): Assertion `is_nested(\"[]]]]]]][[[[[]\") == false' failed.\n", "passed": false}
{"task_id": "CPP/133", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        int rounded = ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}", "entry_point": "sum_squares", "result": "passed", "passed": true}
{"task_id": "CPP/134", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty() || !isalpha(txt.back()))\n        return false;\n    size_t lastCharPos = txt.find_last_not_of(' ');\n    if (lastCharPos == string::npos || !isalpha(txt[lastCharPos]))\n        return false;\n    size_t lastSpacePos = txt.find_last_of(' ', lastCharPos);\n    return lastSpacePos == string::npos || lastSpacePos < lastCharPos - 1;\n}", "entry_point": "check_if_last_char_is_a_letter", "result": "Program failed: temp_program.exe: /tmp/tmp2a35vid9/temp.cpp:21: int main(): Assertion `check_if_last_char_is_a_letter(\"apple\") == false' failed.\n", "passed": false}
{"task_id": "CPP/135", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}", "entry_point": "can_arrange", "result": "passed", "passed": true}
{"task_id": "CPP/136", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    bool found_negative = false;\n    bool found_positive = false;\n\n    for (int num : lst) {\n        if (num < 0) {\n            if (!found_negative || num > largest_negative) {\n                largest_negative = num;\n                found_negative = true;\n            }\n        } else if (num > 0) {\n            if (!found_positive || num < smallest_positive) {\n                smallest_positive = num;\n                found_positive = true;\n            }\n        }\n    }\n\n    return {found_negative ? largest_negative : 0, found_positive ? smallest_positive : 0};\n}", "entry_point": "largest_smallest_integers", "result": "passed", "passed": true}
{"task_id": "CPP/137", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    auto convert_to_double = [](const boost::any& value) -> double {\n        if (value.type() == typeid(int)) {\n            return boost::any_cast<int>(value);\n        } else if (value.type() == typeid(float)) {\n            return boost::any_cast<float>(value);\n        } else if (value.type() == typeid(string)) {\n            string str = boost::any_cast<string>(value);\n            replace(str.begin(), str.end(), ',', '.');\n            return stod(str);\n        }\n        throw invalid_argument(\"Unsupported type\");\n    };\n\n    double val_a = convert_to_double(a);\n    double val_b = convert_to_double(b);\n\n    if (val_a > val_b) {\n        return a;\n    } else if (val_b > val_a) {\n        return b;\n    } else {\n        return \"None\";\n    }\n}", "entry_point": "compare_one", "result": "Program failed: terminate called after throwing an instance of 'std::invalid_argument'\n  what():  Unsupported type\n", "passed": false}
{"task_id": "CPP/138", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    return n >= 8 && n % 2 == 0;\n}", "entry_point": "is_equal_to_sum_even", "result": "passed", "passed": true}
{"task_id": "CPP/139", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = n; i > 0; --i) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; ++j) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}", "entry_point": "special_factorial", "result": "passed", "passed": true}
{"task_id": "CPP/140", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string result;\n    int space_count = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            space_count++;\n        } else {\n            if (space_count == 1) {\n                result += '_';\n            } else if (space_count > 1) {\n                result += '-';\n            }\n            result += c;\n            space_count = 0;\n        }\n    }\n    if (space_count == 1) {\n        result += '_';\n    } else if (space_count > 1) {\n        result += '-';\n    }\n    return result;\n}", "entry_point": "fix_spaces", "result": "Program failed: temp_program.exe: /tmp/tmp8cyyvxnu/temp.cpp:37: int main(): Assertion `fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"' failed.\n", "passed": false}
{"task_id": "CPP/141", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int dot_count = 0;\n    int digit_count = 0;\n    size_t dot_position = file_name.find('.');\n    \n    if (dot_position == string::npos || dot_position == 0 || dot_position == file_name.length() - 1)\n        return \"No\";\n    \n    if (!isalpha(file_name[0]))\n        return \"No\";\n    \n    for (char c : file_name) {\n        if (isdigit(c))\n            digit_count++;\n        if (c == '.')\n            dot_count++;\n    }\n    \n    if (dot_count != 1 || digit_count > 3)\n        return \"No\";\n    \n    string extension = file_name.substr(dot_position + 1);\n    if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\")\n        return \"Yes\";\n    \n    return \"No\";\n}", "entry_point": "file_name_check", "result": "passed", "passed": true}
{"task_id": "CPP/142", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] *= lst[i]; // Square the element\n        } else if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i] * lst[i]; // Cube the element\n        }\n        sum += lst[i];\n    }\n    return sum;\n}", "entry_point": "sum_squares", "result": "passed", "passed": true}
{"task_id": "CPP/143", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    auto is_prime = [](int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    };\n\n    string result = \"\";\n    string word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (is_prime(word.length())) {\n                if (!result.empty()) result += \" \";\n                result += word;\n            }\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    if (is_prime(word.length())) {\n        if (!result.empty()) result += \" \";\n        result += word;\n    }\n    return result;\n}", "entry_point": "words_in_sentence", "result": "passed", "passed": true}
{"task_id": "CPP/144", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int num1, den1, num2, den2;\n    sscanf(x.c_str(), \"%d/%d\", &num1, &den1);\n    sscanf(n.c_str(), \"%d/%d\", &num2, &den2);\n    int result_num = num1 * num2;\n    int result_den = den1 * den2;\n    return result_num % result_den == 0;\n}", "entry_point": "simplify", "result": "passed", "passed": true}
{"task_id": "CPP/145", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    auto digit_sum = [](int num) {\n        int sum = 0;\n        num = abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    };\n\n    stable_sort(nums.begin(), nums.end(), [&](int a, int b) {\n        return digit_sum(a) < digit_sum(b);\n    });\n\n    return nums;\n}", "entry_point": "order_by_points", "result": "Program failed: temp_program.exe: /tmp/tmp00mxuka0/temp.cpp:38: int main(): Assertion `issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11})' failed.\n", "passed": false}
{"task_id": "CPP/146", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string numStr = to_string(abs(num));\n            char firstDigit = numStr[0];\n            char lastDigit = numStr[numStr.size() - 1];\n            if ((firstDigit == '1' || firstDigit == '3' || firstDigit == '5' || firstDigit == '7' || firstDigit == '9') &&\n                (lastDigit == '1' || lastDigit == '3' || lastDigit == '5' || lastDigit == '7' || lastDigit == '9')) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "specialFilter", "result": "passed", "passed": true}
{"task_id": "CPP/147", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n    \n    int count[3] = {0, 0, 0};\n    for (int i = 0; i < n; ++i) {\n        count[a[i] % 3]++;\n    }\n    \n    int result = 0;\n    result += count[0] * (count[0] - 1) * (count[0] - 2) / 6; // C(count[0], 3)\n    result += count[1] * (count[1] - 1) * (count[1] - 2) / 6; // C(count[1], 3)\n    result += count[2] * (count[2] - 1) * (count[2] - 2) / 6; // C(count[2], 3)\n    result += count[0] * count[1] * count[2]; // C(count[0], 1) * C(count[1], 1) * C(count[2], 1)\n    \n    return result;\n}", "entry_point": "get_max_triples", "result": "passed", "passed": true}
{"task_id": "CPP/148", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = find(planets.begin(), planets.end(), planet1);\n    auto it2 = find(planets.begin(), planets.end(), planet2);\n    \n    if (it1 == planets.end() || it2 == planets.end()) {\n        return {};\n    }\n    \n    if (it1 > it2) {\n        swap(it1, it2);\n    }\n    \n    vector<string> result(it1 + 1, it2);\n    return result;\n}", "entry_point": "bf", "result": "Program failed: terminate called after throwing an instance of 'std::length_error'\n  what():  cannot create std::vector larger than max_size()\n", "passed": false}
{"task_id": "CPP/149", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0;\n    }), lst.end());\n    sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return lst;\n}", "entry_point": "sorted_list_sum", "result": "passed", "passed": true}
{"task_id": "CPP/150", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    if (n <= 1) return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;\n}", "entry_point": "x_or_y", "result": "passed", "passed": true}
{"task_id": "CPP/151", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num > 0 && floor(num) == num && ((int)num) % 2 != 0) {\n            sum += (int)num * (int)num;\n        }\n    }\n    return sum;\n}", "entry_point": "double_the_difference", "result": "passed", "passed": true}
{"task_id": "CPP/152", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}", "entry_point": "compare", "result": "passed", "passed": true}
{"task_id": "CPP/153", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_strength = INT_MIN;\n    string strongest_extension;\n    \n    for (const string& ext : extensions) {\n        int cap = 0, sm = 0;\n        for (char c : ext) {\n            if (isupper(c)) cap++;\n            else if (islower(c)) sm++;\n        }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}", "entry_point": "Strongest_Extension", "result": "passed", "passed": true}
{"task_id": "CPP/154", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    int lenB = b.length();\n    string bRotated = b + b;\n    for (int i = 0; i < lenB; ++i) {\n        string rotation = bRotated.substr(i, lenB);\n        if (a.find(rotation) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "cycpattern_check", "result": "passed", "passed": true}
{"task_id": "CPP/155", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    int even_count = 0, odd_count = 0;\n    num = abs(num);\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0)\n            even_count++;\n        else\n            odd_count++;\n        num /= 10;\n    }\n    return {even_count, odd_count};\n}", "entry_point": "even_odd_count", "result": "Program failed: temp_program.exe: /tmp/tmp7feg1r75/temp.cpp:41: int main(): Assertion `issame(even_odd_count(0) , {1, 0})' failed.\n", "passed": false}
{"task_id": "CPP/156", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    vector<pair<int, string>> roman = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"},\n        {1, \"i\"}\n    };\n    string result;\n    for (const auto& [value, symbol] : roman) {\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    return result;\n}", "entry_point": "int_to_mini_roman", "result": "passed", "passed": true}
{"task_id": "CPP/157", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    float x = max(a, max(b, c));\n    float y, z;\n    if (x == a) {\n        y = b;\n        z = c;\n    } else if (x == b) {\n        y = a;\n        z = c;\n    } else {\n        y = a;\n        z = b;\n    }\n    return fabs(x*x - (y*y + z*z)) < 1e-6;\n}", "entry_point": "right_angle_triangle", "result": "passed", "passed": true}
{"task_id": "CPP/158", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string result;\n    int max_unique = 0;\n    \n    for (const auto& word : words) {\n        set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n        \n        if (unique_count > max_unique || (unique_count == max_unique && word < result)) {\n            max_unique = unique_count;\n            result = word;\n        }\n    }\n    \n    return result;\n}", "entry_point": "find_max", "result": "passed", "passed": true}
{"task_id": "CPP/159", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    int totalEaten = number + min(need, remaining);\n    int carrotsLeft = max(0, remaining - need);\n    return {totalEaten, carrotsLeft};\n}", "entry_point": "eat", "result": "passed", "passed": true}
{"task_id": "CPP/160", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (size_t i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}", "entry_point": "do_algebra", "result": "Program failed: temp_program.exe: /tmp/tmpusmtbcgj/temp.cpp:31: int main(): Assertion `do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9' failed.\n", "passed": false}
{"task_id": "CPP/161", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    if (hasLetter) {\n        for (char &c : s) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else if (isupper(c)) {\n                c = tolower(c);\n            }\n        }\n    } else {\n        reverse(s.begin(), s.end());\n    }\n    return s;\n}", "entry_point": "solve", "result": "passed", "passed": true}
{"task_id": "CPP/162", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    if (text.empty())\n        return \"None\";\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);\n    \n    char md5string[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&md5string[i*2], \"%02x\", (unsigned int)digest[i]);\n    \n    return string(md5string);\n}", "entry_point": "string_to_md5", "result": "Compilation failed: /tmp/tmp8qgbc2ra/temp.cpp:5:9: fatal error: openssl/md5.h: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\n    5 | #include<openssl/md5.h>\n      |         ^~~~~~~~~~~~~~~\ncompilation terminated.\n", "passed": false}
{"task_id": "CPP/163", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if (a > b) swap(a, b);\n    for (int i = a; i <= b; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}", "entry_point": "generate_integers", "result": "Program failed: temp_program.exe: /tmp/tmp1gw144mf/temp.cpp:30: int main(): Assertion `issame(generate_integers(2, 10) , {2, 4, 6, 8})' failed.\n", "passed": false}
