{"task_id": "CPP/0", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (fabs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "entry_point": "has_close_elements", "result": "passed", "passed": true}
{"task_id": "CPP/1", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> result;\n    string current;\n    int balance = 0;\n\n    for (char c : paren_string) {\n        if (c == ' ') continue;\n        current += c;\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n        }\n        if (balance == 0 && !current.empty()) {\n            result.push_back(current);\n            current.clear();\n        }\n    }\n\n    return result;\n}", "entry_point": "separate_paren_groups", "result": "passed", "passed": true}
{"task_id": "CPP/10", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    int n = str.length();\n    for (int i = n; i >= 0; --i) {\n        if (is_palindrome(str.substr(0, i))) {\n            return str + string(str.rbegin(), str.rbegin() + (n - i));\n        }\n    }\n    return str; \n}", "entry_point": "make_palindrome", "result": "Program failed: temp_program.exe: /tmp/tmp7dfwvh6z/temp.cpp:27: int main(): Assertion `make_palindrome(\"xyz\") == \"xyzyx\"' failed.\n", "passed": false}
{"task_id": "CPP/100", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n    vector<int> result;\n    int stones = n;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(stones);\n        stones += (stones % 2 == 0) ? 2 : 2; // Increment by 2 for both odd and even\n    }\n    return result;\n}", "entry_point": "make_a_pile", "result": "passed", "passed": true}
{"task_id": "CPP/101", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    vector<string> result;\n    string word;\n    for (char c : s) {\n        if (c == ',' || c == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;\n}", "entry_point": "words_string", "result": "passed", "passed": true}
{"task_id": "CPP/102", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n    if (x > y)\n        return -1;\n\n    if (y % 2 != 0)\n        y--;\n\n    if (y >= x)\n        return y;\n\n    return -1;\n}", "entry_point": "choose_num", "result": "passed", "passed": true}
{"task_id": "CPP/103", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n > m)\n        return \"-1\";\n    \n    int sum = 0;\n    int count = m - n + 1;\n\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    int average = sum / count;\n    return std::to_string(average);\n}", "entry_point": "rounded_avg", "result": "Program failed: temp_program.exe: /tmp/tmpzypjmzzx/temp.cpp:26: int main(): Assertion `rounded_avg(1, 5) == \"11\"' failed.\n", "passed": false}
{"task_id": "CPP/104", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n    vector<int> result;\n    for (int num : x) {\n        bool has_even_digit = false;\n        int temp = num;\n        while (temp > 0) {\n            if ((temp % 10) % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if (!has_even_digit) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}", "entry_point": "unique_digits", "result": "passed", "passed": true}
{"task_id": "CPP/105", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    vector<int> filtered;\n    for (int num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered.push_back(num);\n        }\n    }\n    sort(filtered.begin(), filtered.end());\n    reverse(filtered.begin(), filtered.end());\n    \n    vector<string> result;\n    map<int, string> numToString = {\n        {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n        {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n    };\n    \n    for (int num : filtered) {\n        result.push_back(numToString[num]);\n    }\n    \n    return result;\n}", "entry_point": "by_length", "result": "passed", "passed": true}
{"task_id": "CPP/106", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    vector<int> result(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i - 1] = factorial;\n        } else {\n            result[i - 1] = (i * (i + 1)) / 2;\n        }\n    }\n    return result;\n}", "entry_point": "f", "result": "passed", "passed": true}
{"task_id": "CPP/107", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n    int even_count = 0, odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n        string s = to_string(i);\n        string rev_s = string(s.rbegin(), s.rend());\n        if (s == rev_s) {\n            if (i % 2 == 0)\n                even_count++;\n            else\n                odd_count++;\n        }\n    }\n    return {even_count, odd_count};\n}", "entry_point": "even_odd_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/108", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n    int count = 0;\n    for (int num : n) {\n        int sum = 0;\n        int abs_num = abs(num);\n        while (abs_num > 0) {\n            sum += abs_num % 10;\n            abs_num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "count_nums", "result": "Program failed: temp_program.exe: /tmp/tmp8241igwm/temp.cpp:28: int main(): Assertion `count_nums({-1, -2, 0}) == 0' failed.\n", "passed": false}
{"task_id": "CPP/109", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    if (arr.empty())\n        return true;\n\n    int count = 0;\n    int n = arr.size();\n\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > arr[(i + 1) % n]) {\n            count++;\n        }\n    }\n\n    return count <= 1;\n}", "entry_point": "move_one_ball", "result": "passed", "passed": true}
{"task_id": "CPP/11", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}", "entry_point": "string_xor", "result": "passed", "passed": true}
{"task_id": "CPP/110", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int oddCount = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n    \n    if (oddCount == 0) {\n        return \"YES\";\n    }\n    \n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            return \"YES\";\n        }\n    }\n    \n    return \"NO\";\n}", "entry_point": "exchange", "result": "Program failed: temp_program.exe: /tmp/tmp72o995wp/temp.cpp:34: int main(): Assertion `exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\"' failed.\n", "passed": false}
{"task_id": "CPP/111", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n    map<char, int> countMap;\n    map<char, int> result;\n    int maxCount = 0;\n\n    for (char c : test) {\n        if (c != ' ') {\n            countMap[c]++;\n            if (countMap[c] > maxCount) {\n                maxCount = countMap[c];\n            }\n        }\n    }\n\n    for (const auto& pair : countMap) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}", "entry_point": "histogram", "result": "passed", "passed": true}
{"task_id": "CPP/112", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string result;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    string reversed_result = result;\n    reverse(reversed_result.begin(), reversed_result.end());\n    bool is_palindrome = (result == reversed_result);\n    return {result, is_palindrome ? \"True\" : \"False\"};\n}", "entry_point": "reverse_delete", "result": "passed", "passed": true}
{"task_id": "CPP/113", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n    vector<string> result;\n    for (int i = 0; i < lst.size(); ++i) {\n        int odd_count = 0;\n        for (char c : lst[i]) {\n            if ((c - '0') % 2 != 0) {\n                odd_count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + to_string(odd_count) + \"n the str\" + to_string(odd_count) + \"ng \" + to_string(odd_count) + \" of the \" + to_string(odd_count) + \"nput.\");\n    }\n    return result;\n}", "entry_point": "odd_count", "result": "passed", "passed": true}
{"task_id": "CPP/114", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n    long long min_sum = nums[0];\n    long long current_sum = 0;\n\n    for (long long num : nums) {\n        current_sum += num;\n        if (current_sum < min_sum) {\n            min_sum = current_sum;\n        }\n        if (current_sum > 0) {\n            current_sum = 0;\n        }\n    }\n\n    return min_sum;\n}", "entry_point": "minSubArraySum", "result": "passed", "passed": true}
{"task_id": "CPP/115", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n    int total_water = 0;\n    for (const auto& row : grid) {\n        for (int water : row) {\n            total_water += water;\n        }\n    }\n    return (total_water + capacity - 1) / capacity;\n}", "entry_point": "max_fill", "result": "Program failed: temp_program.exe: /tmp/tmpbw2ygp6b/temp.cpp:25: int main(): Assertion `max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2' failed.\n", "passed": false}
{"task_id": "CPP/116", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end(), [](int a, int b) {\n        int countA = __builtin_popcount(a);\n        int countB = __builtin_popcount(b);\n        return countA == countB ? a < b : countA < countB;\n    });\n    return arr;\n}", "entry_point": "sort_array", "result": "Program failed: temp_program.exe: /tmp/tmpdeis1cp1/temp.cpp:29: int main(): Assertion `issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3})' failed.\n", "passed": false}
{"task_id": "CPP/117", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n    vector<string> result;\n    istringstream iss(s);\n    string word;\n\n    while (iss >> word) {\n        int consonant_count = 0;\n        for (char c : word) {\n            if (isalpha(c) && !strchr(\"aeiouAEIOU\", c)) {\n                consonant_count++;\n            }\n        }\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}", "entry_point": "select_words", "result": "passed", "passed": true}
{"task_id": "CPP/118", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    int n = word.length();\n    for (int i = n - 2; i > 0; --i) {\n        if (isalpha(word[i]) && !isvowel(word[i])) {\n            for (int j = i - 1; j >= 0; --j) {\n                if (isalpha(word[j]) && !isvowel(word[j])) {\n                    break;\n                }\n                if (isvowel(word[j])) {\n                    return string(1, word[j]);\n                }\n            }\n        }\n    }\n    return \"\";\n}\n\nbool isvowel(char c) {\n    return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' ||\n           c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}", "entry_point": "get_closest_vowel", "result": "Compilation failed: /tmp/tmp72ubz6_4/temp.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp72ubz6_4/temp.cpp:12:34: error: \u2018isvowel\u2019 was not declared in this scope; did you mean \u2018islower\u2019?\n   12 |         if (isalpha(word[i]) && !isvowel(word[i])) {\n      |                                  ^~~~~~~\n      |                                  islower\n", "passed": false}
{"task_id": "CPP/119", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    int open1 = 0, close1 = 0, open2 = 0, close2 = 0;\n    open1 = count(lst[0].begin(), lst[0].end(), '(');\n    close1 = lst[0].size() - open1;\n    open2 = count(lst[1].begin(), lst[1].end(), '(');\n    close2 = lst[1].size() - open2;\n\n    // Check if concatenating lst[0] + lst[1] can be good\n    if (open1 >= close2 && open2 >= close1)\n        return \"Yes\";\n    \n    // Check if concatenating lst[1] + lst[0] can be good\n    if (open2 >= close1 && open1 >= close2)\n        return \"Yes\";\n\n    return \"No\";\n}", "entry_point": "match_parens", "result": "Program failed: temp_program.exe: /tmp/tmpzs5yv3sn/temp.cpp:30: int main(): Assertion `match_parens({\"()(\", \")\"}) == \"Yes\"' failed.\n", "passed": false}
{"task_id": "CPP/12", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    if (strings.empty())\n        return \"None\";\n    \n    string longestString = strings[0];\n    for (const string& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    return longestString;\n}", "entry_point": "longest", "result": "Program failed: temp_program.exe: /tmp/tmpo32twt09/temp.cpp:25: int main(): Assertion `longest({}) == \"\"' failed.\n", "passed": false}
{"task_id": "CPP/120", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(), arr.end(), greater<int>());\n    vector<int> result(arr.begin(), arr.begin() + k);\n    sort(result.begin(), result.end());\n    return result;\n}", "entry_point": "maximum", "result": "passed", "passed": true}
{"task_id": "CPP/121", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "entry_point": "solution", "result": "passed", "passed": true}
{"task_id": "CPP/122", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "entry_point": "add_elements", "result": "passed", "passed": true}
{"task_id": "CPP/123", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n    vector<int> odd_numbers;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            odd_numbers.push_back(n);\n        }\n        n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n    }\n    odd_numbers.push_back(1);\n    sort(odd_numbers.begin(), odd_numbers.end());\n    return odd_numbers;\n}", "entry_point": "get_odd_collatz", "result": "passed", "passed": true}
{"task_id": "CPP/124", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n    if (date.empty() || date.size() != 10 || date[2] != '-' || date[5] != '-')\n        return false;\n\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n\n    if (month < 1 || month > 12)\n        return false;\n\n    if (day < 1)\n        return false;\n\n    if (month == 2) {\n        if (day > 29)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n            return false;\n    } else {\n        if (day > 31)\n            return false;\n    }\n\n    return true;\n}", "entry_point": "valid_date", "result": "passed", "passed": true}
{"task_id": "CPP/125", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n    vector<string> result;\n    size_t pos = 0;\n    size_t found = txt.find_first_of(\" \\n\\t\");\n    \n    if (found != string::npos) {\n        while (found != string::npos) {\n            result.push_back(txt.substr(pos, found - pos));\n            pos = found + 1;\n            found = txt.find_first_of(\" \\n\\t\", pos);\n        }\n        result.push_back(txt.substr(pos));\n        return result;\n    }\n    \n    found = txt.find(',');\n    if (found != string::npos) {\n        size_t prev = 0;\n        while (found != string::npos) {\n            result.push_back(txt.substr(prev, found - prev));\n            prev = found + 1;\n            found = txt.find(',', prev);\n        }\n        result.push_back(txt.substr(prev));\n        return result;\n    }\n    \n    int count = 0;\n    for (char c : txt) {\n        if (c >= 'a' && c <= 'z' && (c - 'a') % 2 == 1) {\n            count++;\n        }\n    }\n    result.push_back(to_string(count));\n    return result;\n}", "entry_point": "split_words", "result": "passed", "passed": true}
{"task_id": "CPP/126", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    if (lst.size() <= 1)\n        return true;\n    \n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] <= lst[i - 1])\n            return false;\n    }\n\n    return true;\n}", "entry_point": "is_sorted", "result": "Program failed: temp_program.exe: /tmp/tmpezg00nw1/temp.cpp:34: int main(): Assertion `is_sorted({1, 2, 2, 3, 3, 4}) == true' failed.\n", "passed": false}
{"task_id": "CPP/127", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int start = max(interval1[0], interval2[0]);\n    int end = min(interval1[1], interval2[1]);\n    \n    if (start > end) \n        return \"NO\";\n    \n    int length = end - start + 1;\n\n    if (length < 2) \n        return \"NO\";\n\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) \n            return \"NO\";\n    }\n    \n    return \"YES\";\n}", "entry_point": "intersection", "result": "Program failed: temp_program.exe: /tmp/tmp15e4lc9r/temp.cpp:33: int main(): Assertion `intersection({-1, 1}, {0, 4}) == \"NO\"' failed.\n", "passed": false}
{"task_id": "CPP/128", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n    if (arr.empty())\n        return -32768;\n\n    int sum_magnitude = 0;\n    int product_sign = 1;\n\n    for (int num : arr) {\n        if (num > 0) {\n            sum_magnitude += num;\n        } else if (num < 0) {\n            sum_magnitude += -num;\n            product_sign *= -1;\n        } else {\n            product_sign = 0;\n        }\n    }\n\n    return sum_magnitude * product_sign;\n}", "entry_point": "prod_signs", "result": "passed", "passed": true}
{"task_id": "CPP/129", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int N = grid.size();\n    vector<int> result;\n    vector<vector<bool>> visited(N, vector<bool>(N, false));\n    \n    function<void(int, int, int, vector<int>&)> dfs = [&](int x, int y, int length, vector<int>& path) {\n        if (length == k) {\n            if (result.empty() || path < result) {\n                result = path;\n            }\n            return;\n        }\n        \n        visited[x][y] = true;\n        path.push_back(grid[x][y]);\n        \n        for (int dx = -1; dx <= 1; dx++) {\n            for (int dy = -1; dy <= 1; dy++) {\n                if (abs(dx) + abs(dy) == 1) {\n                    int nx = x + dx, ny = y + dy;\n                    if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited[nx][ny]) {\n                        dfs(nx, ny, length + 1, path);\n                    }\n                }\n            }\n        }\n        \n        visited[x][y] = false;\n        path.pop_back();\n    };\n    \n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            vector<int> path;\n            dfs(i, j, 0, path);\n        }\n    }\n    \n    return result;\n}", "entry_point": "minPath", "result": "Program failed: temp_program.exe: /tmp/tmphfbqyukk/temp.cpp:60: int main(): Assertion `issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1})' failed.\n", "passed": false}
{"task_id": "CPP/13", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}", "entry_point": "greatest_common_divisor", "result": "passed", "passed": true}
{"task_id": "CPP/130", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> result(n + 1);\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            result[i] = 3;\n        } else if (i % 2 == 0) {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    result[0] = 1; // Setting tri(0) = 1 as base case\n    return result;\n}", "entry_point": "tri", "result": "Program failed: temp_program.exe: /tmp/tmpnwberaes/temp.cpp:34: int main(): Assertion `issame(tri(3) , {1, 3, 2, 8})' failed.\n", "passed": false}
{"task_id": "CPP/131", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n    int product = 1;\n    bool hasOdd = false;\n\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n\n    return hasOdd ? product : 0;\n}", "entry_point": "digits", "result": "passed", "passed": true}
{"task_id": "CPP/132", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n    int balance = 0;\n    bool nested = false;\n\n    for (char c : str) {\n        if (c == '[') {\n            balance++;\n            if (balance > 1) {\n                nested = true;\n            }\n        } else if (c == ']') {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n\n    return nested && balance == 0;\n}", "entry_point": "is_nested", "result": "Program failed: temp_program.exe: /tmp/tmpt3ke9yij/temp.cpp:41: int main(): Assertion `is_nested(\"[[]][[\") == true' failed.\n", "passed": false}
{"task_id": "CPP/133", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (float num : lst) {\n        sum += ceil(num) * ceil(num);\n    }\n    return sum;\n}", "entry_point": "sum_squares", "result": "passed", "passed": true}
{"task_id": "CPP/134", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.empty())\n        return false;\n\n    char lastChar = txt[txt.length() - 1];\n    if (!isalpha(lastChar))\n        return false;\n\n    size_t lastSpace = txt.find_last_of(' ');\n    if (lastSpace == string::npos)\n        return true;\n\n    return lastSpace == txt.length() - 2;\n}", "entry_point": "check_if_last_char_is_a_letter", "result": "Program failed: temp_program.exe: /tmp/tmpfkayefua/temp.cpp:26: int main(): Assertion `check_if_last_char_is_a_letter(\"apple\") == false' failed.\n", "passed": false}
{"task_id": "CPP/135", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n    for (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}", "entry_point": "can_arrange", "result": "passed", "passed": true}
{"task_id": "CPP/136", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n    int largest_negative = 0;\n    int smallest_positive = 0;\n    bool found_negative = false;\n    bool found_positive = false;\n\n    for (int num : lst) {\n        if (num < 0) {\n            if (!found_negative || num > largest_negative) {\n                largest_negative = num;\n                found_negative = true;\n            }\n        } else if (num > 0) {\n            if (!found_positive || num < smallest_positive) {\n                smallest_positive = num;\n                found_positive = true;\n            }\n        }\n    }\n\n    if (!found_negative) {\n        largest_negative = 0;\n    }\n    if (!found_positive) {\n        smallest_positive = 0;\n    }\n\n    return {largest_negative, smallest_positive};\n}", "entry_point": "largest_smallest_integers", "result": "passed", "passed": true}
{"task_id": "CPP/137", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    if (a.type() == b.type()) {\n        if (a.type() == typeid(int)) {\n            int intA = boost::any_cast<int>(a);\n            int intB = boost::any_cast<int>(b);\n            return (intA == intB) ? boost::any(\"None\") : (intA > intB ? a : b);\n        } else if (a.type() == typeid(double)) {\n            double doubleA = boost::any_cast<double>(a);\n            double doubleB = boost::any_cast<double>(b);\n            return (doubleA == doubleB) ? boost::any(\"None\") : (doubleA > doubleB ? a : b);\n        } else if (a.type() == typeid(string)) {\n            string strA = boost::any_cast<string>(a);\n            string strB = boost::any_cast<string>(b);\n            double numA = stod(strA.replace(strA.find(','), 1, \".\"));\n            double numB = stod(strB.replace(strB.find(','), 1, \".\"));\n            return (numA == numB) ? boost::any(\"None\") : (numA > numB ? a : b);\n        }\n    } else {\n        double numA, numB;\n        if (a.type() == typeid(int)) {\n            numA = boost::any_cast<int>(a);\n            numB = stod(boost::any_cast<string>(b).replace(boost::any_cast<string>(b).find(','), 1, \".\"));\n        } else if (a.type() == typeid(double)) {\n            numA = boost::any_cast<double>(a);\n            numB = stod(boost::any_cast<string>(b).replace(boost::any_cast<string>(b).find(','), 1, \".\"));\n        } else {\n            numA = stod(boost::any_cast<string>(a).replace(boost::any_cast<string>(a).find(','), 1, \".\"));\n            numB = boost::any_cast<int>(b);\n        }\n        return (numA == numB) ? boost::any(\"None\") : (numA > numB ? a : b);\n    }\n}", "entry_point": "compare_one", "result": "Program failed: terminate called after throwing an instance of 'boost::wrapexcept<boost::bad_any_cast>'\n  what():  boost::bad_any_cast: failed conversion using boost::any_cast\n", "passed": false}
{"task_id": "CPP/138", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    return n >= 8 && n % 2 == 0;\n}", "entry_point": "is_equal_to_sum_even", "result": "passed", "passed": true}
{"task_id": "CPP/139", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n    long long result = 1;\n    for (int i = 1; i <= n; ++i) {\n        long long factorial = 1;\n        for (int j = 1; j <= i; ++j) {\n            factorial *= j;\n        }\n        result *= factorial;\n    }\n    return result;\n}", "entry_point": "special_factorial", "result": "passed", "passed": true}
{"task_id": "CPP/14", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    for (size_t i = 1; i <= str.length(); ++i) {\n        prefixes.push_back(str.substr(0, i));\n    }\n    return prefixes;\n}", "entry_point": "all_prefixes", "result": "passed", "passed": true}
{"task_id": "CPP/140", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n    string result;\n    bool in_space = false;\n    int space_count = 0;\n\n    for (char c : text) {\n        if (c == ' ') {\n            space_count++;\n            if (space_count > 2) {\n                if (!in_space) {\n                    result += '-';\n                    in_space = true;\n                }\n            } else {\n                result += '_';\n                in_space = true;\n            }\n        } else {\n            result += c;\n            in_space = false;\n            space_count = 0;\n        }\n    }\n\n    return result;\n}", "entry_point": "fix_spaces", "result": "Program failed: temp_program.exe: /tmp/tmpx_x5yv4n/temp.cpp:41: int main(): Assertion `fix_spaces(\"Exa   mple\") == \"Exa-mple\"' failed.\n", "passed": false}
{"task_id": "CPP/141", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int dot_count = 0;\n    int digit_count = 0;\n    bool starts_with_letter = false;\n    \n    for (size_t i = 0; i < file_name.size(); ++i) {\n        if (file_name[i] == '.') {\n            dot_count++;\n            if (dot_count > 1) {\n                return \"No\";\n            }\n        } else if (isdigit(file_name[i])) {\n            digit_count++;\n        } else if (i == 0 && isalpha(file_name[i])) {\n            starts_with_letter = true;\n        }\n    }\n    \n    if (dot_count != 1 || !starts_with_letter || digit_count > 3) {\n        return \"No\";\n    }\n    \n    string extension = file_name.substr(file_name.find('.') + 1);\n    if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n        return \"Yes\";\n    }\n    \n    return \"No\";\n}", "entry_point": "file_name_check", "result": "passed", "passed": true}
{"task_id": "CPP/142", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += lst[i] * lst[i] * lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "entry_point": "sum_squares", "result": "passed", "passed": true}
{"task_id": "CPP/143", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n    auto is_prime = [](int num) {\n        if (num < 2) return false;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };\n\n    string result;\n    string word;\n    istringstream stream(sentence);\n\n    while (stream >> word) {\n        if (is_prime(word.length())) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n\n    return result;\n}", "entry_point": "words_in_sentence", "result": "passed", "passed": true}
{"task_id": "CPP/144", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int num1 = stoi(x.substr(0, x.find('/')));\n    int den1 = stoi(x.substr(x.find('/') + 1));\n    int num2 = stoi(n.substr(0, n.find('/')));\n    int den2 = stoi(n.substr(n.find('/') + 1));\n    \n    return (num1 * num2) % (den1 * den2) == 0;\n}", "entry_point": "simplify", "result": "passed", "passed": true}
{"task_id": "CPP/145", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    auto digit_sum = [](int n) {\n        n = abs(n);\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    };\n\n    stable_sort(nums.begin(), nums.end(), [&](int a, int b) {\n        int sum_a = digit_sum(a);\n        int sum_b = digit_sum(b);\n        return sum_a < sum_b;\n    });\n\n    return nums;\n}", "entry_point": "order_by_points", "result": "Program failed: temp_program.exe: /tmp/tmpd1etl_hc/temp.cpp:40: int main(): Assertion `issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11})' failed.\n", "passed": false}
{"task_id": "CPP/146", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string strNum = to_string(num);\n            if ((strNum.front() - '0') % 2 != 0 && (strNum.back() - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "entry_point": "specialFilter", "result": "passed", "passed": true}
{"task_id": "CPP/147", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for (int i = 1; i <= n; ++i) {\n        a[i - 1] = i * i - i + 1;\n    }\n    \n    int count = 0;\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}", "entry_point": "get_max_triples", "result": "passed", "passed": true}
{"task_id": "CPP/148", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = find(planets.begin(), planets.end(), planet1);\n    auto it2 = find(planets.begin(), planets.end(), planet2);\n    \n    if (it1 == planets.end() || it2 == planets.end())\n        return {};\n    \n    int index1 = distance(planets.begin(), it1);\n    int index2 = distance(planets.begin(), it2);\n    \n    if (index1 > index2)\n        swap(index1, index2);\n    \n    vector<string> result(planets.begin() + index1 + 1, planets.begin() + index2);\n    return result;\n}", "entry_point": "bf", "result": "Program failed: terminate called after throwing an instance of 'std::length_error'\n  what():  cannot create std::vector larger than max_size()\n", "passed": false}
{"task_id": "CPP/149", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0;\n    }), lst.end());\n    \n    sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length())\n            return a < b;\n        return a.length() < b.length();\n    });\n    \n    return lst;\n}", "entry_point": "sorted_list_sum", "result": "passed", "passed": true}
{"task_id": "CPP/15", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string result;\n    for (int i = 0; i <= n; ++i) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;\n}", "entry_point": "string_sequence", "result": "passed", "passed": true}
{"task_id": "CPP/150", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    if (n <= 1)\n        return y;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return y;\n    }\n    return x;\n}", "entry_point": "x_or_y", "result": "passed", "passed": true}
{"task_id": "CPP/151", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n    long long sum = 0;\n    for (float num : lst) {\n        if (num >= 0 && static_cast<int>(num) == num && static_cast<int>(num) % 2 != 0) {\n            sum += static_cast<int>(num) * static_cast<int>(num);\n        }\n    }\n    return sum;\n}", "entry_point": "double_the_difference", "result": "passed", "passed": true}
{"task_id": "CPP/152", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result(game.size());\n    for (size_t i = 0; i < game.size(); ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}", "entry_point": "compare", "result": "passed", "passed": true}
{"task_id": "CPP/153", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    string strongest_extension;\n    int max_strength = INT_MIN;\n\n    for (const string& ext : extensions) {\n        int cap = 0, sm = 0;\n        for (char c : ext) {\n            if (isupper(c))\n                cap++;\n            else if (islower(c))\n                sm++;\n        }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    return class_name + \".\" + strongest_extension;\n}", "entry_point": "Strongest_Extension", "result": "passed", "passed": true}
{"task_id": "CPP/154", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n    if (a.length() < b.length())\n        return false;\n\n    string b2 = b + b;\n    return b2.find(a) != string::npos;\n}", "entry_point": "cycpattern_check", "result": "Program failed: temp_program.exe: /tmp/tmpb7ibhksd/temp.cpp:20: int main(): Assertion `cycpattern_check(\"yello\",\"ell\") == true' failed.\n", "passed": false}
{"task_id": "CPP/155", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    vector<int> count(2, 0);\n    num = abs(num);\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0)\n            count[0]++;\n        else\n            count[1]++;\n        num /= 10;\n    }\n    return count;\n}", "entry_point": "even_odd_count", "result": "Program failed: temp_program.exe: /tmp/tmpzkwwswbe/temp.cpp:41: int main(): Assertion `issame(even_odd_count(0) , {1, 0})' failed.\n", "passed": false}
{"task_id": "CPP/156", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n    vector<pair<int, string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n        {100, \"c\"}, {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"},\n        {10, \"x\"}, {9, \"ix\"}, {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    string result;\n    for (const auto& [value, symbol] : roman_numerals) {\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n    return result;\n}", "entry_point": "int_to_mini_roman", "result": "passed", "passed": true}
{"task_id": "CPP/157", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    float max_side = fmax(fmax(a, b), c);\n    float sum_of_squares = a * a + b * b + c * c - max_side * max_side;\n    return fabs(max_side * max_side - sum_of_squares) < 1e-6;\n}", "entry_point": "right_angle_triangle", "result": "passed", "passed": true}
{"task_id": "CPP/158", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n    string result;\n    int max_unique_count = 0;\n\n    for (const string& word : words) {\n        int unique_count = 0;\n        vector<bool> char_seen(256, false);\n        \n        for (char c : word) {\n            if (!char_seen[c]) {\n                char_seen[c] = true;\n                unique_count++;\n            }\n        }\n\n        if (unique_count > max_unique_count || \n           (unique_count == max_unique_count && (result.empty() || word < result))) {\n            max_unique_count = unique_count;\n            result = word;\n        }\n    }\n\n    return result;\n}", "entry_point": "find_max", "result": "passed", "passed": true}
{"task_id": "CPP/159", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    int totalEaten = number + min(need, remaining);\n    int carrotsLeft = remaining - min(need, remaining);\n    return {totalEaten, carrotsLeft};\n}", "entry_point": "eat", "result": "passed", "passed": true}
{"task_id": "CPP/16", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n    transform(str.begin(), str.end(), str.begin(), ::tolower);\n    sort(str.begin(), str.end());\n    auto it = unique(str.begin(), str.end());\n    return distance(str.begin(), it);\n}", "entry_point": "count_distinct_characters", "result": "passed", "passed": true}
{"task_id": "CPP/160", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = operand[0];\n    for (size_t i = 0; i < operato.size(); ++i) {\n        if (operato[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (operato[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (operato[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (operato[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (operato[i] == \"**\") {\n            result = pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}", "entry_point": "do_algebra", "result": "Program failed: temp_program.exe: /tmp/tmpa1rxuoc6/temp.cpp:31: int main(): Assertion `do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9' failed.\n", "passed": false}
{"task_id": "CPP/161", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    bool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    \n    if (!hasLetter) {\n        reverse(s.begin(), s.end());\n        return s;\n    }\n    \n    for (char &c : s) {\n        if (isalpha(c)) {\n            if (islower(c))\n                c = toupper(c);\n            else\n                c = tolower(c);\n        }\n    }\n    \n    return s;\n}", "entry_point": "solve", "result": "passed", "passed": true}
{"task_id": "CPP/162", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n    if (text.empty())\n        return \"None\";\n\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n\n    char md5String[33];\n    for (int i = 0; i < 16; i++)\n        sprintf(&md5String[i * 2], \"%02x\", (unsigned int)digest[i]);\n\n    return string(md5String);\n}", "entry_point": "string_to_md5", "result": "Compilation failed: /tmp/tmpg39jy8_u/temp.cpp:5:9: fatal error: openssl/md5.h: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\n    5 | #include<openssl/md5.h>\n      |         ^~~~~~~~~~~~~~~\ncompilation terminated.\n", "passed": false}
{"task_id": "CPP/163", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n    vector<int> result;\n    if (a > b) {\n        swap(a, b);\n    }\n    for (int i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}", "entry_point": "generate_integers", "result": "Program failed: temp_program.exe: /tmp/tmp4j9l0nry/temp.cpp:32: int main(): Assertion `issame(generate_integers(2, 10) , {2, 4, 6, 8})' failed.\n", "passed": false}
{"task_id": "CPP/17", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n    vector<int> beats;\n    size_t pos = 0;\n    while ((pos = music_string.find(' ')) != string::npos) {\n        string note = music_string.substr(0, pos);\n        if (note == \"o\")\n            beats.push_back(4);\n        else if (note == \"o|\")\n            beats.push_back(2);\n        else if (note == \".|\")\n            beats.push_back(1);\n        music_string.erase(0, pos + 1);\n    }\n    if (music_string == \"o\")\n        beats.push_back(4);\n    else if (music_string == \"o|\")\n        beats.push_back(2);\n    else if (music_string == \".|\")\n        beats.push_back(1);\n    return beats;\n}", "entry_point": "parse_music", "result": "passed", "passed": true}
{"task_id": "CPP/18", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n    if (substring.empty())\n        return 0;\n\n    int count = 0;\n    size_t pos = 0;\n\n    while ((pos = str.find(substring, pos)) != string::npos) {\n        count++;\n        pos++; // Move to the next character to allow overlapping\n    }\n\n    return count;\n}", "entry_point": "how_many_times", "result": "passed", "passed": true}
{"task_id": "CPP/19", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n    map<string, int> num_map = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n    \n    vector<string> num_list;\n    stringstream ss(numbers);\n    string num;\n    \n    while (ss >> num) {\n        num_list.push_back(num);\n    }\n    \n    sort(num_list.begin(), num_list.end(), [&](const string &a, const string &b) {\n        return num_map[a] < num_map[b];\n    });\n    \n    string result;\n    for (const string &n : num_list) {\n        result += n + \" \";\n    }\n    \n    return result.substr(0, result.size() - 1);\n}", "entry_point": "sort_numbers", "result": "passed", "passed": true}
{"task_id": "CPP/2", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number - floor(number);\n}", "entry_point": "truncate_number", "result": "passed", "passed": true}
{"task_id": "CPP/20", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    sort(numbers.begin(), numbers.end());\n    float min_diff = numeric_limits<float>::max();\n    pair<float, float> closest_pair;\n\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = make_pair(numbers[i], numbers[i + 1]);\n        }\n    }\n    \n    return vector<float>{closest_pair.first, closest_pair.second};\n}", "entry_point": "find_closest_elements", "result": "passed", "passed": true}
{"task_id": "CPP/21", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n    float min_val = *min_element(numbers.begin(), numbers.end());\n    float max_val = *max_element(numbers.begin(), numbers.end());\n    vector<float> scaled_numbers;\n    \n    for (float num : numbers) {\n        scaled_numbers.push_back((num - min_val) / (max_val - min_val));\n    }\n    \n    return scaled_numbers;\n}", "entry_point": "rescale_to_unit", "result": "passed", "passed": true}
{"task_id": "CPP/22", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(boost::any_cast<int>(value));\n        }\n    }\n    return result;\n}", "entry_point": "filter_integers", "result": "passed", "passed": true}
{"task_id": "CPP/23", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    return length;\n}", "entry_point": "strlen", "result": "passed", "passed": true}
{"task_id": "CPP/24", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n    for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n}", "entry_point": "largest_divisor", "result": "passed", "passed": true}
{"task_id": "CPP/25", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> factors;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}", "entry_point": "factorize", "result": "passed", "passed": true}
{"task_id": "CPP/26", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    unordered_map<int, int> count;\n    \n    for (int num : numbers) {\n        count[num]++;\n    }\n    \n    for (int num : numbers) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    \n    return result;\n}", "entry_point": "remove_duplicates", "result": "passed", "passed": true}
{"task_id": "CPP/27", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n    for (char &c : str) {\n        if (isupper(c))\n            c = tolower(c);\n        else if (islower(c))\n            c = toupper(c);\n    }\n    return str;\n}", "entry_point": "flip_case", "result": "Compilation failed: In file included from /tmp/tmpiguzrtgx/temp.cpp:19:\n/tmp/tmpiguzrtgx/temp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpiguzrtgx/temp.cpp:21:13: error: \u2018flip_case\u2019 was not declared in this scope; did you mean \u2018filp_case\u2019?\n   21 |     assert (flip_case(\"\") == \"\");\n      |             ^~~~~~~~~\n", "passed": false}
{"task_id": "CPP/28", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string result;\n    for (const string& str : strings) {\n        result += str;\n    }\n    return result;\n}", "entry_point": "concatenate", "result": "passed", "passed": true}
{"task_id": "CPP/29", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}", "entry_point": "filter_by_prefix", "result": "passed", "passed": true}
{"task_id": "CPP/3", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}", "entry_point": "below_zero", "result": "passed", "passed": true}
{"task_id": "CPP/30", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n    vector<float> result;\n    for (float num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}", "entry_point": "get_positive", "result": "passed", "passed": true}
{"task_id": "CPP/31", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n    if (n <= 1)\n        return false;\n    for (long long i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}", "entry_point": "is_prime", "result": "passed", "passed": true}
{"task_id": "CPP/32", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double low = -1000, high = 1000, mid;\n    while (high - low > 1e-7) {\n        mid = (low + high) / 2;\n        if (poly(xs, mid) * poly(xs, low) <= 0)\n            high = mid;\n        else\n            low = mid;\n    }\n    return mid;\n}", "entry_point": "find_zero", "result": "passed", "passed": true}
{"task_id": "CPP/33", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n    vector<int> result = l;\n    vector<int> to_sort;\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            to_sort.push_back(l[i]);\n        }\n    }\n\n    sort(to_sort.begin(), to_sort.end());\n\n    int j = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            result[i] = to_sort[j++];\n        }\n    }\n\n    return result;\n}", "entry_point": "sort_third", "result": "passed", "passed": true}
{"task_id": "CPP/34", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}", "entry_point": "unique", "result": "passed", "passed": true}
{"task_id": "CPP/35", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n    float max_val = l[0];\n    for (float num : l) {\n        if (num > max_val) {\n            max_val = num;\n        }\n    }\n    return max_val;\n}", "entry_point": "max_element", "result": "passed", "passed": true}
{"task_id": "CPP/36", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && to_string(i).find('7') != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "fizz_buzz", "result": "Program failed: temp_program.exe: /tmp/tmpm1kq8s_c/temp.cpp:21: int main(): Assertion `fizz_buzz(78) == 2' failed.\n", "passed": false}
{"task_id": "CPP/37", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n    vector<float> even_indices;\n    for (int i = 0; i < l.size(); i += 2) {\n        even_indices.push_back(l[i]);\n    }\n    sort(even_indices.begin(), even_indices.end());\n    \n    vector<float> result(l);\n    for (int i = 0; i < even_indices.size(); i++) {\n        result[i * 2] = even_indices[i];\n    }\n    return result;\n}", "entry_point": "sort_even", "result": "passed", "passed": true}
{"task_id": "CPP/38", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x = s.substr(i * 3, 3);\n    if (x.length() == 3) x = x[x.length() - 1] + x.substr(0, 2);\n    output = output + x;\n    }\n    return output;\n}", "entry_point": "decode_cyclic", "result": "passed", "passed": true}
{"task_id": "CPP/39", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n    int count = 0, a = 0, b = 1, fib = 0;\n\n    while (count < n) {\n        fib = a + b;\n        a = b;\n        b = fib;\n\n        if (fib > 1) {\n            bool is_prime = true;\n            for (int i = 2; i * i <= fib; i++) {\n                if (fib % i == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                count++;\n            }\n        }\n    }\n    return fib;\n}", "entry_point": "prime_fib", "result": "passed", "passed": true}
{"task_id": "CPP/4", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0.0;\n    float mean = 0.0;\n    int n = numbers.size();\n    \n    for (float num : numbers) {\n        sum += num;\n    }\n    mean = sum / n;\n\n    float mad = 0.0;\n    for (float num : numbers) {\n        mad += fabs(num - mean);\n    }\n    return mad / n;\n}", "entry_point": "mean_absolute_deviation", "result": "passed", "passed": true}
{"task_id": "CPP/40", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    int n = l.size();\n    for (int i = 0; i < n - 2; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "entry_point": "triples_sum_to_zero", "result": "passed", "passed": true}
{"task_id": "CPP/41", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n * n;\n}", "entry_point": "car_race_collision", "result": "passed", "passed": true}
{"task_id": "CPP/42", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int& num : l)\n        num += 1;\n    return l;\n}", "entry_point": "incr_list", "result": "passed", "passed": true}
{"task_id": "CPP/43", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}", "entry_point": "pairs_sum_to_zero", "result": "passed", "passed": true}
{"task_id": "CPP/44", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string result = \"\";\n    while (x > 0) {\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result.empty() ? \"0\" : result;\n}", "entry_point": "change_base", "result": "passed", "passed": true}
{"task_id": "CPP/45", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n    return 0.5 * a * h;\n}", "entry_point": "triangle_area", "result": "passed", "passed": true}
{"task_id": "CPP/46", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    int fib[n + 1];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n\n    for (int i = 4; i <= n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n    }\n\n    return fib[n];\n}", "entry_point": "fib4", "result": "passed", "passed": true}
{"task_id": "CPP/47", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}", "entry_point": "median", "result": "passed", "passed": true}
{"task_id": "CPP/48", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "entry_point": "is_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/49", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    if (p == 1)\n        return 0;\n    long long result = 1;\n    long long base = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\n            result = (result * base) % p;\n        base = (base * base) % p;\n        n /= 2;\n    }\n    return result;\n}", "entry_point": "modp", "result": "passed", "passed": true}
{"task_id": "CPP/5", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i < numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n    return result;\n}", "entry_point": "intersperse", "result": "passed", "passed": true}
{"task_id": "CPP/50", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        int w = ((int)s[i] - 5 - (int)'a' + 26) % 26 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}", "entry_point": "decode_shift", "result": "passed", "passed": true}
{"task_id": "CPP/51", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n    string result;\n    for (char c : text) {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n            result += c;\n        }\n    }\n    return result;\n}", "entry_point": "remove_vowels", "result": "passed", "passed": true}
{"task_id": "CPP/52", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n    for (int num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "below_threshold", "result": "passed", "passed": true}
{"task_id": "CPP/53", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x + y;\n}", "entry_point": "add", "result": "passed", "passed": true}
{"task_id": "CPP/54", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    sort(s0.begin(), s0.end());\n    sort(s1.begin(), s1.end());\n    return s0 == s1;\n}", "entry_point": "same_chars", "result": "Program failed: temp_program.exe: /tmp/tmpmhin8q5a/temp.cpp:17: int main(): Assertion `same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true' failed.\n", "passed": false}
{"task_id": "CPP/55", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}", "entry_point": "fib", "result": "passed", "passed": true}
{"task_id": "CPP/56", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}", "entry_point": "correct_bracketing", "result": "passed", "passed": true}
{"task_id": "CPP/57", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        } else if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}", "entry_point": "monotonic", "result": "passed", "passed": true}
{"task_id": "CPP/58", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> result;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(result));\n    result.erase(unique(result.begin(), result.end()), result.end());\n    return result;\n}", "entry_point": "common", "result": "passed", "passed": true}
{"task_id": "CPP/59", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n    int largest = -1;\n    while (n % 2 == 0) {\n        largest = 2;\n        n /= 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    if (n > 2)\n        largest = n;\n    return largest;\n}", "entry_point": "largest_prime_factor", "result": "passed", "passed": true}
{"task_id": "CPP/6", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n\n    while (ss >> group) {\n        int max_depth = 0, current_depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                current_depth++;\n                max_depth = max(max_depth, current_depth);\n            } else if (ch == ')') {\n                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n    }\n\n    return result;\n}", "entry_point": "parse_nested_parens", "result": "passed", "passed": true}
{"task_id": "CPP/60", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    return n * (n + 1) / 2;\n}", "entry_point": "sum_to_n", "result": "passed", "passed": true}
{"task_id": "CPP/61", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int balance = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n}", "entry_point": "correct_bracketing", "result": "passed", "passed": true}
{"task_id": "CPP/62", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for (int i = 1; i < xs.size(); i++) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}", "entry_point": "derivative", "result": "passed", "passed": true}
{"task_id": "CPP/63", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n    if (n == 0 || n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n\n    int a = 0, b = 0, c = 1, result = 0;\n    for (int i = 3; i <= n; ++i) {\n        result = a + b + c;\n        a = b;\n        b = c;\n        c = result;\n    }\n    return result;\n}", "entry_point": "fibfib", "result": "passed", "passed": true}
{"task_id": "CPP/64", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    int count = 0;\n    int length = s.length();\n    for (int i = 0; i < length; i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        } else if (c == 'y' && i == length - 1) {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "vowels_count", "result": "passed", "passed": true}
{"task_id": "CPP/65", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string str = to_string(x);\n    int len = str.length();\n    shift = shift % len;\n    if (shift == 0)\n        return str;\n    return str.substr(len - shift) + str.substr(0, len - shift);\n}", "entry_point": "circular_shift", "result": "Program failed: temp_program.exe: /tmp/tmpcsf107ee/temp.cpp:22: int main(): Assertion `circular_shift(97, 8) == \"79\"' failed.\n", "passed": false}
{"task_id": "CPP/66", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}", "entry_point": "digitSum", "result": "passed", "passed": true}
{"task_id": "CPP/67", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n    int apples = 0, oranges = 0;\n    sscanf(s.c_str(), \"%d apples and %d oranges\", &apples, &oranges);\n    return n - apples - oranges;\n}", "entry_point": "fruit_distribution", "result": "passed", "passed": true}
{"task_id": "CPP/68", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> result;\n    int smallest_even = INT_MAX;\n    int index = -1;\n\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even) {\n                smallest_even = arr[i];\n                index = i;\n            }\n        }\n    }\n\n    if (index != -1) {\n        result.push_back(smallest_even);\n        result.push_back(index);\n    }\n\n    return result;\n}", "entry_point": "pluck", "result": "passed", "passed": true}
{"task_id": "CPP/69", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    \n    int result = -1;\n    for (const auto& pair : freq) {\n        if (pair.first <= pair.second) {\n            result = max(result, pair.first);\n        }\n    }\n    \n    return result;\n}", "entry_point": "search", "result": "passed", "passed": true}
{"task_id": "CPP/7", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> result;\n    for (const string& str : strings) {\n        if (str.find(substring) != string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}", "entry_point": "filter_by_substring", "result": "passed", "passed": true}
{"task_id": "CPP/70", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n    vector<int> result;\n    if (lst.empty())\n        return result;\n\n    sort(lst.begin(), lst.end());\n    int left = 0, right = lst.size() - 1;\n\n    while (left <= right) {\n        if (left == right) {\n            result.push_back(lst[left]);\n        } else {\n            result.push_back(lst[left]);\n            result.push_back(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    return result;\n}", "entry_point": "strange_sort_list", "result": "passed", "passed": true}
{"task_id": "CPP/71", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n    if (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }\n}", "entry_point": "triangle_area", "result": "passed", "passed": true}
{"task_id": "CPP/72", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n    int sum = 0;\n    int n = q.size();\n    \n    for (int i = 0; i < n; i++)\n        sum += q[i];\n    \n    bool is_palindrome = true;\n    for (int i = 0; i < n / 2; i++) {\n        if (q[i] != q[n - 1 - i]) {\n            is_palindrome = false;\n            break;\n        }\n    }\n    \n    return is_palindrome && sum <= w;\n}", "entry_point": "will_it_fly", "result": "passed", "passed": true}
{"task_id": "CPP/73", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n    int changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;\n}", "entry_point": "smallest_change", "result": "passed", "passed": true}
{"task_id": "CPP/74", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int sum1 = 0, sum2 = 0;\n    for (const string& str : lst1)\n        sum1 += str.size();\n    for (const string& str : lst2)\n        sum2 += str.size();\n    \n    if (sum1 < sum2)\n        return lst1;\n    else\n        return lst2;\n}", "entry_point": "total_match", "result": "Program failed: temp_program.exe: /tmp/tmp3kv5d9rv/temp.cpp:39: int main(): Assertion `issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"})' failed.\n", "passed": false}
{"task_id": "CPP/75", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n    if (a < 30) \n        return false;\n\n    int count = 0;\n\n    for (int i = 2; i < a; i++) {\n        if (a % i == 0) {\n            bool prime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n            if (prime) {\n                count++;\n                a /= i;\n                i--;\n            }\n        }\n    }\n\n    return count == 3 && a == 1;\n}", "entry_point": "is_multiply_prime", "result": "Program failed: temp_program.exe: /tmp/tmpoaw2q2fz/temp.cpp:37: int main(): Assertion `is_multiply_prime(30) == true' failed.\n", "passed": false}
{"task_id": "CPP/76", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n    if (n <= 1) \n        return x == 1; \n    int power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}", "entry_point": "is_simple_power", "result": "passed", "passed": true}
{"task_id": "CPP/77", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n    int cubeRoot = round(cbrt(a));\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}", "entry_point": "iscube", "result": "passed", "passed": true}
{"task_id": "CPP/78", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "hex_key", "result": "passed", "passed": true}
{"task_id": "CPP/79", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string binary = \"\";\n    while (decimal > 0) {\n        binary = to_string(decimal % 2) + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}", "entry_point": "decimal_to_binary", "result": "Program failed: temp_program.exe: /tmp/tmplt3ufvn5/temp.cpp:20: int main(): Assertion `decimal_to_binary(0) == \"db0db\"' failed.\n", "passed": false}
{"task_id": "CPP/8", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    int sum = 0;\n    int product = 1;\n    \n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    \n    return {sum, product};\n}", "entry_point": "sum_product", "result": "passed", "passed": true}
{"task_id": "CPP/80", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length() < 3)\n        return false;\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}", "entry_point": "is_happy", "result": "passed", "passed": true}
{"task_id": "CPP/81", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for (float gpa : grades) {\n        if (gpa == 4.0)\n            letter_grades.push_back(\"A+\");\n        else if (gpa > 3.7)\n            letter_grades.push_back(\"A\");\n        else if (gpa > 3.3)\n            letter_grades.push_back(\"A-\");\n        else if (gpa > 3.0)\n            letter_grades.push_back(\"B+\");\n        else if (gpa > 2.7)\n            letter_grades.push_back(\"B\");\n        else if (gpa > 2.3)\n            letter_grades.push_back(\"B-\");\n        else if (gpa > 2.0)\n            letter_grades.push_back(\"C+\");\n        else if (gpa > 1.7)\n            letter_grades.push_back(\"C\");\n        else if (gpa > 1.3)\n            letter_grades.push_back(\"C-\");\n        else if (gpa > 1.0)\n            letter_grades.push_back(\"D+\");\n        else if (gpa > 0.7)\n            letter_grades.push_back(\"D\");\n        else if (gpa > 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;\n}", "entry_point": "numerical_letter_grade", "result": "Program failed: temp_program.exe: /tmp/tmprcj9cocl/temp.cpp:53: int main(): Assertion `issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"})' failed.\n", "passed": false}
{"task_id": "CPP/82", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n    int length = str.length();\n    if (length < 2)\n        return false;\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0)\n            return false;\n    }\n    return true;\n}", "entry_point": "prime_length", "result": "passed", "passed": true}
{"task_id": "CPP/83", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n    if (n == 1)\n        return 2; // 1 and 1\n    int starts_with_one = pow(10, n - 1) - pow(10, n - 2); // 1xxxx... to 1xxxx... (n digits)\n    int ends_with_one = pow(10, n - 1); // xxxxx1 (n digits)\n    int both_starts_and_ends = pow(10, n - 2); // 1xxxx1 (n digits)\n    return starts_with_one + ends_with_one - both_starts_and_ends;\n}", "entry_point": "starts_one_ends", "result": "Program failed: temp_program.exe: /tmp/tmpv7mkptnc/temp.cpp:19: int main(): Assertion `starts_one_ends(1) == 1' failed.\n", "passed": false}
{"task_id": "CPP/84", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    int sum = 0;\n    while (N > 0) {\n        sum += N % 10;\n        N /= 10;\n    }\n    string binary = \"\";\n    while (sum > 0) {\n        binary = to_string(sum % 2) + binary;\n        sum /= 2;\n    }\n    return binary.empty() ? \"0\" : binary;\n}", "entry_point": "solve", "result": "passed", "passed": true}
{"task_id": "CPP/85", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "entry_point": "add", "result": "passed", "passed": true}
{"task_id": "CPP/86", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n    string result;\n    string word;\n    for (char c : s) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                sort(word.begin(), word.end());\n                result += word + ' ';\n                word.clear();\n            }\n            result += ' ';\n        } else {\n            word += c;\n        }\n    }\n    if (!word.empty()) {\n        sort(word.begin(), word.end());\n        result += word;\n    }\n    return result;\n}", "entry_point": "anti_shuffle", "result": "Program failed: temp_program.exe: /tmp/tmp1hs6kjw2/temp.cpp:37: int main(): Assertion `anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\"' failed.\n", "passed": false}
{"task_id": "CPP/87", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> result;\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back({i, j});\n            }\n        }\n    }\n    sort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] != b[0]) return a[0] < b[0];\n        return a[1] > b[1];\n    });\n    return result;\n}", "entry_point": "get_row", "result": "passed", "passed": true}
{"task_id": "CPP/88", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n    if (array.empty())\n        return {};\n    \n    int sum = array.front() + array.back();\n    vector<int> sorted_array = array;\n\n    if (sum % 2 == 0) {\n        sort(sorted_array.rbegin(), sorted_array.rend());\n    } else {\n        sort(sorted_array.begin(), sorted_array.end());\n    }\n    \n    return sorted_array;\n}", "entry_point": "sort_array", "result": "passed", "passed": true}
{"task_id": "CPP/89", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            char base = islower(c) ? 'a' : 'A';\n            result += (base + (c - base + 4) % 26);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}", "entry_point": "encrypt", "result": "passed", "passed": true}
{"task_id": "CPP/9", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n    vector<int> result;\n    int current_max = INT_MIN;\n    for (int num : numbers) {\n        current_max = max(current_max, num);\n        result.push_back(current_max);\n    }\n    return result;\n}", "entry_point": "rolling_max", "result": "passed", "passed": true}
{"task_id": "CPP/90", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    if (lst.size() < 2)\n        return None;\n\n    sort(lst.begin(), lst.end());\n    \n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) \n            return lst[i];\n    }\n    \n    return None;\n}", "entry_point": "next_smallest", "result": "Compilation failed: /tmp/tmpwrrhr3h1/temp.cpp: In function \u2018int next_smallest(std::vector<int>)\u2019:\n/tmp/tmpwrrhr3h1/temp.cpp:11:16: error: \u2018None\u2019 was not declared in this scope\n   11 |         return None;\n      |                ^~~~\n/tmp/tmpwrrhr3h1/temp.cpp:20:12: error: \u2018None\u2019 was not declared in this scope\n   20 |     return None;\n      |            ^~~~\n", "passed": false}
{"task_id": "CPP/91", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n    int count = 0;\n    bool isSentenceStart = true;\n\n    for (char c : S) {\n        if (isSentenceStart && (c == 'I')) {\n            count++;\n        }\n        isSentenceStart = (c == '.' || c == '?' || c == '!');\n    }\n\n    return count;\n}", "entry_point": "is_bored", "result": "Program failed: temp_program.exe: /tmp/tmptoi5p_kn/temp.cpp:26: int main(): Assertion `is_bored(\"Is the sky blue?\") == 0' failed.\n", "passed": false}
{"task_id": "CPP/92", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n    if (floor(a) != a || floor(b) != b || floor(c) != c)\n        return false;\n    return (a == b + c || b == a + c || c == a + b);\n}", "entry_point": "any_int", "result": "passed", "passed": true}
{"task_id": "CPP/93", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    for (char &c : message) {\n        if (isalpha(c)) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else {\n                c = tolower(c);\n            }\n            if (c == 'A' || c == 'a') {\n                c = 'C';\n            } else if (c == 'E' || c == 'e') {\n                c = 'G';\n            } else if (c == 'I' || c == 'i') {\n                c = 'K';\n            } else if (c == 'O' || c == 'o') {\n                c = 'Q';\n            } else if (c == 'U' || c == 'u') {\n                c = 'W';\n            }\n        }\n    }\n    return message;\n}", "entry_point": "encode", "result": "Program failed: temp_program.exe: /tmp/tmp6eyg2t7r/temp.cpp:35: int main(): Assertion `encode(\"TEST\") == \"tgst\"' failed.\n", "passed": false}
{"task_id": "CPP/94", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n    int largest_prime = -1;\n\n    auto is_prime = [](int num) {\n        if (num < 2) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };\n\n    for (int num : lst) {\n        if (is_prime(num) && num > largest_prime) {\n            largest_prime = num;\n        }\n    }\n\n    if (largest_prime == -1) return 0;\n\n    int sum_of_digits = 0;\n    while (largest_prime > 0) {\n        sum_of_digits += largest_prime % 10;\n        largest_prime /= 10;\n    }\n\n    return sum_of_digits;\n}", "entry_point": "skjkasdkd", "result": "passed", "passed": true}
{"task_id": "CPP/95", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n    if (dict.empty())\n        return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& pair : dict) {\n        const string& key = pair.first;\n        if (!key.empty()) {\n            if (islower(key[0]) == 0) \n                all_lower = false;\n            if (isupper(key[0]) == 0) \n                all_upper = false;\n        }\n    }\n\n    return all_lower || all_upper;\n}", "entry_point": "check_dict_case", "result": "Program failed: temp_program.exe: /tmp/tmp2t3q54h8/temp.cpp:35: int main(): Assertion `check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false' failed.\n", "passed": false}
{"task_id": "CPP/96", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}", "entry_point": "count_up_to", "result": "passed", "passed": true}
{"task_id": "CPP/97", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n    int unitDigitA = abs(a) % 10;\n    int unitDigitB = abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}", "entry_point": "multiply", "result": "passed", "passed": true}
{"task_id": "CPP/98", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}", "entry_point": "count_upper", "result": "Program failed: temp_program.exe: /tmp/tmphngcazn4/temp.cpp:21: int main(): Assertion `count_upper(\"aBCdEf\") == 1' failed.\n", "passed": false}
{"task_id": "CPP/99", "code": "#include <bits/stdc++.h>\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double num = stod(value);\n    return (num > 0) ? floor(num + 0.5) : ceil(num - 0.5);\n}", "entry_point": "closest_integer", "result": "passed", "passed": true}
