{"task_id": "CPP/0", "code": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\nfor (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (fabs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;", "entry_point": "has_close_elements", "result": "passed", "passed": true}
{"task_id": "CPP/1", "code": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\nvector<string> result;\nstring current_group = \"\";\nint balance = 0;\n\n\nfor (char c : paren_string) {\n    if (c == ' ') {\n        continue; // Ignore spaces\n    }\n\n    current_group += c;\n    if (c == '(') {\n        balance++;\n    } else if (c == ')') {\n        balance--;\n    }\n\n    if (balance == 0 && !current_group.empty()) {\n        result.push_back(current_group);\n        current_group = \"\";\n    }\n}\nreturn result;", "entry_point": "separate_paren_groups", "result": "passed", "passed": true}
{"task_id": "CPP/2", "code": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\nreturn number - floor(number);", "entry_point": "truncate_number", "result": "passed", "passed": true}
{"task_id": "CPP/3", "code": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\nint balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;", "entry_point": "below_zero", "result": "passed", "passed": true}
{"task_id": "CPP/4", "code": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\nif (numbers.empty()) {\n        return 0.0f;\n    }\n    float sum = 0.0f;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n    float mad_sum = 0.0f;\n    for (float num : numbers) {\n        mad_sum += fabs(num - mean);\n    }\n    return mad_sum / numbers.size();", "entry_point": "mean_absolute_deviation", "result": "passed", "passed": true}
{"task_id": "CPP/5", "code": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \nvector<int> result;\nif (numbers.empty()) {\nreturn result;\n}\nfor (size_t i = 0; i < numbers.size(); ++i) {\nresult.push_back(numbers[i]);\nif (i < numbers.size() - 1) {\nresult.push_back(delimeter);\n}\n}\nreturn result;", "entry_point": "intersperse", "result": "passed", "passed": true}
{"task_id": "CPP/6", "code": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\nvector<int> result;\nstring current_group;\nfor (char c : paren_string) {\nif (c == ' ') {\nif (!current_group.empty()) {\nint max_depth = 0;\nint current_depth = 0;\nfor (char pc : current_group) {\nif (pc == '(') {\ncurrent_depth++;\nif (current_depth > max_depth) {\nmax_depth = current_depth;\n}\n} else if (pc == ')') {\ncurrent_depth--;\n}\n}\nresult.push_back(max_depth);\ncurrent_group.clear();\n}\n} else {\ncurrent_group += c;\n}\n}\n// Process the last group\nif (!current_group.empty()) {\nint max_depth = 0;\nint current_depth = 0;\nfor (char pc : current_group) {\nif (pc == '(') {\ncurrent_depth++;\nif (current_depth > max_depth) {\nmax_depth = current_depth;\n}\n} else if (pc == ')') {\ncurrent_depth--;\n}\n}\nresult.push_back(max_depth);\n}\nreturn result;", "entry_point": "parse_nested_parens", "result": "passed", "passed": true}
{"task_id": "CPP/7", "code": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\nvector<string> result;\nfor (const string& s : strings) {\nif (s.find(substring) != string::npos) {\nresult.push_back(s);\n}\n}\nreturn result;", "entry_point": "filter_by_substring", "result": "passed", "passed": true}
{"task_id": "CPP/8", "code": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\nint sum = 0;\n    int product = 1;\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return {sum, product};", "entry_point": "sum_product", "result": "passed", "passed": true}
{"task_id": "CPP/9", "code": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\nif (numbers.empty()) {\n        return {};r<int> result;\nint current_max = numbers[0];\nresult.push_back(current_max);\nfor (size_t i = 1; i < numbers.size(); ++i) {\nif (numbers[i] > current_max) {\ncurrent_max = numbers[i];\n}\nresult.push_back(current_max);\n}\nreturn result;", "entry_point": "rolling_max", "result": "Compilation failed: /tmp/tmpomg735to/temp.cpp: In function \u2018std::vector<int> rolling_max(std::vector<int>)\u2019:\n/tmp/tmpomg735to/temp.cpp:13:19: error: \u2018r\u2019 was not declared in this scope\n   13 |         return {};r<int> result;\n      |                   ^\n/tmp/tmpomg735to/temp.cpp:13:21: error: expected primary-expression before \u2018int\u2019\n   13 |         return {};r<int> result;\n      |                     ^~~\n/tmp/tmpomg735to/temp.cpp:15:1: error: \u2018result\u2019 was not declared in this scope\n   15 | result.push_back(current_max);\n      | ^~~~~~\n/tmp/tmpomg735to/temp.cpp:26:40: error: a function-definition is not allowed here before \u2018{\u2019 token\n   26 | bool issame(vector<int> a,vector<int>b){\n      |                                        ^\n/tmp/tmpomg735to/temp.cpp:34:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   34 | int main(){\n      |           ^\n/tmp/tmpomg735to/temp.cpp:39:1: error: expected \u2018}\u2019 at end of input\n   39 | }\n      | ^\n/tmp/tmpomg735to/temp.cpp:11:45: note: to match this \u2018{\u2019\n   11 | vector<int> rolling_max(vector<int> numbers){\n      |                                             ^\n", "passed": false}
{"task_id": "CPP/10", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\nif (str.empty()) {\n        return \"\";\n    }\n    int n = str.length();\n    int longest_palindrome_postfix_len = 0;\n    for (int i = 0; i < n; ++i) {\n        string postfix = str.substr(i);\n        if (is_palindrome(postfix)) {\n            longest_palindrome_postfix_len = postfix.length();\n            break;\n        }\n    }\n    string prefix_to_reverse = str.substr(0, n - longest_palindrome_postfix_len);\n    string reversed_prefix(prefix_to_reverse.rbegin(), prefix_to_reverse.rend());\n    return str + reversed_prefix;", "entry_point": "make_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/11", "code": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\nstring s = \"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i] == b[i]){\n            s += \"0\";\n        }else{\n            s += \"1\";\n        }\n    }\n    return s;", "entry_point": "string_xor", "result": "passed", "passed": true}
{"task_id": "CPP/12", "code": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\nif (strings.empty())\n        return \"\";\n    string longestString = \"\";\n    for (string s : strings) {\n        if (s.length() > longestString.length()) {\n            longestString = s;\n        }\n    }\n    return longestString;", "entry_point": "longest", "result": "passed", "passed": true}
{"task_id": "CPP/13", "code": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\nwhile (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;", "entry_point": "greatest_common_divisor", "result": "passed", "passed": true}
{"task_id": "CPP/14", "code": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\nvector<string> prefixes;\nfor (int i = 1; i <= str.length(); ++i) {\nprefixes.push_back(str.substr(0, i));\n}\nreturn prefixes;", "entry_point": "all_prefixes", "result": "passed", "passed": true}
{"task_id": "CPP/15", "code": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\nstring result = \"\";\n    for (int i = 0; i <= n; ++i) {\n        result += to_string(i);\n        if (i < n) {\n            result += \" \";\n        }\n    }\n    return result;", "entry_point": "string_sequence", "result": "passed", "passed": true}
{"task_id": "CPP/16", "code": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \nvector<bool> seen(26, false); // For 'a' through 'z'\nint count = 0;\n\n\nfor (char c : str) {\n    if (isalpha(c)) { // Check if the character is an alphabet\n        char lower_c = tolower(c); // Convert to lowercase\n        if (!seen[lower_c - 'a']) {\n            seen[lower_c - 'a'] = true;\n            count++;\n        }\n    }\n}\nreturn count;", "entry_point": "count_distinct_characters", "result": "Program failed: temp_program.exe: /tmp/tmpv79mmina/temp.cpp:37: int main(): Assertion `count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5' failed.\n", "passed": false}
{"task_id": "CPP/17", "code": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \nvector<int> beats;\nfor (int i = 0; i < music_string.length(); ++i) {\nif (music_string[i] == 'o') {\nif (i + 1 < music_string.length() && music_string[i+1] == '|') {\nbeats.push_back(2);\ni++;\n} else {\nbeats.push_back(4);\n}\n} else if (music_string[i] == '.') {\nif (i + 1 < music_string.length() && music_string[i+1] == '|') {\nbeats.push_back(1);\ni++;\n}\n}\n}\nreturn beats;", "entry_point": "parse_music", "result": "passed", "passed": true}
{"task_id": "CPP/18", "code": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\nif (substring.empty()) {\n        return 0;\n    }\n    int count = 0;\n    for (int i = 0; (i = str.find(substring, i)) != string::npos; ++i) {\n        count++;\n    }\n    return count;", "entry_point": "how_many_times", "result": "passed", "passed": true}
{"task_id": "CPP/19", "code": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\nmap<string, int> word_to_int;\n    word_to_int[\"zero\"] = 0;\n    word_to_int[\"one\"] = 1;\n    word_to_int[\"two\"] = 2;\n    word_to_int[\"three\"] = 3;\n    word_to_int[\"four\"] = 4;\n    word_to_int[\"five\"] = 5;\n    word_to_int[\"six\"] = 6;\n    word_to_int[\"seven\"] = 7;\n    word_to_int[\"eight\"] = 8;\n    word_to_int[\"nine\"] = 9;\n\n\nmap<int, string> int_to_word;\nint_to_word[0] = \"zero\";\nint_to_word[1] = \"one\";\nint_to_word[2] = \"two\";\nint_to_word[3] = \"three\";\nint_to_word[4] = \"four\";\nint_to_word[5] = \"five\";\nint_to_word[6] = \"six\";\nint_to_word[7] = \"seven\";\nint_to_word[8] = \"eight\";\nint_to_word[9] = \"nine\";\n\nstring result = \"\";\nstring current_word = \"\";\nvector<int> nums;\n\nfor (char c : numbers) {\n    if (c == ' ') {\n        if (!current_word.empty()) {\n            nums.push_back(word_to_int[current_word]);\n            current_word = \"\";\n        }\n    } else {\n        current_word += c;\n    }\n}\nif (!current_word.empty()) {\n    nums.push_back(word_to_int[current_word]);\n}\n\nsort(nums.begin(), nums.end());\n\nfor (int i = 0; i < nums.size(); ++i) {\n    result += int_to_word[nums[i]];\n    if (i < nums.size() - 1) {\n        result += \" \";\n    }\n}\nreturn result;", "entry_point": "sort_numbers", "result": "passed", "passed": true}
{"task_id": "CPP/20", "code": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\nfloat min_diff = -1.0;;\nvector<float> result;\n\n\nfor (size_t i = 0; i < numbers.size(); ++i) {\n    for (size_t j = i + 1; j < numbers.size(); ++j) {\n        float diff = fabs(numbers[i] - numbers[j]);\n        if (min_diff == -1.0 || diff < min_diff) {\n            min_diff = diff;\n            result.clear();\n            if (numbers[i] < numbers[j]) {\n                result.push_back(numbers[i]);\n                result.push_back(numbers[j]);\n            } else {\n                result.push_back(numbers[j]);\n                result.push_back(numbers[i]);\n            }\n        }\n    }\n}\nreturn result;", "entry_point": "find_closest_elements", "result": "passed", "passed": true}
{"task_id": "CPP/21", "code": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \nif (numbers.empty()) {\n        return {};float min_val = numbers[0];\nfloat max_val = numbers[0];\n\nfor (float num : numbers) {\n    if (num < min_val) {\n        min_val = num;\n    }\n    if (num > max_val) {\n        max_val = num;\n    }\n}\n\nvector<float> rescaled_numbers;\nif (max_val == min_val) {\n    for (float num : numbers) {\n        rescaled_numbers.push_back(0.0f); // All elements become 0 if min and max are the same\n    }\n} else {\n    for (float num : numbers) {\n        rescaled_numbers.push_back((num - min_val) / (max_val - min_val));\n    }\n}\n\nreturn rescaled_numbers;", "entry_point": "rescale_to_unit", "result": "Compilation failed: /tmp/tmpd46p9qe7/temp.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019:\n/tmp/tmpd46p9qe7/temp.cpp:41:44: error: a function-definition is not allowed here before \u2018{\u2019 token\n   41 | bool issame(vector<float> a,vector<float>b){\n      |                                            ^\n/tmp/tmpd46p9qe7/temp.cpp:49:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   49 | int main(){\n      |           ^\n/tmp/tmpd46p9qe7/temp.cpp:55:1: error: expected \u2018}\u2019 at end of input\n   55 | }\n      | ^\n/tmp/tmpd46p9qe7/temp.cpp:12:53: note: to match this \u2018{\u2019\n   12 | vector<float> rescale_to_unit(vector<float> numbers){\n      |                                                     ^\n/tmp/tmpd46p9qe7/temp.cpp:55:1: warning: control reaches end of non-void function [-Wreturn-type]\n   55 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/22", "code": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\nvector<int> integers;\nfor (const boost::any& value : values) {\nif (value.type() == typeid(int)) {\nintegers.push_back(boost::any_cast<int>(value));\n}\n}\nreturn integers;", "entry_point": "filter_integers", "result": "passed", "passed": true}
{"task_id": "CPP/23", "code": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\nreturn str.length();", "entry_point": "strlen", "result": "passed", "passed": true}
{"task_id": "CPP/24", "code": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\nfor (int i = n / 2; i >= 1; --i) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // Should not be reached for n > 1 as 1 is always a divisor.", "entry_point": "largest_divisor", "result": "passed", "passed": true}
{"task_id": "CPP/25", "code": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\nvector<int> factors;\nfor (int i = 2; i * i <= n; ++i) {\nwhile (n % i == 0) {\nfactors.push_back(i);\nn /= i;\n}\n}\nif (n > 1) {\nfactors.push_back(n);\n}\nreturn factors;", "entry_point": "factorize", "result": "passed", "passed": true}
{"task_id": "CPP/26", "code": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n// Use a frequency map to count occurrences of each number\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    } new vector to store the unique elements\nvector<int> result;\nfor (int num : numbers) {\n    if (counts[num] == 1) {\n        result.push_back(num);\n    }\n}\nreturn result;", "entry_point": "remove_duplicates", "result": "Compilation failed: /tmp/tmppvj1i21j/temp.cpp: In function \u2018std::vector<int> remove_duplicates(std::vector<int>)\u2019:\n/tmp/tmppvj1i21j/temp.cpp:17:11: error: invalid use of template-name \u2018std::vector\u2019 without an argument list\n   17 |     } new vector to store the unique elements\n      |           ^~~~~~\n/tmp/tmppvj1i21j/temp.cpp:17:11: note: class template argument deduction is only available with \u2018-std=c++17\u2019 or \u2018-std=gnu++17\u2019\nIn file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n                 from /tmp/tmppvj1i21j/temp.cpp:1:\n/usr/include/c++/9/bits/stl_vector.h:386:11: note: \u2018template<class _Tp, class _Alloc> class std::vector\u2019 declared here\n  386 |     class vector : protected _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmppvj1i21j/temp.cpp:21:9: error: \u2018result\u2019 was not declared in this scope\n   21 |         result.push_back(num);\n      |         ^~~~~~\n/tmp/tmppvj1i21j/temp.cpp:24:8: error: \u2018result\u2019 was not declared in this scope\n   24 | return result;\n      |        ^~~~~~\n", "passed": false}
{"task_id": "CPP/27", "code": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\nfor (int i = 0; i < str.length(); i++) {\n        if (islower(str[i])) {\n            str[i] = toupper(str[i]);\n        } else if (isupper(str[i])) {\n            str[i] = tolower(str[i]);\n        }\n    }\n    return str;", "entry_point": "flip_case", "result": "Compilation failed: In file included from /tmp/tmp1hgf74s6/temp.cpp:21:\n/tmp/tmp1hgf74s6/temp.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1hgf74s6/temp.cpp:23:13: error: \u2018flip_case\u2019 was not declared in this scope; did you mean \u2018filp_case\u2019?\n   23 |     assert (flip_case(\"\") == \"\");\n      |             ^~~~~~~~~\n", "passed": false}
{"task_id": "CPP/28", "code": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\nstring result = \"\";\n    for (string s : strings) {\n        result += s;\n    }\n    return result;", "entry_point": "concatenate", "result": "passed", "passed": true}
{"task_id": "CPP/29", "code": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\nvector<string> result;\nfor (const string& s : strings) {\nif (s.rfind(prefix, 0) == 0) {\nresult.push_back(s);\n}\n}\nreturn result;", "entry_point": "filter_by_prefix", "result": "passed", "passed": true}
{"task_id": "CPP/30", "code": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\nvector<float> positive_numbers;\nfor (float num : l) {\nif (num > 0) {\npositive_numbers.push_back(num);\n}\n}\nreturn positive_numbers;", "entry_point": "get_positive", "result": "passed", "passed": true}
{"task_id": "CPP/31", "code": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\nif (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    for (long long i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "is_prime", "result": "passed", "passed": true}
{"task_id": "CPP/32", "code": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\ndouble left = -1e9; // A sufficiently small number\n    double right = 1e9;  // A sufficiently large number\n    double mid; // Declare mid here\n\n// Based on the problem description, \"even number of coefficients\" implies an odd degree polynomial.\n// For odd-degree polynomials, there is always at least one real root.\n// We use the bisection method to find a root.\n// The initial range [-1e9, 1e9] is sufficiently large to contain most roots.\n\nfor (int iter = 0; iter < 200; ++iter) { // Iterate a fixed number of times for precision\n    mid = (left + right) / 2.0;\n    // If the function value at 'mid' has a different sign than at 'left', the root is in [left, mid].\n    // Otherwise, the root is in [mid, right].\n    if (poly(xs, mid) * poly(xs, left) <= 0) { \n        right = mid;\n    } else { \n        left = mid;\n    }\n}\nreturn mid;", "entry_point": "find_zero", "result": "passed", "passed": true}
{"task_id": "CPP/33", "code": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\nvector<int> result = l;\nvector<int> third_elements;\nvector<int> third_indices;\n\n\nfor (int i = 0; i < l.size(); ++i) {\n    if (i % 3 == 0) {\n        third_elements.push_back(l[i]);\n        third_indices.push_back(i);\n    }\n}\n\nsort(third_elements.begin(), third_elements.end());\n\nfor (int i = 0; i < third_elements.size(); ++i) {\n    result[third_indices[i]] = third_elements[i];\n}\n\nreturn result;", "entry_point": "sort_third", "result": "passed", "passed": true}
{"task_id": "CPP/34", "code": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\nsort(l.begin(), l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;", "entry_point": "unique", "result": "passed", "passed": true}
{"task_id": "CPP/35", "code": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\nif (l.empty()) {\n        return 0; // Or throw an exception, depending on desired behavior for empty vector\n    }\n    float max_val = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n    return max_val;", "entry_point": "max_element", "result": "passed", "passed": true}
{"task_id": "CPP/36", "code": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\nint count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int temp = i;\n            while (temp > 0) {\n                if (temp % 10 == 7) {\n                    count++;\n                }\n                temp /= 10;\n            }\n        }\n    }\n    return count;", "entry_point": "fizz_buzz", "result": "passed", "passed": true}
{"task_id": "CPP/37", "code": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\nvector<float> even_elements;\nfor (int i = 0; i < l.size(); ++i) {\nif (i % 2 == 0) {\neven_elements.push_back(l[i]);\n}\n}\nsort(even_elements.begin(), even_elements.end());\nint even_idx = 0;\nfor (int i = 0; i < l.size(); ++i) {\nif (i % 2 == 0) {\nl[i] = even_elements[even_idx++];\n}\n}\nreturn l;", "entry_point": "sort_even", "result": "passed", "passed": true}
{"task_id": "CPP/38", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\nint l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(2)+x.substr(0,2);\n        output=output+x;\n    }\n    return output;", "entry_point": "decode_cyclic", "result": "passed", "passed": true}
{"task_id": "CPP/39", "code": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    for (int i = 2; i * i <= num; ++i) {\n        if (num % i == 0) return false;\n    }\n    return true;\n}\n\nint a = 0;\nint b = 1;\nint count = 0;\nwhile (true) {\n    int next_fib = a + b;\n    a = b;\n    b = next_fib;\n\n    // Fibonacci sequence starts with 0, 1, 1, 2, 3, 5, ...\n    // We are interested in numbers that are 2 or greater for primality check.\n    // The first few prime fibonacci numbers are 2, 3, 5, 13, 89.\n    // So we skip 0, 1. The first relevant fibonacci is 2.\n    if (next_fib >= 2 && is_prime(next_fib)) {\n        count++;\n        if (count == n) {\n            return next_fib;\n        }\n    }\n}", "entry_point": "prime_fib", "result": "Compilation failed: /tmp/tmpccp54c23/temp.cpp: In function \u2018int prime_fib(int)\u2019:\n/tmp/tmpccp54c23/temp.cpp:18:24: error: a function-definition is not allowed here before \u2018{\u2019 token\n   18 | bool is_prime(int num) {\n      |                        ^\n/tmp/tmpccp54c23/temp.cpp:38:26: error: \u2018is_prime\u2019 was not declared in this scope\n   38 |     if (next_fib >= 2 && is_prime(next_fib)) {\n      |                          ^~~~~~~~\n/tmp/tmpccp54c23/temp.cpp:47:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   47 | int main(){\n      |           ^\n/tmp/tmpccp54c23/temp.cpp:58:1: error: expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpccp54c23/temp.cpp:17:21: note: to match this \u2018{\u2019\n   17 | int prime_fib(int n){\n      |                     ^\n", "passed": false}
{"task_id": "CPP/40", "code": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\nint n = l.size();\n    if (n < 3) {\n        return false;\n    }\n    for (int i = 0; i < n - 2; ++i) {\n        for (int j = i + 1; j < n - 1; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;", "entry_point": "triples_sum_to_zero", "result": "passed", "passed": true}
{"task_id": "CPP/41", "code": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\nreturn n * n;", "entry_point": "car_race_collision", "result": "passed", "passed": true}
{"task_id": "CPP/42", "code": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\nvector<int> result;\nfor (int x : l) {\nresult.push_back(x + 1);\n}\nreturn result;", "entry_point": "incr_list", "result": "passed", "passed": true}
{"task_id": "CPP/43", "code": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\nfor (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;", "entry_point": "pairs_sum_to_zero", "result": "passed", "passed": true}
{"task_id": "CPP/44", "code": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\nstring result = \"\";\n    while (x > 0) {\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;", "entry_point": "change_base", "result": "passed", "passed": true}
{"task_id": "CPP/45", "code": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\nreturn (a*h)/2;", "entry_point": "triangle_area", "result": "passed", "passed": true}
{"task_id": "CPP/46", "code": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\nif (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3)\nint f0 = 0;\nint f1 = 0;\nint f2 = 2;\nint f3 = 0;\nint current_fib4;\n\nfor (int i = 4; i <= n; ++i) {\n    current_fib4 = f3 + f2 + f1 + f0;\n    f0 = f1;\n    f1 = f2;\n    f2 = f3;\n    f3 = current_fib4;\n}\nreturn f3;", "entry_point": "fib4", "result": "Compilation failed: /tmp/tmpbe9bqt0v/temp.cpp: In function \u2018int fib4(int)\u2019:\n/tmp/tmpbe9bqt0v/temp.cpp:31:35: error: \u2018f0\u2019 was not declared in this scope; did you mean \u2018f3\u2019?\n   31 |     current_fib4 = f3 + f2 + f1 + f0;\n      |                                   ^~\n      |                                   f3\n", "passed": false}
{"task_id": "CPP/47", "code": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\nsort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 1)\n        return l[n / 2];\n    else\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0;", "entry_point": "median", "result": "passed", "passed": true}
{"task_id": "CPP/48", "code": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\nint left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;", "entry_point": "is_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/49", "code": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\nlong long res = 1;\n    long long base = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * base) % p;\n        }\n        base = (base * base) % p;\n        n /= 2;\n    }\n    return res;", "entry_point": "modp", "result": "passed", "passed": true}
{"task_id": "CPP/50", "code": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a');\n        if (w<0)\n            w=w+26;\n        w=w%26+(int)'a';\n        out=out+(char)w;\n    }\n    return out;", "entry_point": "decode_shift", "result": "passed", "passed": true}
{"task_id": "CPP/51", "code": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\nstring result = \"\";\n    string vowels = \"aeiouAEIOU\";\n    for (char c : text) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;", "entry_point": "remove_vowels", "result": "passed", "passed": true}
{"task_id": "CPP/52", "code": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\nfor (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "below_threshold", "result": "passed", "passed": true}
{"task_id": "CPP/53", "code": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\nreturn x + y;", "entry_point": "add", "result": "passed", "passed": true}
{"task_id": "CPP/54", "code": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\nint count0[26] = {0};\n    int count1[26] = {0};\n    for (char c : s0) {\n        count0[c - 'a']++;\n    }\n    for (char c : s1) {\n        count1[c - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (count0[i] != count1[i]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "same_chars", "result": "Program failed: temp_program.exe: /tmp/tmpyzk_9pr3/temp.cpp:40: int main(): Assertion `same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true' failed.\n", "passed": false}
{"task_id": "CPP/55", "code": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\nif (n <= 1)\n        return n;\n    else\n        return fib(n - 1) + fib(n - 2);", "entry_point": "fib", "result": "passed", "passed": true}
{"task_id": "CPP/56", "code": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\nint depth = 0;\n    for (char bracket : brackets) {\n        if (bracket == '<') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;", "entry_point": "correct_bracketing", "result": "passed", "passed": true}
{"task_id": "CPP/57", "code": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\nif (l.size() <= 1) {\n        return true;\n    }\n    bool increasing = false;\n    bool decreasing = false;\n    int i = 0;\n    while (i + 1 < l.size() && l[i] == l[i+1]) {\n        i++;\n    }\n    if (i + 1 == l.size()) { // All elements are the same\n        return true;\n    }\n    if (l[i] < l[i+1]) {\n        increasing = true;\n    } else {\n        decreasing = true;\n    }\n    for (int j = i + 1; j < l.size(); ++j) {\n        if (increasing && l[j] < l[j-1]) {\n            return false;\n        }\n        if (decreasing && l[j] > l[j-1]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "monotonic", "result": "passed", "passed": true}
{"task_id": "CPP/58", "code": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\nvector<int> result;\n\n\n// Sort both vectors to use std::set_intersection\nsort(l1.begin(), l1.end());\nsort(l2.begin(), l2.end());\n\n// Find the intersection of the two sorted vectors\nset_intersection(l1.begin(), l1.end(),\n                 l2.begin(), l2.end(),\n                 back_inserter(result));\n\n// Remove duplicates from the result (set_intersection might include duplicates\n// if input vectors have duplicates and we want only unique common elements)\n// First, sort the result, then use unique.\n// std::unique works on sorted ranges. set_intersection already produces a sorted range,\n// so we just need to use unique to handle potential duplicates introduced by\n// set_intersection if the original vectors had duplicates that resulted in\n// multiple identical common elements.\nresult.erase(unique(result.begin(), result.end()), result.end());\n\nreturn result;", "entry_point": "common", "result": "passed", "passed": true}
{"task_id": "CPP/59", "code": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\nint max_prime = -1;\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n /= 2;\n    }\n    for (int i = 3; i * i <= n; i += 2) {\n        while (n % i == 0) {\n            max_prime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        max_prime = n;\n    }\n    return max_prime;", "entry_point": "largest_prime_factor", "result": "passed", "passed": true}
{"task_id": "CPP/60", "code": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\nreturn n * (n + 1) / 2;", "entry_point": "sum_to_n", "result": "passed", "passed": true}
{"task_id": "CPP/61", "code": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\nint depth = 0;\n    for (char bracket : brackets) {\n        if (bracket == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;", "entry_point": "correct_bracketing", "result": "passed", "passed": true}
{"task_id": "CPP/62", "code": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\nif (xs.empty() || xs.size() == 1) {\n        return {};\n    }at> result;\nfor (int i = 1; i < xs.size(); ++i) {\nresult.push_back(xs[i] * i);\n}\nreturn result;", "entry_point": "derivative", "result": "Compilation failed: /tmp/tmpp3zjkdar/temp.cpp: In function \u2018std::vector<float> derivative(std::vector<float>)\u2019:\n/tmp/tmpp3zjkdar/temp.cpp:18:6: error: \u2018at\u2019 was not declared in this scope\n   18 |     }at> result;\n      |      ^~\n/tmp/tmpp3zjkdar/temp.cpp:18:10: error: \u2018result\u2019 was not declared in this scope\n   18 |     }at> result;\n      |          ^~~~~~\n", "passed": false}
{"task_id": "CPP/63", "code": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\nif (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    int a = 0, b = 0, c = 1, d;\n    for (int i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;", "entry_point": "fibfib", "result": "passed", "passed": true}
{"task_id": "CPP/64", "code": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\nint count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        } else if (c == 'y' && i == s.length() - 1) {\n            count++;\n        }\n    }\n    return count;", "entry_point": "vowels_count", "result": "passed", "passed": true}
{"task_id": "CPP/65", "code": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\nstring s = to_string(x);\n    int n = s.length();\n    if (shift >= n) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    string shifted_part = s.substr(n - shift);\n    string remaining_part = s.substr(0, n - shift);\n    return shifted_part + remaining_part;", "entry_point": "circular_shift", "result": "Program failed: temp_program.exe: /tmp/tmpf34n14st/temp.cpp:29: int main(): Assertion `circular_shift(12, 2) == \"12\"' failed.\n", "passed": false}
{"task_id": "CPP/66", "code": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\nint sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += (int)c;\n        }\n    }\n    return sum;", "entry_point": "digitSum", "result": "passed", "passed": true}
{"task_id": "CPP/67", "code": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\nint apples = 0;\n    int oranges = 0;\n    size_t apple_pos = s.find(\"apples\");\n    if (apple_pos != string::npos) {\n        size_t prev_space = s.rfind(' ', apple_pos - 1);\n        apples = stoi(s.substr(prev_space + 1, apple_pos - prev_space - 2));\n    }\n    size_t orange_pos = s.find(\"oranges\");\n    if (orange_pos != string::npos) {\n        size_t prev_space = s.rfind(' ', orange_pos - 1);\n        oranges = stoi(s.substr(prev_space + 1, orange_pos - prev_space - 2));\n    }\n    return n - apples - oranges;", "entry_point": "fruit_distribution", "result": "Program failed: terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n", "passed": false}
{"task_id": "CPP/68", "code": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\nif (arr.empty()) {\n        return {};int smallest_even_value = -1;\nint smallest_even_index = -1;\n\nfor (int i = 0; i < arr.size(); ++i) {\n    if (arr[i] % 2 == 0) { // Check if the number is even\n        if (smallest_even_value == -1 || arr[i] < smallest_even_value) {\n            smallest_even_value = arr[i];\n            smallest_even_index = i;\n        } else if (arr[i] == smallest_even_value) {\n            // If the current even value is equal to the smallest found so far,\n            // we check for the smaller index.\n            if (i < smallest_even_index) {\n                smallest_even_index = i;\n            }\n        }\n    }\n}\n\nif (smallest_even_value != -1) {\n    return {smallest_even_value, smallest_even_index};\n} else {\n    return {};\n}", "entry_point": "pluck", "result": "Compilation failed: /tmp/tmpz3337h9p/temp.cpp: In function \u2018std::vector<int> pluck(std::vector<int>)\u2019:\n/tmp/tmpz3337h9p/temp.cpp:65:40: error: a function-definition is not allowed here before \u2018{\u2019 token\n   65 | bool issame(vector<int> a,vector<int>b){\n      |                                        ^\n/tmp/tmpz3337h9p/temp.cpp:73:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   73 | int main(){\n      |           ^\n/tmp/tmpz3337h9p/temp.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpz3337h9p/temp.cpp:39:18: note: to match this \u2018{\u2019\n   39 | if (arr.empty()) {\n      |                  ^\n/tmp/tmpz3337h9p/temp.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpz3337h9p/temp.cpp:38:35: note: to match this \u2018{\u2019\n   38 | vector<int> pluck(vector<int> arr){\n      |                                   ^\n/tmp/tmpz3337h9p/temp.cpp:82:1: warning: control reaches end of non-void function [-Wreturn-type]\n   82 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/69", "code": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\nmap<int, int> freq_map;\n    for (int x : lst) {\n        freq_map\n\n\nint result = -1;\nfor (auto it = freq_map.rbegin(); it != freq_map.rend(); ++it) {\n    int value = it->first;\n    int frequency = it->second;\n    if (value > 0 && frequency >= value) {\n        return value;\n    }\n}\nreturn -1;", "entry_point": "search", "result": "Compilation failed: /tmp/tmpijg_a67i/temp.cpp: In function \u2018int search(std::vector<int>)\u2019:\n/tmp/tmpijg_a67i/temp.cpp:18:17: error: expected \u2018;\u2019 before \u2018int\u2019\n   18 |         freq_map\n      |                 ^\n      |                 ;\n......\n   21 | int result = -1;\n      | ~~~              \n/tmp/tmpijg_a67i/temp.cpp:33:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   33 | int main(){\n      |           ^\n/tmp/tmpijg_a67i/temp.cpp:59:1: error: expected \u2018}\u2019 at end of input\n   59 | }\n      | ^\n/tmp/tmpijg_a67i/temp.cpp:15:28: note: to match this \u2018{\u2019\n   15 | int search(vector<int> lst){\n      |                            ^\n/tmp/tmpijg_a67i/temp.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/70", "code": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\nvector<int> result;\nif (lst.empty()) {\nreturn result;\n}\n\n\nsort(lst.begin(), lst.end());\n\nint left = 0;\nint right = lst.size() - 1;\nbool take_min = true;\n\nwhile (left <= right) {\n    if (take_min) {\n        result.push_back(lst[left]);\n        left++;\n    } else {\n        result.push_back(lst[right]);\n        right--;\n    }\n    take_min = !take_min;\n}\nreturn result;", "entry_point": "strange_sort_list", "result": "passed", "passed": true}
{"task_id": "CPP/71", "code": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\nif (a + b > c && a + c > b && b + c > a) {\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    } else {\n        return -1;\n    }", "entry_point": "triangle_area", "result": "Compilation failed: /tmp/tmpa3v4v1cs/temp.cpp: In function \u2018float triangle_area(float, float, float)\u2019:\n/tmp/tmpa3v4v1cs/temp.cpp:25:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   25 | int main(){\n      |           ^\n/tmp/tmpa3v4v1cs/temp.cpp:35:1: error: expected \u2018}\u2019 at end of input\n   35 | }\n      | ^\n/tmp/tmpa3v4v1cs/temp.cpp:15:45: note: to match this \u2018{\u2019\n   15 | float triangle_area(float a,float b,float c){\n      |                                             ^\n", "passed": false}
{"task_id": "CPP/72", "code": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n// Check if the vector is a palindrome\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false; // Not balanced (not a palindrome)\n        }\n    }\n\n// Calculate the sum of elements\nlong long sum = 0; // Use long long to avoid overflow for large sums\nfor (int x : q) {\n    sum += x;\n}\n\n// Check if the sum is less than or equal to the maximum possible weight\nreturn sum <= w;", "entry_point": "will_it_fly", "result": "passed", "passed": true}
{"task_id": "CPP/73", "code": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\nint changes = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            changes++;\n        }\n    }\n    return changes;", "entry_point": "smallest_change", "result": "passed", "passed": true}
{"task_id": "CPP/74", "code": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\nint sum1 = 0;\n    for(const string& s : lst1){\n        sum1 += s.length();\n    }\n    int sum2 = 0;\n    for(const string& s : lst2){\n        sum2 += s.length();\n    }\n    if(sum1 <= sum2){\n        return lst1;\n    } else {\n        return lst2;\n    }", "entry_point": "total_match", "result": "Compilation failed: /tmp/tmpahagkjvf/temp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char> > total_match(std::vector<std::__cxx11::basic_string<char> >, std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpahagkjvf/temp.cpp:35:46: error: a function-definition is not allowed here before \u2018{\u2019 token\n   35 | bool issame(vector<string> a,vector<string>b){\n      |                                              ^\n/tmp/tmpahagkjvf/temp.cpp:43:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   43 | int main(){\n      |           ^\n/tmp/tmpahagkjvf/temp.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpahagkjvf/temp.cpp:19:68: note: to match this \u2018{\u2019\n   19 | vector<string> total_match(vector<string> lst1,vector<string> lst2){\n      |                                                                    ^\n", "passed": false}
{"task_id": "CPP/75", "code": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\nif (a < 2 * 3 * 5) return false; // Minimum product of 3 distinct primes is 30\n\nint count = 0;\nfor (int i = 2; i <= a && count < 3; ++i) {\n    if (a % i == 0) {\n        if (isPrime(i)) {\n            count++;\n            while (a % i == 0) {\n                a /= i;\n            }\n        }\n    }\n}\nreturn count == 3 && a == 1;", "entry_point": "is_multiply_prime", "result": "Compilation failed: /tmp/tmp468j0svj/temp.cpp: In function \u2018bool is_multiply_prime(int)\u2019:\n/tmp/tmp468j0svj/temp.cpp:13:21: error: a function-definition is not allowed here before \u2018{\u2019 token\n   13 | bool isPrime(int n) {\n      |                     ^\n/tmp/tmp468j0svj/temp.cpp:25:13: error: \u2018isPrime\u2019 was not declared in this scope\n   25 |         if (isPrime(i)) {\n      |             ^~~~~~~\n", "passed": false}
{"task_id": "CPP/76", "code": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\nif (n == 1) {\n        return x == 1;\n    }\n    if (x == 1) {\n        return true; \n    }\n    long long current_power = n;\n    while (current_power < x) {\n        current_power *= n;\n    }\n    return current_power == x;", "entry_point": "is_simple_power", "result": "passed", "passed": true}
{"task_id": "CPP/77", "code": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\nlong long low = -20000; \n    long long high = 20000;\n    while(low <= high){\n        long long mid = low + (high - low) / 2;\n        long long cube = mid * mid * mid;\n        if(cube == a){\n            return true;\n        }\n        else if (cube < a){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return false;", "entry_point": "iscube", "result": "passed", "passed": true}
{"task_id": "CPP/78", "code": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\nint count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;", "entry_point": "hex_key", "result": "passed", "passed": true}
{"task_id": "CPP/79", "code": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\nstring binaryString = \"\";\n    if (decimal == 0) {\n        binaryString = \"0\";\n    } else {\n        while (decimal > 0) {\n            binaryString = (decimal % 2 == 0 ? \"0\" : \"1\") + binaryString;\n            decimal /= 2;\n        }\n    }\n    return \"db\" + binaryString + \"db\";", "entry_point": "decimal_to_binary", "result": "passed", "passed": true}
{"task_id": "CPP/80", "code": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\nif (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i <= (int)s.length() - 3; ++i) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    return true;", "entry_point": "is_happy", "result": "passed", "passed": true}
{"task_id": "CPP/81", "code": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\nvector<string> letter_grades;\nfor (float gpa : grades) {\nif (gpa == 4.0) {\nletter_grades.push_back(\"A+\");\n} else if (gpa > 3.7) {\nletter_grades.push_back(\"A\");\n} else if (gpa > 3.3) {\nletter_grades.push_back(\"A-\");\n} else if (gpa > 3.0) {\nletter_grades.push_back(\"B+\");\n} else if (gpa > 2.7) {\nletter_grades.push_back(\"B\");\n} else if (gpa > 2.3) {\nletter_grades.push_back(\"B-\");\n} else if (gpa > 2.0) {\nletter_grades.push_back(\"C+\");\n} else if (gpa > 1.7) {\nletter_grades.push_back(\"C\");\n} else if (gpa > 1.3) {\nletter_grades.push_back(\"C-\");\n} else if (gpa > 1.0) {\nletter_grades.push_back(\"D+\");\n} else if (gpa > 0.7) {\nletter_grades.push_back(\"D\");\n} else if (gpa > 0.0) {\nletter_grades.push_back(\"D-\");\n} else {\nletter_grades.push_back(\"E\");\n}\n}\nreturn letter_grades;", "entry_point": "numerical_letter_grade", "result": "Program failed: temp_program.exe: /tmp/tmpdglsrzlg/temp.cpp:75: int main(): Assertion `issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"})' failed.\n", "passed": false}
{"task_id": "CPP/82", "code": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\nint n = str.length();\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;", "entry_point": "prime_length", "result": "passed", "passed": true}
{"task_id": "CPP/83", "code": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\nif (n == 1) {\n        return 1; // Only '1' is a 1-digit number that starts or ends with 1.\n    }al n-digit numbers that start with 1:\n// The first digit is fixed as 1.\n// The remaining (n-1) digits can be any digit from 0-9.\n// So, there are 1 * 10^(n-1) such numbers.\nlong long startsWithOne = 1;\nfor (int i = 0; i < n - 1; ++i) {\n    startsWithOne *= 10;\n}\n\n// Total n-digit numbers that end with 1:\n// The last digit is fixed as 1.\n// The first digit can be any digit from 1-9 (cannot be 0).\n// The remaining (n-2) digits can be any digit from 0-9.\n// So, there are 9 * 10^(n-2) such numbers.\nlong long endsWithOne = 9;\nfor (int i = 0; i < n - 2; ++i) {\n    endsWithOne *= 10;\n}\n\n// Total n-digit numbers that start AND end with 1:\n// The first digit is fixed as 1.\n// The last digit is fixed as 1.\n// The remaining (n-2) digits can be any digit from 0-9.\n// So, there are 1 * 10^(n-2) such numbers.\nlong long startsAndEndsWithOne = 1;\nif (n > 1) { // Only if n > 1 can a number start and end with 1 while having middle digits\n    for (int i = 0; i < n - 2; ++i) {\n        startsAndEndsWithOne *= 10;\n    }\n} else { // n == 1, the number \"1\" starts and ends with 1.\n    startsAndEndsWithOne = 1;\n}\n\n// Using the Principle of Inclusion-Exclusion:\n// P(A or B) = P(A) + P(B) - P(A and B)\n// Here, A = starts with 1, B = ends with 1\n// Total = (Numbers starting with 1) + (Numbers ending with 1) - (Numbers starting AND ending with 1)\nreturn startsWithOne + endsWithOne - startsAndEndsWithOne;", "entry_point": "starts_one_ends", "result": "Compilation failed: /tmp/tmphdmqvkle/temp.cpp: In function \u2018int starts_one_ends(int)\u2019:\n/tmp/tmphdmqvkle/temp.cpp:11:6: error: \u2018al\u2019 was not declared in this scope\n   11 |     }al n-digit numbers that start with 1:\n      |      ^~\n/tmp/tmphdmqvkle/temp.cpp:17:5: error: \u2018startsWithOne\u2019 was not declared in this scope\n   17 |     startsWithOne *= 10;\n      |     ^~~~~~~~~~~~~\n/tmp/tmphdmqvkle/temp.cpp:48:8: error: \u2018startsWithOne\u2019 was not declared in this scope; did you mean \u2018endsWithOne\u2019?\n   48 | return startsWithOne + endsWithOne - startsAndEndsWithOne;\n      |        ^~~~~~~~~~~~~\n      |        endsWithOne\n", "passed": false}
{"task_id": "CPP/84", "code": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    int sum_digits = 0;\n    string binary_sum = \"\";\n\n    // Calculate sum of digits\n    int temp_N = N;\n    while (temp_N > 0) {\n        sum_digits += temp_N % 10;\n        temp_N /= 10;\n    }\n\n    // Convert sum_digits to binary string\n    if (sum_digits == 0) {\n        return \"0\";\n    }\n\n    while (sum_digits > 0) {\n        binary_sum = (sum_digits % 2 == 0 ? \"0\" : \"1\") + binary_sum;\n        sum_digits /= 2;\n    }\n\n    return binary_sum;", "entry_point": "solve", "result": "passed", "passed": true}
{"task_id": "CPP/85", "code": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\nint sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;", "entry_point": "add", "result": "passed", "passed": true}
{"task_id": "CPP/86", "code": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\nstring result = \"\";\n    string current_word = \"\";\n    for (char c : s) {\n        if (c == ' ') {\n            sort(current_word.begin(), current_word.end());\n            result += current_word;\n            result += ' ';\n            current_word = \"\";\n        } else {\n            current_word += c;\n        }\n    }\n    sort(current_word.begin(), current_word.end());\n    result += current_word;\n    return result;", "entry_point": "anti_shuffle", "result": "passed", "passed": true}
{"task_id": "CPP/87", "code": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\nvector<vector<int>> result;\nfor (int i = 0; i < lst.size(); ++i) {\nfor (int j = 0; j < lst[i].size(); ++j) {\nif (lst[i][j] == x) {\nresult.push_back({i, j});\n}\n}\n}\n\n\nsort(result.begin(), result.end(), [](const vector<int>& a, const vector<int>& b) {\n    if (a[0] != b[0]) {\n        return a[0] < b[0]; // Sort by row in ascending order\n    }\n    return a[1] > b[1]; // Sort by column in descending order for same row\n});\n\nreturn result;", "entry_point": "get_row", "result": "passed", "passed": true}
{"task_id": "CPP/88", "code": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\nvector<int> result = array; // Create a copy of the given vector\n\n\nif (result.empty()) {\n    return result;\n}\n\nif (result.size() == 1) {\n    return result;\n}\n\nint first_element = result[0];\nint last_element = result[result.size() - 1];\nint sum = first_element + last_element;\n\nif (sum % 2 != 0) { // sum is odd, sort in ascending order\n    sort(result.begin(), result.end());\n} else { // sum is even, sort in descending order\n    sort(result.begin(), result.end(), greater<int>());\n}\n\nreturn result;", "entry_point": "sort_array", "result": "passed", "passed": true}
{"task_id": "CPP/89", "code": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\nstring result = \"\";\n    int shift = 4; // 2 multiplied to two places = 4`\nfor (char c : s) {\n    if (c >= 'a' && c <= 'z') {\n        result += char('a' + (c - 'a' + shift) % 26);\n    } else if (c >= 'A' && c <= 'Z') {\n        result += char('A' + (c - 'A' + shift) % 26);\n    } else {\n        result += c; // Keep non-alphabetic characters as they are\n    }\n}\nreturn result;", "entry_point": "encrypt", "result": "passed", "passed": true}
{"task_id": "CPP/90", "code": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\nif (lst.size() < 2) {\n        return -1; // Or any value that represents None, as the return type is int.\n                   // A common practice for \"no such element\" for integer returns\n                   // is to use a special value like INT_MIN or INT_MAX fromlied by the problem description.\n}\n\n\nsort(lst.begin(), lst.end());\n\n// Remove duplicates to correctly find the second *smallest unique* element.\n// unique moves duplicates to the end, and returns an iterator to the new logical end.\n// erase then removes the actual elements from that point to the physical end.\nlst.erase(unique(lst.begin(), lst.end()), lst.end());\n\nif (lst.size() < 2) {\n    return -1; // No second smallest element after removing duplicates\n}\n\nreturn lst[1];", "entry_point": "next_smallest", "result": "passed", "passed": true}
{"task_id": "CPP/91", "code": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\nint boredom_count = 0;\n    bool new_sentence = true;\n    for (char c : S) {\n        if (new_sentence && c == 'I') {\n            boredom_count++;\n        }\n        if (c == '.' || c == '?' || c == '!') {\n            new_sentence = true;\n        } else if (c != ' ') {\n            new_sentence = false;\n        }\n    }\n    return boredom_count;", "entry_point": "is_bored", "result": "Program failed: temp_program.exe: /tmp/tmpfohkwk0i/temp.cpp:35: int main(): Assertion `is_bored(\"Is the sky blue?\") == 0' failed.\n", "passed": false}
{"task_id": "CPP/92", "code": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\nif (fmod(a, 1) != 0 || fmod(b, 1) != 0 || fmod(c, 1) != 0) {\n        return false;\n    }\n    if (a == b + c || b == a + c || c == a + b) {\n        return true;\n    }\n    return false;", "entry_point": "any_int", "result": "passed", "passed": true}
{"task_id": "CPP/93", "code": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\nfor (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            message[i] = toupper(message[i]);\n            if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n                message[i] = message[i] + 2;\n            }\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            message[i] = tolower(message[i]);\n            if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n                message[i] = message[i] + 2;\n            }\n        }\n    }\n    return message;", "entry_point": "encode", "result": "passed", "passed": true}
{"task_id": "CPP/94", "code": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\nauto isPrime = [](int num) {\n        if (num < 2) return false;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };sum = 0;\n    string s = to_string(num);\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n};\n\nint largestPrime = -1;\nfor (int num : lst) {\n    if (isPrime(num)) {\n        if (num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n}\n\nif (largestPrime == -1) { // No prime found\n    return 0; // Or throw an exception, depending on desired behavior\n}\n\nreturn sumDigits(largestPrime);", "entry_point": "skjkasdkd", "result": "Compilation failed: /tmp/tmpf3xuurtz/temp.cpp: In function \u2018int skjkasdkd(std::vector<int>)\u2019:\n/tmp/tmpf3xuurtz/temp.cpp:25:7: error: \u2018sum\u2019 was not declared in this scope\n   25 |     };sum = 0;\n      |       ^~~\n/tmp/tmpf3xuurtz/temp.cpp:26:26: error: \u2018num\u2019 was not declared in this scope; did you mean \u2018enum\u2019?\n   26 |     string s = to_string(num);\n      |                          ^~~\n      |                          enum\n/tmp/tmpf3xuurtz/temp.cpp: At global scope:\n/tmp/tmpf3xuurtz/temp.cpp:34:1: error: expected unqualified-id before \u2018for\u2019\n   34 | for (int num : lst) {\n      | ^~~\n/tmp/tmpf3xuurtz/temp.cpp:42:1: error: expected unqualified-id before \u2018if\u2019\n   42 | if (largestPrime == -1) { // No prime found\n      | ^~\n/tmp/tmpf3xuurtz/temp.cpp:46:1: error: expected unqualified-id before \u2018return\u2019\n   46 | return sumDigits(largestPrime);\n      | ^~~~~~\n/tmp/tmpf3xuurtz/temp.cpp:47:1: error: expected declaration before \u2018}\u2019 token\n   47 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/95", "code": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\nif (dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for (auto const& [key, val] : dict) {\n        bool key_has_lower = false;\n        bool key_has_upper = false;\n        for (char c : key) {\n            if (!isalpha(c)) {\n                return false; \n            }\n            if (islower(c)) {\n                key_has_lower = true;\n            } else if (isupper(c)) {\n                key_has_upper = true;\n            }\n        }\n        if (key_has_lower && key_has_upper) {\n            return false; \n        }\n        if (key_has_lower) {\n            all_upper = false;\n        } else if (key_has_upper) {\n            all_lower = false;\n        }\n    }\n    return all_lower || all_upper;", "entry_point": "check_dict_case", "result": "passed", "passed": true}
{"task_id": "CPP/96", "code": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\nvector<int> primes;\nif (n <= 2) {\nreturn primes;\n}\n\n\n// Create a boolean array \"isPrime[0..n-1]\" and initialize\n// all entries it as true. A value in isPrime[i] will\n// finally be false if i is Not a prime, else true.\nvector<bool> isPrime(n, true);\n\nfor (int p = 2; p * p < n; p++) {\n    // If isPrime[p] is still true, then it is a prime\n    if (isPrime[p] == true) {\n        // Update all multiples of p greater than or\n        // equal to the square of it\n        // numbers already been marked.\n        for (int i = p * p; i < n; i += p)\n            isPrime[i] = false;\n    }\n}\n\n// Store all prime numbers less than n\nfor (int p = 2; p < n; p++) {\n    if (isPrime[p]) {\n        primes.push_back(p);\n    }\n}\nreturn primes;", "entry_point": "count_up_to", "result": "passed", "passed": true}
{"task_id": "CPP/97", "code": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\nint unit_a = abs(a % 10);\n    int unit_b = abs(b % 10);\n    return unit_a * unit_b;", "entry_point": "multiply", "result": "passed", "passed": true}
{"task_id": "CPP/98", "code": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\nint count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n    return count;", "entry_point": "count_upper", "result": "passed", "passed": true}
{"task_id": "CPP/99", "code": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\ndouble num = stod(value);\n    if (num > 0) {\n        return floor(num + 0.5);\n    } else {\n        return ceil(num - 0.5);\n    }", "entry_point": "closest_integer", "result": "Compilation failed: /tmp/tmp70k36cqa/temp.cpp: In function \u2018int closest_integer(std::string)\u2019:\n/tmp/tmp70k36cqa/temp.cpp:32:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   32 | int main(){\n      |           ^\n/tmp/tmp70k36cqa/temp.cpp:38:1: error: expected \u2018}\u2019 at end of input\n   38 | }\n      | ^\n/tmp/tmp70k36cqa/temp.cpp:23:34: note: to match this \u2018{\u2019\n   23 | int closest_integer(string value){\n      |                                  ^\n", "passed": false}
{"task_id": "CPP/100", "code": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\nvector<int> pile;\nint current_stones = n;\nfor (int i = 0; i < n; ++i) {\npile.push_back(current_stones);\nif (n % 2 == 0) { // n is even\ncurrent_stones += 2;\n} else { // n is odd\ncurrent_stones += 2;\n}\n}\nreturn pile;", "entry_point": "make_a_pile", "result": "passed", "passed": true}
{"task_id": "CPP/101", "code": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\nvector<string> result;\nstring current_word;\nfor (char c : s) {\nif (c == ',' || c == ' ') {\nif (!current_word.empty()) {\nresult.push_back(current_word);\ncurrent_word.clear();\n}\n} else {\ncurrent_word += c;\n}\n}\nif (!current_word.empty()) {\nresult.push_back(current_word);\n}\nreturn result;", "entry_point": "words_string", "result": "passed", "passed": true}
{"task_id": "CPP/102", "code": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\nif (x > y) {\n        return -1;\n    }\n    int result = -1;\n    for (int i = y; i >= x; --i) {\n        if (i % 2 == 0) {\n            result = i;\n            break;\n        }\n    }\n    return result;", "entry_point": "choose_num", "result": "passed", "passed": true}
{"task_id": "CPP/103", "code": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\nif (n > m) {\n        return \"-1\";\n    }\n    long long sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n    int average = floor((double)sum / (m - n + 1));\n    string binaryString = \"\";\n    if (average == 0) {\n        return \"0\";\n    }\n    while (average > 0) {\n        binaryString = (average % 2 == 0 ? \"0\" : \"1\") + binaryString;\n        average /= 2;\n    }\n    return binaryString;", "entry_point": "rounded_avg", "result": "passed", "passed": true}
{"task_id": "CPP/104", "code": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\nvector<int> result;\nfor (int num : x) {\nbool has_even = false;\nint temp = num;\nwhile (temp > 0) {\nint digit = temp % 10;\nif (digit % 2 == 0) {\nhas_even = true;\nbreak;\n}\ntemp /= 10;\n}\nif (!has_even) {\nresult.push_back(num);\n}\n}\nsort(result.begin(), result.end());\nreturn result;", "entry_point": "unique_digits", "result": "passed", "passed": true}
{"task_id": "CPP/105", "code": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\nif (arr.empty()) {\n        return {};// Filter numbers between 1 and 9\nstd::vector<int> filtered_arr;\nfor (int num : arr) {\n    if (num >= 1 && num <= 9) {\n        filtered_arr.push_back(num);\n    }\n}\n\n// Sort the filtered numbers in ascending order\nstd::sort(filtered_arr.begin(), filtered_arr.end());\n\n// Reverse the sorted vector\nstd::reverse(filtered_arr.begin(), filtered_arr.end());\n\n// Map digits to their corresponding names\nstd::map<int, std::string> digit_names = {\n    {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"},\n    {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}\n};\n\nstd::vector<std::string> result;\nfor (int num : filtered_arr) {\n    result.push_back(digit_names[num]);\n}\n\nreturn result;", "entry_point": "by_length", "result": "Compilation failed: /tmp/tmpcj2243y1/temp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<int>)\u2019:\n/tmp/tmpcj2243y1/temp.cpp:60:46: error: a function-definition is not allowed here before \u2018{\u2019 token\n   60 | bool issame(vector<string> a,vector<string>b){\n      |                                              ^\n/tmp/tmpcj2243y1/temp.cpp:68:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   68 | int main(){\n      |           ^\n/tmp/tmpcj2243y1/temp.cpp:74:1: error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpcj2243y1/temp.cpp:29:42: note: to match this \u2018{\u2019\n   29 | vector<string> by_length(vector<int> arr){\n      |                                          ^\n/tmp/tmpcj2243y1/temp.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/106", "code": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\nvector<int> result;\nfor (int i = 1; i <= n; ++i) {\nif (i % 2 == 0) { // If i is even, calculate factorial\nlong long factorial = 1; // Use long long to avoid overflow for larger factorials\nfor (int j = 1; j <= i; ++j) {\nfactorial *= j;\n}\nresult.push_back(static_cast<int>(factorial)); // Cast back to int for the vector\n} else { // If i is odd, calculate sum from 1 to i\nint sum = 0;\nfor (int j = 1; j <= i; ++j) {\nsum += j;\n}\nresult.push_back(sum);\n}\n}\nreturn result;", "entry_point": "f", "result": "passed", "passed": true}
{"task_id": "CPP/107", "code": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\nvector<int> result(2, 0); // result[0] for even, result[1] for odd\n\n\nfor (int i = 1; i <= n; ++i) {\n    string s = to_string(i);\n    bool is_palindrome = true;\n    int left = 0;\n    int right = s.length() - 1;\n    while (left < right) {\n        if (s[left] != s[right]) {\n            is_palindrome = false;\n            break;\n        }\n        left++;\n        right--;\n    }\n\n    if (is_palindrome) {\n        if (i % 2 == 0) {\n            result[0]++; // Even palindrome\n        } else {\n            result[1]++; // Odd palindrome\n        }\n    }\n}\nreturn result;", "entry_point": "even_odd_palindrome", "result": "passed", "passed": true}
{"task_id": "CPP/108", "code": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\nint count = 0;\n    for (int num : n) {\n        int sum_digits = 0;\n        int temp_num = num;\n        if (temp_num < 0) {\n            sum_digits += (temp_num % 10); // Take the last digit as negative if the number is negative\n            temp_num /= 10;\n            temp_num = abs(temp_num); // Process remaining        sum_digits += temp_num % 10;\n        temp_num /= 10;\n    }\n    \n    if (sum_digits > 0) {\n        count++;\n    }\n}\nreturn count;", "entry_point": "count_nums", "result": "Program failed: temp_program.exe: /tmp/tmpp8jqstg3/temp.cpp:38: int main(): Assertion `count_nums({1, 1, 2, -2, 3, 4, 5}) == 6' failed.\n", "passed": false}
{"task_id": "CPP/109", "code": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\nif (arr.empty()) {\n        return true\nvector<int> sorted_arr = arr;\nsort(sorted_arr.begin(), sorted_arr.end());\n\nint n = arr.size();\nfor (int i = 0; i < n; ++i) {\n    bool match = true;\n    for (int j = 0; j < n; ++j) {\n        if (arr[(i + j) % n] != sorted_arr[j]) {\n            match = false;\n            break;\n        }\n    }\n    if (match) {\n        return true;\n    }\n}\nreturn false;", "entry_point": "move_one_ball", "result": "Compilation failed: /tmp/tmpyeo0w505/temp.cpp: In function \u2018bool move_one_ball(std::vector<int>)\u2019:\n/tmp/tmpyeo0w505/temp.cpp:34:20: error: expected \u2018;\u2019 before \u2018vector\u2019\n   34 |         return true\n      |                    ^\n      |                    ;\n   35 | vector<int> sorted_arr = arr;\n      | ~~~~~~              \n/tmp/tmpyeo0w505/temp.cpp:55:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   55 | int main(){\n      |           ^\n/tmp/tmpyeo0w505/temp.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmpyeo0w505/temp.cpp:32:36: note: to match this \u2018{\u2019\n   32 | bool move_one_ball(vector<int> arr){\n      |                                    ^\n/tmp/tmpyeo0w505/temp.cpp:61:1: warning: control reaches end of non-void function [-Wreturn-type]\n   61 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/110", "code": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\nint odd_count_lst1 = 0;\n    for (int x : lst1) {\n        if (x % 2 != 0) {\n            odd_count_lst1++;\n        }\n    }\n    int even_count_lst2 = 0;\n    for (int x : lst2) {\n        if (x % 2 == 0) {\n            even_count_lst2++;\n        }\n    }\n    if (odd_count_lst1 <= even_count_lst2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }", "entry_point": "exchange", "result": "Compilation failed: /tmp/tmpwrq3143l/temp.cpp: In function \u2018std::string exchange(std::vector<int>, std::vector<int>)\u2019:\n/tmp/tmpwrq3143l/temp.cpp:39:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   39 | int main(){\n      |           ^\n/tmp/tmpwrq3143l/temp.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpwrq3143l/temp.cpp:19:51: note: to match this \u2018{\u2019\n   19 | string exchange(vector<int> lst1,vector<int> lst2){\n      |                                                   ^\n", "passed": false}
{"task_id": "CPP/111", "code": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\nmap<char, int> charCounts;\n    for (char c : test) {\n        if (c != ' ') {\n            charCounts[c]++;\n        }\n    }\nif (charCounts.empty()) {\n    return {};\n}\n\nint maxCount = 0;\nfor (auto const& [key, val] : charCounts) {\n    if (val > maxCount) {\n        maxCount = val;\n    }\n}\n\nmap<char, int> result;\nfor (auto const& [key, val] : charCounts) {\n    if (val == maxCount) {\n        result[key] = val;\n    }\n}\nreturn result;", "entry_point": "histogram", "result": "passed", "passed": true}
{"task_id": "CPP/112", "code": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\nstring res = \"\";\n    for(char sch : s){\n        bool found = false;\n        for(char cch : c){\n            if(sch == cch){\n                found = true;\n                break;\n            }\n        }\n        if(!found){\n            res += sch;\n        }\n    }\n    string rev_res = res;\n    reverse(rev_res.begin(), rev_res.end());\n    string palindrome = (res == rev_res) ? \"True\" : \"False\";\n    return {res, palindrome};", "entry_point": "reverse_delete", "result": "passed", "passed": true}
{"task_id": "CPP/113", "code": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\nvector<string> result;\nfor (const string& s : lst) {\nint odd_count = 0;\nfor (char c : s) {\nif ((c - '0') % 2 != 0) {\nodd_count++;\n}\n}\nstring output_str = \"the number of odd elements In the strIng I of the Input.\";\nstring odd_count_str = to_string(odd_count);\n\n\n    // Replace 'I' with the odd_count_str\n    size_t pos = output_str.find('I');\n    while (pos != string::npos) {\n        output_str.replace(pos, 1, odd_count_str);\n        pos = output_str.find('I', pos + odd_count_str.length());\n    }\n\n    // Replace 'n' with the odd_count_str\n    pos = output_str.find('n');\n    while (pos != string::npos) {\n        output_str.replace(pos, 1, odd_count_str);\n        pos = output_str.find('n', pos + odd_count_str.length());\n    }\n\n    result.push_back(output_str);\n}\nreturn result;", "entry_point": "odd_count", "result": "Program failed: temp_program.exe: /tmp/tmp8p9iu1rq/temp.cpp:61: int main(): Assertion `issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})' failed.\n", "passed": false}
{"task_id": "CPP/114", "code": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\nlong long min_so_far = nums[0];\n    long long current_min = nums[0];\n\nfor (size_t i = 1; i < nums.size(); ++i) {\n    current_min = min(nums[i], current_min + nums[i]);\n    min_so_far = min(min_so_far, current_min);\n}\nreturn min_so_far;", "entry_point": "minSubArraySum", "result": "passed", "passed": true}
{"task_id": "CPP/115", "code": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\nint count = 0;\n    for (int i = 0; i < grid.size(); i++){\n        int water_in_well = 0;\n        for (int j = 0; j < grid[i].size(); j++){\n            if (grid[i][j] == 1)\n                water_in_well += 1;\n        }\n        count += ceil((double)water_in_well / capacity);\n    }\n    return count;", "entry_point": "max_fill", "result": "passed", "passed": true}
{"task_id": "CPP/116", "code": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\nsort(arr.begin(), arr.end(), [](int a, int b) {\n        if (__builtin_popcount(abs(a)) != __builtin_popcount(abs(b)))\n            return __builtin_popcount(abs(a)) < __builtin_popcount(abs(b));\n        return a < b;\n    });\n    return arr;", "entry_point": "sort_array", "result": "passed", "passed": true}
{"task_id": "CPP/117", "code": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\nvector<string> result;\nif (s.empty()) {\nreturn result;\n}\n\n\nauto is_vowel = [](char c) {\n    c = tolower(c);\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n};\n\nauto count_consonants = [&](const string& word) {\n    int count = 0;\n    for (char c : word) {\n        if (isalpha(c) && !is_vowel(c)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nstring current_word;\nfor (char c : s) {\n    if (c == ' ') {\n        if (!current_word.empty()) {\n            if (count_consonants(current_word) == n) {\n                result.push_back(current_word);\n            }\n            current_word.clear();\n        }\n    } else {\n        current_word += c;\n    }\n}\n\nif (!current_word.empty()) {\n    if (count_consonants(current_word) == n) {\n        result.push_back(current_word);\n    }\n}\n\nreturn result;", "entry_point": "select_words", "result": "passed", "passed": true}
{"task_id": "CPP/118", "code": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\nbool is_vowel(char c) {\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U');\n}\n\nfor (int i = word.length() - 2; i > 0; --i) {\n    if (is_vowel(word[i])) {\n        if (!is_vowel(word[i-1]) && !is_vowel(word[i+1])) {\n            return string(1, word[i]);\n        }\n    }\n}\nreturn \"\";", "entry_point": "get_closest_vowel", "result": "Compilation failed: /tmp/tmparcjfvpi/temp.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmparcjfvpi/temp.cpp:22:23: error: a function-definition is not allowed here before \u2018{\u2019 token\n   22 | bool is_vowel(char c) {\n      |                       ^\n/tmp/tmparcjfvpi/temp.cpp:28:9: error: \u2018is_vowel\u2019 was not declared in this scope\n   28 |     if (is_vowel(word[i])) {\n      |         ^~~~~~~~\n", "passed": false}
{"task_id": "CPP/119", "code": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\nstring s1 = lst[0];\n    string s2st[1];\n\n\nauto is_good = [](const string& s) {\n    int balance = 0;\n    for (char c : s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;\n};\n\nif (is_good(s1 + s2) || is_good(s2 + s1)) {\n    return \"Yes\";\n} else {\n    return \"No\";\n}", "entry_point": "match_parens", "result": "Compilation failed: /tmp/tmps7caiytx/temp.cpp: In function \u2018std::string match_parens(std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmps7caiytx/temp.cpp:40:18: error: \u2018s2\u2019 was not declared in this scope; did you mean \u2018s1\u2019?\n   40 | if (is_good(s1 + s2) || is_good(s2 + s1)) {\n      |                  ^~\n      |                  s1\n/tmp/tmps7caiytx/temp.cpp:47:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   47 | int main(){\n      |           ^\n/tmp/tmps7caiytx/temp.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmps7caiytx/temp.cpp:20:40: note: to match this \u2018{\u2019\n   20 | string match_parens(vector<string> lst){\n      |                                        ^\n/tmp/tmps7caiytx/temp.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/120", "code": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\nsort(arr.begin(), arr.end());\nvector<int> result;\nfor (int i = arr.size() - k; i < arr.size(); ++i) {\nresult.push_back(arr[i]);\n}\nreturn result;", "entry_point": "maximum", "result": "passed", "passed": true}
{"task_id": "CPP/121", "code": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\nint sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;", "entry_point": "solution", "result": "passed", "passed": true}
{"task_id": "CPP/122", "code": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\nint sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= -99 && arr[i] <= 99) { // Check for at most two digits (including negative numbers)\n            sum += arr[i];\n        }\n    }\n    return sum;", "entry_point": "add_elements", "result": "passed", "passed": true}
{"task_id": "CPP/123", "code": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\nvector<int> odd_numbers;\nwhile (n != 1) {\nif (n % 2 != 0) {\nodd_numbers.push_back(n);\n}\nif (n % 2 == 0) {\nn /= 2;\n} else {\nn = 3 * n + 1;\n}\n}\nodd_numbers.push_back(1);\nsort(odd_numbers.begin(), odd_numbers.end());\nreturn odd_numbers;", "entry_point": "get_odd_collatz", "result": "passed", "passed": true}
{"task_id": "CPP/124", "code": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\nif (date.empty()) {\n        return false;if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n    return false;\n}\n\nfor (int i = 0; i < date.length(); ++i) {\n    if (i == 2 || i == 5) {\n        continue;\n    }\n    if (!isdigit(date[i])) {\n        return false;\n    }\n}\n\nint month = stoi(date.substr(0, 2));\nint day = stoi(date.substr(3, 2));\nint year = stoi(date.substr(6, 4));\n\nif (month < 1 || month > 12) {\n    return false;\n}\n\nif (day < 1) {\n    return false;\n}\n\nif (month == 2) {\n    bool is_leap = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);\n    if (is_leap) {\n        if (day > 29) {\n            return false;\n        }\n    } else {\n        if (day > 28) {\n            return false;\n        }\n    }\n} else if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n        return false;\n    }\n} else { // Months 1, 3, 5, 7, 8, 10, 12\n    if (day > 31) {\n        return false;\n    }\n}\n\nreturn true;", "entry_point": "valid_date", "result": "Compilation failed: /tmp/tmpcjkk8wus/temp.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpcjkk8wus/temp.cpp:77:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   77 | int main(){\n      |           ^\n/tmp/tmpcjkk8wus/temp.cpp:94:1: error: expected \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmpcjkk8wus/temp.cpp:25:29: note: to match this \u2018{\u2019\n   25 | bool valid_date(string date){\n      |                             ^\n/tmp/tmpcjkk8wus/temp.cpp:94:1: warning: control reaches end of non-void function [-Wreturn-type]\n   94 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/125", "code": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\nvector<string> result;\nbool has_whitespace = false;\nfor (char c : txt) {\nif (isspace(c)) {\nhas_whitespace = true;\nbreak;\n}\n}\n\n\nif (has_whitespace) {\n    string current_word;\n    for (char c : txt) {\n        if (isspace(c)) {\n            if (!current_word.empty()) {\n                result.push_back(current_word);\n                current_word.clear();\n            }\n        } else {\n            current_word += c;\n        }\n    }\n    if (!current_word.empty()) {\n        result.push_back(current_word);\n    }\n} else {\n    bool has_comma = false;\n    for (char c : txt) {\n        if (c == ',') {\n            has_comma = true;\n            break;\n        }\n    }\n\n    if (has_comma) {\n        string current_word;\n        for (char c : txt) {\n            if (c == ',') {\n                if (!current_word.empty()) {\n                    result.push_back(current_word);\n                    current_word.clear();\n                }\n            } else {\n                current_word += c;\n            }\n        }\n        if (!current_word.empty()) {\n            result.push_back(current_word);\n        }\n    } else {\n        int odd_order_count = 0;\n        for (char c : txt) {\n            if (islower(c)) {\n                int order = c - 'a';\n                if (order % 2 != 0) {\n                    odd_order_count++;\n                }\n            }\n        }\n        result.push_back(to_string(odd_order_count));\n    }\n}\nreturn result;", "entry_point": "split_words", "result": "passed", "passed": true}
{"task_id": "CPP/126", "code": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\nif (lst.empty()) {\n        return true;for (size_t i = 0; i < lst.size(); ++i) {\n    int count = 0;\n    for (size_t j = 0; j < lst.size(); ++j) {\n        if (lst[i] == lst[j]) {\n            count++;\n        }\n    }\n    if (count > 2) {\n        return false;\n    }\n}\n\nfor (size_t i = 0; i < lst.size() - 1; ++i) {\n    if (lst[i] > lst[i+1]) {\n        return false;\n    }\n}\n\nreturn true;", "entry_point": "is_sorted", "result": "Compilation failed: /tmp/tmptuvmyqem/temp.cpp: In function \u2018bool is_sorted(std::vector<int>)\u2019:\n/tmp/tmptuvmyqem/temp.cpp:45:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main(){\n      |           ^\n/tmp/tmptuvmyqem/temp.cpp:59:1: error: expected \u2018}\u2019 at end of input\n   59 | }\n      | ^\n/tmp/tmptuvmyqem/temp.cpp:21:32: note: to match this \u2018{\u2019\n   21 | bool is_sorted(vector<int> lst){\n      |                                ^\n/tmp/tmptuvmyqem/temp.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/127", "code": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\nint start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2[1];\n\n\nint intersect_start = max(start1, start2);\nint intersect_end = min(end1, end2);\n\nif (intersect_start > intersect_end) {\n    return \"NO\";\n}\n\nint length = intersect_end - intersect_start + 1;\n\nif (length <= 1) {\n    return \"NO\";\n}\n\nfor (int i = 2; i * i <= length; ++i) {\n    if (length % i == 0) {\n        return \"NO\";\n    }\n}\n\nreturn \"YES\";", "entry_point": "intersection", "result": "Compilation failed: /tmp/tmpeisuiagq/temp.cpp: In function \u2018std::string intersection(std::vector<int>, std::vector<int>)\u2019:\n/tmp/tmpeisuiagq/temp.cpp:34:35: error: no matching function for call to \u2018min(int&, int [1])\u2019\n   34 | int intersect_end = min(end1, end2);\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpeisuiagq/temp.cpp:1:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument deduction/substitution failed:\n/tmp/tmpeisuiagq/temp.cpp:34:35: note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019 and \u2018int [1]\u2019)\n   34 | int intersect_end = min(end1, end2);\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from /tmp/tmpeisuiagq/temp.cpp:1:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:   template argument deduction/substitution failed:\n/tmp/tmpeisuiagq/temp.cpp:34:35: note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019 and \u2018int [1]\u2019)\n   34 | int intersect_end = min(end1, end2);\n      |                                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from /tmp/tmpeisuiagq/temp.cpp:1:\n/usr/include/c++/9/bits/stl_algo.h:3450:5: note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5: note:   template argument deduction/substitution failed:\n/tmp/tmpeisuiagq/temp.cpp:34:35: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018int\u2019\n   34 | int intersect_end = min(end1, end2);\n      |                                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from /tmp/tmpeisuiagq/temp.cpp:1:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>, _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template argument deduction/substitution failed:\n/tmp/tmpeisuiagq/temp.cpp:34:35: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018int\u2019\n   34 | int intersect_end = min(end1, end2);\n      |                                   ^\n", "passed": false}
{"task_id": "CPP/128", "code": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\nif (arr.empty()) {\n        return -32768;\n    }\n    int prod_of_signs = 1;\n    long long sum_of_magnitudes = 0;\n    bool has_zero = false;\n    for (int num : arr) {\n        if (num == 0) {\n            has_zero = true;\n            break;\n        } else if (num < 0) {\n            prod_of_signs *= -1;\n        }\n        sum_of_magnitudes += abs(num);\n    }\n    if (has_zero) {\n        return 0;\n    } else {\n        return prod_of_signs * sum_of_magnitudes;\n    }", "entry_point": "prod_signs", "result": "Compilation failed: /tmp/tmp0mq174iw/temp.cpp: In function \u2018int prod_signs(std::vector<int>)\u2019:\n/tmp/tmp0mq174iw/temp.cpp:40:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   40 | int main(){\n      |           ^\n/tmp/tmp0mq174iw/temp.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmp0mq174iw/temp.cpp:17:32: note: to match this \u2018{\u2019\n   17 | int prod_signs(vector<int> arr){\n      |                                ^\n", "passed": false}
{"task_id": "CPP/129", "code": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\nint n = grid.size();\nvector<int> ans(k);\nfor (int i = 0; i < k; ++i) {\nans[i] = n * n + 1; // Initialize with a value larger than any possible grid value\n}\n\n\n// Directions for moving in the grid (up, down, left, right)\nint dr[] = {-1, 1, 0, 0};\nint dc[] = {0, 0, -1, 1};\n\n// Iterate through all possible starting cells\nfor (int r = 0; r < n; ++r) {\n    for (int c = 0; c < n; ++c) {\n        // Perform a DFS from each cell\n        function<void(int, int, int, vector<int>)> dfs =\n            [&](int row, int col, int len, vector<int> currentPath) {\n            if (len == k) {\n                // Compare current path with the minimum path found so far\n                if (currentPath < ans) {\n                    ans = currentPath;\n                }\n                return;\n            }\n\n            // Optimization: If current path is already greater than ans, prune\n            if (currentPath.size() > ans.size()) {\n                if (currentPath > ans) {\n                    return;\n                }\n            } else if (currentPath.size() == ans.size()) {\n                bool greater = false;\n                for (int i = 0; i < currentPath.size(); ++i) {\n                    if (currentPath[i] > ans[i]) {\n                        greater = true;\n                        break;\n                    } else if (currentPath[i] < ans[i]) {\n                        break;\n                    }\n                }\n                if (greater) return;\n            }\n\n            // Explore neighbors\n            for (int i = 0; i < 4; ++i) {\n                int newR = row + dr[i];\n                int newC = col + dc[i];\n\n                if (newR >= 0 && newR < n && newC >= 0 && newC < n) {\n                    currentPath.push_back(grid[newR][newC]);\n                    dfs(newR, newC, len + 1, currentPath);\n                    currentPath.pop_back(); // Backtrack\n                }\n            }\n        };\n        \n        dfs(r, c, 1, {grid[r][c]});\n    }\n}\nreturn ans;", "entry_point": "minPath", "result": "passed", "passed": true}
{"task_id": "CPP/130", "code": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\nvector<int> result(n + 1);\nif (n < 0) {\nreturn {};\n}\nresult[0] = 1; // Based on tri(3) = {1, 3, 2, 8}, tri(0) is implied to be 1.\nif (n >= 1) {\nresult[1] = 3;\n}\nfor (int i = 2; i <= n; ++i) {\nif (i % 2 == 0) {\nresult[i] = 1 + i / 2;\n} else {\n// To calculate tri(n) for odd n, we need tri(n+1).\n// This means we need to calculate values in order for the given range,\n// and potentially calculate a value beyond n temporarily.\n// Let's re-evaluate the recursive definition for odd n.\n// tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n// This definition for tri(n+1) makes it a forward-looking recurrence,\n// which can be problematic for a direct iterative solution.\n// Let's check the example:\n// tri(1) = 3\n// tri(2) = 1 + (2/2) = 2\n// tri(4) = 1 + (4/2) = 3 (from problem description: tri(4) = 3)\n// tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8\n\n\n        // To calculate tri(i) where i is odd, we need tri(i-1), tri(i-2), and tri(i+1).\n        // We can calculate tri(i-1) and tri(i-2) as they are already in `result` vector.\n        // For tri(i+1), since i is odd, i+1 is even. So we can calculate tri(i+1) directly.\n        int tri_n_minus_1 = result[i - 1];\n        int tri_n_minus_2 = result[i - 2];\n        int tri_n_plus_1_val = 1 + (i + 1) / 2;\n        result[i] = tri_n_minus_1 + tri_n_minus_2 + tri_n_plus_1_val;\n    }\n}\nreturn result;", "entry_point": "tri", "result": "passed", "passed": true}
{"task_id": "CPP/131", "code": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\nint product = 1;\n    bool hasOdd = false;\n    string s = to_string(n);\n    for (char c : s) {\n        int digit = c - '0';\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n    }\n    if (hasOdd) {\n        return product;\n    } else {\n        return 0;\n    }", "entry_point": "digits", "result": "Compilation failed: /tmp/tmp2bbp4yiq/temp.cpp: In function \u2018int digits(int)\u2019:\n/tmp/tmp2bbp4yiq/temp.cpp:31:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   31 | int main(){\n      |           ^\n/tmp/tmp2bbp4yiq/temp.cpp:39:1: error: expected \u2018}\u2019 at end of input\n   39 | }\n      | ^\n/tmp/tmp2bbp4yiq/temp.cpp:13:18: note: to match this \u2018{\u2019\n   13 | int digits(int n){\n      |                  ^\n", "passed": false}
{"task_id": "CPP/132", "code": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\nint open_brackets = 0;\n    for (char c : str) {\n        if (c == '[') {\n            open_brackets++;\n        } else if (c == ']') {\n            if (open_brackets > 0) {\n                open_brackets--;\n                if (open_brackets > 0) { // If there are still open brackets after closing one, it means nesting exists.\n                    return true;\n                }\n            }\n        }\n    }\n    return false;", "entry_point": "is_nested", "result": "Program failed: temp_program.exe: /tmp/tmpr4y22hfn/temp.cpp:37: int main(): Assertion `is_nested(\"[]]]]]]][[[[[]\") == false' failed.\n", "passed": false}
{"task_id": "CPP/133", "code": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\nint sum = 0;\n    for(float x: lst){\n        sum += pow(ceil(x), 2);\n    }\n    return sum;", "entry_point": "sum_squares", "result": "passed", "passed": true}
{"task_id": "CPP/134", "code": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\nif (txt.empty()) {\n        return false;char last_char = txt.back();\n\nif (!isalpha(last_char)) {\n    return false;\n}\n\nif (txt.length() == 1) {\n    return true;\n}\n\nif (txt[txt.length() - 2] == ' ') {\n    return true;\n}\n\nreturn false;", "entry_point": "check_if_last_char_is_a_letter", "result": "Compilation failed: /tmp/tmpzq_49agd/temp.cpp: In function \u2018bool check_if_last_char_is_a_letter(std::string)\u2019:\n/tmp/tmpzq_49agd/temp.cpp:37:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   37 | int main(){\n      |           ^\n/tmp/tmpzq_49agd/temp.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmpzq_49agd/temp.cpp:17:48: note: to match this \u2018{\u2019\n   17 | bool check_if_last_char_is_a_letter(string txt){\n      |                                                ^\n/tmp/tmpzq_49agd/temp.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/135", "code": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\nfor (int i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;", "entry_point": "can_arrange", "result": "passed", "passed": true}
{"task_id": "CPP/136", "code": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\nint largest_neg = 0;;\nint smallest_pos = 0;\n\n\nbool found_neg = false;\nbool found_pos = false;\n\nfor (int x : lst) {\n    if (x < 0) {\n        if (!found_neg || x > largest_neg) {\n            largest_neg = x;\n            found_neg = true;\n        }\n    } else if (x > 0) {\n        if (!found_pos || x < smallest_pos) {\n            smallest_pos = x;\n            found_pos = true;\n        }\n    }\n}\n\nreturn {largest_neg, smallest_pos};", "entry_point": "largest_smallest_integers", "result": "passed", "passed": true}
{"task_id": "CPP/137", "code": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n// Helper function to convert string to double, handling both '.' and ',' as decimal separators\n    auto stringToDouble = [](const std::string& s) {\n        std::string temp = s;\n        std::replace(temp.begin(), temp.end(), ',', '.');\n        return std::stod(temp);\n    };\n// Case 1: Both are integers\nif (a.type() == typeid(int) && b.type() == typeid(int)) {\n    int valA = boost::any_cast<int>(a);\n    int valB = boost::any_cast<int>(b);\n    if (valA > valB) return a;\n    if (valB > valA) return b;\n    return std::string(\"None\");\n}\n// Case 2: Both are doubles\nelse if (a.type() == typeid(double) && b.type() == typeid(double)) {\n    double valA = boost::any_cast<double>(a);\n    double valB = boost::any_cast<double>(b);\n    if (valA > valB) return a;\n    if (valB > valA) return b;\n    return std::string(\"None\");\n}\n// Case 3: Both are strings\nelse if (a.type() == typeid(std::string) && b.type() == typeid(std::string)) {\n    double valA = stringToDouble(boost::any_cast<std::string>(a));\n    double valB = stringToDouble(boost::any_cast<std::string>(b));\n    if (valA > valB) return a;\n    if (valB > valA) return b;\n    return std::string(\"None\");\n}\n// Case 4: One is int, one is double\nelse if ((a.type() == typeid(int) && b.type() == typeid(double)) ||\n           (a.type() == typeid(double) && b.type() == typeid(int))) {\n    double valA = (a.type() == typeid(int)) ? static_cast<double>(boost::any_cast<int>(a)) : boost::any_cast<double>(a);\n    double valB = (b.type() == typeid(int)) ? static_cast<double>(boost::any_cast<int>(b)) : boost::any_cast<double>(b);\n    if (valA > valB) return a;\n    if (valB > valA) return b;\n    return std::string(\"None\");\n}\n// Case 5: One is int/double, one is string\nelse if ((a.type() == typeid(int) || a.type() == typeid(double)) && b.type() == typeid(std::string)) {\n    double valA = (a.type() == typeid(int)) ? static_cast<double>(boost::any_cast<int>(a)) : boost::any_cast<double>(a);\n    double valB = stringToDouble(boost::any_cast<std::string>(b));\n    if (valA > valB) return a;\n    if (valB > valA) return b;\n    return std::string(\"None\");\n}\nelse if ((b.type() == typeid(int) || b.type() == typeid(double)) && a.type() == typeid(std::string)) {\n    double valA = stringToDouble(boost::any_cast<std::string>(a));\n    double valB = (b.type() == typeid(int)) ? static_cast<double>(boost::any_cast<int>(b)) : boost::any_cast<double>(b);\n    if (valA > valB) return a;\n    if (valB > valA) return b;\n    return std::string(\"None\");\n}\n\nreturn std::string(\"None\"); // Should not be reached if all cases are covered", "entry_point": "compare_one", "result": "passed", "passed": true}
{"task_id": "CPP/138", "code": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\nreturn n >= 8 && n % 2 == 0;", "entry_point": "is_equal_to_sum_even", "result": "passed", "passed": true}
{"task_id": "CPP/139", "code": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\nlong long result = 1;\n    long long current_factorial = 1;\n    for (int i = 1; i <= n; ++i) {\n        current_factorial *= i;\n        result *= current_factorial;\n    }\n    return result;", "entry_point": "special_factorial", "result": "passed", "passed": true}
{"task_id": "CPP/140", "code": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\nstring result = \"\";\n    int consecutive_spaces = 0;\n    for (char c : text) {\n        if (c == ' ') {\n            consecutive_spaces++;\n        } else {\n            if (consecutive_spaces > 0) {\n                if (consecutive_spaces > 2) {\n                    result += '-';\n                } else {\n                    for (int i = 0; i < consecutive_spaces; ++i) {\n                        result += '_';\n                    }\n                }\n                consecutive_spaces = 0;\n            }\n            result += c;\n        }\n    }\n    if (consecutive_spaces > 0) {\n        if (consecutive_spaces > 2) {\n            result += '-';\n        } else {\n            for (int i = 0; i < consecutive_spaces; ++i) {\n                result += '_';\n            }\n        }\n    }\n    return result;", "entry_point": "fix_spaces", "result": "passed", "passed": true}
{"task_id": "CPP/141", "code": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\nint digit_count = 0;\n    int dot_count = 0;\n    int dot_position;\n\n\nfor (int i = 0; i < file_name.length(); ++i) {\n    if (isdigit(file_name[i])) {\n        digit_count++;\n    }\n    if (file_name[i] == '.') {\n        dot_count++;\n        dot_position = i;\n    }\n}\n\nif (digit_count > 3) {\n    return \"No\";\n}\n\nif (dot_count != 1) {\n    return \"No\";\n}\n\nif (dot_position == -1 || dot_position == 0) {\n    return \"No\";\n}\n\nstring before_dot = file_name.substr(0, dot_position);\nif (before_dot.empty() || !isalpha(before_dot[0])) {\n    return \"No\";\n}\n\nstring after_dot = file_name.substr(dot_position + 1);\nif (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n    return \"No\";\n}\n\nreturn \"Yes\";", "entry_point": "file_name_check", "result": "passed", "passed": true}
{"task_id": "CPP/142", "code": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\nlong long total_sum = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            total_sum += (long long)lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            total_sum += (long long)lst[i] * lst[i] * lst[i];\n        } else {\n            total_sum += lst[i];\n        }\n    }\n    return total_sum;", "entry_point": "sum_squares", "result": "passed", "passed": true}
{"task_id": "CPP/143", "code": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\nbool is_prime(int n) {\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string result = \"\";\n    string current_word = \"\";\n    for (char c : sentence) {\n        if (c == ' ') {\n            if (is_prime(current_word.length())) {\n                if (!result.empty()) {\n                    result += \" \";\n                }\n                result += current_word;\n            }\n            current_word = \"\";\n        } else {\n            current_word += c;\n        }\n    }\n    // Check the last word\n    if (is_prime(current_word.length())) {\n        if (!result.empty()) {\n            result += \" \";\n        }\n        result += current_word;\n    }\n    return result;", "entry_point": "words_in_sentence", "result": "Compilation failed: /tmp/tmpbppm1tfe/temp.cpp: In function \u2018std::string words_in_sentence(std::string)\u2019:\n/tmp/tmpbppm1tfe/temp.cpp:25:22: error: a function-definition is not allowed here before \u2018{\u2019 token\n   25 | bool is_prime(int n) {\n      |                      ^\n/tmp/tmpbppm1tfe/temp.cpp:35:43: error: a function-definition is not allowed here before \u2018{\u2019 token\n   35 | string words_in_sentence(string sentence) {\n      |                                           ^\n/tmp/tmpbppm1tfe/temp.cpp:62:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   62 | int main(){\n      |           ^\n/tmp/tmpbppm1tfe/temp.cpp:70:1: error: expected \u2018}\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmpbppm1tfe/temp.cpp:24:42: note: to match this \u2018{\u2019\n   24 | string words_in_sentence(string sentence){\n      |                                          ^\n/tmp/tmpbppm1tfe/temp.cpp:70:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   70 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/144", "code": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\nsize_t x_slash_pos = x.find('/');\n    int x_numerator = stoi(x.substr(0, x_slash_pos));\n    int x_denominator = stoi(x.substr(x_slash_pos + 1));;\n\n\nsize_t n_slash_pos = n.find('/');\nint n_numerator = stoi(n.substr(0, n_slash_pos));\nint n_denominator = stoi(n.substr(n_slash_pos + 1));\n\nlong long product_numerator = (long long)x_numerator * n_numerator;\nlong long product_denominator = (long long)x_denominator * n_denominator;\n\nreturn (product_numerator % product_denominator == 0);", "entry_point": "simplify", "result": "passed", "passed": true}
{"task_id": "CPP/145", "code": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\nif (nums.empty()) {\n        return {};auto sum_digits = [](int n) {\n    int sum = 0;\n    n = abs(n); // Handle negative numbers by taking absolute value\n    string s = to_string(n);\n    for (char c : s) {\n        sum += c - '0';\n    }\n    return sum;\n};\n\nvector<pair<pair<int, int>, int>> indexed_nums; // {{sum_of_digits, original_index}, value}\nfor (int i = 0; i < nums.size(); ++i) {\n    indexed_nums.push_back({{sum_digits(nums[i]), i}, nums[i]});\n}\n\nsort(indexed_nums.begin(), indexed_nums.end(), [](const auto& a, const auto& b) {\n    if (a.first.first != b.first.first) {\n        return a.first.first < b.first.first; // Sort by sum of digits\n    }\n    return a.first.second < b.first.second; // If sums are equal, sort by original index\n});\n\nvector<int> result;\nfor (const auto& p : indexed_nums) {\n    result.push_back(p.second);\n}\n\nreturn result;", "entry_point": "order_by_points", "result": "Compilation failed: /tmp/tmp98shsg8p/temp.cpp: In function \u2018std::vector<int> order_by_points(std::vector<int>)\u2019:\n/tmp/tmp98shsg8p/temp.cpp:50:40: error: a function-definition is not allowed here before \u2018{\u2019 token\n   50 | bool issame(vector<int> a,vector<int>b){\n      |                                        ^\n/tmp/tmp98shsg8p/temp.cpp:58:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   58 | int main(){\n      |           ^\n/tmp/tmp98shsg8p/temp.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmp98shsg8p/temp.cpp:17:46: note: to match this \u2018{\u2019\n   17 | vector<int> order_by_points(vector<int> nums){\n      |                                              ^\n/tmp/tmp98shsg8p/temp.cpp:66:1: warning: control reaches end of non-void function [-Wreturn-type]\n   66 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/146", "code": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\nint count = 0;\n    for (int num : nums) {\n        if (num > 10) {\n            string s = to_string(num);\n            if ((s[0] - '0') % 2 != 0 && (s.back() - '0') % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;", "entry_point": "specialFilter", "result": "passed", "passed": true}
{"task_id": "CPP/147", "code": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\nvector<int> a(n);\nfor (int i = 0; i < n; ++i) {\na[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n}\n\n\nint count = 0;\nfor (int i = 0; i < n; ++i) {\n    for (int j = i + 1; j < n; ++j) {\n        for (int k = j + 1; k < n; ++k) {\n            if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                count++;\n            }\n        }\n    }\n}\nreturn count;", "entry_point": "get_max_triples", "result": "passed", "passed": true}
{"task_id": "CPP/148", "code": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\nvector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n\nint index1 = -1;\nint index2 = -1;\n\nfor (int i = 0; i < planets.size(); ++i) {\n    if (planets[i] == planet1) {\n        index1 = i;\n    }\n    if (planets[i] == planet2) {\n        index2 = i;\n    }\n}\n\nif (index1 == -1 || index2 == -1) {\n    return {}; \n}\n\nif (index1 > index2) {\n    swap(index1, index2);\n}\n\nvector<string> result;\nfor (int i = index1 + 1; i < index2; ++i) {\n    result.push_back(planets[i]);\n}\n\nreturn result;", "entry_point": "bf", "result": "passed", "passed": true}
{"task_id": "CPP/149", "code": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\nlst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n        return s.length() % 2 != 0lst.end());\n\n\nsort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n    if (a.length() != b.length()) {\n        return a.length() < b.length();\n    }\n    return a < b;\n});\n\nreturn lst;", "entry_point": "sorted_list_sum", "result": "Compilation failed: /tmp/tmppe0zhzdo/temp.cpp: In lambda function:\n/tmp/tmppe0zhzdo/temp.cpp:24:34: error: unable to find numeric literal operator \u2018operator\"\"lst.end\u2019\n   24 |         return s.length() % 2 != 0lst.end());\n      |                                  ^~~~~~~~\n/tmp/tmppe0zhzdo/temp.cpp:24:44: error: expected \u2018;\u2019 before \u2018)\u2019 token\n   24 |         return s.length() % 2 != 0lst.end());\n      |                                            ^\n      |                                            ;\n/tmp/tmppe0zhzdo/temp.cpp:24:44: error: expected primary-expression before \u2018)\u2019 token\n/tmp/tmppe0zhzdo/temp.cpp:27:6: error: \u2018lst\u2019 is not captured\n   27 | sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n      |      ^~~\n/tmp/tmppe0zhzdo/temp.cpp:23:46: note: the lambda has no capture-default\n   23 | lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n      |                                              ^\n/tmp/tmppe0zhzdo/temp.cpp:22:47: note: \u2018std::vector<std::__cxx11::basic_string<char> > lst\u2019 declared here\n   22 | vector<string> sorted_list_sum(vector<string> lst){\n      |                                ~~~~~~~~~~~~~~~^~~\n/tmp/tmppe0zhzdo/temp.cpp:27:19: error: \u2018lst\u2019 is not captured\n   27 | sort(lst.begin(), lst.end(), [](const string& a, const string& b) {\n      |                   ^~~\n/tmp/tmppe0zhzdo/temp.cpp:23:46: note: the lambda has no capture-default\n   23 | lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n      |                                              ^\n/tmp/tmppe0zhzdo/temp.cpp:22:47: note: \u2018std::vector<std::__cxx11::basic_string<char> > lst\u2019 declared here\n   22 | vector<string> sorted_list_sum(vector<string> lst){\n      |                                ~~~~~~~~~~~~~~~^~~\n/tmp/tmppe0zhzdo/temp.cpp:34:8: error: \u2018lst\u2019 is not captured\n   34 | return lst;\n      |        ^~~\n/tmp/tmppe0zhzdo/temp.cpp:23:46: note: the lambda has no capture-default\n   23 | lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n      |                                              ^\n/tmp/tmppe0zhzdo/temp.cpp:22:47: note: \u2018std::vector<std::__cxx11::basic_string<char> > lst\u2019 declared here\n   22 | vector<string> sorted_list_sum(vector<string> lst){\n      |                                ~~~~~~~~~~~~~~~^~~\n/tmp/tmppe0zhzdo/temp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char> > sorted_list_sum(std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmppe0zhzdo/temp.cpp:35:2: error: expected \u2018)\u2019 before \u2018bool\u2019\n   35 | }\n      |  ^\n      |  )\n......\n   38 | bool issame(vector<string> a,vector<string>b){\n      | ~~~~\n/tmp/tmppe0zhzdo/temp.cpp:23:20: note: to match this \u2018(\u2019\n   23 | lst.erase(remove_if(lst.begin(), lst.end(), [](const string& s) {\n      |                    ^\n/tmp/tmppe0zhzdo/temp.cpp:54:1: error: expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmppe0zhzdo/temp.cpp:22:51: note: to match this \u2018{\u2019\n   22 | vector<string> sorted_list_sum(vector<string> lst){\n      |                                                   ^\n/tmp/tmppe0zhzdo/temp.cpp:54:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   54 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/150", "code": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\nint i,m=0,flag=0;\n    m=n/2;\n    for(i=2;i<=m;i++){\n        if(n%i==0){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==0)\n        return x;\n    else\n        return y;", "entry_point": "x_or_y", "result": "Program failed: temp_program.exe: /tmp/tmpbopq9fkq/temp.cpp:38: int main(): Assertion `x_or_y(1, 2, 0) == 0' failed.\n", "passed": false}
{"task_id": "CPP/151", "code": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\nlong long total_sum = 0;\n    for (float num : lst) {\n        // Check if the number is an integer and non-negative\n        if (fmod(num, 1.0) == 0 && num >= 0) {\n            int int_num = static_cast<int>(num);\n            if (int_num % 2 != 0) { // Check if the integer is odd\n                total_sum += static_cast<long long>(int_num) * int_num;\n            }\n        }\n    }\n    return total_sum;", "entry_point": "double_the_difference", "result": "passed", "passed": true}
{"task_id": "CPP/152", "code": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\nvector<int> result;\nfor (int i = 0; i < game.size(); ++i) {\nif (game[i] == guess[i]) {\nresult.push_back(0);\n} else {\nresult.push_back(abs(game[i] - guess[i]));\n}\n}\nreturn result;", "entry_point": "compare", "result": "passed", "passed": true}
{"task_id": "CPP/153", "code": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\nint max_strength = -1e9;\n    string strongest_extension_name = \"\";\n    for (string extension : extensions) {\n        int cap = 0;\n        int sm = 0;\n        for (char c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else if (c >= 'a' && c <= 'z') {\n                sm++;\n            }\n        }\n        int strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension_name = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;", "entry_point": "Strongest_Extension", "result": "passed", "passed": true}
{"task_id": "CPP/154", "code": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\nint n = a.length();\n    int m = b.length();\n    if (m == 0) return true;\n    if (n == 0) return false; b_doubled = b + b;\n\nfor (int i = 0; i < m; ++i) {\n    string rotated_b = b_doubled.substr(i, m);\n    if (a.find(rotated_b) != string::npos) {\n        return true;\n    }\n}\nreturn false;", "entry_point": "cycpattern_check", "result": "Compilation failed: /tmp/tmpd2x8ieq3/temp.cpp: In function \u2018bool cycpattern_check(std::string, std::string)\u2019:\n/tmp/tmpd2x8ieq3/temp.cpp:19:31: error: \u2018b_doubled\u2019 was not declared in this scope; did you mean \u2018double\u2019?\n   19 |     if (n == 0) return false; b_doubled = b + b;\n      |                               ^~~~~~~~~\n      |                               double\n", "passed": false}
{"task_id": "CPP/155", "code": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\nint even_count = 0;\n    int odd_count = 0;\n    if (num == 0) {\n        even_count = 1;\n    } else {\n        num = abs(num);\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n            num /= 10;\n        }\n    }\n    return {even_count, odd_count};", "entry_point": "even_odd_count", "result": "passed", "passed": true}
{"task_id": "CPP/156", "code": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\nvector<pair<int, string>> romanMap = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\n        {5, \"v\"}, {4, \"iv\"}, {1, \"i\"}\n    };\n    string result = \"\";\n    for (const auto& pair : romanMap) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    return result;", "entry_point": "int_to_mini_roman", "result": "passed", "passed": true}
{"task_id": "CPP/157", "code": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\nfloat sides[3] = {a, b, c};\n    // Sort the sides in ascending order\n    for (int i = 0; i < 2; ++i) {\n        for (int j = i + 1; j < 3; ++j) {\n            if (sides[i] > sides[j]) {\n                float temp = sides[i];\n                sides[i] = sides[j];\n                sides[j] = temp;\n            }\n        }\n    }\n    // Check if it's a right-angled triangle using the Pythagorean theorem\n    // a^2 + b^2 = c^2, where c is the longest side (hypotenuse)\n    return fabs(sides[0] * sides[0] + sides[1] * sides[1] - sides[2] * sides[2]) < 0.001;", "entry_point": "right_angle_triangle", "result": "passed", "passed": true}
{"task_id": "CPP/158", "code": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\nif (words.empty()) {\n        return \"\";string max_word = \"\";\nint max_unique_chars = 0;\n\nfor (const string& word : words) {\n    std::set<char> unique_chars;\n    for (char c : word) {\n        unique_chars.insert(c);\n    }\n    int current_unique_chars = unique_chars.size();\n\n    if (current_unique_chars > max_unique_chars) {\n        max_unique_chars = current_unique_chars;\n        max_word = word;\n    } else if (current_unique_chars == max_unique_chars) {\n        if (max_word == \"\" || word < max_word) { // For the first word, max_word is empty, so it's always picked. Otherwise, use lexicographical comparison.\n            max_word = word;\n        }\n    }\n}\nreturn max_word;", "entry_point": "find_max", "result": "Compilation failed: /tmp/tmpgey_iorw/temp.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpgey_iorw/temp.cpp:42:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main(){\n      |           ^\n/tmp/tmpgey_iorw/temp.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpgey_iorw/temp.cpp:17:38: note: to match this \u2018{\u2019\n   17 | string find_max(vector<string> words){\n      |                                      ^\n/tmp/tmpgey_iorw/temp.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n", "passed": false}
{"task_id": "CPP/159", "code": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\nint totalEaten = number;\n    int carrotsLeft =aining;\n\n\nif (need <= remaining) {\n    totalEaten += need;\n    carrotsLeft -= need;\n} else {\n    totalEaten += remaining;\n    carrotsLeft = 0;\n}\nreturn {totalEaten, carrotsLeft};", "entry_point": "eat", "result": "Compilation failed: /tmp/tmpj19_lfj5/temp.cpp: In function \u2018std::vector<int> eat(int, int, int)\u2019:\n/tmp/tmpj19_lfj5/temp.cpp:35:22: error: \u2018aining\u2019 was not declared in this scope; did you mean \u2018remaining\u2019?\n   35 |     int carrotsLeft =aining;\n      |                      ^~~~~~\n      |                      remaining\n", "passed": false}
{"task_id": "CPP/160", "code": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\nvector<int> nums = operand;\nvector<string> ops = operato;\n\n\n// Handle exponentiation first (right-to-left associativity, higher precedence)\nfor (int i = 0; i < ops.size(); ++i) {\n    if (ops[i] == \"**\") {\n        int result = 1;\n        int base = nums[i];\n        int exp = nums[i+1];\n        for (int j = 0; j < exp; ++j) {\n            result *= base;\n        }\n        nums[i] = result;\n        nums.erase(nums.begin() + i + 1);\n        ops.erase(ops.begin() + i);\n        i--; // Adjust index due to erase\n    }\n}\n\n// Handle multiplication and floor division (left-to-right associativity)\nfor (int i = 0; i < ops.size(); ++i) {\n    if (ops[i] == \"*\" || ops[i] == \"//\") {\n        int result;\n        if (ops[i] == \"*\") {\n            result = nums[i] * nums[i+1];\n        } else { // \"//\"\n            result = nums[i] / nums[i+1];\n        }\n        nums[i] = result;\n        nums.erase(nums.begin() + i + 1);\n        ops.erase(ops.begin() + i);\n        i--; // Adjust index due to erase\n    }\n}\n\n// Handle addition and subtraction (left-to-right associativity)\nint result = nums[0];\nfor (int i = 0; i < ops.size(); ++i) {\n    if (ops[i] == \"+\") {\n        result += nums[i+1];\n    } else { // \"-\"\n        result -= nums[i+1];\n    }\n}\n\nreturn result;", "entry_point": "do_algebra", "result": "passed", "passed": true}
{"task_id": "CPP/161", "code": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\nbool hasLetter = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            hasLetter = true;\n            break;\n        }\n    }\n    if (!hasLetter) {\n        reverse(s.begin(), s.end());\n        return s;\n    } else {\n        string res = \"\";\n        for (char c : s) {\n            if (isalpha(c)) {\n                if (islower(c)) {\n                    res += toupper(c);\n                } else {\n                    res += tolower(c);\n                }\n            } else {\n                res += c;\n            }\n        }\n        return res;\n    }", "entry_point": "solve", "result": "Compilation failed: /tmp/tmp3z04ngpl/temp.cpp: In function \u2018std::string solve(std::string)\u2019:\n/tmp/tmp3z04ngpl/temp.cpp:44:11: error: a function-definition is not allowed here before \u2018{\u2019 token\n   44 | int main(){\n      |           ^\n/tmp/tmp3z04ngpl/temp.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmp3z04ngpl/temp.cpp:16:23: note: to match this \u2018{\u2019\n   16 | string solve(string s){\n      |                       ^\n", "passed": false}
{"task_id": "CPP/162", "code": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\nif (text.empty()) {\n        return \"\";\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), digest);\n    char mdString[33];\n    for (int i = 0; i < 16; i++) {\n        sprintf(&mdString[i * 2], \"%02x\", (unsigned int)digest[i]);\n    }\n    return string(mdString);", "entry_point": "string_to_md5", "result": "Compilation failed: /tmp/tmpns9dq4xj/temp.cpp:10:9: fatal error: openssl/md5.h: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\n   10 | #include<openssl/md5.h>\n      |         ^~~~~~~~~~~~~~~\ncompilation terminated.\n", "passed": false}
{"task_id": "CPP/163", "code": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\nvector<int> result;\nint start = min(a, b);\nint end = max(a, b);\n\n\nfor (int i = start; i <= end; ++i) {\n    if (i % 2 == 0) {\n        result.push_back(i);\n    }\n}\nreturn result;", "entry_point": "generate_integers", "result": "Program failed: temp_program.exe: /tmp/tmpkhufvmli/temp.cpp:38: int main(): Assertion `issame(generate_integers(2, 10) , {2, 4, 6, 8})' failed.\n", "passed": false}
